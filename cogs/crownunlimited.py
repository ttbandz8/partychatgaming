from operator import floordiv
from discord import message
from cogs.lobbies import Lobbies
import time
from re import T
import discord
from discord.ext import commands
import bot as main
import db
import classes as data
import destiny as d
import messages as m
import numpy as np
import help_commands as h
# Converters
from discord import User
from discord import Member
import DiscordUtils
from PIL import Image, ImageFont, ImageDraw
import requests
import random
from collections import ChainMap

now = time.asctime()
import base64
from io import BytesIO
import io
import asyncio
import textwrap
from discord import Embed
from discord_slash import cog_ext, SlashContext
from discord_slash.utils import manage_components
from discord_slash.model import ButtonStyle
from discord_slash.utils.manage_commands import create_option, create_choice
from dinteractions_Paginator import Paginator
import typing
from pilmoji import Pilmoji


class CrownUnlimited(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self._cd = commands.CooldownMapping.from_cooldown(1, 1800,
                                                          commands.BucketType.member)  # Change accordingly. Currently every 8 minutes (3600 seconds == 60 minutes)

    co_op_modes = ['CTales', 'DTales', 'CDungeon', 'DDungeon']
    ai_co_op_modes = ['DTales', 'DDungeon']
    U_modes = ['ATales', 'Tales', 'CTales', 'DTales']
    D_modes = ['CDungeon', 'DDungeon', 'Dungeon', 'ADungeon']
    solo_modes = ['ATales', 'Tales', 'Dungeon', 'Boss']
    opponent_pet_modes = ['Dungeon', 'DDungeon', 'CDungeon']
    max_items = 150

    @commands.Cog.listener()
    async def on_ready(self):
        print('Crown Unlimited Cog is ready!')

    async def cog_check(self, ctx):
        return await main.validate_user(ctx)

    async def companion(user):
        user_data = db.queryUser({'DISNAME': str(user)})
        companion = user_data['DISNAME']
        return companion

    def get_ratelimit(self, message: discord.Message) -> typing.Optional[int]:
        """Returns the ratelimit left"""
        bucket = self._cd.get_bucket(message)
        return bucket.update_rate_limit()

    @commands.Cog.listener()
    async def on_message(self, message):
        if message.author == main.bot.user:
            return
        ratelimit = self.get_ratelimit(message)
        if ratelimit is None:
            if isinstance(message.channel, discord.channel.DMChannel):
                await message.channel.send(m.SERVER_FUNCTION_ONLY)
                return

            # Check if currently in a match
            channel_exists_response = existing_channel_check(self, message)
            if channel_exists_response:
                return

            # Pull Character Information
            player = db.queryUser({'DISNAME': str(message.author)})
            if not player:
                return
            if player['EXPLORE'] is False:
                return

            completed_crown_tales = player['CROWN_TALES']
            all_universes = db.queryAllUniverse()
            available_universes = []
            for uni in all_universes:
                if uni['HAS_CROWN_TALES']:
                    available_universes.append(uni)

            u = len(available_universes) - 1
            rand_universe = random.randint(1, u)
            universetitle = available_universes[rand_universe]['TITLE']
            universe = available_universes[rand_universe]

            # Select Card at Random
            all_available_drop_cards = db.querySpecificDropCards(universetitle)
            cards = []
            for card in all_available_drop_cards:
                cards.append(card)

            c = len(cards) - 1
            rand_card = random.randint(0, c)
            selected_mode = ""
            approach_message = ""
            mode_selector_randomizer = random.randint(0, 100)
            if mode_selector_randomizer <= 10 or cards[rand_card]['EXCLUSIVE']:
                selected_mode = "Dungeon"
                approach_message = ":space_invader: A Tempered "
                icon = "https://cdn.discordapp.com/emojis/744887136125190204.gif?v=1"
            else:
                selected_mode = "Tales"
                approach_message = ":japanese_ogre: A Calm "
                icon = "https://cdn.discordapp.com/emojis/788000259996516373.gif?v=1"

            random_battle_buttons = [
                manage_components.create_button(
                    style=ButtonStyle.blue,
                    label="Battle",
                    custom_id="Yes"
                ),
                manage_components.create_button(
                    style=ButtonStyle.red,
                    label="Take Chances",
                    custom_id="No"
                )
            ]
            random_battle_buttons_action_row = manage_components.create_actionrow(*random_battle_buttons)

            # Lose / Bounty
            take_chances_response = ""
            random_flee_loss = random.randint(1, 30)
            bounty = random.randint(1, 15000)

            if bounty >= 150000:
                bounty_icon = ":money_with_wings:"
            elif bounty >= 100000:
                bounty_icon = ":moneybag:"
            elif bounty >= 50000 or bounty <= 49999:
                bounty_icon = ":dollar:"

            bounty_message = f"{bounty_icon} {'{:,}'.format(bounty)}"
            battle_message = "Defeat the card to earn it, and it's bounty!"
            if selected_mode == "Dungeon":
                bounty = bounty * 2
                battle_message = "Defeat the card to earn it, and 2x it's bounty!!"
                random_flee_loss = 100

            # Take Chances Button Interaction
            if random_flee_loss <= 10 and selected_mode == "Tales":
                drop_response = await specific_drops(str(message.author), cards[rand_card]['NAME'], universetitle)
                embedVar = discord.Embed(title=f"**{drop_response}**", colour=0xf1c40f)
                embedVar.set_footer(text="Successful Capture!",
                                    icon_url="https://cdn.discordapp.com/emojis/877233426770583563.gif?v=1")
                take_chances_response = embedVar

            elif random_flee_loss <= 100:
                if selected_mode == "Tales":
                    found_amount = round(bounty / 2)
                else:
                    found_amount = round(bounty / 3)
                await bless(found_amount, str(message.author))
                embedVar = discord.Embed(title=f"You fled but found {bounty_icon} {found_amount}!", colour=0xf1c40f)
                embedVar.set_footer(text="Money Earned!",
                                    icon_url="https://cdn.discordapp.com/emojis/866116525613514752.gif?size=96")
                take_chances_response = embedVar
            else:
                embedVar = discord.Embed(title=f"You fled", colour=0xf1c40f)
                # embedVar.set_footer(text="", icon_url="https://cdn.discordapp.com/emojis/872980334487171092.gif?v=1")
                take_chances_response = embedVar

            # Send Message
            embedVar = discord.Embed(title=f"**{approach_message}{cards[rand_card]['NAME']}** Approaches!",
                                     description=textwrap.dedent(f"""\
            **Bounty** **{bounty_message}**
            {message.author.mention}, **{battle_message}**
            """), colour=0xf1c40f)
            # embedVar.set_author(name="Enemy Approaches!", icon_url=f"{icon}")
            card_lvl_attack_buff = 0
            card_lvl_defense_buff = 0
            card_lvl_ap_buff = 0
            card_lvl_hlt_buff = 0
        
            o_card = cards[rand_card]['NAME']
            o_card_path=cards[rand_card]['PATH']
            o_max_health = cards[rand_card]['HLT'] + card_lvl_hlt_buff
            o_health = cards[rand_card]['HLT'] + card_lvl_hlt_buff
            o_stamina = cards[rand_card]['STAM']
            o_max_stamina = cards[rand_card]['STAM']
            o_moveset = cards[rand_card]['MOVESET']
            o_attack = cards[rand_card]['ATK'] + card_lvl_attack_buff
            o_defense = cards[rand_card]['DEF'] + card_lvl_defense_buff
            o_type = cards[rand_card]['TYPE']
            o_passive = cards[rand_card]['PASS'][0]
            o_speed = cards[rand_card]['SPD']
            o_show = cards[rand_card]['UNIVERSE']
            o_collection = cards[rand_card]['COLLECTION']
            o_destiny = cards[rand_card]['HAS_COLLECTION']
            
            o_1 = o_moveset[0]
            o_2 = o_moveset[1]
            o_3 = o_moveset[2]
            o_enhancer = o_moveset[3]
            
            # Move 1
            move1 = list(o_1.keys())[0]
            move1ap = list(o_1.values())[0] + card_lvl_ap_buff
            move1_stamina = list(o_1.values())[1]
            
            # Move 2
            move2 = list(o_2.keys())[0]
            move2ap = list(o_2.values())[0] + card_lvl_ap_buff
            move2_stamina = list(o_2.values())[1]

            # Move 3
            move3 = list(o_3.keys())[0]
            move3ap = list(o_3.values())[0] + card_lvl_ap_buff
            move3_stamina = list(o_3.values())[1]

            # Move Enhancer
            move4 = list(o_enhancer.keys())[0]
            move4ap = list(o_enhancer.values())[0]
            move4_stamina = list(o_enhancer.values())[1]
            move4enh = list(o_enhancer.values())[2]
            resolved = False
            focused = False
            card_lvl = 0
            turn = 0
            if selected_mode == "Tales":
                cardtitle = {'TITLE': 'Universe Title'}
            else:
                cardtitle = {'TITLE': 'Dungeon Title'}
            card_file = showcard(cards[rand_card], o_max_health, o_health, o_max_stamina, o_stamina, resolved, cardtitle, focused, o_attack, o_defense, turn, move1ap, move2ap, move3ap, move4ap, move4enh, card_lvl, None)

            embedVar.set_image(url="attachment://image.png")
            embedVar.set_footer(text="Use /explore to turn off these interactions.")
            await message.channel.send(embed=embedVar, file=card_file, components=[random_battle_buttons_action_row], delete_after=60,)

            def check(button_ctx):
                return button_ctx.author == message.author

            try:
                button_ctx: ComponentContext = await manage_components.wait_for_component(self.bot, components=[
                    random_battle_buttons_action_row], timeout=60, check=check)

                if button_ctx.custom_id == "No":
                    await curse(random_flee_loss, message.author)
                    await button_ctx.send(embed=take_chances_response, delete_after=45)
                    return

                if button_ctx.custom_id == "Yes":
                    await button_ctx.send(
                        f"{message.author.mention} private channel has been opened for you. Good luck!",
                        delete_after=10)
                    await enemy_approached(self, message, message.channel, player, selected_mode, universe,
                                           cards[rand_card]['NAME'], bounty)
            except Exception as ex:
                # trace = []
                # tb = ex.__traceback__
                # while tb is not None:
                #     trace.append({
                #         "filename": tb.tb_frame.f_code.co_filename,
                #         "name": tb.tb_frame.f_code.co_name,
                #         "lineno": tb.tb_lineno
                #     })
                #     tb = tb.tb_next
                # print(str({
                #     'type': type(ex).__name__,
                #     'message': str(ex),
                #     'trace': trace
                # }))
                # # print("Explore Exception. Likely nothing, but yea.")
                # await message.channel.send("Something ain't right, my guy.Check with support.")
                print("")
    @cog_ext.cog_slash(description="Toggle Explore Mode On/Off", guild_ids=main.guild_ids)
    @commands.cooldown(1, 15, commands.BucketType.user)
    async def explore(self, ctx: SlashContext):
        try:
            player = db.queryUser({"DISNAME": str(ctx.author)})
            if not player["EXPLORE"]:
                await ctx.send(f"Entering Explorer Mode :milky_way: ")
                db.updateUserNoFilter({'DISNAME': str(ctx.author)}, {'$set': {'EXPLORE': True}})
                return
            if player["EXPLORE"]:
                await ctx.send(f"Exiting Explorer Mode :rotating_light: ")
                db.updateUserNoFilter({'DISNAME': str(ctx.author)}, {'$set': {'EXPLORE': False}})
                return
        except Exception as ex:
            trace = []
            tb = ex.__traceback__
            while tb is not None:
                trace.append({
                    "filename": tb.tb_frame.f_code.co_filename,
                    "name": tb.tb_frame.f_code.co_name,
                    "lineno": tb.tb_lineno
                })
                tb = tb.tb_next
            print(str({
                'type': type(ex).__name__,
                'message': str(ex),
                'trace': trace
            }))

    @cog_ext.cog_slash(description="Duo Tales with AI",
                       options=[
                           create_option(
                               name="deck",
                               description="AI Preset",
                               option_type=3,
                               required=True,
                               choices=[
                                   create_choice(
                                       name="Preset 1",
                                       value="1"
                                   ),
                                   create_choice(
                                       name="Preset 2",
                                       value="2"
                                   ),
                                   create_choice(
                                       name="Preset 3",
                                       value="3"
                                   )
                               ]
                           ),
                           create_option(
                               name="mode",
                               description="Difficulty Level",
                               option_type=3,
                               required=True,
                               choices=[
                                   create_choice(
                                       name="Duo Tales (Normal)",
                                       value="DTales"
                                   ),
                                   create_choice(
                                       name="Duo Dungeon (Hard)",
                                       value="DDungeon"
                                   )
                               ]
                           )
                       ]
        , guild_ids=main.guild_ids)
    async def duo(self, ctx: SlashContext, deck: int, mode: str):
        U_modes = ['ATales', 'Tales', 'CTales', 'DTales']
        D_modes = ['CDungeon', 'DDungeon', 'Dungeon', 'ADungeon']
        B_MODES = ['Boss', 'CBoss']
        try:
            # await ctx.defer()
            deck = int(deck)
            if deck != 1 and deck != 2 and deck != 3:
                await ctx.send("Not a valid Deck Option")
                return
            deckNumber = deck - 1
            sowner = db.queryUser({'DISNAME': str(ctx.author)})
            oteam = sowner['TEAM']
            ofam = sowner['FAMILY']
            cowner = sowner
            cteam = oteam
            cfam = ofam

            universe_selection = await select_universe(self, ctx, sowner, oteam, ofam, mode, None)
            selected_universe = universe_selection['SELECTED_UNIVERSE']
            private_channel = universe_selection['PRIVATE_CHANNEL']
            universe = universe_selection['UNIVERSE_DATA']
            crestlist = universe_selection['CREST_LIST']
            crestsearch = universe_selection['CREST_SEARCH']
            currentopponent =  universe_selection['CURRENTOPPONENT']

            if mode in D_modes:
                completed_universes = universe_selection['COMPLETED_DUNGEONS']
            else:
                completed_universes = universe_selection['COMPLETED_TALES']
            if crestsearch:
                oguild = universe_selection['OGUILD']
            else:
                oguild = "PCG"

            await battle_commands(self, ctx, mode, universe, selected_universe, completed_universes, oguild, crestlist,
                                  crestsearch, private_channel, sowner, oteam, ofam, currentopponent, cowner, cteam, cfam, deckNumber,
                                  None)
        except Exception as ex:
            trace = []
            tb = ex.__traceback__
            while tb is not None:
                trace.append({
                    "filename": tb.tb_frame.f_code.co_filename,
                    "name": tb.tb_frame.f_code.co_name,
                    "lineno": tb.tb_lineno
                })
                tb = tb.tb_next
            print(str({
                'type': type(ex).__name__,
                'message': str(ex),
                'trace': trace
            }))
            return

    @cog_ext.cog_slash(description="Co-op Tales with Friends",
                       options=[
                           create_option(
                               name="user",
                               description="Difficulty Level",
                               option_type=6,
                               required=True
                           ),
                           create_option(
                               name="mode",
                               description="Difficulty Level",
                               option_type=3,
                               required=True,
                               choices=[
                                   create_choice(
                                       name="Co-Op Tales (Normal)",
                                       value="CTales"
                                   ),
                                   create_choice(
                                       name="Co-Op Dungeon (Hard)",
                                       value="CDungeon"
                                   ),
                                   create_choice(
                                       name="Co-Op Boss (Extreme)",
                                       value="CBoss"
                                   ),
                               ]
                           )
                       ]
        , guild_ids=main.guild_ids)
    async def coop(self, ctx: SlashContext, user: User, mode: str):
        U_modes = ['ATales', 'Tales', 'CTales', 'DTales']
        D_modes = ['CDungeon', 'DDungeon', 'Dungeon', 'ADungeon']
        B_MODES = ['Boss', 'CBoss']
        try:
            U_modes = ['ATales', 'Tales', 'CTales', 'DTales']
            D_modes = ['CDungeon', 'DDungeon', 'Dungeon', 'ADungeon']
            B_MODES = ['Boss', 'CBoss']

            sowner = db.queryUser({'DISNAME': str(ctx.author)})
            companion = db.queryUser({'DISNAME': str(user)})
            oteam = sowner['TEAM']
            cteam = companion['TEAM']
            ofam = sowner['FAMILY']
            cfam = companion['FAMILY']

            universe_selection = await select_universe(self, ctx, sowner, oteam, ofam, mode, user)
            if not universe_selection:
                return
            selected_universe = universe_selection['SELECTED_UNIVERSE']
            private_channel = universe_selection['PRIVATE_CHANNEL']
            universe = universe_selection['UNIVERSE_DATA']
            crestlist = universe_selection['CREST_LIST']
            crestsearch = universe_selection['CREST_SEARCH']
            currentopponent =  universe_selection['CURRENTOPPONENT']

            if mode in B_MODES:
                bossname = universe_selection['BOSS_NAME']
                oguild = universe_selection['OGUILD']
            else:
                if mode in D_modes:
                    completed_universes = universe_selection['COMPLETED_DUNGEONS']
                else:
                    completed_universes = universe_selection['COMPLETED_TALES']
                if crestsearch:
                    oguild = universe_selection['OGUILD']
                else:
                    oguild = "PCG"

            await battle_commands(self, ctx, mode, universe, selected_universe, None, oguild, crestlist, crestsearch,
                                  private_channel, sowner, oteam, ofam, currentopponent, companion, cteam, cfam, None, user)
        except Exception as ex:
            trace = []
            tb = ex.__traceback__
            while tb is not None:
                trace.append({
                    "filename": tb.tb_frame.f_code.co_filename,
                    "name": tb.tb_frame.f_code.co_name,
                    "lineno": tb.tb_lineno
                })
                tb = tb.tb_next
            print(str({
                'type': type(ex).__name__,
                'message': str(ex),
                'trace': trace
            }))
            return

    @cog_ext.cog_slash(description="Conquer Tales to Unlock New Universes!",
                       options=[
                           create_option(
                               name="mode",
                               description="Difficulty Level",
                               option_type=3,
                               required=True,
                               choices=[
                                   create_choice(
                                       name="Auto Battler",
                                       value="ATales"
                                   ),
                                   create_choice(
                                       name="Tales (Normal)",
                                       value="Tales"
                                   ),
                                   create_choice(
                                       name="Dungeon (Hard)",
                                       value="Dungeon"
                                   ),
                                   create_choice(
                                       name="Boss Battle (Extreme)",
                                       value="Boss"
                                   ),
                               ]
                           )
                       ]
        , guild_ids=main.guild_ids)
    async def tales(self, ctx: SlashContext, mode: str):
        U_modes = ['ATales', 'Tales', 'CTales', 'DTales']
        D_modes = ['CDungeon', 'DDungeon', 'Dungeon', 'ADungeon']
        B_MODES = ['Boss', 'CBoss']
        try:
            # await ctx.defer()

            sowner = db.queryUser({'DISNAME': str(ctx.author)})
            oteam = sowner['TEAM']
            ofam = sowner['FAMILY']

            universe_selection = await select_universe(self, ctx, sowner, oteam, ofam, mode, None)
            selected_universe = universe_selection['SELECTED_UNIVERSE']
            private_channel = universe_selection['PRIVATE_CHANNEL']
            universe = universe_selection['UNIVERSE_DATA']
            crestlist = universe_selection['CREST_LIST']
            crestsearch = universe_selection['CREST_SEARCH']
            currentopponent =  universe_selection['CURRENTOPPONENT']

            if mode in B_MODES:
                bossname = universe_selection['BOSS_NAME']
                oguild = universe_selection['OGUILD']
            else:
                if mode in D_modes:
                    completed_universes = universe_selection['COMPLETED_DUNGEONS']
                else:
                    completed_universes = universe_selection['COMPLETED_TALES']
                if crestsearch:
                    oguild = universe_selection['OGUILD']
                else:
                    oguild = "PCG"

            if mode in B_MODES:
                await battle_commands(self, ctx, mode, universe, selected_universe, None, oguild, crestlist,
                                      crestsearch, private_channel, sowner, oteam, ofam, None, None, None, None, None, None)
            else:
                await battle_commands(self, ctx, mode, universe, selected_universe, completed_universes, oguild,
                                      crestlist, crestsearch, private_channel, sowner, oteam, ofam, currentopponent, None, None, None,
                                      None, None)
        except Exception as ex:
            trace = []
            tb = ex.__traceback__
            while tb is not None:
                trace.append({
                    "filename": tb.tb_frame.f_code.co_filename,
                    "name": tb.tb_frame.f_code.co_name,
                    "lineno": tb.tb_lineno
                })
                tb = tb.tb_next
            print(str({
                'type': type(ex).__name__,
                'message': str(ex),
                'trace': trace
            }))
            return

    @cog_ext.cog_slash(description="Enter the Abyss", guild_ids=main.guild_ids)
    async def abyss(self, ctx: SlashContext):
        await ctx.defer()
        await ctx.send("Floors to travel deep into the Abyss are starting to form. Check back later for entry.")
        return
        private_channel = ctx
        mode = "Abyss"
        if isinstance(private_channel.channel, discord.channel.DMChannel):
            await private_channel.send(m.SERVER_FUNCTION_ONLY)
            return

        channel_exists_response = existing_channel_check(self, ctx)
        if channel_exists_response:
            await private_channel.send(m.ALREADY_IN_TALES)
            return

        try:
            sowner = db.queryUser({'DISNAME': str(ctx.author)})
            checks = db.queryCard({'NAME': sowner['CARD']})
            checks_uni = db.queryUniverse({'TITLE': checks['UNIVERSE']})
            uni_tier = checks_uni['TIER']

            abyss = db.queryAbyss({'FLOOR': sowner['LEVEL']})

            if not abyss:
                await ctx.send("The Abyss has shifted. More floors will be available soon.")
                return

            enemies = abyss['ENEMIES']
            scaling = int(abyss['SPECIAL_BUFF'])
            floor = abyss['FLOOR']
            title = abyss['TITLE']
            arm = abyss['ARM']
            abyss_pet = abyss['PET']
            banned_cards = abyss['BANNED_CARDS']
            banned_titles = abyss['BANNED_TITLES']
            banned_arms = abyss['BANNED_ARMS']
            banned_universes = abyss['BANNED_UNIVERSES']
            banned_universe_tiers = abyss['BANNED_TIERS']
            banned_pets = abyss['BANNED_PETS']

            abyss_buttons = [
                manage_components.create_button(
                    style=ButtonStyle.blue,
                    label="Begin",
                    custom_id="Yes"
                ),
                manage_components.create_button(
                    style=ButtonStyle.red,
                    label="Quit",
                    custom_id="No"
                )
            ]

            abyss_buttons_action_row = manage_components.create_actionrow(*abyss_buttons)

            # Convert tiers into strings from ints
            tier_conversion = [str(tier) for tier in banned_universe_tiers]

            embedVar = discord.Embed(title=f":new_moon: Abyss Floor {floor}", colour=000000)
            if banned_cards:
                embedVar.add_field(name=":flower_playing_cards: Banned Cards", value="\n".join(banned_cards),
                                   inline=True)
            if banned_titles:
                embedVar.add_field(name=":reminder_ribbon: Banned Titles", value="\n".join(banned_titles), inline=True)
            if banned_arms:
                embedVar.add_field(name="🦾 Banned Arms", value="\n".join(banned_arms), inline=True)
            if banned_pets:
                embedVar.add_field(name=":bird: Banned Pets", value="\n".join(banned_pets))

            if banned_universes:
                embedVar.add_field(name=":ringed_planet: Banned Universes", value="\n".join(banned_universes),
                                   inline=True)
            if banned_universe_tiers:
                embedVar.add_field(name=":white_flower: Banned Universe Tiers", value="\n".join(tier_conversion),
                                   inline=True)

            await private_channel.send(embed=embedVar, components=[abyss_buttons_action_row])

            def check(button_ctx):
                return button_ctx.author == ctx.author

            try:
                button_ctx: ComponentContext = await manage_components.wait_for_component(self.bot, components=[
                    abyss_buttons_action_row, abyss_buttons], timeout=45, check=check)

                if button_ctx.custom_id == "Yes":
                    if sowner['CARD'] in banned_cards:
                        await private_channel.send(
                            f":x: **{sowner['CARD']}** is banned on floor {floor}. Use another card.")
                        return
                    if sowner['TITLE'] in banned_titles:
                        await private_channel.send(
                            f":x: **{sowner['TITLE']}** is banned on floor {floor}. Use another title.")
                        return
                    if sowner['ARM'] in banned_arms:
                        await private_channel.send(
                            f":x: **{sowner['ARM']}** is banned on floor {floor}. Use another arm.")
                        return
                    if sowner['PET'] in banned_pets:
                        await private_channel.send(
                            f":x: **{sowner['PET']}** is banned on floor {floor}. Use another pet.")
                        return
                    if checks['UNIVERSE'] in banned_universes:
                        await private_channel.send(
                            f":x: **{checks['UNIVERSE']}** cards are banned on floor {floor}. Use another card.")
                        return

                    guild = ctx.guild
                    if guild:
                        overwrites = {
                            guild.default_role: discord.PermissionOverwrite(read_messages=True, manage_channels=False,
                                                                            kick_members=False, mention_everyone=False,
                                                                            read_message_history=True,
                                                                            send_messages=False, view_channel=True),
                            guild.me: discord.PermissionOverwrite(read_messages=True),
                            ctx.author: discord.PermissionOverwrite(read_messages=True, send_messages=True),
                        }
                        private_channel = await guild.create_text_channel(f'{str(ctx.author)}-ABYSS',
                                                                          overwrites=overwrites)
                        await button_ctx.send(f"{ctx.author.mention} Abyss has been opened for you. Good luck!")
                elif button_ctx.custom_id == "No":
                    await button_ctx.send("Leaving the Abyss...")
                    return
                else:
                    await button_ctx.send("Leaving the Abyss...")
                    return
            except Exception as ex:
                trace = []
                tb = ex.__traceback__
                while tb is not None:
                    trace.append({
                        "filename": tb.tb_frame.f_code.co_filename,
                        "name": tb.tb_frame.f_code.co_name,
                        "lineno": tb.tb_lineno
                    })
                    tb = tb.tb_next
                print(str({
                    'type': type(ex).__name__,
                    'message': str(ex),
                    'trace': trace
                }))
                return
        except Exception as ex:
            trace = []
            tb = ex.__traceback__
            while tb is not None:
                trace.append({
                    "filename": tb.tb_frame.f_code.co_filename,
                    "name": tb.tb_frame.f_code.co_name,
                    "lineno": tb.tb_lineno
                })
                tb = tb.tb_next
            print(str({
                'type': type(ex).__name__,
                'message': str(ex),
                'trace': trace
            }))
            return

        starttime = time.asctime()
        h_gametime = starttime[11:13]
        m_gametime = starttime[14:16]
        s_gametime = starttime[17:19]
        legends = [x for x in enemies]

        total_legends = len(legends)
        currentopponent = 0
        continued = True

        # While Still PLaying Universe
        while continued == True:
            try:
                o = db.queryCard({'NAME': sowner['CARD']})
                otitle = db.queryTitle({'TITLE': sowner['TITLE']})

                t = db.queryCard({'NAME': legends[currentopponent]})
                ttitle = db.queryTitle({'TITLE': title})

                ####################################################################
                # Player 1 Data
                o_user = sowner
                oarm = db.queryArm({'ARM': o_user['ARM']})
                oarm_universe = oarm['UNIVERSE']
                oarm_passive = oarm['ABILITIES'][0]
                oarm_name = oarm['ARM']

                vault = db.queryVault({'OWNER': str(ctx.author), 'PETS.NAME': o_user['PET']})
                opet = {}
                for pet in vault['PETS']:
                    if o_user['PET'] == pet['NAME']:
                        opet = pet

                opet_passive_type = opet['TYPE']
                opet_name = opet['NAME']
                opet_image = opet['PATH']
                opet_exp = opet['EXP']
                opet_lvl = opet['LVL']
                opet_bond = opet['BOND']

                o_DID = o_user['DID']
                o_card = o['NAME']

                ocard_lvl = 0
                ocard_tier = 0
                ocard_exp = 0
                ocard_lvl_attack_buff = 0
                ocard_lvl_defense_buff = 0
                ocard_lvl_ap_buff = 0
                ocard_lvl_hlt_buff = 0

                for x in vault['CARD_LEVELS']:
                    if x['CARD'] == o_card:
                        ocard_lvl = x['LVL']
                        ocard_tier = x['TIER']
                        ocard_exp = x['EXP']
                        ocard_lvl_ap_buff = x['AP']
                        ocard_lvl_attack_buff = x['ATK']
                        ocard_lvl_defense_buff = x['DEF']
                        ocard_lvl_hlt_buff = x['HLT']

                o_gif = o['GIF']
                o_destiny = o['HAS_COLLECTION']
                o_card_path = o['PATH']
                o_rcard_path = o['RPATH']

                o_health = o['HLT'] + ocard_lvl_hlt_buff
                o_max_health = o['HLT'] + ocard_lvl_hlt_buff
                o_stamina = o['STAM']
                o_max_stamina = o['STAM']
                o_moveset = o['MOVESET']
                o_attack = o['ATK'] + ocard_lvl_attack_buff
                o_defense = o['DEF'] + ocard_lvl_defense_buff
                o_type = o['TYPE']

                o_passive = o['PASS'][0]
                o_speed = o['SPD']
                o_universe = o['UNIVERSE']
                o_title_universe = otitle['UNIVERSE']
                o_title_passive = otitle['ABILITIES'][0]

                user1 = await self.bot.fetch_user(o_DID)
                o_title_passive_bool = False
                o_descriptions = []
                if o['DESCRIPTIONS']:
                    o_descriptions = o['DESCRIPTIONS']
                    o_greeting_description = o_descriptions[0]
                    o_focus_description = o_descriptions[1]
                    o_resolve_description = o_descriptions[2]
                    o_special_move_description = o_descriptions[3]
                    o_win_description = o_descriptions[4]
                    o_lose_description = o_descriptions[5]
                else:
                    o_greeting_description = "Are you ready to battle!"
                    o_focus_description = "I still have more in the tank!"
                    o_resolve_description = "Power up!"
                    o_special_move_description = "Take this!"
                    o_win_description = "Too easy. Come back when you're truly prepared."
                    o_lose_description = "I can't believe I lost..."

                # Player 2 Data
                tarm = db.queryArm({'ARM': arm})
                tarm_universe = tarm['UNIVERSE']
                tpet = db.queryPet({'PET': abyss_pet})
                tpet_passive = tpet['ABILITIES'][0]
                tpet_name = tpet['PET']
                tpet_image = tpet['PATH']
                t_destiny = t['HAS_COLLECTION']
                tpet_bond = 3
                tpet_lvl = 6
                tarm_passive = tarm['ABILITIES'][0]
                tarm_name = tarm['ARM']
                t_card = t['NAME']
                tcard_lvl_ap_buff = scaling
                t_gif = t['GIF']
                t_card_path = t['PATH']
                t_rcard_path = t['RPATH']
                t_health = t['HLT'] + (50 * currentopponent) + floor
                t_stamina = t['STAM']
                t_max_stamina = t['STAM']
                t_moveset = t['MOVESET']
                t_attack = t['ATK'] + scaling
                t_defense = t['DEF'] + scaling
                t_type = t['TYPE']

                t_passive = t['PASS'][0]
                t_speed = t['SPD']
                t_universe = t['UNIVERSE']
                t_title_universe = ttitle['UNIVERSE']
                t_title_passive = ttitle['ABILITIES'][0]

                t_title_passive_bool = False
                if t['DESCRIPTIONS']:
                    t_descriptions = t['DESCRIPTIONS']
                    t_greeting_description = t_descriptions[0]
                    t_focus_description = t_descriptions[1]
                    t_resolve_description = t_descriptions[2]
                    t_special_move_description = t_descriptions[3]
                    t_win_description = t_descriptions[4]
                    t_lose_description = t_descriptions[5]
                else:
                    t_greeting_description = "Are you ready to battle!"
                    t_focus_description = "I still have more in the tank!"
                    t_resolve_description = "Power up!"
                    t_special_move_description = "Take this!"
                    t_win_description = "Too easy. Come back when you're truly prepared."
                    t_lose_description = "I can't believe I lost..."

                if o['UNIVERSE'] == "Demon Slayer" and t['HLT'] >= o['HLT']:  # Demon Slayer Universal Trait
                    o_max_health = t['HLT'] - (10 * currentopponent)
                    o_health = t['HLT'] - (10 * currentopponent)
                else:
                    o_max_health = o['HLT'] - (10 * currentopponent) + ocard_lvl_hlt_buff

                if t['UNIVERSE'] == "Demon Slayer" and o_max_health >= t['HLT']:  # Demon Slayer Universal Trait
                    t_max_health = o_max_health + (3 * currentopponent) + floor
                    t_health = o_max_health + (3 * currentopponent) + floor
                else:
                    t_max_health = t['HLT'] + (3 * currentopponent) + floor

                # DBZ traits
                o_final_stand = False
                t_final_stand = False
                if o['UNIVERSE'] == "Dragon Ball Z":
                    o_final_stand = True
                if t['UNIVERSE'] == "Dragon Ball Z":
                    t_final_stand = True

                if (oarm_universe == o_universe) and (o_title_universe == o_universe):
                    o_attack = o_attack + 20
                    o_defense = o_defense + 20
                    o_max_health = o_max_health + 100
                    o_health = o_health + 100
                    if o_destiny:
                        o_attack = o_attack + 5
                        o_defense = o_defense + 5
                        o_max_health = o_max_health + 50
                        o_health = o_health + 50

                if (tarm_universe == t_universe) and (t_title_universe == t_universe):
                    t_attack = t_attack + 20
                    t_defense = t_defense + 20
                    t_max_health = t_max_health + 100
                    t_health = t_health + 100
                    if t_destiny:
                        t_attack = t_attack + 5
                        t_defense = t_defense + 5
                        t_max_health = t_max_health + 50
                        t_health = t_health + 50

                # Player 1 Passive Config
                if (o_universe == o_title_universe) or (o_title_universe == "Unbound"):
                    o_title_passive_bool = True

                # Player 1 Focus & Resolve
                o_focus = 90
                o_used_focus = False
                o_resolve = 60
                o_used_resolve = False

                # Player 1 Moves
                o_1 = o_moveset[0]
                o_2 = o_moveset[1]
                o_3 = o_moveset[2]
                o_enhancer = o_moveset[3]
                o_enhancer_used = False
                o_pet_used = False
                o_block_used = False
                o_chainsaw = False
                o_def_chainsaw = False
                o_atk_chainsaw = False
                if o_universe == "Chainsawman":
                    o_chainsaw = True

                omove1_text = list(o_1.keys())[0]
                omove2_text = list(o_2.keys())[0]
                omove3_text = list(o_3.keys())[0]
                omove_enhanced_text = list(o_enhancer.keys())[0]

                opetmove_text = list(opet.keys())[3]  # Name of the ability
                opetmove_ap = (opet_bond * opet_lvl) + list(opet.values())[3]  # Ability Power

                opet_move = {str(opetmove_text): int(opetmove_ap), 'STAM': 15, 'TYPE': str(opet_passive_type)}

                tpetmove_text = list(tpet_passive.keys())[0]
                tpetmove_ap = (tpet_bond * tpet_lvl) + list(tpet_passive.values())[0]
                tpetmove_type = list(tpet_passive.values())[1]
                tpet_move = {str(tpetmove_text): int(tpetmove_ap), 'STAM': 15, 'TYPE': tpetmove_type}

                # Player 1 Card Passive
                o_card_passive_type = list(o_passive.values())[1]
                o_card_passive = list(o_passive.values())[0]

                if o_card_passive_type == 'ATK':
                    o_attack = o_attack + int(o_card_passive)
                elif o_card_passive_type == 'DEF':
                    o_defense = o_defense + int(o_card_passive)
                elif o_card_passive_type == 'STAM':
                    o_stamina = o_stamina + int(o_card_passive)
                elif o_card_passive_type == 'HLT':
                    o_max_health = o_max_health + int(o_card_passive)
                    o_health = o_health + int(o_card_passive)
                elif o_card_passive_type == 'LIFE':
                    o_max_health = o_max_health + int((o_card_passive / 100) * t_health)
                elif o_card_passive_type == 'DRAIN':
                    o_stamina = o_stamina + int(o_card_passive)
                    t_stamina = t_stamina - int(o_card_passive)
                elif o_card_passive_type == 'FLOG':
                    o_attack = o_attack + int((o_card_passive / 100) * t_attack)
                    t_attack = t_attack - int((o_card_passive / 100) * t_attack)
                elif o_card_passive_type == 'WITHER':
                    o_defense = o_defense + int((o_card_passive / 100) * t_defense)
                    t_defense = t_defense - int((o_card_passive / 100) * t_defense)
                elif o_card_passive_type == 'RAGE':
                    o_attack = o_attack + int(((o_card_passive / 100) * o_defense))
                    o_defense = o_defense - int(((o_card_passive / 100) * o_attack))
                elif o_card_passive_type == 'BRACE':
                    o_defense = o_defense + int(((o_card_passive / 100) * o_attack))
                    o_attack = o_attack - int(((o_card_passive / 100) * o_defense))
                elif o_card_passive_type == 'BZRK':
                    o_attack = o_attack + int(((o_card_passive / 100) * o_health))
                    o_health = o_health - int((o_attack))
                elif o_card_passive_type == 'CRYSTAL':
                    o_defense = o_defense + int(((o_card_passive / 100) * o_health))
                    o_health = o_health - int((o_defense))
                elif o_card_passive_type == 'GROWTH':
                    o_attack = o_attack + int(((o_card_passive / 100) * o_attack))
                    o_defense = o_defense + int(((o_card_passive / 100) * o_defense))
                    o_max_health = o_max_health - int(((o_card_passive / 100) * o_max_health))
                    o_health = o_health - int(((o_card_passive / 100) * o_max_health))
                elif o_card_passive_type == 'STANCE':
                    tempattack = o_attack + o_card_passive
                    o_attack = o_defense + o_card_passive
                    o_defense = tempattack
                elif o_card_passive_type == 'CONFUSE':
                    tempattack = t_attack - o_card_passive
                    t_attack = t_defense - o_card_passive
                    t_defense = tempattack
                elif o_card_passive_type == 'BLINK':
                    o_stamina = o_stamina - o_card_passive
                    t_stamina = t_stamina + o_card_passive - 10
                elif o_card_passive_type == 'SLOW':
                    tempstam = t_stamina + o_card_passive
                    o_stamina = o_stamina - (2 * o_card_passive)
                    t_stamina = o_stamina
                    o_stamina = tempstam
                elif o_card_passive_type == 'HASTE':
                    tempstam = t_stamina - o_card_passive
                    o_stamina = o_stamina + (2 * o_card_passive)
                    t_stamina = o_stamina
                    o_stamina = tempstam
                elif o_card_passive_type == 'SOULCHAIN':
                    o_stamina = o_card_passive
                    t_stamina = o_card_passive
                elif o_card_passive_type == 'FEAR':
                    o_health = o_health - int((o_card_passive / 100) * o_health)
                    t_attack = t_attack - int((o_card_passive / 100) * t_attack)
                    t_defense = t_defense - int((o_card_passive / 100) * t_defense)
                elif o_card_passive_type == 'GAMBLE':
                    o_health = o_card_passive
                    t_health = o_card_passive * 2

                    # Title Passive
                o_title_passive_type = list(o_title_passive.keys())[0]
                o_title_passive_value = list(o_title_passive.values())[0]

                if o_title_passive_bool:
                    if o_title_passive_type == 'ATK':
                        o_attack = o_attack + int(o_title_passive_value)
                    elif o_title_passive_type == 'DEF':
                        o_defense = o_defense + int(o_title_passive_value)
                    elif o_title_passive_type == 'STAM':
                        o_stamina = o_stamina + int(o_title_passive_value)
                    elif o_title_passive_type == 'HLT':
                        o_max_health = o_max_health + int(o_title_passive_value)
                        o_health = o_health + int(o_title_passive_value)
                    elif o_title_passive_type == 'LIFE':
                        _max_health = o_max_health + int((o_title_passive_value / 100) * t_health)
                    elif o_title_passive_type == 'DRAIN':
                        t_stamina = t_stamina - int(o_title_passive_value)
                        o_stamina = o_stamina + int(o_title_passive_value)
                    elif o_title_passive_type == 'FLOG':
                        o_attack = o_attack + int((o_title_passive_value / 100) * t_attack)
                        t_attack = t_attack - int((o_title_passive_value / 100) * t_attack)
                    elif o_title_passive_type == 'WITHER':
                        o_defense = o_defense + int((o_title_passive_value / 100) * t_defense)
                        t_defense = t_defense - int((o_title_passive_value / 100) * t_defense)
                    elif o_title_passive_type == 'RAGE':
                        o_attack = o_attack + int(((o_title_passive_value / 100) * o_defense))
                        o_defense = o_defense - int(((o_title_passive_value / 100) * o_attack))
                    elif o_title_passive_type == 'BRACE':
                        o_defense = o_defense + int(((o_title_passive_value / 100) * o_attack))
                        o_attack = o_attack - int(((o_title_passive_value / 100) * o_defense))
                    elif o_title_passive_type == 'BZRK':
                        o_attack = o_attack + int(((o_title_passive_value / 100) * o_health))
                        o_health = o_health - int((o_attack))
                    elif o_title_passive_type == 'CRYSTAL':
                        o_defense = o_defense + int(((o_title_passive_value / 100) * o_health))
                        o_health = o_health - int((o_defense))
                    elif o_title_passive_type == 'GROWTH':
                        o_attack = o_attack + int((o_title_passive_value / 100) * o_attack)
                        o_defense = o_defense + int((o_title_passive_value / 100) * o_defense)
                        o_max_health = o_max_health - int((o_title_passive_value / 100) * o_max_health)
                    elif o_title_passive_type == 'STANCE':
                        tempattack = o_attack
                        o_attack = o_defense
                        o_defense = tempattack
                    elif o_title_passive_type == 'CONFUSE':
                        tempattack = t_attack
                        t_attack = t_defense
                        t_defense = tempattack
                    elif o_title_passive_type == 'BLINK':
                        o_stamina = o_stamina - o_title_passive_value
                        t_stamina = t_stamina + o_title_passive_value
                    elif o_title_passive_type == 'SLOW':
                        tempstam = t_stamina + o_title_passive_value
                        o_stamina = o_stamina - o_title_passive_value
                        t_stamina = o_stamina
                        o_stamina = tempstam
                    elif o_title_passive_type == 'HASTE':
                        tempstam = t_stamina - o_title_passive_value
                        o_stamina = o_stamina + o_title_passive_value
                        t_stamina = o_stamina
                        o_stamina = tempstam
                    elif o_title_passive_type == 'SOULCHAIN':
                        o_stamina = o_title_passive_value
                        t_stamina = o_title_passive_value
                    elif o_title_passive_type == 'FEAR':
                        o_health = o_health - int((o_title_passive_value / 100) * o_health)
                        t_attack = t_attack - int((o_title_passive_value / 100) * t_attack)
                        t_defense = t_defense - int((o_title_passive_value / 100) * t_defense)
                    elif o_title_passive_type == 'GAMBLE':
                        t_health = o_title_passive_value * 2
                        o_health = o_title_passive_value

                # Arm Passive Player 1
                oarm_passive_type = list(oarm_passive.keys())[0]
                oarm_passive_value = list(oarm_passive.values())[0]

                if oarm_passive_type == 'ATK':
                    o_attack = o_attack + int(oarm_passive_value)
                elif oarm_passive_type == 'DEF':
                    o_defense = o_defense + int(oarm_passive_value)
                elif oarm_passive_type == 'STAM':
                    o_stamina = o_stamina + int(oarm_passive_value)
                elif oarm_passive_type == 'HLT':
                    o_max_health = o_max_health + int(oarm_passive_value)
                    o_health = o_health + int(oarm_passive_value)
                elif oarm_passive_type == 'LIFE':
                    o_max_health = o_max_health + int((oarm_passive_value / 100) * t_health)
                elif oarm_passive_type == 'DRAIN':
                    t_stamina = t_stamina - int(oarm_passive_value)
                    o_stamina = o_stamina + int(oarm_passive_value)
                elif oarm_passive_type == 'FLOG':
                    o_attack = o_attack + int((oarm_passive_value / 100) * t_attack)
                    t_attack = t_attack - int((oarm_passive_value / 100) * t_attack)
                elif oarm_passive_type == 'WITHER':
                    o_defense = o_defense + int((oarm_passive_value / 100) * t_defense)
                    t_defense = t_defense - int((oarm_passive_value / 100) * t_defense)
                elif oarm_passive_type == 'RAGE':
                    o_attack = o_attack + int(((oarm_passive_value / 100) * o_defense))
                    o_defense = o_defense - int(((oarm_passive_value / 100) * o_attack))
                elif oarm_passive_type == 'BRACE':
                    o_defense = o_defense + int(((oarm_passive_value / 100) * o_attack))
                    o_attack = o_attack - int(((oarm_passive_value / 100) * o_defense))
                elif oarm_passive_type == 'BZRK':
                    o_attack = o_attack + int(((oarm_passive_value / 100) * o_health))
                    o_health = o_health - int((o_attack))
                elif oarm_passive_type == 'CRYSTAL':
                    o_defense = o_defense + int(((oarm_passive_value / 100) * o_health))
                    o_health = o_health - int((o_defense))
                elif oarm_passive_type == 'GROWTH':
                    o_attack = o_attack + int((oarm_passive_value / 100) * o_attack)
                    o_defense = o_defense + int((oarm_passive_value / 100) * o_defense)
                    o_max_health = o_max_health - int((oarm_passive_value / 100) * o_max_health)
                elif oarm_passive_type == 'STANCE':
                    tempattack = o_attack + oarm_passive_value
                    o_attack = o_defense + oarm_passive_value
                    o_defense = tempattack
                elif oarm_passive_type == 'CONFUSE':
                    tempattack = o_attack - oarm_passive_value
                    t_attack = t_defense - oarm_passive_value
                    t_defense = tempattack
                elif oarm_passive_type == 'BLINK':
                    o_stamina = o_stamina - oarm_passive_value
                    t_stamina = t_stamina + oarm_passive_value
                elif oarm_passive_type == 'SLOW':
                    tempstam = t_stamina + oarm_passive_value
                    o_stamina = o_stamina - oarm_passive_value
                    t_stamina = o_stamina
                    o_stamina = tempstam
                elif oarm_passive_type == 'HASTE':
                    tempstam = t_stamina - oarm_passive_value
                    o_stamina = o_stamina + oarm_passive_value
                    t_stamina = o_stamina
                    o_stamina = tempstam
                elif oarm_passive_type == 'SOULCHAIN':
                    o_stamina = oarm_passive_value
                    t_stamina = oarm_passive_value
                elif oarm_passive_type == 'FEAR':
                    o_health = o_health - int((oarm_passive_value / 100) * o_health)
                    t_attack = t_attack - int((oarm_passive_value / 100) * t_attack)
                    t_defense = t_defense - int((oarm_passive_value / 100) * t_defense)
                elif oarm_passive_type == 'GAMBLE':
                    t_health = oarm_passive_value * 2
                    o_health = oarm_passive_value

                # Arm Passive Player 2
                tarm_passive_type = list(tarm_passive.keys())[0]
                tarm_passive_value = list(tarm_passive.values())[0]

                if tarm_passive_type == 'ATK':
                    t_attack = t_attack + int(tarm_passive_value)
                elif tarm_passive_type == 'DEF':
                    t_defense = t_defense + int(tarm_passive_value)
                elif tarm_passive_type == 'STAM':
                    t_stamina = t_stamina + int(tarm_passive_value)
                elif tarm_passive_type == 'HLT':
                    t_max_health = t_max_health + int(tarm_passive_value)
                    t_health = t_health + int(tarm_passive_value)
                elif tarm_passive_type == 'LIFE':
                    t_max_health = t_max_health + int((tarm_passive_value / 100) * o_health)
                elif tarm_passive_type == 'DRAIN':
                    o_stamina = o_stamina - int(tarm_passive_value)
                    t_stamina = t_stamina + int(tarm_passive_value)
                elif tarm_passive_type == 'FLOG':
                    t_attack = t_attack + int((tarm_passive_value / 100) * o_attack)
                    o_attack = o_attack - int((tarm_passive_value / 100) * o_attack)
                elif tarm_passive_type == 'WITHER':
                    t_defense = t_defense + int((tarm_passive_value / 100) * o_defense)
                    o_defense = o_defense - int((tarm_passive_value / 100) * o_defense)
                elif tarm_passive_type == 'RAGE':
                    t_attack = t_attack + int((tarm_passive_value / 100) * t_defense)
                    t_defense = t_defense - int((tarm_passive_value / 100) * t_attack)
                elif tarm_passive_type == 'BRACE':
                    t_defense = t_defense + int((tarm_passive_value / 100) * t_attack)
                    t_attack = t_attack - int((tarm_passive_value / 100) * t_defense)
                elif tarm_passive_type == 'BZRK':
                    t_attack = t_attack + int((tarm_passive_value / 100) * t_health)
                    t_health = t_health - int((t_attack))
                elif tarm_passive_type == 'CRYSTAL':
                    t_defense = t_defense + int((tarm_passive_value / 100) * t_health)
                    t_health = t_health - int(t_defense)
                elif tarm_passive_type == 'GROWTH':
                    t_attack = t_attack + int((tarm_passive_value / 100) * t_attack)
                    t_defense = t_defense + int((tarm_passive_value / 100) * t_defense)
                    t_max_health = t_max_health - int(((tarm_passive_value / 100) * t_max_health))
                elif tarm_passive_type == 'STANCE':
                    tempattack = t_attack + tarm_passive_value
                    t_attack = t_defense + tarm_passive_value
                    t_defense = tempattack
                elif tarm_passive_type == 'CONFUSE':
                    tempattack = o_attack - tarm_passive_value
                    o_attack = o_defense - tarm_passive_value
                    o_defense = tempattack
                elif tarm_passive_type == 'BLINK':
                    t_stamina = t_stamina - tarm_passive_value
                    o_stamina = o_stamina + tarm_passive_value
                elif tarm_passive_type == 'SLOW':
                    tempstam = o_stamina + tarm_passive_value
                    t_stamina = t_stamina - tarm_passive_value
                    o_stamina = t_stamina
                    t_stamina = tempstam
                elif tarm_passive_type == 'HASTE':
                    tempstam = o_stamina - tarm_passive_value
                    t_stamina = t_stamina + tarm_passive_value
                    o_stamina = t_stamina
                    t_stamina = tempstam
                elif tarm_passive_type == 'SOULCHAIN':
                    t_stamina = tarm_passive_value
                    o_stamina = tarm_passive_value
                elif tarm_passive_type == 'FEAR':
                    t_health = t_health - int((tarm_passive_value / 100) * t_health)
                    o_attack = o_attack - int((tarm_passive_value / 100) * o_attack)
                    o_defense = o_defense - int((tarm_passive_value / 100) * o_defense)
                elif tarm_passive_type == 'GAMBLE':
                    t_health = tarm_passive_value * 2
                    o_health = tarm_passive_value

                # Player 2 Passive Config
                if (t_universe == t_title_universe) or (t_title_universe == "Unbound"):
                    t_title_passive_bool = True

                # Player 1 Card Passive
                t_card_passive_type = list(t_passive.values())[1]
                t_card_passive = list(t_passive.values())[0]

                if t_card_passive_type == 'ATK':
                    t_attack = t_attack + int(t_card_passive)
                elif t_card_passive_type == 'DEF':
                    t_defense = t_defense + int(t_card_passive)
                elif t_card_passive_type == 'STAM':
                    t_stamina = t_stamina + int(t_card_passive)
                elif t_card_passive_type == 'HLT':
                    t_max_health = t_max_health + int(t_card_passive)
                    t_health = t_health + int(t_card_passive)
                elif t_card_passive_type == 'LIFE':
                    t_max_health = t_max_health + int((t_card_passive / 100) * o_health)
                elif t_card_passive_type == 'DRAIN':
                    o_stamina = o_stamina - int(t_card_passive)
                    t_stamina = t_stamina + int(t_card_passive)
                elif t_card_passive_type == 'FLOG':
                    t_attack = t_attack + int((t_card_passive / 100) * o_attack)
                    o_attack = o_attack - int((t_card_passive / 100) * o_attack)
                elif t_card_passive_type == 'WITHER':
                    t_defense = t_defense + int((t_card_passive / 100) * o_defense)
                    o_defense = o_defense - int((t_card_passive / 100) * o_defense)
                elif t_card_passive_type == 'RAGE':
                    t_attack = t_attack + int((t_card_passive / 100) * t_defense)
                    t_defense = t_defense - int((t_card_passive / 100) * t_attack)
                elif t_card_passive_type == 'BRACE':
                    t_defense = t_defense + int((t_card_passive / 100) * t_attack)
                    t_attack = t_attack - int((t_card_passive / 100) * t_defense)
                elif t_card_passive_type == 'BZRK':
                    t_attack = t_attack + int(((t_card_passive / 100) * t_health))
                    t_health = t_health - int((t_attack))
                elif t_card_passive_type == 'CRYSTAL':
                    t_defense = t_defense + int((t_card_passive / 100) * t_health)
                    t_health = t_health - int(t_defense)
                elif t_card_passive_type == 'GROWTH':
                    t_attack = t_attack + int((t_card_passive / 100) * t_attack)
                    t_defense = t_defense + int((t_card_passive / 100) * t_defense)
                    t_max_health = t_max_health - int(((t_card_passive / 100) * t_max_health))
                    t_health = t_health - int(((t_card_passive / 100) * t_health))
                elif t_card_passive_type == 'STANCE':
                    tempattack = t_attack + t_card_passive
                    t_attack = t_defense + t_card_passive
                    t_defense = tempattack
                elif t_card_passive_type == 'CONFUSE':
                    tempattack = o_attack - t_card_passive
                    o_attack = o_defense - t_card_passive
                    o_defense = tempattack
                elif t_card_passive_type == 'BLINK':
                    t_stamina = t_stamina - t_card_passive
                    o_stamina = o_stamina + t_card_passive - 10
                elif t_card_passive_type == 'SLOW':
                    tempstam = o_stamina + t_card_passive
                    t_stamina = t_stamina - (2 * t_card_passive)
                    o_stamina = t_stamina
                    t_stamina = tempstam
                elif t_card_passive_type == 'HASTE':
                    tempstam = o_stamina - t_card_passive
                    t_stamina = t_stamina + (2 * t_card_passive)
                    o_stamina = t_stamina
                    t_stamina = tempstam
                elif t_card_passive_type == 'SOULCHAIN':
                    t_stamina = t_card_passive
                    o_stamina = t_card_passive
                elif t_card_passive_type == 'FEAR':
                    t_health = t_health - int((t_card_passive / 100) * t_health)
                    o_attack = o_attack - int((t_card_passive / 100) * o_attack)
                    o_defense = o_defense - int((t_card_passive / 100) * o_defense)
                elif t_card_passive_type == 'GAMBLE':
                    t_health = t_card_passive * 2
                    o_health = t_card_passive

                # Title Passive
                t_title_passive_type = list(t_title_passive.keys())[0]
                t_title_passive_value = list(t_title_passive.values())[0]

                if t_title_passive_bool:
                    if t_title_passive_type == 'ATK':
                        t_attack = t_attack + int(t_title_passive_value)
                    elif t_title_passive_type == 'DEF':
                        t_defense = t_defense + int(t_title_passive_value)
                    elif t_title_passive_type == 'STAM':
                        t_stamina = t_stamina + int(t_title_passive_value)
                    elif t_title_passive_type == 'HLT':
                        t_max_health = t_max_health + int(t_title_passive_value)
                        t_health = t_health + int(t_title_passive_value)
                    elif t_title_passive_type == 'LIFE':
                        t_max_health = t_max_health + int((t_title_passive_value / 100) * o_health)
                    elif t_title_passive_type == 'DRAIN':
                        o_stamina = o_stamina - int(t_title_passive_value)
                        t_stamina = t_stamina + int(t_title_passive_value)
                    elif t_title_passive_type == 'FLOG':
                        t_attack = t_attack + int((t_title_passive_value / 100) * o_attack)
                        o_attack = o_attack - int((t_title_passive_value / 100) * o_attack)
                    elif t_title_passive_type == 'WITHER':
                        t_defense = t_defense + int((t_title_passive_value / 100) * o_defense)
                        o_defense = o_defense - int((t_title_passive_value / 100) * o_defense)
                    elif t_title_passive_type == 'RAGE':
                        t_attack = t_attack + int(((t_title_passive_value / 100) * t_defense))
                        t_defense = t_defense - int(((t_title_passive_value / 100) * t_attack))
                    elif t_title_passive_type == 'BRACE':
                        t_defense = t_defense + int(((t_title_passive_value / 100) * t_attack))
                        t_attack = t_attack - int(((t_title_passive_value / 100) * t_defense))
                    elif t_title_passive_type == 'BZRK':
                        t_attack = t_attack + int(((t_title_passive_value / 100) * t_health))
                        t_health = t_health - int((t_attack))
                    elif t_title_passive_type == 'CRYSTAL':
                        t_defense = t_defense + int(((t_title_passive_value / 100) * t_health))
                        t_health = t_health - int(t_defense)
                    elif t_title_passive_type == 'GROWTH':
                        tt_attack = t_attack + int(((t_title_passive_value / 100) * t_attack))
                        t_defense = t_defense + int(((t_title_passive_value / 100) * t_defense))
                        t_max_health = t_max_health - int(((t_title_passive_value / 100) * t_max_health))
                    elif t_title_passive_type == 'STANCE':
                        tempattack = t_attack + t_title_passive_value
                        t_attack = t_defense + t_title_passive_value
                        t_defense = tempattack
                    elif t_title_passive_type == 'CONFUSE':
                        tempattack = o_attack - t_title_passive_value
                        o_attack = o_defense - t_title_passive_value
                        o_defense = tempattack
                    elif t_title_passive_type == 'BLINK':
                        t_stamina = t_stamina - t_title_passive_value
                        o_stamina = o_stamina + t_title_passive_value
                    elif t_title_passive_type == 'SLOW':
                        tempstam = o_stamina + t_title_passive_value
                        t_stamina = t_stamina - t_title_passive_value
                        o_stamina = t_stamina
                        t_stamina = tempstam
                    elif t_title_passive_type == 'HASTE':
                        tempstam = o_stamina - t_title_passive_value
                        t_stamina = t_stamina + t_title_passive_value
                        o_stamina = t_stamina
                        t_stamina = tempstam
                    elif t_title_passive_type == 'SOULCHAIN':
                        t_stamina = t_title_passive_value
                        o_stamina = t_title_passive_value
                    elif t_title_passive_type == 'FEAR':
                        t_health = t_health - int((t_title_passive_value / 100) * t_health)
                        o_attack = o_attack - int((t_title_passive_value / 100) * o_attack)
                        o_defense = o_defense - int((t_title_passive_value / 100) * o_defense)
                    elif t_title_passive_type == 'GAMBLE':
                        t_health = t_title_passive_value * 2
                        o_health = t_title_passive_value

                # Player 2 Moves
                t_1 = t_moveset[0]
                t_2 = t_moveset[1]
                t_3 = t_moveset[2]
                t_enhancer = t_moveset[3]
                t_enhancer_used = False
                t_pet_used = False

                # Player 1 Focus & Resolve
                t_focus = 90
                t_used_focus = False
                t_resolve = 60
                t_used_resolve = False
                t_chainsaw = False
                t_def_chainsaw = False
                t_atk_chainsaw = False
                if t_universe == "Chainsawman":
                    t_chainsaw = True

                # Turn iterator
                turn = 0
                # Enhance Turn Iterators
                eo = 0
                et = 0

                botActive = True

                lineup = f"{currentopponent + 1}/{total_legends}"
                options = [1, 2, 3, 4, 5, 0]

                # Count Turns
                turn_total = 0

                # Rebirth Scaling
                o_attack = o_attack + (o_user['REBIRTH'] * 10)
                o_defense = o_defense + (o_user['REBIRTH'] * 10)
            except Exception as ex:
                trace = []
                tb = ex.__traceback__
                while tb is not None:
                    trace.append({
                        "filename": tb.tb_frame.f_code.co_filename,
                        "name": tb.tb_frame.f_code.co_name,
                        "lineno": tb.tb_lineno
                    })
                    tb = tb.tb_next
                print(str({
                    'type': type(ex).__name__,
                    'message': str(ex),
                    'trace': trace
                }))
                return

            # START TURNS
            while (o_health > 0) and (t_health > 0):

                # Player 1 Turn Start
                if turn == 0:
                    await asyncio.sleep(1)
                    if o_block_used == True:
                        o_block_used = False
                        o_defense = int(o_defense / 2)
                    if o_universe == "Death Note" and turn_total == 0:
                        embedVar = discord.Embed(title=f"{o_card.upper()} Scheduled Death 📓",
                                                 description=f"**{o_card} says**\nYou will die in 24 turns...",
                                                 colour=0xe91e63)
                        await private_channel.send(embed=embedVar)
                    if t_universe == 'Death Note' and turn_total == 0:
                        embedVar = discord.Embed(title=f"{o_card.upper()} Scheduled Death 📓",
                                                 description=f"**{t_card} says**\nYou will die in 24 turns...",
                                                 colour=0xe91e63)
                        await private_channel.send(embed=embedVar)
                    if o_attack <= 25:
                        o_attack = 25
                    if o_defense <= 30:
                        o_defense = 30
                    if o_health >= o_max_health:
                        o_health = o_max_health
                    # Tutorial Instructions
                    if turn_total == 0 and botActive:
                        await private_channel.send(f"{ctx.author.mention}")
                        embedVar = discord.Embed(
                            title=f":new_moon: **ABYSS FLOOR {floor}**\n\n**{o_card}** VS **{t_card}** has begun! {lineup}",
                            description=f"`{o_card} Says:`\n{o_greeting_description}", colour=0xe91e63)
                        await private_channel.send(embed=embedVar)

                    if o_health <= (o_max_health * .25):
                        embed_color_o = 0xe74c3c
                        if o_chainsaw == True:
                            if o_atk_chainsaw == False:
                                o_atk_chainsaw = True
                                o_chainsaw = False
                                o_defense = o_defense * 2
                                o_attack = o_attack * 2
                                embedVar = discord.Embed(title=f"{o_card.upper()}'s Devilization",
                                                         description=f"**{o_card}** Doubles ATK and DEF",
                                                         colour=0xe91e63)
                                await private_channel.send(embed=embedVar)

                    elif o_health <= (o_max_health * .50):
                        embed_color_o = 0xe67e22
                        if o_chainsaw == True:
                            if o_atk_chainsaw == False:
                                o_atk_chainsaw = True
                                o_chainsaw = False
                                o_defense = o_defense * 2
                                o_attack = o_attack * 2
                                embedVar = discord.Embed(title=f"{o_card.upper()}'s Devilization",
                                                         description=f"**{o_card}** Doubles ATK and DEF",
                                                         colour=0xe91e63)
                                await private_channel.send(embed=embedVar)
                    elif o_health <= (o_max_health * .75):
                        embed_color_o = 0xf1c40f

                    else:
                        embed_color_o = 0x2ecc71

                    if o_stamina < 10:
                        o_focus_count = o_focus_count + 1
                        # fortitude or luck is based on health
                        fortitude = 0.0
                        low = o_health - (o_health * .90)
                        high = o_health - (o_health * .80)
                        fortitude = random.randint(int(low), int(high))

                        o_stamina = o_focus
                        o_healthcalc = round(((o_focus * .40) + (fortitude * 1)) / 2)
                        o_attackcalc = round(.20 * ((o_focus * .15) + round(fortitude * 1)))
                        o_defensecalc = round(.20 * ((o_focus * .15) + round(fortitude * 1)))
                        # check if user is at max health and sets messages and focus health value
                        o_newhealth = 0
                        healmessage = ""
                        messagenumber = 0
                        if o_universe == "Crown Rift Madness":
                            healmessage = "yet inner **Madness** drags on..."
                            messagenumber = 3
                        else:
                            if o_health <= o_max_health:
                                o_newhealth = o_health + o_healthcalc
                                if o_newhealth > o_max_health:
                                    healmessage = "the injuries dissapeared"
                                    messagenumber = 1
                                    o_health = o_max_health
                                else:
                                    healmessage = "regained some vitality"
                                    messagenumber = 2
                                    o_health = o_newhealth
                            else:
                                healmessage = f"**{t_card}**'s blows don't appear to have any effect!"
                                messagenumber = 0
                        if not o_used_resolve:
                            o_attack = o_attack + o_attackcalc
                            o_defense = o_defense + o_defensecalc
                        o_used_focus = True

                        # embedVar = discord.Embed(title=f"{o_card.upper()} FOCUSED", description=f"**{o_card} says**\n{o_focus_description}", colour=0xe91e63)
                        # embedVar.add_field(name=f"{o_card} focused and {healmessage}", value="All stats & stamina increased")
                        # await private_channel.send(embed=embedVar)

                        # Resolve Check and Calculation
                        if not o_used_resolve and o_used_focus and o_universe == "Digimon":  # Digimon Universal Trait
                            embedVar = discord.Embed(title=f"{o_card} STRENGTHENED RESOLVE :zap:",
                                                     description=f"**{o_card} says**\n{o_resolve_description}",
                                                     colour=0xe91e63)
                            embedVar.add_field(name=f"Transformation: Digivolve", value="On Focus you Resolve.")
                            await private_channel.send(embed=embedVar)
                            # fortitude or luck is based on health
                            fortitude = 0.0
                            low = o_health - (o_health * .75)
                            high = o_health - (o_health * .66)
                            fortitude = random.randint(int(low), int(high))
                            # Resolve Scaling
                            o_resolve_health = round(fortitude + (.5 * o_resolve))
                            o_resolve_attack = round((.30 * o_defense) * (o_resolve / (.50 * o_defense)))
                            o_resolve_defense = round((.30 * o_defense) * (o_resolve / (.50 * o_defense)))

                            o_stamina = o_stamina + o_resolve
                            o_health = o_health + o_resolve_health
                            o_attack = round(o_attack + o_resolve_attack)
                            o_defense = round(o_defense - o_resolve_defense)
                            o_used_resolve = True
                            o_pet_used = False


                        elif o_universe == "League Of Legends":
                            embedVar = discord.Embed(title=f"Turret Shot hits {t_card} for **30** Damage 💥",
                                                     colour=0xe91e63)
                            await private_channel.send(embed=embedVar)
                            t_health = round(t_health - 30)

                        elif o_universe == "Solo Leveling":
                            embedVar = discord.Embed(
                                title=f"Ruler's Authority... {t_card} loses **{30 + turn_total}** 🛡️ 🔻",
                                colour=0xe91e63)
                            await private_channel.send(embed=embedVar)
                            t_defense = round(t_defense - (30 + turn_total))

                        elif o_universe == "Attack On Titan":
                            embedVar = discord.Embed(title=f"Rally! **{o_card}** Increased Max Health ❤️",
                                                     colour=0xe91e63)
                            await private_channel.send(embed=embedVar)
                            o_max_health = round(o_max_health + 100)

                        elif o_universe == "Black Clover":
                            embedVar = discord.Embed(title=f"Mana Zone! {o_card} Increased Stamina 🌀", colour=0xe91e63)
                            await private_channel.send(embed=embedVar)
                            o_stamina = 100
                            ocard_lvl_ap_buff = ocard_lvl_ap_buff + 30
                        elif o_universe == "Death Note":
                            if turn_total >= 24:
                                embedVar = discord.Embed(title=f"{t_card.upper()}'s' Scheduled Death 📓",
                                                         description=f"**{o_card} says**\n**Delete**", colour=0xe91e63)
                                embedVar.add_field(name=f"{t_card} had a heart attack and died", value=f"Death....")
                                await private_channel.send(embed=embedVar)
                                t_health = 0

                        if t_universe == "One Punch Man":
                            embedVar = discord.Embed(
                                title=f"Hero Reinforcements! {t_card}  Increased Health & Max Health ❤️",
                                colour=0xe91e63)
                            await private_channel.send(embed=embedVar)
                            t_health = round(t_health + 100)
                            t_max_health = round(t_max_health + 100)

                        elif t_universe == "7ds":
                            embedVar = discord.Embed(title=f"Increase Power Level! {t_card} Increased Stamina 🌀",
                                                     colour=0xe91e63)
                            await private_channel.send(embed=embedVar)
                            t_stamina = t_stamina + 80

                        elif t_universe == "Souls":
                            embedVar = discord.Embed(
                                title=f"Combo Recognition! {t_card} Increased Attack by **{30 + turn_total}** 🔺 ",
                                colour=0xe91e63)
                            await private_channel.send(embed=embedVar)
                            t_attack = round(t_attack + (30 + turn_total))

                        else:
                            turn_total = turn_total + 1
                            if o_universe != "Crown Rift Madness":
                                turn = 1
                            else:
                                turn = 0
                        turn_total = turn_total + 1
                        if o_universe != "Crown Rift Madness":
                            turn = 1
                        else:
                            turn = 0
                    else:

                        # Ap Levels
                        ap1 = list(o_1.values())[0] + ocard_lvl_ap_buff
                        ap2 = list(o_2.values())[0] + ocard_lvl_ap_buff
                        ap3 = list(o_3.values())[0] + ocard_lvl_ap_buff
                        enh1 = list(o_enhancer.values())[0]
                        enh_name = list(o_enhancer.values())[2]
                        pet_enh_name = list(opet_move.values())[2]
                        pet_msg_on_resolve = ""

                        # UNIVERSE CARD
                        player_1_card = showcard(o, o_max_health, o_health, o_max_stamina, o_stamina, o_used_resolve,
                                                 otitle, o_used_focus, o_attack, o_defense, turn_total, ap1, ap2, ap3,
                                                 enh1, enh_name, ocard_lvl, t_defense)
                        # await private_channel.send(file=player_1_card)

                        if o_used_focus and o_used_resolve:
                            options = ["q", "Q", "0", "1", "2", "3", "4", "6"]
                        elif o_used_focus and not o_used_resolve:
                            options = ["q", "Q", "0", "1", "2", "3", "4", "5"]
                        else:
                            options = ["q", "Q", "0", "1", "2", "3", "4"]

                        battle_buttons = [
                            manage_components.create_button(
                                style=ButtonStyle.red,
                                label=f"💥 {omove1_text} | 10🌀",
                                custom_id="1"
                            ),
                            manage_components.create_button(
                                style=ButtonStyle.red,
                                label=f"☄️ {omove2_text} | 30🌀",
                                custom_id="2"
                            ),
                            manage_components.create_button(
                                style=ButtonStyle.red,
                                label=f"🏵️ {omove3_text} | 80🌀",
                                custom_id="3"
                            ),
                            manage_components.create_button(
                                style=ButtonStyle.blue,
                                label=f"🦠 {omove_enhanced_text} | 20🌀",
                                custom_id="4"
                            )
                        ]

                        util_buttons = [
                            manage_components.create_button(
                                style=ButtonStyle.grey,
                                label="Block 20",
                                custom_id="0"
                            ),
                            manage_components.create_button(
                                style=ButtonStyle.grey,
                                label="Quit | /ff",
                                custom_id="q"
                            ),
                        ]

                        if o_used_focus and o_used_resolve and not o_pet_used:
                            util_buttons.append(
                                manage_components.create_button(
                                    style=ButtonStyle.green,
                                    label="🐦 15",
                                    custom_id="6"
                                )
                            )

                        if o_used_focus and not o_used_resolve:
                            util_buttons.append(
                                manage_components.create_button(
                                    style=ButtonStyle.green,
                                    label="Resolve!",
                                    custom_id="5"
                                )
                            )

                        battle_action_row = manage_components.create_actionrow(*battle_buttons)
                        util_action_row = manage_components.create_actionrow(*util_buttons)

                        await private_channel.send(
                            f"Choose your move! **|** _Turn_ {turn_total} :dagger:**{o_attack}**/🛡️**{o_defense}**",
                            components=[battle_action_row, util_action_row], file=player_1_card)

                        # Make sure user is responding with move
                        def check(button_ctx):
                            return button_ctx.author == user1 and button_ctx.custom_id in options

                        try:
                            button_ctx: ComponentContext = await manage_components.wait_for_component(self.bot,
                                                                                                      components=[
                                                                                                          battle_action_row,
                                                                                                          util_action_row],
                                                                                                      timeout=45,
                                                                                                      check=check)

                            # calculate data based on selected move
                            if button_ctx.custom_id == "q" or button_ctx.custom_id == "Q":
                                o_health = 0

                                if private_channel.guild:
                                    await private_channel.send(f"{ctx.author.mention} has fled the battle...")

                                    await discord.TextChannel.delete(private_channel, reason=None)
                                else:

                                    await private_channel.send(f"You fled the battle...")
                                return
                            if button_ctx.custom_id == "1":

                                dmg = damage_cal(o_universe, o_card, o_1, o_attack, o_defense, t_defense, o_stamina,
                                                 o_enhancer_used, o_health, t_health, t_stamina, o_max_health, t_attack,
                                                 o_special_move_description, turn_total, ocard_lvl_ap_buff)
                            elif button_ctx.custom_id == "2":

                                dmg = damage_cal(o_universe, o_card, o_2, o_attack, o_defense, t_defense, o_stamina,
                                                 o_enhancer_used, o_health, t_health, t_stamina, o_max_health, t_attack,
                                                 o_special_move_description, turn_total, ocard_lvl_ap_buff)
                            elif button_ctx.custom_id == "3":

                                dmg = damage_cal(o_universe, o_card, o_3, o_attack, o_defense, t_defense, o_stamina,
                                                 o_enhancer_used, o_health, t_health, t_stamina, o_max_health, t_attack,
                                                 o_special_move_description, turn_total, ocard_lvl_ap_buff)
                                if o_gif != "N/A":
                                    await private_channel.send(f"{o_gif}")
                            elif button_ctx.custom_id == "4":
                                o_enhancer_used = True

                                dmg = damage_cal(o_universe, o_card, o_enhancer, o_attack, o_defense, t_defense,
                                                 o_stamina, o_enhancer_used, o_health, t_health, t_stamina,
                                                 o_max_health, t_attack, o_special_move_description, turn_total,
                                                 ocard_lvl_ap_buff)
                                o_enhancer_used = False
                            elif button_ctx.custom_id == "5":
                                # fortitude or luck is based on health
                                if not o_used_resolve and o_used_focus:
                                    if o_universe == "My Hero Academia":  # My Hero Trait
                                        # fortitude or luck is based on health
                                        fortitude = 0.0
                                        low = o_health - (o_health * .75)
                                        high = o_health - (o_health * .66)
                                        fortitude = random.randint(int(low), int(high))
                                        # Resolve Scaling
                                        o_resolve_health = round(fortitude + (.5 * o_resolve))
                                        o_resolve_attack = round((.30 * o_defense) * (o_resolve / (.50 * o_defense)))
                                        o_resolve_defense = round((.30 * o_defense) * (o_resolve / (.50 * o_defense)))
                                        ocard_lvl_ap_buff = ocard_lvl_ap_buff + 50

                                        o_stamina = o_stamina + o_resolve
                                        o_health = o_health + o_resolve_health
                                        o_attack = round(o_attack + o_resolve_attack)
                                        o_defense = round(o_defense - o_resolve_defense)
                                        o_used_resolve = True
                                        o_pet_used = False
                                        embedVar = discord.Embed(title=f"{o_card.upper()} PLUS ULTRAAA",
                                                                 description=f"**{o_card} says**\n{o_resolve_description}",
                                                                 colour=0xe91e63)
                                        embedVar.add_field(name=f"Transformation: Plus Ultra",
                                                           value="You do not lose a turn after you Resolve.")
                                        await button_ctx.send(embed=embedVar)

                                        turn_total = turn_total + 1
                                        turn = 0
                                    elif o_universe == "Attack On Titan":
                                        # fortitude or luck is based on health
                                        fortitude = 0.0
                                        low = o_health - (o_health * .75)
                                        high = o_health - (o_health * .66)
                                        fortitude = random.randint(int(low), int(high))
                                        # Resolve Scaling
                                        o_resolve_health = round(fortitude + (.5 * o_resolve))
                                        o_resolve_attack = round((.30 * o_defense) * (o_resolve / (.50 * o_defense)))
                                        o_resolve_defense = round((.30 * o_defense) * (o_resolve / (.50 * o_defense)))

                                        o_stamina = o_stamina + o_resolve
                                        o_health = o_health + o_resolve_health
                                        o_attack = round(o_attack + o_resolve_attack)
                                        o_defense = round(o_defense - o_resolve_defense)
                                        o_used_resolve = True
                                        o_pet_used = False
                                        health_boost = 100 * o_focus_count
                                        o_health = o_health + health_boost
                                        embedVar = discord.Embed(title=f"{o_card.upper()} Titan Mode",
                                                                 description=f"**{o_card} says**\n{o_resolve_description}",
                                                                 colour=0xe91e63)
                                        embedVar.add_field(name=f"Transformation Complete",
                                                           value=f"Health increased by **{health_boost}**!")
                                        await button_ctx.send(embed=embedVar)

                                        turn_total = turn_total + 1
                                        turn = 1
                                    elif o_universe == "Bleach":  # Bleach Trait
                                        # fortitude or luck is based on health
                                        fortitude = 0.0
                                        low = o_health - (o_health * .75)
                                        high = o_health - (o_health * .66)
                                        fortitude = random.randint(int(low), int(high))
                                        # Resolve Scaling
                                        o_resolve_health = round(fortitude + (.5 * o_resolve))
                                        o_resolve_attack = round((.30 * o_defense) * (o_resolve / (.50 * o_defense)))
                                        o_resolve_defense = round((.30 * o_defense) * (o_resolve / (.50 * o_defense)))

                                        o_stamina = o_stamina + o_resolve
                                        o_health = o_health + o_resolve_health
                                        o_attack = round((o_attack + (2 * o_resolve_attack)) * 2)
                                        o_defense = round(o_defense - o_resolve_defense)
                                        # if o_defense >= 120:
                                        # o_defense = 120
                                        o_used_resolve = True
                                        o_pet_used = False
                                        embedVar = discord.Embed(title=f"{o_card} STRENGTHENED RESOLVE :zap:",
                                                                 description=f"**{o_card} says**\n{o_resolve_description}",
                                                                 colour=0xe91e63)
                                        embedVar.add_field(name=f"Transformation: Bankai",
                                                           value="Gain double Attack on Resolve.")
                                        await button_ctx.send(embed=embedVar)
                                        turn_total = turn_total + 1
                                        turn = 1
                                    elif o_universe == "God Of War":  # God Of War Trait
                                        # fortitude or luck is based on health
                                        fortitude = 0.0
                                        low = o_health - (o_health * .75)
                                        high = o_health - (o_health * .66)
                                        fortitude = random.randint(int(low), int(high))
                                        # Resolve Scaling
                                        o_resolve_health = round(fortitude + (.5 * o_resolve))
                                        o_resolve_attack = round((.30 * o_defense) * (o_resolve / (.50 * o_defense)))
                                        o_resolve_defense = round((.30 * o_defense) * (o_resolve / (.50 * o_defense)))

                                        o_stamina = o_stamina + o_resolve
                                        o_health = o_max_health
                                        o_attack = round(o_attack + o_resolve_attack)
                                        o_defense = round(o_defense - o_resolve_defense)
                                        o_used_resolve = True
                                        o_pet_used = False
                                        embedVar = discord.Embed(title=f"{o_card} STRENGTHENED RESOLVE :zap:",
                                                                 description=f"**{o_card} says**\n{o_resolve_description}",
                                                                 colour=0xe91e63)
                                        embedVar.add_field(name=f"Transformation: Ascension",
                                                           value="On Resolve Refill Health.")
                                        await button_ctx.send(embed=embedVar)
                                        turn_total = turn_total + 1
                                        turn = 1
                                    elif o_universe == "Fate":  # Fate Trait
                                        # fortitude or luck is based on health
                                        fortitude = 0.0
                                        low = o_health - (o_health * .75)
                                        high = o_health - (o_health * .66)
                                        fortitude = random.randint(int(low), int(high))
                                        # Resolve Scaling
                                        o_resolve_health = round(fortitude + (.5 * o_resolve))
                                        o_resolve_attack = round((.30 * o_defense) * (o_resolve / (.50 * o_defense)))
                                        o_resolve_defense = round((.30 * o_defense) * (o_resolve / (.50 * o_defense)))

                                        o_stamina = o_stamina + o_resolve
                                        o_health = o_health + o_resolve_health
                                        o_attack = round(o_attack + o_resolve_attack)
                                        o_defense = round(o_defense - o_resolve_defense)

                                        dmg = damage_cal(o_universe, o_card, o_3, o_attack, o_defense, t_defense,
                                                         o_stamina, o_enhancer_used, o_health, t_health, t_stamina,
                                                         o_max_health, t_attack, o_special_move_description, turn_total,
                                                         ocard_lvl_ap_buff)
                                        t_health = t_health - dmg['DMG']
                                        embedVar = discord.Embed(
                                            title=f"{o_card} STRENGTHENED RESOLVE :zap:\n\n{dmg['MESSAGE']}",
                                            description=f"**{o_card} says**\n{o_resolve_description}", colour=0xe91e63)
                                        embedVar.add_field(name=f"Transformation: Command Seal",
                                                           value="On Resolve, Strike with Ultimate, then Focus.")
                                        await button_ctx.send(embed=embedVar)
                                        # o_stamina = 0
                                        o_used_resolve = True
                                        o_pet_used = False
                                        turn_total = turn_total + 1
                                        turn = 1
                                    elif o_universe == "Kanto Region" or o_universe == "Johto Region" or o_universe == "Hoenn Region" or o_universe == "Sinnoh Region" or o_universe == "Kalos Region" or o_universe == "Unova Region" or o_universe == "Alola Region" or o_universe == "Galar Region":  # Pokemon Resolves
                                        # fortitude or luck is based on health
                                        fortitude = 0.0
                                        low = o_health - (o_health * .75)
                                        high = o_health - (o_health * .66)
                                        fortitude = random.randint(int(low), int(high))
                                        # Resolve Scaling
                                        o_resolve_health = round(fortitude + (.5 * o_resolve))
                                        o_resolve_attack = round((.30 * o_defense) * (o_resolve / (.50 * o_defense)))
                                        o_resolve_defense = round((.30 * o_defense) * (o_resolve / (.50 * o_defense)))

                                        o_stamina = o_stamina + o_resolve
                                        o_health = o_health + o_resolve_health
                                        o_attack = round(o_attack + o_resolve_attack)
                                        o_defense = round(o_defense) * 2
                                        o_used_resolve = True
                                        o_pet_used = False
                                        embedVar = discord.Embed(title=f"{o_card} STRENGTHENED RESOLVE :zap:",
                                                                 description=f"**{o_card} says**\n{o_resolve_description}",
                                                                 colour=0xe91e63)
                                        embedVar.add_field(name=f"Transformation: Evolution",
                                                           value="When you Resolve you do not lose Defense.")
                                        await button_ctx.send(embed=embedVar)
                                        turn_total = turn_total + 1
                                        turn = 1
                                    else:  # Standard Resolve
                                        # fortitude or luck is based on health
                                        fortitude = 0.0
                                        low = o_health - (o_health * .75)
                                        high = o_health - (o_health * .66)
                                        fortitude = random.randint(int(low), int(high))
                                        # Resolve Scaling
                                        o_resolve_health = round(fortitude + (.5 * o_resolve))
                                        o_resolve_attack = round((.30 * o_defense) * (o_resolve / (.50 * o_defense)))
                                        o_resolve_defense = round((.30 * o_defense) * (o_resolve / (.50 * o_defense)))

                                        o_stamina = o_stamina + o_resolve
                                        o_health = o_health + o_resolve_health
                                        o_attack = round(o_attack + o_resolve_attack)
                                        o_defense = round(o_defense - o_resolve_defense)
                                        o_used_resolve = True
                                        o_pet_used = False
                                        if o_universe == "League Of Legends":
                                            t_health = t_health - (30 * (o_focus_count + t_focus_count))
                                            embedVar = discord.Embed(title=f"{o_card.upper()} PENTA KILL!",
                                                                     description=f"**{o_card} says**\n{o_resolve_description}",
                                                                     colour=0xe91e63)
                                            embedVar.add_field(name=f"Nexus Destroyed",
                                                               value=f"**{o_card}** dealt **{(30 * (o_focus_count + t_focus_count))}** damage.")
                                        else:
                                            embedVar = discord.Embed(title=f"{o_card} STRENGTHENED RESOLVE :zap:",
                                                                     description=f"**{o_card} says**\n{o_resolve_description}",
                                                                     colour=0xe91e63)
                                            embedVar.add_field(name=f"Transformation",
                                                               value="All stats & stamina greatly increased")
                                        await button_ctx.send(embed=embedVar)
                                        turn_total = turn_total + 1
                                        turn = 1
                                else:
                                    emessage = m.CANNOT_USE_RESOLVE
                                    embedVar = discord.Embed(title=emessage,
                                                             description=f"Entering `Resolved State` sacrifices a turn to power up even greater and regain `Stamina`!",
                                                             colour=0xe91e63)
                                    await button_ctx.send(embed=embedVar)
                                    turn = 0
                            elif button_ctx.custom_id == "6":
                                # Resolve Check and Calculation
                                if o_used_resolve and o_used_focus and not o_pet_used:
                                    o_enhancer_used = True
                                    dmg = damage_cal(o_universe, o_card, opet_move, o_attack, o_defense, t_defense,
                                                     o_stamina, o_enhancer_used, o_health, t_health, t_stamina,
                                                     o_max_health, t_attack, o_special_move_description, turn_total,
                                                     ocard_lvl_ap_buff)
                                    o_enhancer_used = False
                                    o_pet_used = True
                                    opet_dmg = dmg['DMG']
                                    opet_type = dmg['ENHANCED_TYPE']
                                    if dmg['CAN_USE_MOVE']:
                                        if opet_type == 'ATK':
                                            o_attack = round(o_attack + dmg['DMG'])
                                        elif opet_type == 'DEF':
                                            o_defense = round(o_defense + dmg['DMG'])
                                        elif opet_type == 'STAM':
                                            o_stamina = round(o_stamina + dmg['DMG'])
                                        elif opet_type == 'HLT':
                                            o_health = round(o_health + dmg['DMG'])
                                        elif opet_type == 'LIFE':
                                            o_health = round(o_health + dmg['DMG'])
                                            t_health = round(t_health - dmg['DMG'])
                                        elif opet_type == 'DRAIN':
                                            o_stamina = round(o_stamina + dmg['DMG'])
                                            t_stamina = round(t_stamina - dmg['DMG'])
                                        elif opet_type == 'FLOG':
                                            o_attack = round(o_attack + dmg['DMG'])
                                            t_attack = round(t_attack - dmg['DMG'])
                                        elif opet_type == 'WITHER':
                                            o_defense = round(o_defense + dmg['DMG'])
                                            t_defense = round(t_defense - dmg['DMG'])
                                        elif opet_type == 'RAGE':
                                            o_defense = round(o_defense - dmg['DMG'])
                                            o_attack = round(o_attack + dmg['DMG'])
                                        elif opet_type == 'BRACE':
                                            o_defense = round(o_defense + dmg['DMG'])
                                            o_attack = round(o_attack - dmg['DMG'])
                                        elif opet_type == 'BZRK':
                                            o_health = round(o_health - dmg['DMG'])
                                            o_attack = round(o_attack + dmg['DMG'])
                                        elif opet_type == 'CRYSTAL':
                                            o_health = round(o_health - dmg['DMG'])
                                            o_defense = round(o_defense + dmg['DMG'])
                                        elif opet_type == 'GROWTH':
                                            o_max_health = round(o_max_health - (o_max_health * dmg['DMG']))
                                            o_defense = round(o_defense + (o_defense * dmg['DMG']))
                                            o_attack = round(o_attack + (o_attack * dmg['DMG']))
                                        elif opet_type == 'STANCE':
                                            tempattack = dmg['DMG']
                                            o_attack = o_defense
                                            o_defense = tempattack
                                        elif opet_type == 'CONFUSE':
                                            tempattack = dmg['DMG']
                                            t_attack = t_defense
                                            t_defense = tempattack
                                        elif opet_type == 'BLINK':
                                            o_stamina = round(o_stamina - dmg['DMG'])
                                            t_stamina = round(t_stamina + dmg['DMG'] - 10)
                                        elif opet_type == 'SLOW':
                                            tempstam = round(t_stamina + dmg['DMG'])
                                            o_stamina = round(o_stamina - dmg['DMG'])
                                            t_stamina = o_stamina
                                            o_stamina = tempstam
                                        elif opet_type == 'HASTE':
                                            tempstam = round(t_stamina - dmg['DMG'])
                                            o_stamina = round(o_stamina + dmg['DMG'])
                                            t_stamina = o_stamina
                                            o_stamina = tempstam
                                        elif opet_type == 'SOULCHAIN':
                                            o_stamina = round(dmg['DMG'])
                                            t_stamina = o_stamina
                                        elif opet_type == 'GAMBLE':
                                            o_health = round(dmg['DMG'])
                                            t_health = o_health
                                        elif opet_type == 'FEAR':
                                            o_health = round(o_health - ((dmg['DMG'] / 100) * o_health))
                                            t_attack = round(t_attack - ((dmg['DMG'] / 100) * t_attack))
                                            t_defense = round(t_defense - ((dmg['DMG'] / 100) * t_defense))
                                        elif opet_type == 'WAVE':
                                            t_health = round(t_health - dmg['DMG'])
                                        elif opet_type == 'BLAST':
                                            if dmg['DMG'] >= 100:
                                                dmg['DMG'] = 100
                                            t_health = round(t_health - dmg['DMG'])
                                        elif opet_type == 'CREATION':
                                            o_max_health = round(o_max_health + dmg['DMG'])
                                            o_health = round(o_health + dmg['DMG'])
                                        elif opet_type == 'DESTRUCTION':
                                            t_max_health = round(t_max_health - dmg['DMG'])

                                        o_stamina = o_stamina - int(dmg['STAMINA_USED'])

                                        embedVar = discord.Embed(title=f"{o_card.upper()} Summoned :bird: {opet_name}",
                                                                 colour=0xe91e63)
                                        embedVar.add_field(name=f"{opet_name} used **{opetmove_text}**!",
                                                           value=f"Enhanced **{opet_type}**")
                                        embedVar.set_thumbnail(url=opet_image)
                                        embedVar.set_image(url="attachment://image.png")
                                        await button_ctx.send(embed=embedVar)
                                        turn = 0
                                    else:
                                        await button_ctx.send(f"{opet_name} needs a turn to rest...")
                                        turn = 0
                                else:
                                    await button_ctx.send(f"{opet_name} needs a turn to rest...")
                            elif button_ctx.custom_id == "0":
                                if o_stamina >= 20:
                                    o_stamina = o_stamina - 20
                                    o_block_used = True
                                    o_defense = o_defense * 2
                                    embedVar = discord.Embed(title=f"{o_card} **Defended** 🛡️", colour=0xe91e63)

                                    await button_ctx.send(embed=embedVar)
                                    turn_total = turn_total + 1
                                    turn = 1
                                else:
                                    await button_ctx.send(f"{o_card} is too tired to block...")
                                    turn = 0

                            if button_ctx.custom_id != "5" and button_ctx.custom_id != "6" and button_ctx.custom_id != "0" and button_ctx.custom_id in options:
                                # If you have enough stamina for move, use it

                                if dmg['CAN_USE_MOVE']:
                                    o_pet_used = False
                                    if dmg['ENHANCE']:
                                        enh_type = dmg['ENHANCED_TYPE']

                                        if enh_type == 'ATK':
                                            o_attack = round(o_attack + dmg['DMG'])
                                        elif enh_type == 'DEF':
                                            o_defense = round(o_defense + dmg['DMG'])
                                        elif enh_type == 'STAM':
                                            o_stamina = round(o_stamina + dmg['DMG'])
                                        elif enh_type == 'HLT':
                                            o_health = round(o_health + dmg['DMG'])
                                        elif enh_type == 'LIFE':
                                            o_health = round(o_health + dmg['DMG'])
                                            t_health = round(t_health - dmg['DMG'])
                                        elif enh_type == 'DRAIN':
                                            o_stamina = round(o_stamina + dmg['DMG'])
                                            t_stamina = round(t_stamina - dmg['DMG'])
                                        elif enh_type == 'FLOG':
                                            o_attack = round(o_attack + dmg['DMG'])
                                            t_attack = round(t_attack - dmg['DMG'])
                                        elif enh_type == 'WITHER':
                                            o_defense = round(o_defense + dmg['DMG'])
                                            t_defense = round(t_defense - dmg['DMG'])
                                        elif enh_type == 'RAGE':
                                            o_defense = round(o_defense - dmg['DMG'])
                                            o_attack = round(o_attack + dmg['DMG'])
                                        elif enh_type == 'BRACE':
                                            o_defense = round(o_defense + dmg['DMG'])
                                            o_attack = round(o_attack - dmg['DMG'])
                                        elif enh_type == 'BZRK':
                                            o_health = round(o_health - dmg['DMG'])
                                            o_attack = round(o_attack + dmg['DMG'])
                                        elif enh_type == 'CRYSTAL':
                                            o_health = round(o_health - dmg['DMG'])
                                            o_defense = round(o_defense + dmg['DMG'])
                                        elif enh_type == 'GROWTH':
                                            o_max_health = round(o_max_health - (o_max_health * dmg['DMG']))
                                            o_defense = round(o_defense + (o_defense * dmg['DMG']))
                                            o_attack = round(o_attack + (o_attack * dmg['DMG']))
                                        elif enh_type == 'STANCE':
                                            tempattack = dmg['DMG']
                                            o_attack = o_defense
                                            o_defense = tempattack
                                        elif enh_type == 'CONFUSE':
                                            tempattack = dmg['DMG']
                                            t_attack = t_defense
                                            t_defense = tempattack
                                        elif enh_type == 'BLINK':
                                            o_stamina = round(o_stamina - dmg['DMG'])
                                            t_stamina = round(t_stamina + dmg['DMG'] - 10)
                                        elif enh_type == 'SLOW':
                                            tempstam = round(t_stamina + dmg['DMG'])
                                            o_stamina = round(o_stamina - dmg['DMG'])
                                            t_stamina = o_stamina
                                            o_stamina = tempstam
                                        elif enh_type == 'HASTE':
                                            tempstam = round(t_stamina - dmg['DMG'])
                                            o_stamina = round(o_stamina + dmg['DMG'])
                                            t_stamina = o_stamina
                                            o_stamina = tempstam
                                        elif enh_type == 'SOULCHAIN':
                                            o_stamina = round(dmg['DMG'])
                                            t_stamina = o_stamina
                                        elif enh_type == 'GAMBLE':
                                            o_health = round(dmg['DMG'])
                                            t_health = o_health
                                        elif enh_type == 'FEAR':
                                            o_health = round(o_health - ((dmg['DMG'] / 100) * o_health))
                                            t_attack = round(t_attack - ((dmg['DMG'] / 100) * t_attack))
                                            t_defense = round(t_defense - ((dmg['DMG'] / 100) * t_defense))
                                        elif enh_type == 'WAVE':
                                            t_health = round(t_health - dmg['DMG'])
                                        elif enh_type == 'BLAST':
                                            t_health = round(t_health - dmg['DMG'])
                                        elif enh_type == 'CREATION':
                                            o_max_health = round(o_max_health + dmg['DMG'])
                                            o_health = round(o_health + dmg['DMG'])
                                        elif enh_type == 'DESTRUCTION':
                                            t_max_health = round(t_max_health - dmg['DMG'])

                                        o_stamina = o_stamina - int(dmg['STAMINA_USED'])

                                        embedVar = discord.Embed(title=f"{dmg['MESSAGE']}", colour=embed_color_o)
                                        await button_ctx.send(embed=embedVar)
                                        turn_total = turn_total + 1
                                        turn = 1
                                    elif dmg['DMG'] == 0:
                                            
                                        o_stamina = o_stamina - int(dmg['STAMINA_USED'])

                                        embedVar = discord.Embed(title=f"{dmg['MESSAGE']}", colour=embed_color_o)
                                        if oarm_barrier_active:
                                            oarm_barrier_active=False
                                            embedVar.add_field(name=f"{o_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                        await button_ctx.send(embed=embedVar)
                                        turn_total = turn_total + 1
                                        turn = 1
                                    else:
                                        if t_universe == "Naruto" and t_stamina < 10:
                                            t_health = t_health 
                                            embedVar = discord.Embed(title=f"{t_card.upper()}: Substitution Jutsu", description=f"{o_card} strikes a log", colour=0xe91e63)
                                            if oarm_barrier_active:
                                                oarm_barrier_active=False
                                                embedVar.add_field(name=f"{o_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                            await button_ctx.send(embed=embedVar)
                                        elif tarm_shield_active:
                                            if tshield_value > 0:
                                                tshield_value = tshield_value -dmg['DMG']
                                                t_health = t_health 
                                                if tshield_value <=0:
                                                    embedVar = discord.Embed(title=f"{t_card.upper()}'s' **Shield** Shattered!", description=f"{o_card} breaks the **Shield**!", colour=0xe91e63)
                                                    if oarm_barrier_active:
                                                        oarm_barrier_active=False
                                                        embedVar.add_field(name=f"{o_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                    await button_ctx.send(embed=embedVar)
                                                    tarm_shield_active = False
                                                else:
                                                    embedVar = discord.Embed(title=f"{t_card.upper()} Activates **Shield** 🌐", description=f"{o_card} strikes the **Shield** for **{dmg['DMG']} DMG!**\n **{tshield_value} Shield** Left!", colour=0xe91e63)
                                                    if oarm_barrier_active:
                                                        oarm_barrier_active=False
                                                        embedVar.add_field(name=f"{o_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                    await button_ctx.send(embed=embedVar)

                                        elif tarm_barrier_active:
                                            if tbarrier_count >1:
                                                t_health = t_health 
                                                embedVar = discord.Embed(title=f"{t_card.upper()} Activates **Barrier** 💠", description=f"{o_card}'s attack **Nullified**!\n **{tbarrier_count - 1} Barriers** remain!", colour=0xe91e63)
                                                if oarm_barrier_active:
                                                    oarm_barrier_active=False
                                                    embedVar.add_field(name=f"{o_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                await button_ctx.send(embed=embedVar)
                                                tbarrier_count = tbarrier_count - 1
                                            elif tbarrier_count==1:
                                                embedVar = discord.Embed(title=f"{t_card.upper()}'s **Barrier** Broken!", description=f"{o_card} destroys the **Barrier**", colour=0xe91e63)
                                                tbarrier_count = tbarrier_count - 1
                                                if oarm_barrier_active:
                                                    oarm_barrier_active=False
                                                    embedVar.add_field(name=f"{o_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                await button_ctx.send(embed=embedVar)
                                                tarm_barrier_active = False
                                        elif tarm_parry_active:
                                            if tparry_count > 1:
                                                t_health = t_health
                                                tparry_damage = round(dmg['DMG'] / 2)
                                                t_health = t_health - tparry_damage
                                                o_health = o_health - tparry_damage
                                                tparry_count = tparry_count - 1
                                                embedVar = discord.Embed(title=f"{t_card.upper()} Activates **Parry** 🔄", description=f"{o_card} takes {tparry_damage}! DMG\n **{tparry_count} Parries** to go!!", colour=0xe91e63)
                                                if oarm_barrier_active:
                                                    oarm_barrier_active=False
                                                    embedVar.add_field(name=f"{o_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                await button_ctx.send(embed=embedVar)
                                                
                                            elif tparry_count==1:
                                                embedVar = discord.Embed(title=f"{t_card.upper()} **Parry** Penetrated!!", description=f"{o_card} breaks the **Parry**", colour=0xe91e63)
                                                t_health = t_health
                                                tparry_damage = round(dmg['DMG'] / 2)
                                                t_health = t_health - tparry_damage
                                                o_health = o_health - tparry_damage
                                                tparry_count = tparry_count - 1
                                                if oarm_barrier_active:
                                                    oarm_barrier_active=False
                                                    embedVar.add_field(name=f"{o_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                await button_ctx.send(embed=embedVar)
                                                tarm_parry_active = False
                                        else:
                                            t_health = t_health - dmg['DMG']
                                            embedVar = discord.Embed(title=f"{dmg['MESSAGE']}", colour=embed_color_o)
                                            if oarm_barrier_active:
                                                oarm_barrier_active=False
                                                embedVar.add_field(name=f"{o_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                            await button_ctx.send(embed=embedVar)
                                        if t_health <= 0:
                                            if t_final_stand==True:
                                                embedVar = discord.Embed(title=f"{t_card.upper()}'s LAST STAND", description=f"{t_card} FINDS RESOLVE", colour=0xe91e63)
                                                embedVar.add_field(name=f"{t_card} resolved and continues to fight", value="All stats & stamina increased")
                                                if oarm_barrier_active:
                                                    oarm_barrier_active=False
                                                    embedVar.add_field(name=f"{o_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                await button_ctx.send(embed=embedVar)
                                                t_health = int(.75 * (t_attack + t_defense))
                                                t_attack = t_attack + (.50 * t_attack)
                                                t_defense = t_defense + (.50 * t_defense)
                                                t_used_resolve = True
                                                t_used_focus = True
                                                t_final_stand = False
                                                o_stamina = o_stamina - dmg['STAMINA_USED']
                                                turn_total = turn_total + 1
                                                turn = 1
                                            else:
                                                t_health = 0
                                                o_stamina = o_stamina - dmg['STAMINA_USED']
                                                turn_total = turn_total + 1
                                        else:
                                            o_stamina = o_stamina - dmg['STAMINA_USED']
                                            turn_total = turn_total + 1
                                            turn = 1
                                else:
                                    emessage = m.NOT_ENOUGH_STAMINA
                                    embedVar = discord.Embed(title=emessage,
                                                             description=f"Use abilities to Increase `STAM` or enter `FOCUS STATE`!",
                                                             colour=0xe91e63)
                                    await button_ctx.send(embed=embedVar)
                                    turn = 0
                        except asyncio.TimeoutError:

                            await private_channel.send(f"{ctx.author.mention} {m.STORY_ENDED}")
                            if private_channel.guild:
                                await discord.TextChannel.delete(private_channel, reason=None)
                            return
                # PLayer 2 Turn Start
                elif turn == 1:
                    try:
                        await asyncio.sleep(1)
                        if t_attack <= 25:
                            t_attack = 25
                        if t_defense <= 30:
                            t_defense = 30
                        if t_health >= t_max_health:
                            t_health = t_max_health

                        # o_pet_used = True
                        if t_health <= (t_max_health * .25):
                            embed_color_t = 0xe74c3c
                            if t_chainsaw == True:
                                if t_atk_chainsaw == False:
                                    t_atk_chainsaw = True
                                    t_chainsaw = False
                                    t_defense = t_defense * 2
                                    t_attack = t_attack * 2
                                    embedVar = discord.Embed(title=f"{t_card.upper()}'s Devilization",
                                                             description=f"**{t_card}** Doubles Stats", colour=0xe91e63)
                                    await private_channel.send(embed=embedVar)

                        elif t_health <= (t_max_health * .50):
                            embed_color_t = 0xe67e22
                            if t_chainsaw == True:
                                if t_atk_chainsaw == False:
                                    t_atk_chainsaw = True
                                    t_chainsaw = False
                                    t_defense = t_defense * 2
                                    t_attack = t_attack * 2
                                    embedVar = discord.Embed(title=f"{t_card.upper()}'s Devilization",
                                                             description=f"**{t_card}** Doubles Stats", colour=0xe91e63)
                                    await private_channel.send(embed=embedVar)
                        elif t_health <= (t_max_health * .75):
                            embed_color_t = 0xf1c40f
                        else:
                            embed_color_t = 0x2ecc71

                        # Focus
                        if t_stamina < 10:
                            t_focus_count = t_focus_count + 1
                            # o_pet_used = True
                            fortitude = 0.0
                            low = t_health - (t_health * .90)
                            high = t_health - (t_health * .80)
                            fortitude = random.randint(int(low), int(high))

                            t_stamina = t_focus
                            t_healthcalc = round(((t_focus * .40) + (fortitude * 1)) / 2)
                            t_attackcalc = round(.20 * ((t_focus * .15) + round(fortitude * 1)))
                            t_defensecalc = round(.20 * ((t_focus * .10) + round(fortitude * 1)))
                            t_newhealth = 0
                            healmessage = ""
                            messagenumber = 0
                            if t_universe == "Crown Rift Madness":
                                healmessage = "yet inner **Madness** drags on..."
                                messagenumber = 3
                            else:
                                if t_health <= t_max_health:
                                    t_newhealth = t_health + t_healthcalc
                                    if t_newhealth > t_max_health:
                                        healmessage = f"recovered!"
                                        messagenumber = 1
                                        t_health = t_max_health
                                    else:
                                        healmessage = f"stopped the bleeding..."
                                        messagenumber = 2
                                        t_health = t_newhealth
                                else:
                                    healmessage = f"hasn't been touched..."
                                    messagenumber = 0
                            if not t_used_resolve:
                                t_attack = t_attack + t_attackcalc
                                t_defense = t_defense + t_defensecalc
                            t_used_focus = True

                            embedVar = discord.Embed(title=f"{t_card.upper()} FOCUSED",
                                                     description=f"**{t_card} says**\n{t_focus_description}",
                                                     colour=0xe91e63)
                            embedVar.add_field(name=f"{t_card} focused and {healmessage}",
                                               value="All stats & stamina increased")
                            await private_channel.send(embed=embedVar)
                            if not t_used_resolve and t_used_focus and t_universe == "Digimon":  # Digimon Universal Trait
                                # fortitude or luck is based on health
                                fortitude = 0.0
                                low = t_health - (t_health * .75)
                                high = t_health - (t_health * .66)
                                fortitude = random.randint(int(low), int(high))
                                # Resolve Scaling
                                t_resolve_health = round(fortitude + (.5 * t_resolve))
                                t_resolve_attack = round((.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                t_resolve_defense = round((.30 * t_defense) * (t_resolve / (.50 * t_defense)))

                                t_stamina = t_stamina + t_resolve
                                t_health = t_health + t_resolve_health
                                t_attack = round(t_attack + t_resolve_attack)
                                t_defense = round(t_defense - t_resolve_defense)
                                t_used_resolve = True

                                embedVar = discord.Embed(title=f"{t_card} STRENGTHENED RESOLVE :zap:",
                                                         description=f"**{t_card} says**\n{t_resolve_description}",
                                                         colour=0xe91e63)
                                embedVar.add_field(name=f"Transformation: Digivolve", value="On Focus you Resolve.")
                                await private_channel.send(embed=embedVar)

                            elif t_universe == "League Of Legends":
                                embedVar = discord.Embed(title=f"Turret Shot hits {o_card} for **30** Damage 💥",
                                                         colour=0xe91e63)
                                await private_channel.send(embed=embedVar)
                                o_health = round(o_health - 30)

                            elif t_universe == "Solo Leveling":
                                embedVar = discord.Embed(
                                    title=f"Ruler's Authority... {o_card} loses **{30 + turn_total}** 🛡️ 🔻",
                                    colour=0xe91e63)
                                await private_channel.send(embed=embedVar)
                                o_defense = round(o_defense - (30 + turn_total))

                            elif t_universe == "Attack On Titan":
                                embedVar = discord.Embed(title=f"Rally! **{t_card}** Increased Max Health ❤️",
                                                         colour=0xe91e63)
                                await private_channel.send(embed=embedVar)
                                t_max_health = round(t_max_health + 100)

                            elif t_universe == "Black Clover":
                                embedVar = discord.Embed(title=f"Mana Zone! {t_card} Increased Stamina 🌀",
                                                         colour=0xe91e63)
                                await private_channel.send(embed=embedVar)
                                t_stamina = 100
                                tcard_lvl_ap_buff = tcard_lvl_ap_buff + 30

                            elif t_universe == "Death Note":
                                if turn_total >= 24:
                                    embedVar = discord.Embed(title=f"{o_card.upper()}'s' Scheduled Death 📓 ",
                                                             description=f"**{t_card} says**\n**Delete**",
                                                             colour=0xe91e63)
                                    embedVar.add_field(name=f"{o_card} had a heart attack and died", value=f"Death....")
                                    await private_channel.send(embed=embedVar)
                                    o_health = 0

                            if o_universe == "One Punch Man":
                                embedVar = discord.Embed(title=f"Hero Reinforcements! {o_card} Increased Health!  ❤️",
                                                         colour=0xe91e63)
                                await private_channel.send(embed=embedVar)
                                o_health = round(o_health + 100)
                                o_max_health = round(o_max_health + 100)

                            elif o_universe == "7ds":
                                embedVar = discord.Embed(title=f"Increase Power Level! {o_card} Increased Stamina 🌀",
                                                         colour=0xe91e63)
                                await private_channel.send(embed=embedVar)
                                o_stamina = o_stamina + 60

                            elif o_universe == "Souls":
                                embedVar = discord.Embed(
                                    title=f"Combo Recognition! {o_card} Increased Attack by **{30 + turn_total}** 🔺 ",
                                    colour=0xe91e63)
                                await private_channel.send(embed=embedVar)
                                o_attack = round(o_attack + (30 + turn_total))

                            else:
                                turn_total = turn_total + 1
                                if t_universe != "Crown Rift Madness":
                                    turn = 0
                                else:
                                    turn = 1
                            turn_total = turn_total + 1
                            if t_universe != "Crown Rift Madness":
                                turn = 0
                            else:
                                turn = 1
                        else:
                            tap1 = list(t_1.values())[0] + tcard_lvl_ap_buff
                            tap2 = list(t_2.values())[0] + tcard_lvl_ap_buff
                            tap3 = list(t_3.values())[0] + tcard_lvl_ap_buff
                            tenh1 = list(t_enhancer.values())[0]
                            tenh_name = list(t_enhancer.values())[2]
                            tpet_enh_name = list(tpet_move.values())[2]
                            tpet_msg_on_resolve = ""
                            # UNIVERSE CARD
                            player_2_card = showcard(t, t_max_health, t_health, t_max_stamina, t_stamina,
                                                     t_used_resolve, ttitle, t_used_focus, t_attack, t_defense,
                                                     turn_total, tap1, tap2, tap3, tenh1, tenh_name, tcard_lvl, o_defense)
                            await private_channel.send(file=player_2_card)
                            aiMove = 0

                            if t_used_resolve and not t_pet_used:
                                aiMove = 6
                            elif o_stamina == 0:
                                aiMove = 1
                            elif t_health <= (.50 * t_max_health) and t_used_resolve == False and t_used_focus:
                                aiMove = 5
                            elif t_stamina >= 160 and (t_health >= o_health):
                                aiMove = 3
                            elif t_stamina >= 160:
                                aiMove = 3
                            elif t_stamina >= 150 and (t_health >= o_health):
                                aiMove = 1
                            elif t_stamina >= 150:
                                aiMove = 1
                            elif t_stamina >= 140 and (t_health >= o_health):
                                aiMove = 1
                            elif t_stamina >= 140:
                                aiMove = 3
                            elif t_stamina >= 130 and (t_health >= o_health):
                                aiMove = 1
                            elif t_stamina >= 130:
                                aiMove = 3
                            elif t_stamina >= 120 and (t_health >= o_health):
                                aiMove = 2
                            elif t_stamina >= 120:
                                aiMove = 3
                            elif t_stamina >= 110 and (t_health >= o_health):
                                aiMove = 1
                            elif t_stamina >= 110:
                                aiMove = 2
                            elif t_stamina >= 100 and (t_health >= o_health):
                                aiMove = 4
                            elif t_stamina >= 100:
                                aiMove = 1
                            elif t_stamina >= 90 and (t_health >= o_health):
                                aiMove = 3
                            elif t_stamina >= 90:
                                aiMove = 4
                            elif t_stamina >= 80 and (t_health >= o_health):
                                aiMove = 1
                            elif t_stamina >= 80:
                                aiMove = 3
                            elif t_stamina >= 70 and (t_health >= o_health):
                                aiMove = 4
                            elif t_stamina >= 70:
                                aiMove = 1
                            elif t_stamina >= 60 and (t_health >= o_health):
                                if t_used_resolve == False and t_used_focus:
                                    aiMove = 5
                                elif t_used_focus == False:
                                    aiMove = 2
                                else:
                                    aiMove = 1
                            elif t_stamina >= 60:
                                if t_used_resolve == False and t_used_focus:
                                    aiMove = 5
                                elif t_used_focus == False:
                                    aiMove = 2
                                else:
                                    aiMove = 1
                            elif t_stamina >= 50 and (t_health >= o_health):
                                if t_used_resolve == False and t_used_focus:
                                    aiMove = 5
                                elif t_used_focus == False:
                                    aiMove = 2
                                else:
                                    aiMove = 1
                            elif t_stamina >= 50:
                                if t_used_resolve == False and t_used_focus:
                                    aiMove = 5
                                elif t_used_focus == False:
                                    aiMove = 2
                                else:
                                    aiMove = 1
                            elif t_stamina >= 40 and (t_health >= o_health):
                                aiMove = 1
                            elif t_stamina >= 40:
                                aiMove = 2
                            elif t_stamina >= 30 and (t_health >= o_health):
                                aiMove = 4
                            elif t_stamina >= 30:
                                aiMove = 2
                            elif t_stamina >= 20 and (t_health >= o_health):
                                aiMove = 1
                            elif t_stamina >= 20:
                                aiMove = 4
                            elif t_stamina >= 10:
                                aiMove = 1
                            else:
                                aiMove = 0

                            if int(aiMove) == 0:
                                t_health = 0
                            if int(aiMove) == 1:

                                dmg = damage_cal(t_universe, t_card, t_1, t_attack, t_defense, o_defense, t_stamina,
                                                 t_enhancer_used, t_health, o_health, o_stamina, t_max_health, o_attack,
                                                 t_special_move_description, turn_total, tcard_lvl_ap_buff)
                            elif int(aiMove) == 2:

                                dmg = damage_cal(t_universe, t_card, t_2, t_attack, t_defense, o_defense, t_stamina,
                                                 t_enhancer_used, t_health, o_health, o_stamina, t_max_health, o_attack,
                                                 t_special_move_description, turn_total, tcard_lvl_ap_buff)
                            elif int(aiMove) == 3:

                                dmg = damage_cal(t_universe, t_card, t_3, t_attack, t_defense, o_defense, t_stamina,
                                                 t_enhancer_used, t_health, o_health, o_stamina, t_max_health, o_attack,
                                                 t_special_move_description, turn_total, tcard_lvl_ap_buff)
                                if t_gif != "N/A":
                                    await private_channel.send(f"{t_gif}")
                            elif int(aiMove) == 4:

                                t_enhancer_used = True
                                dmg = damage_cal(t_universe, t_card, t_enhancer, t_attack, t_defense, o_defense,
                                                 t_stamina, t_enhancer_used, t_health, o_health, o_stamina,
                                                 t_max_health, o_attack, t_special_move_description, turn_total,
                                                 tcard_lvl_ap_buff)
                                t_enhancer_used = False
                            elif int(aiMove) == 5:
                                if not t_used_resolve and t_used_focus:
                                    if t_universe == "My Hero Academia":  # My hero TRait
                                        # fortitude or luck is based on health
                                        fortitude = 0.0
                                        low = t_health - (t_health * .75)
                                        high = t_health - (t_health * .66)
                                        fortitude = random.randint(int(low), int(high))
                                        # Resolve Scaling
                                        t_resolve_health = round(fortitude + (.5 * t_resolve))
                                        t_resolve_attack = round((.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                        t_resolve_defense = round((.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                        tcard_lvl_ap_buff = tcard_lvl_ap_buff + 50

                                        t_stamina = t_stamina + t_resolve
                                        t_health = t_health + t_resolve_health
                                        t_attack = round(t_attack + t_resolve_attack)
                                        t_defense = round(t_defense - t_resolve_defense)
                                        t_used_resolve = True
                                        t_pet_used = False

                                        embedVar = discord.Embed(title=f"{t_card.upper()} PLUS ULTRAAA",
                                                                 description=f"**{t_card} says**\n{t_resolve_description}",
                                                                 colour=0xe91e63)
                                        embedVar.add_field(name=f"Transformation: Plus Ultra",
                                                           value="You do not lose a turn after you Resolve.")
                                        await private_channel.send(embed=embedVar)
                                        turn_total = turn_total + 1
                                        turn = 1
                                    elif t_universe == "Attack On Titan":
                                        # fortitude or luck is based on health
                                        fortitude = 0.0
                                        low = t_health - (t_health * .75)
                                        high = t_health - (t_health * .66)
                                        fortitude = random.randint(int(low), int(high))
                                        # Resolve Scaling
                                        t_resolve_health = round(fortitude + (.5 * t_resolve))
                                        t_resolve_attack = round((.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                        t_resolve_defense = round((.30 * t_defense) * (t_resolve / (.50 * t_defense)))

                                        t_stamina = t_stamina + t_resolve
                                        t_health = t_health + t_resolve_health
                                        t_attack = round(t_attack + t_resolve_attack)
                                        t_defense = round(t_defense - t_resolve_defense)
                                        t_used_resolve = True
                                        t_pet_used = False
                                        health_boost = 100 * t_focus_count
                                        t_health = t_health + health_boost
                                        embedVar = discord.Embed(title=f"{t_card.upper()} Titan Mode",
                                                                 description=f"**{t_card} says**\n{t_resolve_description}",
                                                                 colour=0xe91e63)
                                        embedVar.add_field(name=f"Transformation Complete",
                                                           value=f"Health increased by **{health_boost}**!")
                                        await button_ctx.send(embed=embedVar)

                                        turn_total = turn_total + 1
                                        turn = 0

                                    elif t_universe == "Bleach":  # Bleach Trait
                                        # fortitude or luck is based on health
                                        fortitude = 0.0
                                        low = t_health - (t_health * .75)
                                        high = t_health - (t_health * .66)
                                        fortitude = random.randint(int(low), int(high))
                                        # Resolve Scaling
                                        t_resolve_health = round(fortitude + (.5 * t_resolve))
                                        t_resolve_attack = round((.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                        t_resolve_defense = round((.30 * t_defense) * (t_resolve / (.50 * t_defense)))

                                        t_stamina = t_stamina + t_resolve
                                        t_health = t_health + t_resolve_health
                                        t_attack = round((t_attack + (2 * t_resolve_attack)) * 2)
                                        t_defense = round(t_defense - t_resolve_defense)
                                        # if t_defense >= 120:
                                        # t_defense = 120
                                        t_used_resolve = True
                                        t_pet_used = False

                                        embedVar = discord.Embed(title=f"{t_card} STRENGTHENED RESOLVE :zap:",
                                                                 description=f"**{t_card} says**\n{t_resolve_description}",
                                                                 colour=0xe91e63)
                                        embedVar.add_field(name=f"Transformation: Bankai",
                                                           value="Gain double Attack on Resolve.")
                                        await private_channel.send(embed=embedVar)
                                        turn_total = turn_total + 1
                                        turn = 0
                                    elif t_universe == "God Of War":  # God Of War Trait
                                        # fortitude or luck is based on health
                                        fortitude = 0.0
                                        low = t_health - (t_health * .75)
                                        high = t_health - (t_health * .66)
                                        fortitude = random.randint(int(low), int(high))
                                        # Resolve Scaling
                                        t_resolve_health = round(fortitude + (.5 * t_resolve))
                                        t_resolve_attack = round((.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                        t_resolve_defense = round((.30 * t_defense) * (t_resolve / (.50 * t_defense)))

                                        t_stamina = t_stamina + t_resolve
                                        t_health = t_max_health
                                        t_attack = round(t_attack + t_resolve_attack)
                                        t_defense = round(t_defense - t_resolve_defense)
                                        t_used_resolve = True
                                        t_pet_used = False

                                        embedVar = discord.Embed(title=f"{t_card} STRENGTHENED RESOLVE :zap:",
                                                                 description=f"**{t_card} says**\n{t_resolve_description}",
                                                                 colour=0xe91e63)
                                        embedVar.add_field(name=f"Transformation: Ascension",
                                                           value="On Resolve Refill Health.")
                                        await private_channel.send(embed=embedVar)
                                        turn_total = turn_total + 1
                                        turn = 0
                                    elif t_universe == "Fate":  # Fate Trait
                                        # fortitude or luck is based on health
                                        fortitude = 0.0
                                        low = t_health - (t_health * .75)
                                        high = t_health - (t_health * .66)
                                        fortitude = random.randint(int(low), int(high))
                                        # Resolve Scaling
                                        t_resolve_health = round(fortitude + (.5 * t_resolve))
                                        t_resolve_attack = round((.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                        t_resolve_defense = round((.30 * t_defense) * (t_resolve / (.50 * t_defense)))

                                        t_stamina = t_stamina + t_resolve
                                        t_health = t_health + t_resolve_health
                                        t_attack = round(t_attack + t_resolve_attack)
                                        t_defense = round(t_defense - t_resolve_defense)
                                        t_used_resolve = True

                                        dmg = damage_cal(t_universe, t_card, t_3, t_attack, t_defense, o_defense,
                                                         t_stamina, t_enhancer_used, t_health, o_health, o_stamina,
                                                         t_max_health, o_attack, t_special_move_description, turn_total,
                                                         tcard_lvl_ap_buff)
                                        t_pet_used = False
                                        o_health = o_health - int(dmg['DMG'])
                                        embedVar = discord.Embed(
                                            title=f"{t_card} STRENGTHENED RESOLVE :zap:\n\n{dmg['MESSAGE']}",
                                            description=f"**{t_card} says**\n{t_resolve_description}", colour=0xe91e63)
                                        embedVar.add_field(name=f"Transformation: Command Seal",
                                                           value="On Resolve, Strike with Ultimate, then Focus.")
                                        await private_channel.send(embed=embedVar)
                                        # t_stamina = 0
                                        turn_total = turn_total + 1
                                        turn = 0
                                    elif t_universe == "Kanto Region" or t_universe == "Johto Region" or t_universe == "Hoenn Region" or t_universe == "Sinnoh Region" or t_universe == "Kalos Region" or t_universe == "Unova Region" or t_universe == "Alola Region" or t_universe == "Galar Region":  # Pokemon Resolves
                                        # fortitude or luck is based on health
                                        fortitude = 0.0
                                        low = t_health - (t_health * .75)
                                        high = t_health - (t_health * .66)
                                        fortitude = random.randint(int(low), int(high))
                                        # Resolve Scaling
                                        t_resolve_health = round(fortitude + (.5 * t_resolve))
                                        t_resolve_attack = round((.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                        t_resolve_defense = round((.30 * t_defense) * (t_resolve / (.50 * t_defense)))

                                        t_stamina = t_stamina + t_resolve
                                        t_health = t_health + t_resolve_health
                                        t_attack = round(t_attack + t_resolve_attack)
                                        t_defense = round(t_defense) * 2
                                        t_used_resolve = True
                                        t_pet_used = False

                                        embedVar = discord.Embed(title=f"{t_card} STRENGTHENED RESOLVE :zap:",
                                                                 description=f"**{t_card} says**\n{t_resolve_description}",
                                                                 colour=0xe91e63)
                                        embedVar.add_field(name=f"Transformation: Evolution",
                                                           value="When you Resolve you do not lose Defense.")
                                        await private_channel.send(embed=embedVar)
                                        turn_total = turn_total + 1
                                        turn = 0
                                    else:
                                        # fortitude or luck is based on health
                                        fortitude = 0.0
                                        low = t_health - (t_health * .75)
                                        high = t_health - (t_health * .66)
                                        fortitude = random.randint(int(low), int(high))
                                        # Resolve Scaling
                                        t_resolve_health = round(fortitude + (.5 * t_resolve))
                                        t_resolve_attack = round((.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                        t_resolve_defense = round((.30 * t_defense) * (t_resolve / (.50 * t_defense)))

                                        t_stamina = t_stamina + t_resolve
                                        t_health = t_health + t_resolve_health
                                        t_attack = round(t_attack + t_resolve_attack)
                                        t_defense = round(t_defense - t_resolve_defense)
                                        t_used_resolve = True
                                        t_pet_used = False

                                        if t_universe == "League Of Legends":
                                            o_health = o_health - (30 * (o_focus_count + t_focus_count))
                                            embedVar = discord.Embed(title=f"{t_card.upper()} PENTA KILL!",
                                                                     description=f"**{t_card} says**\n{t_resolve_description}",
                                                                     colour=0xe91e63)
                                            embedVar.add_field(name=f"Nexus Destroyed",
                                                               value=f"**{t_card}** dealt **{(30 * (o_focus_count + t_focus_count))}** damage.")
                                        else:
                                            embedVar = discord.Embed(title=f"{t_card} STRENGTHENED RESOLVE :zap:",
                                                                     description=f"**{t_card} says**\n{t_resolve_description}",
                                                                     colour=0xe91e63)
                                            embedVar.add_field(name=f"Transformation",
                                                               value="All stats & stamina greatly increased")
                                        await private_channel.send(embed=embedVar)
                                        turn_total = turn_total + 1
                                        turn = 0
                                else:
                                    await private_channel.send(m.CANNOT_USE_RESOLVE)
                                    turn = 1

                            elif aiMove == 6:
                                # Resolve Check and Calculation
                                if t_used_resolve and t_used_focus and not t_pet_used:
                                    t_enhancer_used = True
                                    dmg = damage_cal(t_universe, t_card, tpet_move, t_attack, t_defense, o_defense,
                                                     t_stamina, t_enhancer_used, t_health, o_health, o_stamina,
                                                     t_max_health, o_attack, t_special_move_description, turn_total,
                                                     tcard_lvl_ap_buff)
                                    t_enhancer_used = False
                                    t_pet_used = True
                                    tpet_dmg = dmg['DMG']
                                    tpet_type = dmg['ENHANCED_TYPE']
                                    if dmg['CAN_USE_MOVE']:
                                        if tpet_type == 'ATK':
                                            t_attack = round(t_attack + dmg['DMG'])
                                        elif tpet_type == 'DEF':
                                            t_defense = round(t_defense + dmg['DMG'])
                                        elif tpet_type == 'STAM':
                                            t_stamina = round(t_stamina + dmg['DMG'])
                                        elif tpet_type == 'HLT':
                                            t_health = round(t_health + dmg['DMG'])
                                        elif tpet_type == 'LIFE':
                                            t_health = round(t_health + dmg['DMG'])
                                            o_health = round(o_health - dmg['DMG'])
                                        elif tpet_type == 'DRAIN':
                                            t_stamina = round(t_stamina + dmg['DMG'])
                                            o_stamina = round(o_stamina - dmg['DMG'])
                                        elif tpet_type == 'FLOG':
                                            t_attack = round(t_attack + dmg['DMG'])
                                            o_attack = round(o_attack - dmg['DMG'])
                                        elif tpet_type == 'WITHER':
                                            t_defense = round(t_defense + dmg['DMG'])
                                            o_defense = round(o_defense - dmg['DMG'])
                                        elif tpet_type == 'RAGE':
                                            t_defense = round(t_defense - dmg['DMG'])
                                            t_attack = round(t_attack + dmg['DMG'])
                                        elif tpet_type == 'BRACE':
                                            t_defense = round(t_defense + dmg['DMG'])
                                            t_attack = round(t_attack - dmg['DMG'])
                                        elif tpet_type == 'BZRK':
                                            t_health = round(t_health - dmg['DMG'])
                                            t_attack = round(t_attack + dmg['DMG'])
                                        elif tpet_type == 'CRYSTAL':
                                            t_health = round(t_health - dmg['DMG'])
                                            t_defense = round(t_defense + dmg['DMG'])
                                        elif tpet_type == 'GROWTH':
                                            t_max_health = round(t_max_health - (t_max_health * dmg['DMG']))
                                            t_defense = round(t_defense + (t_defense * dmg['DMG']))
                                            t_attack = round(t_attack + (t_attack * dmg['DMG']))
                                        elif tpet_type == 'STANCE':
                                            tempattack = dmg['DMG']
                                            t_attack = t_defense
                                            t_defense = tempattack
                                        elif tpet_type == 'CONFUSE':
                                            tempattack = dmg['DMG']
                                            o_attack = o_defense
                                            o_defense = tempattack
                                        elif tpet_type == 'BLINK':
                                            t_stamina = round(t_stamina - dmg['DMG'])
                                            o_stamina = round(o_stamina + dmg['DMG'] - 10)
                                        elif tpet_type == 'SLOW':
                                            tempstam = round(o_stamina + dmg['DMG'])
                                            t_stamina = round(t_stamina - dmg['DMG'])
                                            o_stamina = t_stamina
                                            t_stamina = tempstam
                                        elif tpet_type == 'HASTE':
                                            tempstam = round(o_stamina - dmg['DMG'])
                                            t_stamina = round(t_stamina + dmg['DMG'])
                                            o_stamina = t_stamina
                                            t_stamina = tempstam
                                        elif tpet_type == 'SOULCHAIN':
                                            t_stamina = round(dmg['DMG'])
                                            o_stamina = t_stamina
                                        elif tpet_type == 'GAMBLE':
                                            t_health = round(dmg['DMG'])
                                            o_health = t_health
                                        elif tpet_type == 'FEAR':
                                            t_health = round(t_health - ((dmg['DMG'] / 100) * t_health))
                                            o_attack = round(o_attack - ((dmg['DMG'] / 100) * o_attack))
                                            o_defense = round(o_defense - ((dmg['DMG'] / 100) * o_defense))
                                        elif tpet_type == 'WAVE':
                                            o_health = round(o_health - dmg['DMG'])
                                        elif tpet_type == 'BLAST':
                                            if dmg['DMG'] >= 100:
                                                dmg['DMG'] = 100
                                            o_health = round(o_health - dmg['DMG'])
                                        elif tpet_type == 'CREATION':
                                            t_max_health = round(t_max_health + dmg['DMG'])
                                            t_health = round(t_health + dmg['DMG'])
                                        elif tpet_type == 'DESTRUCTION':
                                            o_max_health = round(o_max_health - dmg['DMG'])
                                        t_stamina = t_stamina - int(dmg['STAMINA_USED'])

                                        embedVar = discord.Embed(title=f"{t_card.upper()} Summoned :bird: {tpet_name}",
                                                                 colour=0xe91e63)
                                        embedVar.add_field(name=f"{tpet_name} used **{tpetmove_text}**!",
                                                           value=f"Enhanced **{tpet_type}**")
                                        embedVar.set_thumbnail(url=tpet_image)
                                        embedVar.set_image(url="attachment://image.png")
                                        await private_channel.send(embed=embedVar)
                                        turn = 1
                                    else:
                                        await private_channel.send(f"{tpet_name} needs a turn to rest...")
                                        turn = 1
                                else:
                                    await private_channel.send(f"{tpet_name} needs a turn to rest...")

                            if int(aiMove) != 5 and int(aiMove) != 6:

                                # If you have enough stamina for move, use it
                                if dmg['CAN_USE_MOVE']:
                                    t_pet_used = False
                                    if dmg['ENHANCE']:
                                        enh_type = dmg['ENHANCED_TYPE']
                                        if enh_type == 'ATK':
                                            t_attack = round(t_attack + dmg['DMG'])
                                        elif enh_type == 'DEF':
                                            t_defense = round(t_defense + dmg['DMG'])
                                        elif enh_type == 'STAM':
                                            t_stamina = round(t_stamina + dmg['DMG'])
                                        elif enh_type == 'HLT':
                                            t_health = round(t_health + dmg['DMG'])
                                        elif enh_type == 'LIFE':
                                            t_health = round(t_health + dmg['DMG'])
                                            o_health = round(o_health - dmg['DMG'])
                                        elif enh_type == 'DRAIN':
                                            t_stamina = round(t_stamina + dmg['DMG'])
                                            o_stamina = round(o_stamina - dmg['DMG'])
                                        elif enh_type == 'FLOG':
                                            t_attack = round(t_attack + dmg['DMG'])
                                            o_attack = round(o_attack - dmg['DMG'])
                                        elif enh_type == 'WITHER':
                                            t_defense = round(t_defense + dmg['DMG'])
                                            o_defense = round(o_defense - dmg['DMG'])
                                        elif enh_type == 'RAGE':
                                            t_defense = round(t_defense - dmg['DMG'])
                                            t_attack = round(t_attack + dmg['DMG'])
                                        elif enh_type == 'BRACE':
                                            t_defense = round(t_defense + dmg['DMG'])
                                            t_attack = round(t_attack - dmg['DMG'])
                                        elif enh_type == 'BZRK':
                                            t_health = round(t_health - dmg['DMG'])
                                            t_attack = round(t_attack + (.75 * dmg['DMG']))
                                        elif enh_type == 'CRYSTAL':
                                            t_health = round(t_health - dmg['DMG'])
                                            t_defense = round(t_defense + dmg['DMG'])
                                        elif enh_type == 'GROWTH':
                                            t_max_health = round(t_max_health - (t_max_health * dmg['DMG']))
                                            t_defense = round(t_defense + (t_defense * dmg['DMG']))
                                            t_attack = round(t_attack + (t_attack * dmg['DMG']))
                                        elif enh_type == 'STANCE':
                                            tempattack = dmg['DMG']
                                            t_attack = t_defense
                                            t_defense = tempattack
                                        elif enh_type == 'CONFUSE':
                                            tempattack = dmg['DMG']
                                            o_attack = o_defense
                                            o_defense = tempattack
                                        elif enh_type == 'BLINK':
                                            t_stamina = round(t_stamina - dmg['DMG'])
                                            o_stamina = round(o_stamina + dmg['DMG'] - 10)
                                        elif enh_type == 'SLOW':
                                            tempstam = round(o_stamina + dmg['DMG'])
                                            t_stamina = round(t_stamina - dmg['DMG'])
                                            o_stamina = t_stamina
                                            t_stamina = tempstam
                                        elif enh_type == 'HASTE':
                                            tempstam = round(o_stamina - dmg['DMG'])
                                            t_stamina = round(t_stamina + dmg['DMG'])
                                            o_stamina = t_stamina
                                            t_stamina = tempstam
                                        elif enh_type == 'SOULCHAIN':
                                            t_stamina = round(dmg['DMG'])
                                            o_stamina = t_stamina
                                        elif enh_type == 'GAMBLE':
                                            t_health = round(dmg['DMG'])
                                            o_health = t_health
                                        elif enh_type == 'FEAR':
                                            t_health = round(t_health - ((dmg['DMG'] / 100) * t_health))
                                            o_attack = round(o_attack - ((dmg['DMG'] / 100) * o_attack))
                                            o_defense = round(o_defense - ((dmg['DMG'] / 100) * o_defense))
                                        elif enh_type == 'WAVE':
                                            o_health = round(o_health - dmg['DMG'])
                                        elif enh_type == 'BLAST':
                                            o_health = round(o_health - dmg['DMG'])
                                        elif enh_type == 'CREATION':
                                            t_max_health = round(t_max_health + dmg['DMG'])
                                            t_health = round(t_health + dmg['DMG'])
                                        elif enh_type == 'DESTRUCTION':
                                            o_max_health = round(o_max_health - dmg['DMG'])
                                        t_stamina = t_stamina - int(dmg['STAMINA_USED'])
                                        embedVar = discord.Embed(title=f"{dmg['MESSAGE']}", colour=embed_color_t)
                                        await private_channel.send(embed=embedVar)
                                        turn_total = turn_total + 1
                                        turn = 0
                                    elif dmg['DMG'] == 0:
                                        t_stamina = t_stamina - int(dmg['STAMINA_USED'])
                                        embedVar = discord.Embed(title=f"{dmg['MESSAGE']}", colour=embed_color_t)
                                        if tarm_barrier_active:
                                            tarm_barrier_active=False
                                            embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                        await private_channel.send(embed=embedVar)
                                        turn_total = turn_total + 1
                                        turn = 0
                                    else:
                                        if o_universe == "Naruto" and o_stamina < 10:
                                            o_health = o_health 
                                            embedVar = discord.Embed(title=f"{o_card.upper()}: Substitution Jutsu", description=f"{t_card} strikes a log", colour=0xe91e63)
                                            if tarm_barrier_active:
                                                tarm_barrier_active=False
                                                embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                            await private_channel.send(embed=embedVar)
                                        elif oarm_shield_active:
                                            if oshield_value > 0:
                                                oshield_value = oshield_value -dmg['DMG']
                                                o_health = o_health 
                                                if oshield_value <=0:
                                                    embedVar = discord.Embed(title=f"{o_card.upper()}'s' **Shield** Shattered!", description=f"{t_card} breaks the **Shield**!", colour=0xe91e63)
                                                    if tarm_barrier_active:
                                                        tarm_barrier_active=False
                                                        embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                    await button_ctx.send(embed=embedVar)
                                                    oarm_shield_active = False
                                                else:
                                                    embedVar = discord.Embed(title=f"{o_card.upper()} Activates **Shield** 🌐", description=f"{t_card} strikes the **Shield** for **{dmg['DMG']} DMG!**\n **{oshield_value} Shield** Left!", colour=0xe91e63)
                                                    if tarm_barrier_active:
                                                        tarm_barrier_active=False
                                                        embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                    await button_ctx.send(embed=embedVar)
                                        elif oarm_barrier_active:
                                            if obarrier_count >1:
                                                o_health = o_health 
                                                embedVar = discord.Embed(title=f"{o_card.upper()} Activates **Barrier** 💠", description=f"{t_card}'s attack **Nullified**!\n {obarrier_count - 1} **Barriers** remain!", colour=0xe91e63)
                                                if tarm_barrier_active:
                                                    tarm_barrier_active=False
                                                    embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                await button_ctx.send(embed=embedVar)
                                                obarrier_count = obarrier_count - 1
                                            elif obarrier_count==1:
                                                embedVar = discord.Embed(title=f"{o_card.upper()}'s **Barrier** Broken!", description=f"{t_card} destroys the **Barrier**", colour=0xe91e63)
                                                obarrier_count = obarrier_count - 1
                                                if tarm_barrier_active:
                                                    tarm_barrier_active=False
                                                    embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                await button_ctx.send(embed=embedVar)
                                                oarm_barrier_active = False
                                        elif oarm_parry_active:
                                            if oparry_count > 1:
                                                oparry_damage = round(dmg['DMG'] / 2)
                                                o_health = o_health - oparry_damage
                                                t_health = t_health - oparry_damage
                                                oparry_count = oparry_count - 1
                                                embedVar = discord.Embed(title=f"{o_card.upper()} Activates **Parry** 🔄", description=f"{t_card} takes {oparry_damage}! DMG\n **{oparry_count} Parries** to go!!", colour=0xe91e63)
                                                if tarm_barrier_active:
                                                    tarm_barrier_active=False
                                                    embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                await button_ctx.send(embed=embedVar)
                                                
                                            elif oparry_count==1:
                                                embedVar = discord.Embed(title=f"{o_card.upper()} **Parry** Penetrated!!", description=f"{t_card} breaks the **Parry**", colour=0xe91e63)
                                                oparry_damage = round(dmg['DMG'] / 2)
                                                o_health = o_health - oparry_damage
                                                t_health = t_health - oparry_damage
                                                oparry_count = oparry_count - 1
                                                if tarm_barrier_active:
                                                    tarm_barrier_active=False
                                                    embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                await button_ctx.send(embed=embedVar)
                                                oarm_parry_active = False
                                        else:
                                            o_health = o_health - int(dmg['DMG'])
                                            embedVar = discord.Embed(title=f"{dmg['MESSAGE']}", colour=embed_color_t)
                                            if tarm_barrier_active:
                                                tarm_barrier_active=False
                                                embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                            await private_channel.send(embed=embedVar)
                                        if o_health <= 0:
                                            if o_final_stand==True:
                                                embedVar = discord.Embed(title=f"{o_card.upper()}'s LAST STAND", description=f"{o_card} FINDS RESOLVE", colour=0xe91e63)
                                                embedVar.add_field(name=f"{o_card} resolved and continues to fight", value="All stats & stamina increased")
                                                if tarm_barrier_active:
                                                    tarm_barrier_active=False
                                                    embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                await private_channel.send(embed=embedVar)
                                                o_health = int(.75 * (o_attack + o_defense))
                                                o_attack = o_attack + (.50 * o_attack)
                                                o_defense = o_defense + (.50 * o_defense)
                                                o_stamina = 100
                                                o_used_resolve = True
                                                o_used_focus = True
                                                o_final_stand = False
                                                t_stamina = t_stamina - int(dmg['STAMINA_USED'])
                                                turn_total = turn_total + 1
                                                turn = 0
                                            else:
                                                o_health = 0
                                                t_stamina = t_stamina - int(dmg['STAMINA_USED'])
                                                turn_total = turn_total + 1
                                        else:
                                            t_stamina = t_stamina - int(dmg['STAMINA_USED'])
                                            turn_total = turn_total + 1
                                            turn = 0

                                else:
                                    await private_channel.send(m.NOT_ENOUGH_STAMINA)
                                    turn = 1
                    except Exception as ex:
                        trace = []
                        tb = ex.__traceback__
                        while tb is not None:
                            trace.append({
                                "filename": tb.tb_frame.f_code.co_filename,
                                "name": tb.tb_frame.f_code.co_name,
                                "lineno": tb.tb_lineno
                            })
                            tb = tb.tb_next
                        print(str({
                            'type': type(ex).__name__,
                            'message': str(ex),
                            'trace': trace
                        }))
                        return
            # End the match
            if o_health <= 0 or o_max_health <= 0:
                # await private_channel.send(f":zap: {user2.mention} you win the match!")
                wintime = time.asctime()
                h_playtime = int(wintime[11:13])
                m_playtime = int(wintime[14:16])
                s_playtime = int(wintime[17:19])
                gameClock = getTime(int(h_gametime), int(m_gametime), int(s_gametime), h_playtime, m_playtime,
                                    s_playtime)
                if o_user['RIFT'] == 1:
                    response = db.updateUserNoFilter({'DISNAME': str(o_user['DISNAME'])}, {'$set': {'RIFT': 0}})

                embedVar = discord.Embed(title=f":zap: **{t_card}** wins the match!",
                                         description=f"The game lasted {turn_total} rounds.\n**{t_card} says**\n`{t_win_description}`",
                                         colour=0x1abc9c)
                embedVar.set_author(name=f"{o_card} lost!")
                if int(gameClock[0]) == 0 and int(gameClock[1]) == 0:
                    embedVar.set_footer(text=f"Battle Time: {gameClock[2]} Seconds.")
                elif int(gameClock[0]) == 0:
                    embedVar.set_footer(text=f"Battle Time: {gameClock[1]} Minutes and {gameClock[2]} Seconds.")
                else:
                    embedVar.set_footer(
                        text=f"Battle Time: {gameClock[0]} Hours {gameClock[1]} Minutes and {gameClock[2]} Seconds.")
                await private_channel.send(embed=embedVar)

                emojis = ['👍', '👎']
                accept = await private_channel.send(f"{ctx.author.mention} would you like to play again?")
                for emoji in emojis:
                    await accept.add_reaction(emoji)

                def check(reaction, user):
                    return user == user1 and (str(reaction.emoji) == '👍') or (str(reaction.emoji) == '👎')

                try:
                    reaction, user = await self.bot.wait_for('reaction_add', timeout=45.0, check=check)

                    if str(reaction.emoji) == '👎':
                        continued = False

                        if private_channel.guild:
                            await discord.TextChannel.delete(private_channel, reason=None)
                        return

                    currentopponent = 0
                    continued = True
                except asyncio.TimeoutError:
                    continued = False

                    if private_channel.guild:
                        await discord.TextChannel.delete(private_channel, reason=None)

            elif t_health <= 0 or t_max_health <= 0:

                uid = o_DID
                ouser = await self.bot.fetch_user(uid)
                wintime = time.asctime()
                h_playtime = int(wintime[11:13])
                m_playtime = int(wintime[14:16])
                s_playtime = int(wintime[17:19])
                gameClock = getTime(int(h_gametime), int(m_gametime), int(s_gametime), h_playtime, m_playtime,
                                    s_playtime)

                if currentopponent != (total_legends):
                    embedVar = discord.Embed(title=f"VICTORY\n**{o_card} says**\n{o_win_description}",
                                             description=f"The game lasted {turn_total} rounds.", colour=0xe91e63)
                    embedVar.set_author(name=f"{t_card} lost!")
                    await private_channel.send(embed=embedVar)

                    currentopponent = currentopponent + 1
                    continued = True

                if currentopponent == (total_legends):
                    await bless(1000, ctx.author)
                    await ctx.author.send(f"Abyss Floor {floor} Completed! You have been awarded :coin:1000!")
                    new_level = floor + 1
                    response = db.updateUserNoFilter({'DISNAME': str(ctx.author)}, {'$set': {'LEVEL': new_level}})
                    continued = False

                    if private_channel.guild:
                        await discord.TextChannel.delete(private_channel, reason=None)

    @cog_ext.cog_slash(description="PVP Battle", guild_ids=main.guild_ids)
    async def battle(self, ctx: SlashContext, player: User):
        await ctx.defer()
        private_channel = ctx
        starttime = time.asctime()
        h_gametime = starttime[11:13]
        m_gametime = starttime[14:16]
        s_gametime = starttime[17:19]

        # Tutorial Code
        tutorialbot = '837538366509154407'
        legendbot = '845672426113466395'
        opponent = db.queryUser({'DISNAME': str(player)})
        oppDID = opponent['DID']
        tutorial = False
        if oppDID == tutorialbot or oppDID == legendbot:
            tutorial = True
        mode = "PVP"

        battle_buttons = [
            manage_components.create_button(
                style=ButtonStyle.blue,
                label="Yes",
                custom_id="Yes"
            ),
            manage_components.create_button(
                style=ButtonStyle.red,
                label="No",
                custom_id="No"
            )
        ]
        battle_buttons_action_row = manage_components.create_actionrow(*battle_buttons)
        if tutorial:
            await ctx.send(f"{ctx.author.mention}, Ready for Tutorial?", components=[battle_buttons_action_row])
        else:
            await ctx.send(f"{player.mention}, Ready to fight?", components=[battle_buttons_action_row])

        def check(button_ctx):
            if tutorial:
                return button_ctx.author == ctx.author
            else:
                return button_ctx.author == player

        try:
            button_ctx: ComponentContext = await manage_components.wait_for_component(self.bot, components=[
                battle_buttons_action_row], timeout=45, check=check)

            if button_ctx.custom_id == "No":
                await button_ctx.send("Battle Declined. ")
                return

            if button_ctx.custom_id == "Yes":
                await button_ctx.send("Battle starting...")
                # Get Session Owner Disname for scoring
                sowner = db.queryUser({'DISNAME': str(ctx.author)})
                opponent = db.queryUser({'DISNAME': str(player)})
                oteam = sowner['TEAM']
                oguild = sowner['GUILD']
                tteam = opponent['TEAM']
                tguild = opponent['GUILD']

                o = db.queryCard({'NAME': sowner['CARD']})
                otitle = db.queryTitle({'TITLE': sowner['TITLE']})

                t = db.queryCard({'NAME': opponent['CARD']})
                ttitle = db.queryTitle({'TITLE': opponent['TITLE']})

                # universe = "Naruto"
                # selected_universe = {"TITLE": "Naruto"}
                await battle_commands(self, ctx, mode, None, None, None, oguild, None, None, private_channel, sowner,
                                      oteam, None, opponent, tteam, tguild, None, None, None)
        except Exception as ex:
            trace = []
            tb = ex.__traceback__
            while tb is not None:
                trace.append({
                    "filename": tb.tb_frame.f_code.co_filename,
                    "name": tb.tb_frame.f_code.co_name,
                    "lineno": tb.tb_lineno
                })
                tb = tb.tb_next
            print(str({
                'PLAYER': str(ctx.author),
                'type': type(ex).__name__,
                'message': str(ex),
                'trace': trace
            }))
            return

    @cog_ext.cog_slash(description="Start a Guild Raid", guild_ids=main.guild_ids)
    async def raid(self, ctx: SlashContext, guild: str):
        try:
            guildname = guild
            private_channel = ctx
            if isinstance(private_channel.channel, discord.channel.DMChannel):
                await private_channel.send(m.SERVER_FUNCTION_ONLY)
                return
            starttime = time.asctime()
            h_gametime = starttime[11:13]
            m_gametime = starttime[14:16]
            s_gametime = starttime[17:19]

            # Get Session Owner Disname for scoring
            sowner = db.queryUser({'DISNAME': str(ctx.author)})
            oteam = sowner['TEAM']
            oteam_info = db.queryTeam({'TNAME': oteam})
            shield_test_active = False
            if oteam_info:
                oguild_name = oteam_info['GUILD']
                oguild = db.queryGuildAlt({'GNAME': oguild_name})
            player_guild = sowner['GUILD']

            if oguild_name == "PCG":
                await ctx.send(m.NO_GUILD, delete_after=5)
                return
            if player_guild == guildname:
                shield_test_active = True
                await ctx.send("Guild Shield Defense Test", delete_after=5)

            guild_query = {'GNAME': guildname}
            guild_info = db.queryGuildAlt(guild_query)
            guild_shield = ""

            if not guild_info:
                await ctx.send(m.GUILD_DOESNT_EXIST, delete_after=5)
                return
            guild_shield = guild_info['SHIELD']
            guild_hall = guild_info['HALL']
            hall_info = db.queryHall({'HALL': str(guild_hall)})
            hall_def = hall_info['DEFENSE']
            t_user = db.queryUser({'DISNAME': guild_shield})
            tteam_name = t_user['TEAM']
            tteam_info = db.queryTeam({'TNAME': tteam_name})
            tteam = tteam_info['TNAME']
            tguild = tteam_info['GUILD']
            tteam_info = db.queryTeam({'TNAME': tteam})
            if tteam_info:
                tguild = tteam_info['GUILD']
            tarm = db.queryArm({'ARM': t_user['ARM']})
            ttitle = db.queryTitle({'TITLE': t_user['TITLE']})

            # Guild Fees
            title_match_active = False
            fee = hall_info['FEE']
            if oguild_name == tguild:
                title_match_active = True

            o = db.queryCard({'NAME': sowner['CARD']})
            otitle = db.queryTitle({'TITLE': sowner['TITLE']})

            t = db.queryCard({'NAME': t_user['CARD']})

            ####################################################################
            # PLayer Data

            # Player 1 Data
            o_user = sowner
            oarm = db.queryArm({'ARM': o_user['ARM']})
            oarm_universe = oarm['UNIVERSE']
            oarm_passive = oarm['ABILITIES'][0]
            oarm_name = oarm['ARM']

            vault = db.queryVault({'OWNER': str(ctx.author), 'PETS.NAME': o_user['PET']})

            balance = vault['BALANCE']

            if fee >= balance:
                await ctx.send(f"{tguild} requires a payment of {fee} to battle the Shield.")
                return

            opet = {}
            for pet in vault['PETS']:
                if o_user['PET'] == pet['NAME']:
                    opet = pet

            opet_passive_type = opet['TYPE']
            opet_name = opet['NAME']
            opet_image = opet['PATH']
            opet_exp = opet['EXP']
            opet_lvl = opet['LVL']
            opet_bond = opet['BOND']

            o_DID = o_user['DID']
            o_card = o['NAME']

            ocard_lvl = 0
            ocard_tier = 0
            ocard_exp = 0
            ocard_lvl_attack_buff = 0
            ocard_lvl_defense_buff = 0
            ocard_lvl_ap_buff = 0
            ocard_lvl_hlt_buff = 0

            for x in vault['CARD_LEVELS']:
                if x['CARD'] == o_card:
                    ocard_lvl = x['LVL']
                    ocard_tier = x['TIER']
                    ocard_exp = x['EXP']
                    ocard_lvl_ap_buff = x['AP']
                    ocard_lvl_attack_buff = x['ATK']
                    ocard_lvl_defense_buff = x['DEF']
                    ocard_lvl_hlt_buff = x['HLT']

            o_gif = o['GIF']
            o_destiny = o['HAS_COLLECTION']
            o_card_path = o['PATH']
            o_rcard_path = o['RPATH']
            o_health = o['HLT'] + ocard_lvl_hlt_buff
            o_max_health = o['HLT'] + ocard_lvl_hlt_buff
            o_max_health = o_health
            o_stamina = o['STAM']
            o_max_stamina = o['STAM']
            o_moveset = o['MOVESET']
            o_attack = o['ATK'] + ocard_lvl_attack_buff
            o_defense = o['DEF'] + ocard_lvl_defense_buff
            o_type = o['TYPE']
            o_accuracy = o['TIER']
            o_passive = o['PASS'][0]
            o_speed = o['SPD']
            o_universe = o['UNIVERSE']
            o_title_universe = otitle['UNIVERSE']
            o_title_passive = otitle['ABILITIES'][0]

            user1 = await self.bot.fetch_user(o_DID)
            o_title_passive_bool = False
            o_descriptions = []
            if o['DESCRIPTIONS']:
                o_descriptions = o['DESCRIPTIONS']
                o_greeting_description = o_descriptions[0]
                o_focus_description = o_descriptions[1]
                o_resolve_description = o_descriptions[2]
                o_special_move_description = o_descriptions[3]
                o_win_description = o_descriptions[4]
                o_lose_description = o_descriptions[5]
            else:
                o_greeting_description = "Are you ready to battle!"
                o_focus_description = "I still have more in the tank!"
                o_resolve_description = "Power up!"
                o_special_move_description = "Take this!"
                o_win_description = "Too easy. Come back when you're truly prepared."
                o_lose_description = "I can't believe I lost..."

            # Player 2 Data

            tarm_universe = tarm['UNIVERSE']
            tarm_passive = tarm['ABILITIES'][0]
            tarm_name = tarm['ARM']
            tvault = db.queryVault({'OWNER': str(t_user['DISNAME'])})

            tpet = {}
            for pet in tvault['PETS']:
                if t_user['PET'] == pet['NAME']:
                    tpet = pet

            tpet_passive_type = tpet['TYPE']
            tpet_name = tpet['NAME']
            tpet_image = tpet['PATH']
            tpet_exp = tpet['EXP']
            tpet_lvl = tpet['LVL']
            tpet_bond = tpet['BOND']

            t_DID = t_user['DID']
            t_card = t['NAME']
            tcard_lvl = 0
            tcard_tier = 0
            tcard_exp = 0
            tcard_lvl_attack_buff = 0
            tcard_lvl_defense_buff = 0
            tcard_lvl_ap_buff = 0
            tcard_lvl_hlt_buff = 0

            for x in vault['CARD_LEVELS']:
                if x['CARD'] == t_card:
                    tcard_lvl = x['LVL']
                    tcard_tier = x['TIER']
                    tcard_exp = x['EXP']
                    tcard_lvl_ap_buff = x['AP']
                    tcard_lvl_attack_buff = x['ATK']
                    tcard_lvl_defense_buff = x['DEF']
                    tcard_lvl_hlt_buff = x['HLT']

            t_gif = t['GIF']
            t_destiny = t['HAS_COLLECTION']
            t_card_path = t['PATH']
            t_rcard_path = t['RPATH']

            t_health = t['HLT'] + tcard_lvl_hlt_buff
            t_max_health = t_health
            t_stamina = t['STAM']
            t_max_stamina = t['STAM']
            t_moveset = t['MOVESET']
            t_attack = t['ATK'] + tcard_lvl_attack_buff
            t_defense = t['DEF'] * hall_def + tcard_lvl_defense_buff
            t_type = t['TYPE']
            t_accuracy = t['TIER']
            t_passive = t['PASS'][0]
            t_speed = t['SPD']
            t_universe = t['UNIVERSE']
            t_title_universe = ttitle['UNIVERSE']
            t_title_passive = ttitle['ABILITIES'][0]

            user2 = await self.bot.fetch_user(t_DID)
            t_title_passive_bool = False
            t_descriptions = []
            if t['DESCRIPTIONS']:
                t_descriptions = t['DESCRIPTIONS']
                t_greeting_description = t_descriptions[0]
                t_focus_description = t_descriptions[1]
                t_resolve_description = t_descriptions[2]
                t_special_move_description = t_descriptions[3]
                t_win_description = t_descriptions[4]
                t_lose_description = t_descriptions[5]
            else:
                t_greeting_description = "Are you ready to battle!"
                t_focus_description = "I still have more in the tank!"
                t_resolve_description = "Power up!"
                t_special_move_description = "Take this!"
                t_win_description = "Too easy. Come back when you're truly prepared."
                t_lose_description = "I can't believe I lost..."

            if t['UNIVERSE'] == "Demon Slayer" and o_max_health >= t['HLT']:  # Demon Slayer Universal Trait
                t_max_health = o_max_health
                t_health = o_max_health
            else:
                t_max_health = t['HLT'] + tcard_lvl_hlt_buff

            if o['UNIVERSE'] == "Demon Slayer" and t['HLT'] >= o['HLT']:  # Demon Slayer Universal Trait
                o_max_health = t['HLT']
                o_health = t['HLT']
            else:
                o_max_health = o['HLT'] + ocard_lvl_hlt_buff

            # DBZ traits
            o_final_stand = False
            t_final_stand = False
            if o['UNIVERSE'] == "Dragon Ball Z":
                o_final_stand = True
            if t['UNIVERSE'] == "Dragon Ball Z":
                t_final_stand = True
                ################################################################################

            if (oarm_universe == o_universe) and (o_title_universe == o_universe):
                o_attack = o_attack + 20
                o_defense = o_defense + 20
                o_max_health = o_max_health + 100
                o_health = o_health + 100
                if o_destiny:
                    o_attack = o_attack + 5
                    o_defense = o_defense + 5
                    o_max_health = o_max_health + 50
                    o_health = o_health + 50

            if (tarm_universe == t_universe) and (t_title_universe == t_universe):
                t_attack = t_attack + 20
                t_defense = t_defense + 20
                t_max_health = t_max_health + 100
                t_health = t_health + 100
                if t_destiny:
                    t_attack = t_attack + 5
                    t_defense = t_defense + 5
                    t_max_health = t_max_health + 50
                    t_health = t_health + 50

            # Player 1 Passive Config
            if (o_universe == o_title_universe) or (o_title_universe == "Unbound"):
                o_title_passive_bool = True

            # Player 1 Focus & Resolve
            o_focus_count = 0
            o_focus = 90
            o_used_focus = False
            o_resolve = 60
            o_used_resolve = False

            # Player 1 Moves
            o_1 = o_moveset[0]
            o_2 = o_moveset[1]
            o_3 = o_moveset[2]
            o_enhancer = o_moveset[3]
            o_enhancer_used = False
            o_pet_used = False
            o_block_used = False
            o_defend_used = False
            o_chainsaw = False
            o_def_chainsaw = False
            o_atk_chainsaw = False
            if o_universe == "Chainsawman":
                o_chainsaw = True

            omove1_text = list(o_1.keys())[0]
            omove2_text = list(o_2.keys())[0]
            omove3_text = list(o_3.keys())[0]
            omove_enhanced_text = list(o_enhancer.keys())[0]

            # Player 1 Card Passive
            o_card_passive_type = list(o_passive.values())[1]
            o_card_passive = list(o_passive.values())[0]

            # Pet
            opetmove_text = list(opet.keys())[3]  # Name of the ability
            opetmove_ap = (opet_bond * opet_lvl) + list(opet.values())[3]  # Ability Power

            opet_move = {str(opetmove_text): int(opetmove_ap), 'STAM': 15, 'TYPE': str(opet_passive_type)}

            # player 1 card passive
            if o_card_passive_type == 'ATK':
                o_attack = o_attack + int(o_card_passive)
            elif o_card_passive_type == 'DEF':
                o_defense = o_defense + int(o_card_passive)
            elif o_card_passive_type == 'STAM':
                o_stamina = o_stamina + int(o_card_passive)
            elif o_card_passive_type == 'HLT':
                o_max_health = o_max_health + int(o_card_passive)
                o_health = o_health + int(o_card_passive)
            elif o_card_passive_type == 'LIFE':
                o_max_health = o_max_health + int((o_card_passive / 100) * t_health)
            elif o_card_passive_type == 'DRAIN':
                o_stamina = o_stamina + int(o_card_passive)
                t_stamina = t_stamina - int(o_card_passive)
            elif o_card_passive_type == 'FLOG':
                o_attack = o_attack + int((o_card_passive / 100) * t_attack)
                t_attack = t_attack - int((o_card_passive / 100) * t_attack)
            elif o_card_passive_type == 'WITHER':
                o_defense = o_defense + int((o_card_passive / 100) * t_defense)
                t_defense = t_defense - int((o_card_passive / 100) * t_defense)
            elif o_card_passive_type == 'RAGE':
                o_attack = o_attack + int(((o_card_passive / 100) * o_defense))
                o_defense = o_defense - int(((o_card_passive / 100) * o_attack))
            elif o_card_passive_type == 'BRACE':
                o_defense = o_defense + int(((o_card_passive / 100) * o_attack))
                o_attack = o_attack - int(((o_card_passive / 100) * o_defense))
            elif o_card_passive_type == 'BZRK':
                o_attack = o_attack + int(((o_card_passive / 100) * o_health))
                o_health = o_health - int((o_attack))
            elif o_card_passive_type == 'CRYSTAL':
                o_defense = o_defense + int(((o_card_passive / 100) * o_health))
                o_health = o_health - int((o_attack))
            elif o_card_passive_type == 'GROWTH':
                o_attack = o_attack + int(((o_card_passive / 100) * o_attack))
                o_defense = o_defense + int(((o_card_passive / 100) * o_defense))
                o_max_health = o_max_health - int(((o_card_passive / 100) * o_max_health))
                o_health = o_health - int(((o_card_passive / 100) * o_max_health))
            elif o_card_passive_type == 'STANCE':
                tempattack = o_attack + o_card_passive
                o_attack = o_defense + o_card_passive
                o_defense = tempattack
            elif o_card_passive_type == 'CONFUSE':
                tempattack = t_attack - o_card_passive
                t_attack = t_defense - o_card_passive
                t_defense = tempattack
            elif o_card_passive_type == 'BLINK':
                o_stamina = o_stamina - o_card_passive
                t_stamina = t_stamina + o_card_passive - 10
            elif o_card_passive_type == 'SLOW':
                tempstam = t_stamina + o_card_passive
                o_stamina = o_stamina - (2 * o_card_passive)
                t_stamina = o_stamina
                o_stamina = tempstam
            elif o_card_passive_type == 'HASTE':
                tempstam = t_stamina - o_card_passive
                o_stamina = o_stamina + (2 * o_card_passive)
                t_stamina = o_stamina
                o_stamina = tempstam
            elif o_card_passive_type == 'SOULCHAIN':
                o_stamina = o_card_passive
                t_stamina = o_card_passive
            elif o_card_passive_type == 'FEAR':
                o_health = o_health - int((o_card_passive / 100) * o_health)
                t_attack = t_attack - int((o_card_passive / 100) * t_attack)
                t_defense = t_defense - int((o_card_passive / 100) * t_defense)
            elif o_card_passive_type == 'GAMBLE':
                o_health = o_card_passive
                t_health = o_card_passive

                # Player 1 Title Passive
            o_title_passive_type = list(o_title_passive.keys())[0]
            o_title_passive_value = list(o_title_passive.values())[0]

            if o_title_passive_bool:
                if o_title_passive_type == 'ATK':
                    o_attack = o_attack + int(o_title_passive_value)
                elif o_title_passive_type == 'DEF':
                    o_defense = o_defense + int(o_title_passive_value)
                elif o_title_passive_type == 'STAM':
                    o_stamina = o_stamina + int(o_title_passive_value)
                elif o_title_passive_type == 'HLT':
                    o_max_health = o_max_health + int(o_title_passive_value)
                    o_health = o_health + int(o_title_passive_value)
                elif o_title_passive_type == 'LIFE':
                    _max_health = o_max_health + int((o_title_passive_value / 100) * t_health)
                elif o_title_passive_type == 'DRAIN':
                    t_stamina = t_stamina - int(o_title_passive_value)
                    o_stamina = o_stamina + int(o_title_passive_value)
                elif o_title_passive_type == 'FLOG':
                    o_attack = o_attack + int((o_title_passive_value / 100) * t_attack)
                    t_attack = t_attack - int((o_title_passive_value / 100) * t_attack)
                elif o_title_passive_type == 'WITHER':
                    o_defense = o_defense + int((o_title_passive_value / 100) * t_defense)
                    t_defense = t_defense - int((o_title_passive_value / 100) * t_defense)
                elif o_title_passive_type == 'RAGE':
                    o_attack = o_attack + int(((o_title_passive_value / 100) * o_defense))
                    o_defense = o_defense - int(((o_title_passive_value / 100) * o_attack))
                elif o_title_passive_type == 'BRACE':
                    o_defense = o_defense + int(((o_title_passive_value / 100) * o_attack))
                    o_attack = o_attack - int(((o_title_passive_value / 100) * o_defense))
                elif o_title_passive_type == 'BZRK':
                    o_attack = o_attack + int(((o_title_passive_value / 100) * o_health))
                    o_health = o_health - int((o_attack))
                elif o_title_passive_type == 'CRYSTAL':
                    o_defense = o_defense + int(((o_title_passive_value / 100) * o_health))
                    o_health = o_health - int((o_defense))
                elif o_title_passive_type == 'GROWTH':
                    o_attack = o_attack + int((o_title_passive_value / 100) * o_attack)
                    o_defense = o_defense + int((o_title_passive_value / 100) * o_defense)
                    o_max_health = o_max_health - int((o_title_passive_value / 100) * o_max_health)
                elif o_title_passive_type == 'STANCE':
                    tempattack = o_attack
                    o_attack = o_defense
                    o_defense = tempattack
                elif o_title_passive_type == 'CONFUSE':
                    tempattack = t_attack
                    t_attack = t_defense
                    t_defense = tempattack
                elif o_title_passive_type == 'BLINK':
                    o_stamina = o_stamina - o_title_passive_value
                    t_stamina = t_stamina + o_title_passive_value
                elif o_title_passive_type == 'SLOW':
                    tempstam = t_stamina + o_title_passive_value
                    o_stamina = o_stamina - o_title_passive_value
                    t_stamina = o_stamina
                    o_stamina = tempstam
                elif o_title_passive_type == 'HASTE':
                    tempstam = t_stamina - o_title_passive_value
                    o_stamina = o_stamina + o_title_passive_value
                    t_stamina = o_stamina
                    o_stamina = tempstam
                elif o_title_passive_type == 'SOULCHAIN':
                    o_stamina = o_title_passive_value
                    t_stamina = o_title_passive_value
                elif o_title_passive_type == 'FEAR':
                    o_health = o_health - int((o_title_passive_value / 100) * o_health)
                    t_attack = t_attack - int((o_title_passive_value / 100) * t_attack)
                    t_defense = t_defense - int((o_title_passive_value / 100) * t_defense)
                elif o_title_passive_type == 'GAMBLE':
                    t_health = o_title_passive_value
                    o_health = o_title_passive_value

            # Arm Passive Player 1
            oarm_passive_type = list(oarm_passive.keys())[0]
            oarm_passive_value = list(oarm_passive.values())[0]
            oarm_shield_active = False
            oshield_value = 0
            oarm_barrier_active = False
            obarrier_count = 0
            oarm_parry_active = False
            oparry_count = 0
            if oarm_passive_type == 'BASIC':
                o_1[omove1_text] = o_1[omove1_text] + oarm_passive_value
            elif oarm_passive_type == 'SPECIAL':
                o_2[omove2_text] = o_2[omove2_text] + oarm_passive_value
            elif oarm_passive_type == 'ULTIMATE':
                o_3[omove3_text] = o_3[omove3_text] + oarm_passive_value
            elif oarm_passive_type == 'ULTIMAX':
                o_1[omove1_text] = o_1[omove1_text] + oarm_passive_value
                o_2[omove2_text] = o_2[omove2_text] + oarm_passive_value
                o_3[omove3_text] = o_3[omove3_text] + oarm_passive_value
            elif oarm_passive_type == 'MANA':
                o_enhancer[omove_enhanced_text] = round(o_enhancer[omove_enhanced_text] + (o_enhancer[omove_enhanced_text] * (oarm_passive_value / 100)))
            elif oarm_passive_type == 'SHIELD':
                oarm_shield_active = True
                oshield_value = oarm_passive_value
            elif oarm_passive_type == 'BARRIER':
                oarm_barrier_active = True
                obarrier_count = oarm_passive_value
            elif oarm_passive_type == 'PARRY':
                oarm_parry_active = True
                oparry_count = oarm_passive_value

            # Player 2 Moves
            t_1 = t_moveset[0]
            t_2 = t_moveset[1]
            t_3 = t_moveset[2]
            t_enhancer = t_moveset[3]
            t_enhancer_used = False
            t_pet_used = False

            # Player 1 Focus & Resolve
            t_focus_count = 0
            t_focus = 90
            t_used_focus = False
            t_resolve = 60
            t_used_resolve = False
            t_block_used = False
            t_defend_used = False
            t_chainsaw = False
            t_def_chainsaw = False
            t_atk_chainsaw = False
            if t_universe == "Chainsawman":
                t_chainsaw = True

            tmove1_text = list(t_1.keys())[0]
            tmove2_text = list(t_2.keys())[0]
            tmove3_text = list(t_3.keys())[0]
            tmove_enhanced_text = list(t_enhancer.keys())[0]
            
            # Player 2 Passive Config
            if (t_universe == t_title_universe) or (t_title_universe == "Unbound"):
                t_title_passive_bool = True

            # Player 2 Card Passive
            t_card_passive_type = list(t_passive.values())[1]
            t_card_passive = list(t_passive.values())[0]

            # TPet
            tpetmove_text = list(tpet.keys())[3]  # Name of the ability
            tpetmove_ap = (tpet_bond * tpet_lvl) + list(tpet.values())[3]  # Ability Power
            # tpetmove_type= list(tpet.values())[4]

            tpet_move = {str(tpetmove_text): int(tpetmove_ap), 'STAM': 15, 'TYPE': str(tpet_passive_type)}

            if t_card_passive_type == 'ATK':
                t_attack = t_attack + int(t_card_passive)
            elif t_card_passive_type == 'DEF':
                t_defense = t_defense + int(t_card_passive)
            elif t_card_passive_type == 'STAM':
                t_stamina = t_stamina + int(t_card_passive)
            elif t_card_passive_type == 'HLT':
                t_max_health = t_max_health + int(t_card_passive)
                t_health = t_health + int(t_card_passive)
            elif t_card_passive_type == 'LIFE':
                t_max_health = t_max_health + int((t_card_passive / 100) * o_health)
            elif t_card_passive_type == 'DRAIN':
                o_stamina = o_stamina - int(t_card_passive)
                t_stamina = t_stamina + int(t_card_passive)
            elif t_card_passive_type == 'FLOG':
                t_attack = t_attack + int((t_card_passive / 100) * o_attack)
                o_attack = o_attack - int((t_card_passive / 100) * o_attack)
            elif t_card_passive_type == 'WITHER':
                t_defense = t_defense + int((t_card_passive / 100) * o_defense)
                o_defense = o_defense - int((t_card_passive / 100) * o_defense)
            elif t_card_passive_type == 'RAGE':
                t_attack = t_attack + int((t_card_passive / 100) * t_defense)
                t_defense = t_defense - int((t_card_passive / 100) * t_attack)
            elif t_card_passive_type == 'BRACE':
                t_defense = t_defense + int((t_card_passive / 100) * t_attack)
                t_attack = t_attack - int((t_card_passive / 100) * t_defense)
            elif t_card_passive_type == 'BZRK':
                t_attack = t_attack + int(((t_card_passive / 100) * t_health))
                t_health = t_health - int((t_attack))
            elif t_card_passive_type == 'CRYSTAL':
                t_defense = t_defense + int((t_card_passive / 100) * t_health)
                t_health = t_health - int(t_defense)
            elif t_card_passive_type == 'GROWTH':
                t_attack = t_attack + int(((t_card_passive / 100) * t_max_health))
                t_defense = t_defense + int((t_card_passive / 100) * t_defense)
                t_max_health = t_max_health - int(((t_card_passive / 100) * t_max_health))
                t_health = t_health - int(((t_card_passive / 100) * t_health))
            elif t_card_passive_type == 'STANCE':
                tempattack = t_attack + t_card_passive
                t_attack = t_defense + t_card_passive
                t_defense = tempattack
            elif t_card_passive_type == 'CONFUSE':
                tempattack = o_attack - t_card_passive
                o_attack = o_defense - t_card_passive
                o_defense = tempattack
            elif t_card_passive_type == 'BLINK':
                t_stamina = t_stamina - t_card_passive
                o_stamina = o_stamina + t_card_passive - 10
            elif t_card_passive_type == 'SLOW':
                tempstam = o_stamina + t_card_passive
                t_stamina = t_stamina - (2 * t_card_passive)
                o_stamina = t_stamina
                t_stamina = tempstam
            elif t_card_passive_type == 'HASTE':
                tempstam = o_stamina - t_card_passive
                t_stamina = t_stamina + (2 * t_card_passive)
                o_stamina = t_stamina
                t_stamina = tempstam
            elif t_card_passive_type == 'SOULCHAIN':
                t_stamina = t_card_passive
                o_stamina = t_card_passive
            elif t_card_passive_type == 'FEAR':
                t_health = t_health - int((t_card_passive / 100) * t_health)
                o_attack = o_attack - int((t_card_passive / 100) * o_attack)
                o_defense = o_defense - int((t_card_passive / 100) * o_defense)
            elif t_card_passive_type == 'GAMBLE':
                t_health = t_card_passive
                o_health = t_card_passive

            # Title Passive player 2
            t_title_passive_type = list(t_title_passive.keys())[0]
            t_title_passive_value = list(t_title_passive.values())[0]

            if t_title_passive_bool:
                if t_title_passive_type == 'ATK':
                    t_attack = t_attack + int(t_title_passive_value)
                elif t_title_passive_type == 'DEF':
                    t_defense = t_defense + int(t_title_passive_value)
                elif t_title_passive_type == 'STAM':
                    t_stamina = t_stamina + int(t_title_passive_value)
                elif t_title_passive_type == 'HLT':
                    t_max_health = t_max_health + int(t_title_passive_value)
                    t_health = t_health + int(t_title_passive_value)
                elif t_title_passive_type == 'LIFE':
                    t_max_health = t_max_health + int((t_title_passive_value / 100) * o_health)
                elif t_title_passive_type == 'DRAIN':
                    o_stamina = o_stamina - int(t_title_passive_value)
                    t_stamina = t_stamina + int(t_title_passive_value)
                elif t_title_passive_type == 'FLOG':
                    t_attack = t_attack + int((t_title_passive_value / 100) * o_attack)
                    o_attack = o_attack - int((t_title_passive_value / 100) * o_attack)
                elif t_title_passive_type == 'WITHER':
                    t_defense = t_defense + int((t_title_passive_value / 100) * o_defense)
                    o_defense = o_defense - int((t_title_passive_value / 100) * o_defense)
                elif t_title_passive_type == 'RAGE':
                    t_attack = t_attack + int(((t_title_passive_value / 100) * t_defense))
                    t_defense = t_defense - int(((t_title_passive_value / 100) * t_attack))
                elif t_title_passive_type == 'BRACE':
                    t_defense = t_defense + int(((t_title_passive_value / 100) * t_attack))
                    t_attack = t_attack - int(((t_title_passive_value / 100) * t_defense))
                elif t_title_passive_type == 'BZRK':
                    t_attack = t_attack + int(((t_title_passive_value / 100) * t_health))
                    t_health = t_health - int((t_attack))
                elif t_title_passive_type == 'CRYSTAL':
                    t_defense = t_defense + int(((t_title_passive_value / 100) * t_health))
                    t_health = t_health - int(t_defense)
                elif t_title_passive_type == 'GROWTH':
                    tt_attack = t_attack + int(((t_title_passive_value / 100) * t_attack))
                    t_defense = t_defense + int(((t_title_passive_value / 100) * t_defense))
                    t_max_health = t_max_health - int(((t_title_passive_value / 100) * t_max_health))
                elif t_title_passive_type == 'STANCE':
                    tempattack = t_attack + t_title_passive_value
                    t_attack = t_defense + t_title_passive_value
                    t_defense = tempattack
                elif t_title_passive_type == 'CONFUSE':
                    tempattack = o_attack - t_title_passive_value
                    o_attack = o_defense - t_title_passive_value
                    o_defense = tempattack
                elif t_title_passive_type == 'BLINK':
                    t_stamina = t_stamina - t_title_passive_value
                    o_stamina = o_stamina + t_title_passive_value
                elif t_title_passive_type == 'SLOW':
                    tempstam = o_stamina + t_title_passive_value
                    t_stamina = t_stamina - t_title_passive_value
                    o_stamina = t_stamina
                    t_stamina = tempstam
                elif t_title_passive_type == 'HASTE':
                    tempstam = o_stamina - t_title_passive_value
                    t_stamina = t_stamina + t_title_passive_value
                    o_stamina = t_stamina
                    t_stamina = tempstam
                elif t_title_passive_type == 'SOULCHAIN':
                    t_stamina = t_title_passive_value
                    o_stamina = t_title_passive_value
                elif t_title_passive_type == 'FEAR':
                    t_health = t_health - int((t_title_passive_value / 100) * t_health)
                    o_attack = o_attack - int((t_title_passive_value / 100) * o_attack)
                    o_defense = o_defense - int((t_title_passive_value / 100) * o_defense)
                elif t_title_passive_type == 'GAMBLE':
                    t_health = t_title_passive_value
                    o_health = t_title_passive_value

           # Arm Passive Player 2
            tarm_passive_type = list(tarm_passive.keys())[0]
            tarm_passive_value = list(tarm_passive.values())[0]
            tarm_shield_active = False
            tshield_value = 0
            tarm_barrier_active = False
            tbarrier_count = 0
            tarm_parry_active = False
            tparry_count = 0
            if tarm_passive_type == 'BASIC':
                t_1[tmove1_text] = t_1[tmove1_text] + tarm_passive_value
            elif tarm_passive_type == 'SPECIAL':
                t_2[tmove2_text] = t_2[tmove2_text] + tarm_passive_value
            elif tarm_passive_type == 'ULTIMATE':
                t_3[tmove3_text] = t_3[tmove3_text] + tarm_passive_value
            elif tarm_passive_type == 'ULTIMAX':
                t_1[tmove1_text] = t_1[tmove1_text] + tarm_passive_value
                t_2[tmove2_text] = t_2[tmove2_text] + tarm_passive_value
                t_3[tmove3_text] = t_3[tmove3_text] + tarm_passive_value
            elif tarm_passive_type == 'MANA':
                t_enhancer[tmove_enhanced_text] = round(t_enhancer[tmove_enhanced_text] + (t_enhancer[tmove_enhanced_text] * (tarm_passive_value / 100)))
            elif tarm_passive_type == 'SHIELD':
                tarm_shield_active = True
                tshield_value = tarm_passive_value
            elif tarm_passive_type == 'BARRIER':
                tarm_barrier_active = True
                tbarrier_count = tarm_passive_value
            elif tarm_passive_type == 'PARRY':
                tarm_parry_active = True
                tparry_count = tarm_passive_value


            # Turn iterator
            turn = 0
            turn_total = 0
            # Enhance Turn Iterators
            eo = 0
            et = 0

            botActive = False
            tutorialbot = '837538366509154407'
            legendbot = '845672426113466395'
            userID = t_user['DID']
            if tutorialbot == userID:
                botActive = True
                await private_channel.send(f"Welcome to Bootcamp!")
                turn = 0
            elif legendbot == userID:
                botActive = True
                await ctx.send(f"Welcome to Legends!")
                turn = 0
            else:
                botActive = False
                start = starting_position(o_speed, t_speed)
                if start == True:
                    turn = 0
                else:
                    turn = 1

            options = [1, 2, 3, 4, 5, 0]

            # Count Turns
            turn_total = 0

            # #Rebirth Scaling
            o_attack = o_attack + (o_user['REBIRTH'] * 10)
            o_defense = o_defense + (o_user['REBIRTH'] * 10)
            t_attack = t_attack + (t_user['REBIRTH'] * 10)
            t_defense = t_defense + (t_user['REBIRTH'] * 10)

            # START TURNS
            while (o_health > 0) and (t_health > 0):

                # Player 1 Turn Start
                if turn == 0:

                    await asyncio.sleep(1)
                    if o_block_used == True:
                        o_block_used = False
                        o_defense = o_defense / 2
                    if o_universe == "Death Note" and turn_total == 0:
                        embedVar = discord.Embed(title=f"{o_card.upper()} Scheduled Death 📓",
                                                 description=f"**{o_card} says**\nYou will die in 24 turns...",
                                                 colour=0xe91e63)
                        await private_channel.send(embed=embedVar)
                    if t_universe == 'Death Note' and turn_total == 0:
                        embedVar = discord.Embed(title=f"{o_card.upper()} Scheduled Death 📓",
                                                 description=f"**{t_card} says**\nYou will die in 24 turns...",
                                                 colour=0xe91e63)
                        await private_channel.send(embed=embedVar)
                    if o_attack <= 25:
                        o_attack = 25
                    if o_defense <= 30:
                        o_defense = 30
                    if o_health >= o_max_health:
                        o_health = o_max_health

                    # Tutorial Instructions
                    if turn_total == 0:
                        if botActive:
                            embedVar = discord.Embed(title=f"Welcome to **Crown Unlimited**!",
                                                     description=f"Follow the instructions to learn how to play the Game!",
                                                     colour=0xe91e63)
                            embedVar.add_field(name="**How do I play?**",
                                               value="The point of the game is to win **Battles**!\n**To do this**, you need to select moves outmanuevering your opponent to **secure the win**!")
                            embedVar.set_footer(
                                text="Select a move to get started. DON'T WORRY! When your STAMINA depletes to 0 your character will Focus to REPLENISH!")
                            await private_channel.send(embed=embedVar)
                        else:
                            # await ctx.send(f"{user1.mention}{user2.mention}")
                            embedVar = discord.Embed(
                                title=f"**{o_card}** & {opet_name} VS **{t_card}** & {tpet_name} Ranked Battle has begun!",
                                description=f"{o_card} Says:\n{o_greeting_description}", colour=0xe91e63)
                            await private_channel.send(embed=embedVar)

                    if o_health <= (o_max_health * .25):
                        embed_color_o = 0xe74c3c
                        if o_chainsaw == True:
                            if o_atk_chainsaw == False:
                                o_atk_chainsaw = True
                                o_chainsaw = False
                                o_defense = o_defense * 2
                                o_attack = o_attack * 2
                                embedVar = discord.Embed(title=f"{o_card.upper()}'s Devilization",
                                                         description=f"**{o_card}** Doubles ATK and DEF",
                                                         colour=0xe91e63)
                                await private_channel.send(embed=embedVar)

                    elif o_health <= (o_max_health * .50):
                        embed_color_o = 0xe67e22
                        if o_chainsaw == True:
                            if o_atk_chainsaw == False:
                                o_atk_chainsaw = True
                                o_chainsaw = False
                                o_defense = o_defense * 2
                                o_attack = o_attack * 2
                                embedVar = discord.Embed(title=f"{o_card.upper()}'s Devilization",
                                                         description=f"**{o_card}** Doubles ATK and DEF",
                                                         colour=0xe91e63)
                                await private_channel.send(embed=embedVar)
                    elif o_health <= (o_max_health * .75):
                        embed_color_o = 0xf1c40f

                    else:
                        embed_color_o = 0x2ecc71

                    if o_stamina < 10:
                        o_focus_count = o_focus_count + 1
                        if botActive and not o_used_focus:
                            embedVar = discord.Embed(title=f"You've entered **Focus State**!",
                                                     description=f"Entering **Focus State** sacrifices a turn to power up and regain **STAMINA**!",
                                                     colour=0xe91e63)
                            embedVar.add_field(name="**Strategy**",
                                               value="Pay attention to your oppononets **STAMINA** bar. If they are entering **Focus State**, you will have the ability to **strike twice!**")
                            embedVar.set_footer(
                                text="After you entered focus state once, a transformation is possible by strengthening your RESOLVE! **Press 5**")
                            await ctx.send(embed=embedVar)
                        # Universal Trait
                        # fortitude or luck is based on health
                        fortitude = 0.0
                        low = o_health - (o_health * .90)
                        high = o_health - (o_health * .80)
                        fortitude = random.randint(int(low), int(high))

                        o_stamina = o_focus
                        o_healthcalc = round(((o_focus * .40) + (fortitude * 1)) / 2)

                        o_attackcalc = round(.20 * ((o_focus * .15) + round(fortitude * 1)))
                        o_defensecalc = round(.20 * ((o_focus * .15) + round(fortitude * 1)))
                        # check if user is at max health and sets messages and focus health value
                        o_newhealth = 0
                        healmessage = ""
                        messagenumber = 0
                        if o_universe == "Crown Rift Madness":
                            healmessage = "yet inner **Madness** drags on..."
                            messagenumber = 3
                        else:
                            if o_health <= o_max_health:
                                o_newhealth = o_health + o_healthcalc
                                if o_newhealth > o_max_health:
                                    healmessage = "the injuries dissapeared"
                                    messagenumber = 1
                                    o_health = o_max_health
                                else:
                                    healmessage = "regained some vitality"
                                    messagenumber = 2
                                    o_health = o_newhealth
                            else:
                                healmessage = f"**{t_card}**'s blows don't appear to have any effect!"
                                messagenumber = 0
                        if not o_used_resolve:
                            o_attack = o_attack + o_attackcalc
                            o_defense = o_defense + o_defensecalc
                        o_used_focus = True

                        if botActive:
                            if messagenumber != 2:
                                if messagenumber == 1:
                                    embedVar = discord.Embed(title=f"{o_card} Stamina has recovered!",
                                                             colour=embed_color_o)
                                    await ctx.send(embed=embedVar)
                                else:
                                    embedVar = discord.Embed(title=f"{o_card} Stamina has recovered!",
                                                             colour=embed_color_o)
                                    await ctx.send(embed=embedVar)
                            else:
                                embedVar = discord.Embed(title=f"{o_card} Stamina has recovered!", colour=embed_color_o)
                                await ctx.send(embed=embedVar)

                        # if not botActive:
                        #     embedVar = discord.Embed(title=f"{o_card.upper()} FOCUSED", description=f"**{o_card} says**\n{o_focus_description}", colour=0xe91e63)
                        #     embedVar.add_field(name=f"{o_card} focused and {healmessage}", value="All stats & stamina increased")
                        #     await ctx.send(embed=embedVar)
                        # Resolve Check and Calculation
                        if not o_used_resolve and o_used_focus and o_universe == "Digimon":  # Digimon Universal Trait
                            embedVar = discord.Embed(title=f"{o_card} STRENGTHENED RESOLVE :zap:",
                                                     description=f"**{o_card} says**\n{o_resolve_description}",
                                                     colour=0xe91e63)
                            embedVar.add_field(name=f"Transformation: Digivolve", value="On Focus you Resolve.")
                            await ctx.send(embed=embedVar)
                            # fortitude or luck is based on health
                            fortitude = 0.0
                            low = o_health - (o_health * .75)
                            high = o_health - (o_health * .66)
                            fortitude = random.randint(int(low), int(high))
                            # Resolve Scaling
                            o_resolve_health = round(fortitude + (.5 * o_resolve))
                            o_resolve_attack = round((.30 * o_defense) * (o_resolve / (.50 * o_defense)))
                            o_resolve_defense = round((.30 * o_defense) * (o_resolve / (.50 * o_defense)))

                            o_stamina = o_stamina + o_resolve
                            o_health = o_health + o_resolve_health
                            o_attack = round(o_attack + o_resolve_attack)
                            o_defense = round(o_defense - o_resolve_defense)
                            o_used_resolve = True
                            o_pet_used = False


                        elif o_universe == "League Of Legends":
                            embedVar = discord.Embed(title=f"Turret Shot hits {t_card} for **30** Damage 💥",
                                                     colour=0xe91e63)
                            await ctx.send(embed=embedVar)
                            t_health = round(t_health - 30)

                        elif o_universe == "Solo Leveling":
                            embedVar = discord.Embed(
                                title=f"Ruler's Authority... Opponent loses **{30 + turn_total}** 🛡️ 🔻",
                                colour=0xe91e63)
                            await ctx.send(embed=embedVar)
                            t_defense = round(t_defense - (30 + turn_total))

                        elif o_universe == "Attack On Titan":
                            embedVar = discord.Embed(title=f"Rally! **{o_card}** Increased Max Health ❤️",
                                                     colour=0xe91e63)
                            await ctx.send(embed=embedVar)
                            o_max_health = round(o_max_health + 100)

                        elif o_universe == "Black Clover":
                            embedVar = discord.Embed(title=f"Mana Zone! {o_card} Increased Stamina 🌀", colour=0xe91e63)
                            await ctx.send(embed=embedVar)
                            o_stamina = 100
                            ocard_lvl_ap_buff = ocard_lvl_ap_buff + 30
                        elif o_universe == "Death Note":
                            if turn_total >= 24:
                                embedVar = discord.Embed(title=f"{t_card.upper()}'s' Scheduled Death 📓",
                                                         description=f"**{o_card} says**\n**Delete**", colour=0xe91e63)
                                embedVar.add_field(name=f"{t_card} had a heart attack and died", value=f"Death....")
                                await private_channel.send(embed=embedVar)
                                t_health = 0

                        if t_universe == "One Punch Man":
                            embedVar = discord.Embed(
                                title=f"Hero Reinforcements! {t_card}  Increased Health & Max Health ❤️",
                                colour=0xe91e63)
                            await private_channel.send(embed=embedVar)
                            t_health = round(t_health + 100)
                            t_max_health = round(t_max_health + 100)

                        elif t_universe == "7ds":
                            embedVar = discord.Embed(title=f"Increase Power Level! {t_card} Increased Stamina 🌀",
                                                     colour=0xe91e63)
                            await ctx.send(embed=embedVar)
                            t_stamina = t_stamina + 80

                        elif t_universe == "Souls":
                            embedVar = discord.Embed(
                                title=f"Combo Recognition! {t_card} Increased Attack by **{30 + turn_total}** 🔺 ",
                                colour=0xe91e63)
                            await ctx.send(embed=embedVar)
                            t_attack = round(t_attack + (30 + turn_total))
                        else:
                            turn_total = turn_total + 1
                            if o_universe != "Crown Rift Madness":
                                turn = 1
                            else:
                                turn = 0
                        turn_total = turn_total + 1
                        if o_universe != "Crown Rift Madness":
                            turn = 1
                        else:
                            turn = 0
                    else:

                        # UNIVERSE CARD
                        ap1 = list(o_1.values())[0] + ocard_lvl_ap_buff
                        ap2 = list(o_2.values())[0] + ocard_lvl_ap_buff
                        ap3 = list(o_3.values())[0] + ocard_lvl_ap_buff
                        enh1 = list(o_enhancer.values())[0]
                        enh_name = list(o_enhancer.values())[2]
                        pet_enh_name = list(opet_move.values())[2]
                        pet_msg_on_resolve = ""

                        # UNIVERSE CARD
                        player_1_card = showcard(o, o_max_health, o_health, o_max_stamina, o_stamina, o_used_resolve,
                                                 otitle, o_used_focus, o_attack, o_defense, turn_total, ap1, ap2, ap3,
                                                 enh1, enh_name, ocard_lvl, t_defense)
                        # await private_channel.send(file=player_1_card)

                        if o_used_focus and o_used_resolve:
                            options = ["q", "Q", "0", "1", "2", "3", "4"]
                        elif o_used_focus and not o_used_resolve:
                            options = ["q", "Q", "0", "1", "2", "3", "4", "5"]
                        else:
                            options = ["q", "Q", "0", "1", "2", "3", "4"]

                        battle_buttons = [
                            manage_components.create_button(
                                style=ButtonStyle.green,
                                label=f"💥 10",
                                custom_id="1"
                            ),
                            manage_components.create_button(
                                style=ButtonStyle.green,
                                label=f"☄️ 30",
                                custom_id="2"
                            ),
                            manage_components.create_button(
                                style=ButtonStyle.green,
                                label=f"🏵️ 80",
                                custom_id="3"
                            ),
                            manage_components.create_button(
                                style=ButtonStyle.blue,
                                label=f"🦠 20",
                                custom_id="4"
                            )
                        ]

                        util_buttons = [
                            manage_components.create_button(
                                style=ButtonStyle.grey,
                                label="Block 20",
                                custom_id="0"
                            ),
                            manage_components.create_button(
                                style=ButtonStyle.grey,
                                label="Quit | /ff",
                                custom_id="q"
                            ),
                        ]

                        # if o_used_focus and o_used_resolve and not o_pet_used:
                        #     util_buttons.append(
                        #             manage_components.create_button(
                        #             style=ButtonStyle.green,
                        #             label="🐦 15",
                        #             custom_id = "6"
                        #         )
                        #     )

                        if o_used_focus and not o_used_resolve:
                            util_buttons.append(
                                manage_components.create_button(
                                    style=ButtonStyle.green,
                                    label="Resolve!",
                                    custom_id="5"
                                )
                            )

                        battle_action_row = manage_components.create_actionrow(*battle_buttons)
                        util_action_row = manage_components.create_actionrow(*util_buttons)

                        ap1 = list(o_1.values())[0] + ocard_lvl_ap_buff
                        ap2 = list(o_2.values())[0] + ocard_lvl_ap_buff
                        ap3 = list(o_3.values())[0] + ocard_lvl_ap_buff
                        enh1 = list(o_enhancer.values())[0]
                        enh_name = list(o_enhancer.values())[2]
                        pet_enh_name = list(opet_move.values())[2]
                        pet_msg_on_resolve = ""

                        if o_used_resolve:
                            pet_msg_on_resolve = f"🐦 {enhancer_mapping[pet_enh_name]}"
                        tarm_message = ""
                        if tarm_barrier_active:
                            tarm_message = f"💠{tbarrier_count}"
                        elif tarm_shield_active:
                            tarm_message = f"🌐{tshield_value}"
                        elif tarm_parry_active:
                            tarm_message = f"🔄{tparry_count}"
                        if oarm_passive_type == "BARRIER":
                            if oarm_barrier_active:
                                oarm_passive_value = f"{obarrier_count}"
                            else:
                                oarm_passive_value = 0
                        elif oarm_passive_type == "SHIELD":
                            if oarm_shield_active:
                                oarm_passive_value = f"{oshield_value}"
                            else:
                                oarm_passive_value = 0
                        elif oarm_passive_type == "PARRY":
                            if oarm_parry_active:
                                oarm_passive_value = f"{oparry_count}"
                            else:
                                oarm_passive_value = 0
                        embedVar = discord.Embed(title=f" Press your move below! _Turn_ {turn_total}", color=0xe74c3c)
                        embedVar.set_author(name=f"🦾 {oarm_name} - {oarm_passive_type} {oarm_passive_value} {enhancer_suffix_mapping[oarm_passive_type]}\n{pet_msg_on_resolve}")
                        embedVar.set_thumbnail(url=opet_image)
                        embedVar.set_image(url="attachment://image.png")
                        embedVar.set_footer(
                            text=f"{t_card}: ❤️{t_health} 🌀{t_stamina} 🗡️{t_attack}/🛡️{t_defense} {tarm_message}",
                            icon_url="https://cdn.discordapp.com/emojis/789290881654980659.gif?v=1")
                        await private_channel.send(embed=embedVar, components=[battle_action_row, util_action_row],
                                                   file=player_1_card)

                        # Make sure user is responding with move
                        def check(button_ctx):
                            return button_ctx.author == user1 and button_ctx.custom_id in options

                        try:
                            button_ctx: ComponentContext = await manage_components.wait_for_component(self.bot,
                                                                                                      components=[
                                                                                                          battle_action_row,
                                                                                                          util_action_row],
                                                                                                      timeout=45,
                                                                                                      check=check)

                            # calculate data based on selected move
                            if button_ctx.custom_id == "q" or button_ctx.custom_id == "Q":
                                o_health = 0
                                await button_ctx.send(f"{ctx.author.mention} has fled the battle...")
                                return
                            if button_ctx.custom_id == "1":
                                if botActive:
                                    embedVar = discord.Embed(title=f"Basic Attack!",
                                                             description=f"Nice Hit! Your Basic Attack cost 10 Stamina to deal Damage!",
                                                             colour=0xe91e63)
                                    embedVar.add_field(name=f"Combos!",
                                                       value="Chain your Basic Attack with Summons And Enhancers To Maximize Damage!")
                                    embedVar.set_footer(
                                        text=f"Basic Attacks are great when you are low on stamina, but don't be afraid to enter focus state and REPLENISH!")
                                    await button_ctx.send(embed=embedVar)
                                dmg = damage_cal(o_universe, o_card, o_1, o_attack, o_defense, t_defense, o_stamina, o_enhancer_used, o_health, t_health, t_stamina,
                                                 o_max_health, t_attack, o_special_move_description, turn_total,
                                                 ocard_lvl_ap_buff)

                            elif button_ctx.custom_id == "2":
                                if botActive:
                                    embedVar = discord.Embed(title=f"Special Attack!",
                                                             description=f"Great Shot! Your Special Attack cost 30 Stamina to deal great Damage!",
                                                             colour=0xe91e63)
                                    embedVar.add_field(name=f"Strategy!",
                                                       value="Special Attacks are the balance between STAMINA cost and Damage output when trying to build Combos!")
                                    embedVar.set_footer(
                                        text=f"Special Attacks are great when you need to control the focus game! Use Them to Maximize your focus and build stronger combos!")
                                    await button_ctx.send(embed=embedVar)
                                dmg = damage_cal(o_universe, o_card, o_2, o_attack, o_defense, t_defense, o_stamina, o_enhancer_used, o_health, t_health, t_stamina,
                                                 o_max_health, t_attack, o_special_move_description, turn_total,
                                                 ocard_lvl_ap_buff)

                            elif button_ctx.custom_id == "3":
                                if botActive:
                                    embedVar = discord.Embed(title=f"Ultimate Move!",
                                                             description=f"Ultimate Moves cost 80 Stamina to deal incredible Damage!",
                                                             colour=0xe91e63)
                                    embedVar.add_field(name=f"Ultimate GIF",
                                                       value="Using your ultimate move also comes with a bonus GIF to deliver that final blow!")
                                    embedVar.set_footer(
                                        text=f"Ultimate moves will consume most of your stamina! Use Them Wisely!")
                                    await button_ctx.send(embed=embedVar)
                                dmg = damage_cal(o_universe, o_card, o_3, o_attack, o_defense, t_defense, o_stamina, o_enhancer_used, o_health, t_health, t_stamina,
                                                 o_max_health, t_attack, o_special_move_description, turn_total,
                                                 ocard_lvl_ap_buff)

                                if o_gif != "N/A":
                                    await private_channel.send(f"{o_gif}")
                            elif button_ctx.custom_id == "4":
                                if botActive:
                                    embedVar = discord.Embed(title=f"Enhancers!",
                                                             description=f"Enhancers cost 20 Stamina to Boost your Character or Debuff Your Opponent!",
                                                             colour=0xe91e63)
                                    embedVar.add_field(
                                        name=f"Your Enhancer: {omove_enhanced_text} is a {list(o_enhancer.values())[2]}",
                                        value="Pay Attention to your enhancer messages to know what effect is being used!")
                                    embedVar.set_footer(
                                        text=f"Use .enhance to view a full list of enhancers! Look for the {list(o_enhancer.values())[2]} Enhancer")
                                    await button_ctx.send(embed=embedVar)
                                o_enhancer_used = True
                                dmg = damage_cal(o_universe, o_card, o_enhancer, o_attack, o_defense, t_defense, o_stamina, o_enhancer_used, o_health, t_health, t_stamina,
                                                 o_max_health, t_attack, o_special_move_description, turn_total,
                                                 ocard_lvl_ap_buff)

                                o_enhancer_used = False
                            elif button_ctx.custom_id == "5":
                                # Resolve Check and Calculation
                                if not o_used_resolve and o_used_focus:
                                    if botActive:
                                        embedVar = discord.Embed(title=f"RESOLVE STATE!",
                                                                 description=f"You've Entered Resolved State! Pay attention to your **STATS**!",
                                                                 colour=0xe91e63)
                                        embedVar.add_field(name=f"Trade Offs!",
                                                           value="Resolved Charactes sacrifice **DEFENSE** to **HEAL**, gain **ATK** and the ability to **SUMMON PETS**!")
                                        embedVar.set_footer(
                                            text=f"You can only enter Resolve once per match! Use the Heal Wisely!!!")
                                        await button_ctx.send(embed=embedVar)
                                    if o_universe == "My Hero Academia":  # My Hero Trait
                                        # fortitude or luck is based on health
                                        fortitude = 0.0
                                        low = o_health - (o_health * .75)
                                        high = o_health - (o_health * .66)
                                        fortitude = random.randint(int(low), int(high))
                                        # Resolve Scaling
                                        o_resolve_health = round(fortitude + (.5 * o_resolve))
                                        o_resolve_attack = round((.30 * o_defense) * (o_resolve / (.50 * o_defense)))
                                        o_resolve_defense = round((.30 * o_defense) * (o_resolve / (.50 * o_defense)))
                                        ocard_lvl_ap_buff = ocard_lvl_ap_buff + 50

                                        o_stamina = o_stamina + o_resolve
                                        o_health = o_health + o_resolve_health
                                        o_attack = round(o_attack + o_resolve_attack)
                                        o_defense = round(o_defense - o_resolve_defense)
                                        o_used_resolve = True
                                        o_pet_used = False
                                        embedVar = discord.Embed(title=f"{o_card.upper()} PLUS ULTRAAA",
                                                                 description=f"**{o_card} says**\n{o_resolve_description}",
                                                                 colour=0xe91e63)
                                        embedVar.add_field(name=f"Transformation: Plus Ultra",
                                                           value="You do not lose a turn after you Resolve.")
                                        await button_ctx.send(embed=embedVar)

                                        turn_total = turn_total + 1
                                        turn = 0
                                    elif o_universe == "Attack On Titan":
                                        # fortitude or luck is based on health
                                        fortitude = 0.0
                                        low = o_health - (o_health * .75)
                                        high = o_health - (o_health * .66)
                                        fortitude = random.randint(int(low), int(high))
                                        # Resolve Scaling
                                        o_resolve_health = round(fortitude + (.5 * o_resolve))
                                        o_resolve_attack = round((.30 * o_defense) * (o_resolve / (.50 * o_defense)))
                                        o_resolve_defense = round((.30 * o_defense) * (o_resolve / (.50 * o_defense)))

                                        o_stamina = o_stamina + o_resolve
                                        o_health = o_health + o_resolve_health
                                        o_attack = round(o_attack + o_resolve_attack)
                                        o_defense = round(o_defense - o_resolve_defense)
                                        o_used_resolve = True
                                        o_pet_used = False
                                        health_boost = 100 * o_focus_count
                                        o_health = o_health + health_boost
                                        embedVar = discord.Embed(title=f"{o_card.upper()} Titan Mode",
                                                                 description=f"**{o_card} says**\n{o_resolve_description}",
                                                                 colour=0xe91e63)
                                        embedVar.add_field(name=f"Transformation Complete",
                                                           value=f"Health increased by **{health_boost}**!")

                                        turn_total = turn_total + 1
                                        turn = 1
                                    elif o_universe == "Bleach":  # Bleach Trait
                                        # fortitude or luck is based on health
                                        fortitude = 0.0
                                        low = o_health - (o_health * .75)
                                        high = o_health - (o_health * .66)
                                        fortitude = random.randint(int(low), int(high))
                                        # Resolve Scaling
                                        o_resolve_health = round(fortitude + (.5 * o_resolve))
                                        o_resolve_attack = round((.30 * o_defense) * (o_resolve / (.50 * o_defense)))
                                        o_resolve_defense = round((.30 * o_defense) * (o_resolve / (.50 * o_defense)))

                                        o_stamina = o_stamina + o_resolve
                                        o_health = o_health + o_resolve_health
                                        o_attack = round((o_attack + (2 * o_resolve_attack)) * 2)
                                        o_defense = round(o_defense - o_resolve_defense)
                                        # if o_defense >= 120:
                                        # o_defense = 120
                                        o_used_resolve = True
                                        o_pet_used = False
                                        embedVar = discord.Embed(title=f"{o_card} STRENGTHENED RESOLVE :zap:",
                                                                 description=f"**{o_card} says**\n{o_resolve_description}",
                                                                 colour=0xe91e63)
                                        embedVar.add_field(name=f"Transformation: Bankai",
                                                           value="Gain double Attack on Resolve.")
                                        await button_ctx.send(embed=embedVar)
                                        turn_total = turn_total + 1
                                        turn = 1
                                    elif o_universe == "God Of War":  # God Of War Trait
                                        # fortitude or luck is based on health
                                        fortitude = 0.0
                                        low = o_health - (o_health * .75)
                                        high = o_health - (o_health * .66)
                                        fortitude = random.randint(int(low), int(high))
                                        # Resolve Scaling
                                        o_resolve_health = round(fortitude + (.5 * o_resolve))
                                        o_resolve_attack = round((.30 * o_defense) * (o_resolve / (.50 * o_defense)))
                                        o_resolve_defense = round((.30 * o_defense) * (o_resolve / (.50 * o_defense)))

                                        o_stamina = o_stamina + o_resolve
                                        o_health = o_max_health
                                        o_attack = round(o_attack + o_resolve_attack)
                                        o_defense = round(o_defense - o_resolve_defense)
                                        o_used_resolve = True
                                        o_pet_used = False
                                        embedVar = discord.Embed(title=f"{o_card} STRENGTHENED RESOLVE :zap:",
                                                                 description=f"**{o_card} says**\n{o_resolve_description}",
                                                                 colour=0xe91e63)
                                        embedVar.add_field(name=f"Transformation: Ascension",
                                                           value="On Resolve Refill Health.")
                                        await button_ctx.send(embed=embedVar)
                                        turn_total = turn_total + 1
                                        turn = 1
                                    elif o_universe == "Fate":  # Fate Trait
                                        # fortitude or luck is based on health
                                        fortitude = 0.0
                                        low = o_health - (o_health * .75)
                                        high = o_health - (o_health * .66)
                                        fortitude = random.randint(int(low), int(high))
                                        # Resolve Scaling
                                        o_resolve_health = round(fortitude + (.5 * o_resolve))
                                        o_resolve_attack = round((.30 * o_defense) * (o_resolve / (.50 * o_defense)))
                                        o_resolve_defense = round((.30 * o_defense) * (o_resolve / (.50 * o_defense)))

                                        o_stamina = o_stamina + o_resolve
                                        o_health = o_health + o_resolve_health
                                        o_attack = round(o_attack + o_resolve_attack)
                                        o_defense = round(o_defense - o_resolve_defense)

                                        dmg = damage_cal(o_universe, o_card, o_3, o_attack, o_defense, t_defense, o_stamina, o_enhancer_used, o_health, t_health,
                                                         t_stamina, o_max_health, t_attack, o_special_move_description,
                                                         turn_total, ocard_lvl_ap_buff)
                                        t_health = t_health - dmg['DMG']
                                        embedVar = discord.Embed(
                                            title=f"{o_card} STRENGTHENED RESOLVE :zap:\n\n{dmg['MESSAGE']}",
                                            description=f"**{o_card} says**\n{o_resolve_description}", colour=0xe91e63)
                                        embedVar.add_field(name=f"Transformation: Command Seal",
                                                           value="On Resolve, Strike with Ultimate, then Focus.")
                                        await button_ctx.send(embed=embedVar)
                                        # o_stamina = 0
                                        o_used_resolve = True
                                        o_pet_used = False
                                        turn_total = turn_total + 1
                                        turn = 1
                                    elif o_universe == "Kanto Region" or o_universe == "Johto Region" or o_universe == "Hoenn Region" or o_universe == "Sinnoh Region" or o_universe == "Kalos Region" or o_universe == "Unova Region" or o_universe == "Alola Region" or o_universe == "Galar Region":  # Pokemon Resolves
                                        # fortitude or luck is based on health
                                        fortitude = 0.0
                                        low = o_health - (o_health * .75)
                                        high = o_health - (o_health * .66)
                                        fortitude = random.randint(int(low), int(high))
                                        # Resolve Scaling
                                        o_resolve_health = round(fortitude + (.5 * o_resolve))
                                        o_resolve_attack = round((.30 * o_defense) * (o_resolve / (.50 * o_defense)))
                                        o_resolve_defense = round((.30 * o_defense) * (o_resolve / (.50 * o_defense)))

                                        o_stamina = o_stamina + o_resolve
                                        o_health = o_health + o_resolve_health
                                        o_attack = round(o_attack + o_resolve_attack)
                                        o_defense = round(o_defense) * 2
                                        o_used_resolve = True
                                        o_pet_used = False
                                        embedVar = discord.Embed(title=f"{o_card} STRENGTHENED RESOLVE :zap:",
                                                                 description=f"**{o_card} says**\n{o_resolve_description}",
                                                                 colour=0xe91e63)
                                        embedVar.add_field(name=f"Transformation: Evolution",
                                                           value="When you Resolve you do not lose Defense.")
                                        await button_ctx.send(embed=embedVar)
                                        turn_total = turn_total + 1
                                        turn = 1
                                    else:  # Standard Resolve
                                        # fortitude or luck is based on health
                                        fortitude = 0.0
                                        low = o_health - (o_health * .75)
                                        high = o_health - (o_health * .66)
                                        fortitude = random.randint(int(low), int(high))
                                        # Resolve Scaling
                                        o_resolve_health = round(fortitude + (.5 * o_resolve))
                                        o_resolve_attack = round((.30 * o_defense) * (o_resolve / (.50 * o_defense)))
                                        o_resolve_defense = round((.30 * o_defense) * (o_resolve / (.50 * o_defense)))

                                        o_stamina = o_stamina + o_resolve
                                        o_health = o_health + o_resolve_health
                                        o_attack = round(o_attack + o_resolve_attack)
                                        o_defense = round(o_defense - o_resolve_defense)
                                        o_used_resolve = True
                                        o_pet_used = False
                                        if o_universe == "League Of Legends":
                                            t_health = t_health - (30 * (o_focus_count + t_focus_count))
                                            embedVar = discord.Embed(title=f"{o_card.upper()} PENTA KILL!",
                                                                     description=f"**{o_card} says**\n{o_resolve_description}",
                                                                     colour=0xe91e63)
                                            embedVar.add_field(name=f"Nexus Destroyed",
                                                               value=f"**{o_card}** dealt **{(30 * (o_focus_count + t_focus_count))}** damage.")
                                        else:
                                            embedVar = discord.Embed(title=f"{o_card} STRENGTHENED RESOLVE :zap:",
                                                                     description=f"**{o_card} says**\n{o_resolve_description}",
                                                                     colour=0xe91e63)
                                            embedVar.add_field(name=f"Transformation",
                                                               value="All stats & stamina greatly increased")
                                        await button_ctx.send(embed=embedVar)
                                        turn_total = turn_total + 1
                                        turn = 1
                                else:
                                    emessage = m.CANNOT_USE_RESOLVE
                                    embedVar = discord.Embed(title=emessage,
                                                             description=f"Entering `Resolved State` sacrifices a turn to power up even greater and regain `Stamina`!",
                                                             colour=0xe91e63)
                                    await button_ctx.send(embed=embedVar)
                                    turn = 0
                            # elif button_ctx.custom_id == "6":
                            #     #Resolve Check and Calculation
                            #     if o_used_resolve and o_used_focus and not o_pet_used:
                            #         if botActive:
                            #             embedVar = discord.Embed(title=f"Pet Summons!", description=f"You've summoned {opet_name}", colour=0xe91e63)
                            #             embedVar.add_field(name=f"Pet Enhancers!", value="Pet Enhancers cost 15 Stamina but do not count as the Summoners turn!")
                            #             embedVar.set_footer(text=f"Pets will Level Up and build Bond as you win battles! Train up your pets to perform better in the field!")
                            #             await button_ctx.send(embed=embedVar)
                            #         o_enhancer_used=True
                            #         dmg = damage_cal(o_universe, o_card, opet_move, o_attack, o_defense, t_defense,o_stamina, o_enhancer_used, o_health, t_health, t_stamina,o_max_health, t_attack, o_special_move_description, turn_total, ocard_lvl_ap_buff)
                            #         o_enhancer_used=False
                            #         o_pet_used =True
                            #         opet_dmg = dmg['DMG']
                            #         opet_type = dmg['ENHANCED_TYPE']
                            #         if dmg['CAN_USE_MOVE']:
                            #             if opet_type == 'ATK':
                            #                 o_attack = round(o_attack + dmg['DMG'])
                            #             elif opet_type == 'DEF':
                            #                 o_defense = round(o_defense + dmg['DMG'])
                            #             elif opet_type == 'STAM':
                            #                 o_stamina = round(o_stamina + dmg['DMG'])
                            #             elif opet_type == 'HLT':
                            #                 o_health = round(o_health + dmg['DMG'])
                            #             elif opet_type == 'LIFE':
                            #                 o_health = round(o_health + dmg['DMG'])
                            #                 t_health = round(t_health - dmg['DMG'])
                            #             elif opet_type == 'DRAIN':
                            #                 o_stamina = round(o_stamina + dmg['DMG'])
                            #                 t_stamina = round(t_stamina - dmg['DMG'])
                            #             elif opet_type == 'FLOG':
                            #                 o_attack = round(o_attack + dmg['DMG'])
                            #                 t_attack = round (t_attack - dmg['DMG'])
                            #             elif opet_type == 'WITHER':
                            #                 o_defense = round(o_defense + dmg['DMG'])
                            #                 t_defense = round (t_defense - dmg['DMG'])
                            #             elif opet_type == 'RAGE':
                            #                 o_defense = round(o_defense - dmg['DMG'])
                            #                 o_attack = round(o_attack + dmg['DMG'])
                            #             elif opet_type == 'BRACE':
                            #                 o_defense = round(o_defense + dmg['DMG'])
                            #                 o_attack = round(o_attack - dmg['DMG'])
                            #             elif opet_type == 'BZRK':
                            #                 o_health = round(o_health - dmg['DMG'])
                            #                 o_attack = round(o_attack +  dmg['DMG'])
                            #             elif opet_type == 'CRYSTAL':
                            #                 o_health = round(o_health - dmg['DMG'])
                            #                 o_defense = round(o_defense + dmg['DMG'])
                            #             elif opet_type == 'GROWTH':
                            #                 o_max_health = round(o_max_health - (o_max_health * dmg['DMG']))
                            #                 o_defense = round(o_defense + (o_defense* dmg['DMG']))
                            #                 o_attack = round(o_attack + (o_attack * dmg['DMG']))
                            #             elif opet_type == 'STANCE':
                            #                 tempattack = dmg['DMG']
                            #                 o_attack = o_defense
                            #                 o_defense = tempattack
                            #             elif opet_type == 'CONFUSE':
                            #                 tempattack = dmg['DMG']
                            #                 t_attack = t_defense
                            #                 t_defense = tempattack
                            #             elif opet_type == 'BLINK':
                            #                 o_stamina = round(o_stamina - dmg['DMG'])
                            #                 t_stamina = round(t_stamina + dmg['DMG'] - 10)
                            #             elif opet_type == 'SLOW':
                            #                 tempstam = round(t_stamina + dmg['DMG'])
                            #                 o_stamina = round(o_stamina - dmg['DMG'])
                            #                 t_stamina = o_stamina
                            #                 o_stamina = tempstam
                            #             elif opet_type == 'HASTE':
                            #                 tempstam = round(t_stamina - dmg['DMG'])
                            #                 o_stamina = round(o_stamina + dmg['DMG'])
                            #                 t_stamina = o_stamina
                            #                 o_stamina = tempstam
                            #             elif opet_type == 'SOULCHAIN':
                            #                 o_stamina = round(dmg['DMG'])
                            #                 t_stamina = o_stamina
                            #             elif opet_type == 'GAMBLE':
                            #                 o_health = round(dmg['DMG'])
                            #                 t_health = o_health
                            #             elif opet_type == 'FEAR':
                            #                 o_health = round(o_health - ((dmg['DMG']/100)* o_health))
                            #                 t_attack = round(t_attack - ((dmg['DMG']/100)* t_attack))
                            #                 t_defense = round(t_defense - ((dmg['DMG']/100)* t_defense))
                            #             elif opet_type == 'WAVE':
                            #                 t_health = round(t_health - dmg['DMG'])
                            #             elif opet_type == 'BLAST':
                            #                 if dmg['DMG'] >= 100:
                            #                     dmg['DMG'] = 100
                            #                 t_health = round(t_health - dmg['DMG'])
                            #             elif opet_type == 'CREATION':
                            #                 o_max_health = round(o_max_health + dmg['DMG'])
                            #                 o_health = round(o_health + dmg['DMG'])
                            #             elif opet_type == 'DESTRUCTION':
                            #                 t_max_health = round(t_max_health - dmg['DMG'])

                            #             o_stamina = o_stamina - int(dmg['STAMINA_USED'])

                            #             embedVar = discord.Embed(title=f"{o_card.upper()} Summoned :bird: {opet_name}", colour=0xe91e63)
                            #             embedVar.add_field(name=f"{opet_name} used **{opetmove_text}**!", value =f"Enhanced **{opet_type}**")
                            #             embedVar.set_thumbnail(url=opet_image)
                            #             await button_ctx.send(embed=embedVar)
                            #             turn=0
                            #         else:
                            #             await button_ctx.send(f"{opet_name} needs a turn to rest...")
                            #             turn=0
                            #     else:
                            #         await private_channel.send(f"{opet_name} needs a turn to rest...")
                            elif button_ctx.custom_id == "0":
                                if o_stamina >= 20:
                                    if botActive:
                                        embedVar = discord.Embed(title=f"Blocking!",
                                                                 description=f"Blocking cost 20 STAMINA! Double your defense for 1 round",
                                                                 colour=0xe91e63)
                                        embedVar.add_field(name=f"**Strategy**",
                                                           value="Sometimes the best Offense is a Stonewall Defense!")
                                        embedVar.set_footer(
                                            text=f"Use block strategically to defend against your opponents strongest abilities!")
                                        await button_ctx.send(embed=embedVar)
                                    o_stamina = o_stamina - 20
                                    o_block_used = True
                                    o_defense = o_defense * 2
                                    embedVar = discord.Embed(title=f"{o_card} **Defended** 🛡️", colour=0xe91e63)

                                    await button_ctx.send(embed=embedVar)
                                    turn_total = turn_total + 1
                                    turn = 1
                                else:
                                    await button_ctx.send(f"{o_card} is too tired to block...")
                                    turn = 0

                            if button_ctx.custom_id != "5" and button_ctx.custom_id != "6" and button_ctx.custom_id != "0" and button_ctx.custom_id in options:
                                # If you have enough stamina for move, use it
                                if dmg['CAN_USE_MOVE']:
                                    o_pet_used = False
                                    if dmg['ENHANCE']:
                                        enh_type = dmg['ENHANCED_TYPE']
                                        if enh_type == 'ATK':
                                            o_attack = round(o_attack + dmg['DMG'])
                                        elif enh_type == 'DEF':
                                            o_defense = round(o_defense + dmg['DMG'])
                                        elif enh_type == 'STAM':
                                            o_stamina = round(o_stamina + dmg['DMG'])
                                        elif enh_type == 'HLT':
                                            o_health = round(o_health + dmg['DMG'])
                                        elif enh_type == 'LIFE':
                                            o_health = round(o_health + dmg['DMG'])
                                            t_health = round(t_health - dmg['DMG'])
                                        elif enh_type == 'DRAIN':
                                            o_stamina = round(o_stamina + dmg['DMG'])
                                            t_stamina = round(t_stamina - dmg['DMG'])
                                        elif enh_type == 'FLOG':
                                            o_attack = round(o_attack + dmg['DMG'])
                                            t_attack = round(t_attack - dmg['DMG'])
                                        elif enh_type == 'WITHER':
                                            o_defense = round(o_defense + dmg['DMG'])
                                            t_defense = round(t_defense - dmg['DMG'])
                                        elif enh_type == 'RAGE':
                                            o_defense = round(o_defense - dmg['DMG'])
                                            o_attack = round(o_attack + dmg['DMG'])
                                        elif enh_type == 'BRACE':
                                            o_defense = round(o_defense + dmg['DMG'])
                                            o_attack = round(o_attack - dmg['DMG'])
                                        elif enh_type == 'BZRK':
                                            o_health = round(o_health - dmg['DMG'])
                                            o_attack = round(o_attack + dmg['DMG'])
                                        elif enh_type == 'CRYSTAL':
                                            o_health = round(o_health - dmg['DMG'])
                                            o_defense = round(o_defense + dmg['DMG'])
                                        elif enh_type == 'GROWTH':
                                            o_max_health = round(o_max_health - (o_max_health * dmg['DMG']))
                                            o_defense = round(o_defense + (o_defense * dmg['DMG']))
                                            o_attack = round(o_attack + (o_attack * dmg['DMG']))
                                        elif enh_type == 'STANCE':
                                            tempattack = dmg['DMG']
                                            o_attack = o_defense
                                            o_defense = tempattack
                                        elif enh_type == 'CONFUSE':
                                            tempattack = dmg['DMG']
                                            t_attack = t_defense
                                            t_defense = tempattack
                                        elif enh_type == 'BLINK':
                                            o_stamina = round(o_stamina - dmg['DMG'])
                                            t_stamina = round(t_stamina + dmg['DMG'] - 10)
                                        elif enh_type == 'SLOW':
                                            tempstam = round(t_stamina + dmg['DMG'])
                                            o_stamina = round(o_stamina - dmg['DMG'])
                                            t_stamina = o_stamina
                                            o_stamina = tempstam
                                        elif enh_type == 'HASTE':
                                            tempstam = round(t_stamina - dmg['DMG'])
                                            o_stamina = round(o_stamina + dmg['DMG'])
                                            t_stamina = o_stamina
                                            o_stamina = tempstam
                                        elif enh_type == 'SOULCHAIN':
                                            o_stamina = round(dmg['DMG'])
                                            t_stamina = o_stamina
                                        elif enh_type == 'GAMBLE':
                                            o_health = round(dmg['DMG'])
                                            t_health = o_health
                                        elif enh_type == 'FEAR':
                                            o_health = round(o_health - ((dmg['DMG'] / 100) * o_health))
                                            t_attack = round(t_attack - ((dmg['DMG'] / 100) * t_attack))
                                            t_defense = round(t_defense - ((dmg['DMG'] / 100) * t_defense))
                                        elif enh_type == 'WAVE':
                                            t_health = round(t_health - dmg['DMG'])
                                        elif enh_type == 'BLAST':
                                            t_health = round(t_health - dmg['DMG'])
                                        elif enh_type == 'CREATION':
                                            o_max_health = round(o_max_health + dmg['DMG'])
                                            o_health = round(o_health + dmg['DMG'])
                                        elif enh_type == 'DESTRUCTION':
                                            t_max_health = round(t_max_health - dmg['DMG'])
                                        o_stamina = o_stamina - int(dmg['STAMINA_USED'])

                                        embedVar = discord.Embed(title=f"{dmg['MESSAGE']}", colour=embed_color_o)
                                        await button_ctx.send(embed=embedVar)
                                        turn_total = turn_total + 1
                                        turn = 1
                                    elif dmg['DMG'] == 0:
                                        o_stamina = o_stamina - int(dmg['STAMINA_USED'])

                                        embedVar = discord.Embed(title=f"{dmg['MESSAGE']}", colour=embed_color_o)
                                        if oarm_barrier_active:
                                            oarm_barrier_active=False
                                            embedVar.add_field(name=f"{o_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                        await ctx.send(embed=embedVar)
                                        turn_total = turn_total + 1
                                        turn = 1
                                    else:
                                        if t_universe == "Naruto" and t_stamina < 10:
                                            t_health = t_health 
                                            embedVar = discord.Embed(title=f"{t_card.upper()}: Substitution Jutsu", description=f"{o_card} strikes a log", colour=0xe91e63)
                                            if oarm_barrier_active:
                                                oarm_barrier_active=False
                                                embedVar.add_field(name=f"{o_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                            await ctx.send(embed=embedVar)
                                        elif tarm_shield_active:
                                            if tshield_value > 0:
                                                tshield_value = tshield_value -dmg['DMG']
                                                t_health = t_health 
                                                if tshield_value <=0:
                                                    embedVar = discord.Embed(title=f"{t_card.upper()}'s' **Shield** Shattered!", description=f"{o_card} breaks the **Shield**!", colour=0xe91e63)
                                                    if oarm_barrier_active:
                                                        oarm_barrier_active=False
                                                        embedVar.add_field(name=f"{o_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                    await ctx.send(embed=embedVar)
                                                    tarm_shield_active = False
                                                else:
                                                    embedVar = discord.Embed(title=f"{t_card.upper()} Activates **Shield** 🌐", description=f"{o_card} strikes the **Shield** for **{dmg['DMG']} DMG!**\n **{tshield_value} Shield** Left!", colour=0xe91e63)
                                                    if oarm_barrier_active:
                                                        oarm_barrier_active=False
                                                        embedVar.add_field(name=f"{o_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                    await ctx.send(embed=embedVar)

                                        elif tarm_barrier_active:
                                            if tbarrier_count >1:
                                                t_health = t_health 
                                                embedVar = discord.Embed(title=f"{t_card.upper()} Activates **Barrier** 💠", description=f"{o_card}'s attack **Nullified**!\n **{tbarrier_count - 1} Barriers** remain!", colour=0xe91e63)
                                                if oarm_barrier_active:
                                                    oarm_barrier_active=False
                                                    embedVar.add_field(name=f"{o_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                await ctx.send(embed=embedVar)
                                                tbarrier_count = tbarrier_count - 1
                                            elif tbarrier_count==1:
                                                embedVar = discord.Embed(title=f"{t_card.upper()}'s **Barrier** Broken!", description=f"{o_card} destroys the **Barrier**", colour=0xe91e63)
                                                tbarrier_count = tbarrier_count - 1
                                                if oarm_barrier_active:
                                                    oarm_barrier_active=False
                                                    embedVar.add_field(name=f"{o_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                await ctx.send(embed=embedVar)
                                                tarm_barrier_active = False

                                        elif tarm_parry_active:
                                            if tparry_count > 1:
                                                t_health = t_health
                                                tparry_damage = round(dmg['DMG'] / 2)
                                                t_health = t_health - tparry_damage
                                                o_health = o_health - tparry_damage
                                                tparry_count = tparry_count - 1
                                                embedVar = discord.Embed(title=f"{t_card.upper()} Activates **Parry** 🔄", description=f"{o_card} takes {tparry_damage}! DMG\n **{tparry_count} Parries** to go!!", colour=0xe91e63)
                                                if oarm_barrier_active:
                                                    oarm_barrier_active=False
                                                    embedVar.add_field(name=f"{o_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                await ctx.send(embed=embedVar)
                                                
                                            elif tparry_count==1:
                                                embedVar = discord.Embed(title=f"{t_card.upper()} **Parry** Penetrated!!", description=f"{o_card} breaks the **Parry**", colour=0xe91e63)
                                                t_health = t_health
                                                tparry_damage = round(dmg['DMG'] / 2)
                                                t_health = t_health - tparry_damage
                                                o_health = o_health - tparry_damage
                                                tparry_count = tparry_count - 1
                                                if oarm_barrier_active:
                                                    oarm_barrier_active=False
                                                    embedVar.add_field(name=f"{o_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                await ctx.send(embed=embedVar)
                                                tarm_parry_active = False
                                        else:
                                            t_health = t_health - dmg['DMG']
                                            embedVar = discord.Embed(title=f"{dmg['MESSAGE']}", colour=embed_color_o)
                                            if oarm_barrier_active:
                                                oarm_barrier_active=False
                                                embedVar.add_field(name=f"{o_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                            await ctx.send(embed=embedVar)
                                        if t_health <= 0:
                                            if t_final_stand==True:
                                                embedVar = discord.Embed(title=f"{t_card.upper()}'s LAST STAND", description=f"{t_card} FINDS RESOLVE", colour=0xe91e63)
                                                embedVar.add_field(name=f"{t_card} resolved and continues to fight", value="All stats & stamina increased")
                                                if oarm_barrier_active:
                                                    oarm_barrier_active=False
                                                    embedVar.add_field(name=f"{o_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                await ctx.send(embed=embedVar)
                                                t_health = int(.75 * (t_attack + t_defense))
                                                t_attack = t_attack + (.50 * t_attack)
                                                t_defense = t_defense + (.50 * t_defense)
                                                t_used_resolve = True
                                                t_final_stand = False
                                                t_used_focus = True
                                                o_stamina = o_stamina - dmg['STAMINA_USED']
                                                turn_total = turn_total + 1
                                                turn = 1
                                            else:
                                                t_health = 0
                                                o_stamina = o_stamina - dmg['STAMINA_USED']
                                                turn_total = turn_total + 1
                                        else:
                                            o_stamina = o_stamina - dmg['STAMINA_USED']
                                            turn_total = turn_total + 1
                                            turn = 1
                                else:
                                    emessage = m.NOT_ENOUGH_STAMINA
                                    embedVar = discord.Embed(title=emessage,
                                                             description=f"Use Enhancers to Increase **STAMINA** or attack to enter **FOCUS STATE**!",
                                                             colour=0xe91e63)
                                    await button_ctx.send(embed=embedVar)
                                    turn = 0
                        except asyncio.TimeoutError:
                            await ctx.send(f"{ctx.author.mention}, the raid has ended. ")
                            return
                # PLayer 2 Turn Start
                elif turn == 1:
                    await asyncio.sleep(1)
                    if t_attack <= 25:
                        t_attack = 25
                    if t_defense <= 30:
                        t_defense = 30
                    if t_health >= t_max_health:
                        t_health = t_max_health

                    # o_pet_used = True
                    if t_health <= (t_max_health * .25):
                        embed_color_t = 0xe74c3c
                        if t_chainsaw == True:
                            if t_atk_chainsaw == False:
                                t_atk_chainsaw = True
                                t_chainsaw = False
                                t_defense = t_defense * 2
                                t_attack = t_attack * 2
                                embedVar = discord.Embed(title=f"{t_card.upper()}'s Devilization",
                                                         description=f"**{t_card}** Doubles Stats", colour=0xe91e63)
                                await private_channel.send(embed=embedVar)

                    elif t_health <= (t_max_health * .50):
                        embed_color_t = 0xe67e22
                        if t_chainsaw == True:
                            if t_atk_chainsaw == False:
                                t_atk_chainsaw = True
                                t_chainsaw = False
                                t_defense = t_defense * 2
                                t_attack = t_attack * 2
                                embedVar = discord.Embed(title=f"{t_card.upper()}'s Devilization",
                                                         description=f"**{t_card}** Doubles Stats", colour=0xe91e63)
                                await private_channel.send(embed=embedVar)
                    elif t_health <= (t_max_health * .75):
                        embed_color_t = 0xf1c40f
                    else:
                        embed_color_t = 0x2ecc71

                    # Focus
                    if t_stamina < 10:
                        t_focus_count = t_focus_count + 1
                        # o_pet_used = True
                        fortitude = 0.0
                        low = t_health - (t_health * .90)
                        high = t_health - (t_health * .80)
                        fortitude = random.randint(int(low), int(high))

                        t_stamina = t_focus
                        t_healthcalc = round(((t_focus * .40) + (fortitude * 1)) / 2)
                        t_attackcalc = round(.20 * ((t_focus * .15) + round(fortitude * 1)))
                        t_defensecalc = round(.20 * ((t_focus * .10) + round(fortitude * 1)))
                        t_newhealth = 0
                        healmessage = ""
                        messagenumber = 0
                        if t_universe == "Crown Rift Madness":
                            healmessage = "yet inner **Madness** drags on..."
                            messagenumber = 3
                        else:
                            if t_health <= t_max_health:
                                t_newhealth = t_health + t_healthcalc
                                if t_newhealth > t_max_health:
                                    healmessage = f"recovered!"
                                    messagenumber = 1
                                    t_health = t_max_health
                                else:
                                    healmessage = f"stopped the bleeding..."
                                    messagenumber = 2
                                    t_health = t_newhealth
                            else:
                                healmessage = f"hasn't been touched..."
                                messagenumber = 0
                        if not t_used_resolve:
                            t_attack = t_attack + t_attackcalc
                            t_defense = t_defense + t_defensecalc
                        t_used_focus = True

                        embedVar = discord.Embed(title=f"{t_card.upper()} FOCUSED",
                                                 description=f"**{t_card} says**\n{t_focus_description}",
                                                 colour=0xe91e63)
                        embedVar.add_field(name=f"{t_card} focused and {healmessage}",
                                           value="All stats & stamina increased")
                        await private_channel.send(embed=embedVar)
                        if not t_used_resolve and t_used_focus and t_universe == "Digimon":  # Digimon Universal Trait
                            # fortitude or luck is based on health
                            fortitude = 0.0
                            low = t_health - (t_health * .75)
                            high = t_health - (t_health * .66)
                            fortitude = random.randint(int(low), int(high))
                            # Resolve Scaling
                            t_resolve_health = round(fortitude + (.5 * t_resolve))
                            t_resolve_attack = round((.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                            t_resolve_defense = round((.30 * t_defense) * (t_resolve / (.50 * t_defense)))

                            t_stamina = t_stamina + t_resolve
                            t_health = t_health + t_resolve_health
                            t_attack = round(t_attack + t_resolve_attack)
                            t_defense = round(t_defense - t_resolve_defense)
                            t_used_resolve = True

                            embedVar = discord.Embed(title=f"{t_card} STRENGTHENED RESOLVE :zap:",
                                                     description=f"**{t_card} says**\n{t_resolve_description}",
                                                     colour=0xe91e63)
                            embedVar.add_field(name=f"Transformation: Digivolve", value="On Focus you Resolve.")
                            await private_channel.send(embed=embedVar)

                        elif t_universe == "League Of Legends":
                            embedVar = discord.Embed(title=f"Turret Shot hits {o_card} for **30** Damage 💥",
                                                     colour=0xe91e63)
                            await private_channel.send(embed=embedVar)
                            o_health = round(o_health - 30)

                        elif t_universe == "Solo Leveling":
                            embedVar = discord.Embed(
                                title=f"Ruler's Authority... {o_card} loses **{30 + turn_total}** 🛡️ 🔻",
                                colour=0xe91e63)
                            await private_channel.send(embed=embedVar)
                            o_defense = round(o_defense - (30 + turn_total))

                        elif t_universe == "Attack On Titan":
                            embedVar = discord.Embed(title=f"Rally! **{t_card}** Increased Max Health ❤️",
                                                     colour=0xe91e63)
                            await private_channel.send(embed=embedVar)
                            t_max_health = round(t_max_health + 100)

                        elif t_universe == "Black Clover":
                            embedVar = discord.Embed(title=f"Mana Zone! {t_card} Increased Stamina 🌀", colour=0xe91e63)
                            await private_channel.send(embed=embedVar)
                            t_stamina = 100
                            tcard_lvl_ap_buff = tcard_lvl_ap_buff + 30
                        elif t_universe == "Death Note":
                            if turn_total >= 24:
                                embedVar = discord.Embed(title=f"{o_card.upper()}'s' Scheduled Death 📓",
                                                         description=f"**{t_card} says**\n**Delete**", colour=0xe91e63)
                                embedVar.add_field(name=f"{o_card} had a heart attack and died", value=f"Death....")
                                await private_channel.send(embed=embedVar)
                                o_health = 0

                        if o_universe == "One Punch Man":
                            embedVar = discord.Embed(title=f"Hero Reinforcements! {o_card} Increased Health!  ❤️",
                                                     colour=0xe91e63)
                            await private_channel.send(embed=embedVar)
                            o_health = round(o_health + 100)
                            o_max_health = round(o_max_health + 100)

                        elif o_universe == "7ds":
                            embedVar = discord.Embed(title=f"Increase Power Level! {o_card} Increased Stamina 🌀",
                                                     colour=0xe91e63)
                            await private_channel.send(embed=embedVar)
                            o_stamina = o_stamina + 60

                        elif o_universe == "Souls":
                            embedVar = discord.Embed(
                                title=f"Combo Recognition! {o_card} Increased Attack by **{30 + turn_total}** 🔺 ",
                                colour=0xe91e63)
                            await private_channel.send(embed=embedVar)
                            o_attack = round(o_attack + (30 + turn_total))

                        else:
                            turn_total = turn_total + 1
                            if t_universe != "Crown Rift Madness":
                                turn = 0
                            else:
                                turn = 1
                        turn_total = turn_total + 1
                        if t_universe != "Crown Rift Madness":
                            turn = 0
                        else:
                            turn = 1
                    else:
                        # UNIVERSE CARD
                        tap1 = list(t_1.values())[0] + tcard_lvl_ap_buff
                        tap2 = list(t_2.values())[0] + tcard_lvl_ap_buff
                        tap3 = list(t_3.values())[0] + tcard_lvl_ap_buff
                        tenh1 = list(t_enhancer.values())[0]
                        tenh_name = list(t_enhancer.values())[2]
                        tpet_enh_name = list(tpet_move.values())[2]
                        tpet_msg_on_resolve = ""
                        player_2_card = showcard(t, t_max_health, t_health, t_max_stamina, t_stamina, t_used_resolve,
                                                 ttitle, t_used_focus, t_attack, t_defense, turn_total, tap1, tap2,
                                                 tap3, tenh1, tenh_name, tcard_lvl, o_defense)
                        await private_channel.send(file=player_2_card)
                        aiMove = 0

                        if o_stamina < 0:
                            aiMove = 1
                        elif t_health <= (.50 * t_max_health) and t_used_resolve == False and t_used_focus:
                            aiMove = 5
                        elif t_stamina >= 160 and (t_health >= o_health):
                            aiMove = 3
                        elif t_stamina >= 160:
                            aiMove = 3
                        elif t_stamina >= 150 and (t_health >= o_health):
                            aiMove = 1
                        elif t_stamina >= 150:
                            aiMove = 1
                        elif t_stamina >= 140 and (t_health >= o_health):
                            aiMove = 1
                        elif t_stamina >= 140:
                            aiMove = 3
                        elif t_stamina >= 130 and (t_health >= o_health):
                            aiMove = 1
                        elif t_stamina >= 130:
                            aiMove = 3
                        elif t_stamina >= 120 and (t_health >= o_health):
                            aiMove = 2
                        elif t_stamina >= 120:
                            aiMove = 3
                        elif t_stamina >= 110 and (t_health >= o_health):
                            aiMove = 1
                        elif t_stamina >= 110:
                            aiMove = 2
                        elif t_stamina >= 100 and (t_health >= o_health):
                            aiMove = 4
                        elif t_stamina >= 100:
                            aiMove = 1
                        elif t_stamina >= 90 and (t_health >= o_health):
                            aiMove = 3
                        elif t_stamina >= 90:
                            aiMove = 4
                        elif t_stamina >= 80 and (t_health >= o_health):
                            aiMove = 1
                        elif t_stamina >= 80:
                            aiMove = 3
                        elif t_stamina >= 70 and (t_health >= o_health):
                            aiMove = 4
                        elif t_stamina >= 70:
                            aiMove = 1
                        elif t_stamina >= 60 and (t_health >= o_health):
                            if t_used_resolve == False and t_used_focus:
                                aiMove = 5
                            elif t_used_focus == False:
                                aiMove = 2
                            else:
                                aiMove = 1
                        elif t_stamina >= 60:
                            if t_used_resolve == False and t_used_focus:
                                aiMove = 5
                            elif t_used_focus == False:
                                aiMove = 2
                            else:
                                aiMove = 1
                        elif t_stamina >= 50 and (t_health >= o_health):
                            if t_stamina >= o_stamina:
                                aiMove = 4
                            else:
                                aiMove = 1
                        elif t_stamina >= 50:
                            aiMove = 2
                        elif t_stamina >= 40 and (t_health >= o_health):
                            aiMove = 1
                        elif t_stamina >= 40:
                            aiMove = 2
                        elif t_stamina >= 30 and (t_health >= o_health):
                            aiMove = 4
                        elif t_stamina >= 30:
                            aiMove = 2
                        elif t_stamina >= 20 and (t_health >= o_health):
                            aiMove = 1
                        elif t_stamina >= 20:
                            aiMove = 4
                        elif t_stamina >= 10:
                            aiMove = 1
                        else:
                            aiMove = 0

                        if int(aiMove) == 0:
                            t_health = 0
                        if int(aiMove) == 1:
                            dmg = damage_cal(t_universe, t_card, t_1, t_attack, t_defense, o_defense,
                                             t_stamina, t_enhancer_used, t_health, o_health, o_stamina, t_max_health,
                                             o_attack, t_special_move_description, turn_total, tcard_lvl_ap_buff)
                        elif int(aiMove) == 2:
                            dmg = damage_cal(t_universe, t_card, t_2, t_attack, t_defense, o_defense, 
                                             t_stamina, t_enhancer_used, t_health, o_health, o_stamina, t_max_health,
                                             o_attack, t_special_move_description, turn_total, tcard_lvl_ap_buff)
                        elif int(aiMove) == 3:
                            dmg = damage_cal(t_universe, t_card, t_3, t_attack, t_defense, o_defense,
                                             t_stamina, t_enhancer_used, t_health, o_health, o_stamina, t_max_health,
                                             o_attack, t_special_move_description, turn_total, tcard_lvl_ap_buff)
                            if t_gif != "N/A":
                                await private_channel.send(f"{t_gif}")
                        elif int(aiMove) == 4:
                            t_enhancer_used = True
                            dmg = damage_cal(t_universe, t_card, t_enhancer, t_attack, t_defense, o_defense, t_stamina, t_enhancer_used, t_health, o_health, o_stamina,
                                             t_max_health, o_attack, t_special_move_description, turn_total,
                                             tcard_lvl_ap_buff)
                            t_enhancer_used = False
                        elif int(aiMove) == 5:
                            if not t_used_resolve and t_used_focus:
                                if t_universe == "My Hero Academia":  # My hero TRait
                                    # fortitude or luck is based on health
                                    fortitude = 0.0
                                    low = t_health - (t_health * .75)
                                    high = t_health - (t_health * .66)
                                    fortitude = random.randint(int(low), int(high))
                                    # Resolve Scaling
                                    t_resolve_health = round(fortitude + (.5 * t_resolve))
                                    t_resolve_attack = round((.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                    t_resolve_defense = round((.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                    tcard_lvl_ap_buff = tcard_lvl_ap_buff + 50

                                    t_stamina = t_stamina + t_resolve
                                    t_health = t_health + t_resolve_health
                                    t_attack = round(t_attack + t_resolve_attack)
                                    t_defense = round(t_defense - t_resolve_defense)
                                    t_used_resolve = True

                                    embedVar = discord.Embed(title=f"{t_card.upper()} PLUS ULTRAAA",
                                                             description=f"**{t_card} says**\n{t_resolve_description}",
                                                             colour=0xe91e63)
                                    embedVar.add_field(name=f"Transformation: Plus Ultra",
                                                       value="You do not lose a turn after you Resolve.")
                                    await private_channel.send(embed=embedVar)
                                    turn_total = turn_total + 1
                                    turn = 1
                                elif t_universe == "Attack On Titan":
                                    # fortitude or luck is based on health
                                    fortitude = 0.0
                                    low = t_health - (t_health * .75)
                                    high = t_health - (t_health * .66)
                                    fortitude = random.randint(int(low), int(high))
                                    # Resolve Scaling
                                    t_resolve_health = round(fortitude + (.5 * t_resolve))
                                    t_resolve_attack = round((.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                    t_resolve_defense = round((.30 * t_defense) * (t_resolve / (.50 * t_defense)))

                                    t_stamina = t_stamina + t_resolve
                                    t_health = t_health + t_resolve_health
                                    t_attack = round(t_attack + t_resolve_attack)
                                    t_defense = round(t_defense - t_resolve_defense)
                                    t_used_resolve = True
                                    t_pet_used = False
                                    health_boost = 100 * t_focus_count
                                    t_health = t_health + health_boost
                                    embedVar = discord.Embed(title=f"{t_card.upper()} Titan Mode",
                                                             description=f"**{t_card} says**\n{t_resolve_description}",
                                                             colour=0xe91e63)
                                    embedVar.add_field(name=f"Transformation Complete",
                                                       value=f"Health increased by **{health_boost}**!")

                                    turn_total = turn_total + 1
                                    turn = 0

                                elif t_universe == "Bleach":  # Bleach Trait
                                    # fortitude or luck is based on health
                                    fortitude = 0.0
                                    low = t_health - (t_health * .75)
                                    high = t_health - (t_health * .66)
                                    fortitude = random.randint(int(low), int(high))
                                    # Resolve Scaling
                                    t_resolve_health = round(fortitude + (.5 * t_resolve))
                                    t_resolve_attack = round((.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                    t_resolve_defense = round((.30 * t_defense) * (t_resolve / (.50 * t_defense)))

                                    t_stamina = t_stamina + t_resolve
                                    t_health = t_health + t_resolve_health
                                    t_attack = round((t_attack + (2 * t_resolve_attack)) * 2)
                                    t_defense = round(t_defense - t_resolve_defense)
                                    # if t_defense >= 120:
                                    # t_defense = 120
                                    t_used_resolve = True

                                    embedVar = discord.Embed(title=f"{t_card} STRENGTHENED RESOLVE :zap:",
                                                             description=f"**{t_card} says**\n{t_resolve_description}",
                                                             colour=0xe91e63)
                                    embedVar.add_field(name=f"Transformation: Bankai",
                                                       value="Gain double Attack on Resolve.")
                                    await private_channel.send(embed=embedVar)
                                    turn_total = turn_total + 1
                                    turn = 0
                                elif t_universe == "God Of War":  # God Of War Trait
                                    # fortitude or luck is based on health
                                    fortitude = 0.0
                                    low = t_health - (t_health * .75)
                                    high = t_health - (t_health * .66)
                                    fortitude = random.randint(int(low), int(high))
                                    # Resolve Scaling
                                    t_resolve_health = round(fortitude + (.5 * t_resolve))
                                    t_resolve_attack = round((.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                    t_resolve_defense = round((.30 * t_defense) * (t_resolve / (.50 * t_defense)))

                                    t_stamina = t_stamina + t_resolve
                                    t_health = t_max_health
                                    t_attack = round(t_attack + t_resolve_attack)
                                    t_defense = round(t_defense - t_resolve_defense)
                                    t_used_resolve = True

                                    embedVar = discord.Embed(title=f"{t_card} STRENGTHENED RESOLVE :zap:",
                                                             description=f"**{t_card} says**\n{t_resolve_description}",
                                                             colour=0xe91e63)
                                    embedVar.add_field(name=f"Transformation: Ascension",
                                                       value="On Resolve Refill Health.")
                                    await private_channel.send(embed=embedVar)
                                    turn_total = turn_total + 1
                                    turn = 0
                                elif t_universe == "Fate":  # Fate Trait
                                    # fortitude or luck is based on health
                                    fortitude = 0.0
                                    low = t_health - (t_health * .75)
                                    high = t_health - (t_health * .66)
                                    fortitude = random.randint(int(low), int(high))
                                    # Resolve Scaling
                                    t_resolve_health = round(fortitude + (.5 * t_resolve))
                                    t_resolve_attack = round((.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                    t_resolve_defense = round((.30 * t_defense) * (t_resolve / (.50 * t_defense)))

                                    t_stamina = t_stamina + t_resolve
                                    t_health = t_health + t_resolve_health
                                    t_attack = round(t_attack + t_resolve_attack)
                                    t_defense = round(t_defense - t_resolve_defense)
                                    t_used_resolve = True

                                    dmg = damage_cal(t_universe, t_card, t_3, t_attack, t_defense, o_defense, t_stamina, t_enhancer_used, t_health, o_health,
                                                     o_stamina, t_max_health, o_attack, t_special_move_description,
                                                     turn_total, tcard_lvl_ap_buff)
                                    t_pet_used = False
                                    o_health = o_health - int(dmg['DMG'])
                                    embedVar = discord.Embed(
                                        title=f"{t_card} STRENGTHENED RESOLVE :zap:\n\n{dmg['MESSAGE']}",
                                        description=f"**{t_card} says**\n{t_resolve_description}", colour=0xe91e63)
                                    embedVar.add_field(name=f"Transformation: Command Seal",
                                                       value="On Resolve, Strike with Ultimate, then Focus.")
                                    await private_channel.send(embed=embedVar)
                                    # t_stamina = 0
                                    turn_total = turn_total + 1
                                    turn = 0
                                elif t_universe == "Kanto Region" or t_universe == "Johto Region" or t_universe == "Hoenn Region" or t_universe == "Sinnoh Region" or t_universe == "Kalos Region" or t_universe == "Unova Region" or t_universe == "Alola Region" or t_universe == "Galar Region":  # Pokemon Resolves
                                    # fortitude or luck is based on health
                                    fortitude = 0.0
                                    low = t_health - (t_health * .75)
                                    high = t_health - (t_health * .66)
                                    fortitude = random.randint(int(low), int(high))
                                    # Resolve Scaling
                                    t_resolve_health = round(fortitude + (.5 * t_resolve))
                                    t_resolve_attack = round((.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                    t_resolve_defense = round((.30 * t_defense) * (t_resolve / (.50 * t_defense)))

                                    t_stamina = t_stamina + t_resolve
                                    t_health = t_health + t_resolve_health
                                    t_attack = round(t_attack + t_resolve_attack)
                                    t_defense = round(t_defense) * 2
                                    t_used_resolve = True

                                    embedVar = discord.Embed(title=f"{t_card} STRENGTHENED RESOLVE :zap:",
                                                             description=f"**{t_card} says**\n{t_resolve_description}",
                                                             colour=0xe91e63)
                                    embedVar.add_field(name=f"Transformation: Evolution",
                                                       value="When you Resolve you do not lose Defense.")
                                    await private_channel.send(embed=embedVar)
                                    turn_total = turn_total + 1
                                    turn = 0
                                else:
                                    # fortitude or luck is based on health
                                    fortitude = 0.0
                                    low = t_health - (t_health * .75)
                                    high = t_health - (t_health * .66)
                                    fortitude = random.randint(int(low), int(high))
                                    # Resolve Scaling
                                    t_resolve_health = round(fortitude + (.5 * t_resolve))
                                    t_resolve_attack = round((.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                    t_resolve_defense = round((.30 * t_defense) * (t_resolve / (.50 * t_defense)))

                                    t_stamina = t_stamina + t_resolve
                                    t_health = t_health + t_resolve_health
                                    t_attack = round(t_attack + t_resolve_attack)
                                    t_defense = round(t_defense - t_resolve_defense)
                                    t_used_resolve = True

                                    if t_universe == "League Of Legends":
                                        o_health = o_health - (30 * (o_focus_count + t_focus_count))
                                        embedVar = discord.Embed(title=f"{t_card.upper()} PENTA KILL!",
                                                                 description=f"**{t_card} says**\n{t_resolve_description}",
                                                                 colour=0xe91e63)
                                        embedVar.add_field(name=f"Nexus Destroyed",
                                                           value=f"**{t_card}** dealt **{(30 * (o_focus_count + t_focus_count))}** damage.")
                                    else:
                                        embedVar = discord.Embed(title=f"{t_card} STRENGTHENED RESOLVE :zap:",
                                                                 description=f"**{t_card} says**\n{t_resolve_description}",
                                                                 colour=0xe91e63)
                                        embedVar.add_field(name=f"Transformation",
                                                           value="All stats & stamina greatly increased")
                                    await private_channel.send(embed=embedVar)
                                    turn_total = turn_total + 1
                                    turn = 0
                            else:
                                await private_channel.send(m.CANNOT_USE_RESOLVE)
                                turn = 1
                        if int(aiMove) != 5:
                            # If you have enough stamina for move, use it
                            if dmg['CAN_USE_MOVE']:
                                if dmg['ENHANCE']:
                                    enh_type = dmg['ENHANCED_TYPE']
                                    if enh_type == 'ATK':
                                        t_attack = round(t_attack + dmg['DMG'])
                                    elif enh_type == 'DEF':
                                        t_defense = round(t_defense + dmg['DMG'])
                                    elif enh_type == 'STAM':
                                        t_stamina = round(t_stamina + dmg['DMG'])
                                    elif enh_type == 'HLT':
                                        t_health = round(t_health + dmg['DMG'])
                                    elif enh_type == 'LIFE':
                                        t_health = round(t_health + dmg['DMG'])
                                        o_health = round(o_health - dmg['DMG'])
                                    elif enh_type == 'DRAIN':
                                        t_stamina = round(t_stamina + dmg['DMG'])
                                        o_stamina = round(o_stamina - dmg['DMG'])
                                    elif enh_type == 'FLOG':
                                        t_attack = round(t_attack + dmg['DMG'])
                                        o_attack = round(o_attack - dmg['DMG'])
                                    elif enh_type == 'WITHER':
                                        t_defense = round(t_defense + dmg['DMG'])
                                        o_defense = round(o_defense - dmg['DMG'])
                                    elif enh_type == 'RAGE':
                                        t_defense = round(t_defense - dmg['DMG'])
                                        t_attack = round(t_attack + dmg['DMG'])
                                    elif enh_type == 'BRACE':
                                        t_defense = round(t_defense + dmg['DMG'])
                                        t_attack = round(t_attack - dmg['DMG'])
                                    elif enh_type == 'BZRK':
                                        t_health = round(t_health - dmg['DMG'])
                                        t_attack = round(t_attack + dmg['DMG'])
                                    elif enh_type == 'CRYSTAL':
                                        t_health = round(t_health - dmg['DMG'])
                                        t_defense = round(t_defense + dmg['DMG'])
                                    elif enh_type == 'GROWTH':
                                        t_max_health = round(t_max_health - dmg['DMG'])
                                        t_defense = round(t_defense + (.3 * dmg['DMG']))
                                        t_attack = round(t_attack + (.3 * dmg['DMG']))
                                    elif enh_type == 'STANCE':
                                        tempattack = dmg['DMG']
                                        t_attack = t_defense
                                        t_defense = tempattack
                                    elif enh_type == 'CONFUSE':
                                        tempattack = dmg['DMG']
                                        o_attack = o_defense
                                        o_defense = tempattack
                                    elif enh_type == 'BLINK':
                                        t_stamina = round(t_stamina - dmg['DMG'])
                                        o_stamina = round(o_stamina + dmg['DMG'] - 10)
                                    elif enh_type == 'SLOW':
                                        tempstam = round(o_stamina + dmg['DMG'])
                                        t_stamina = round(t_stamina - dmg['DMG'])
                                        o_stamina = t_stamina
                                        t_stamina = tempstam
                                    elif enh_type == 'HASTE':
                                        tempstam = round(o_stamina - dmg['DMG'])
                                        t_stamina = round(t_stamina + dmg['DMG'])
                                        o_stamina = t_stamina
                                        t_stamina = tempstam
                                    elif enh_type == 'SOULCHAIN':
                                        t_stamina = round(dmg['DMG'])
                                        o_stamina = t_stamina
                                    elif enh_type == 'GAMBLE':
                                        t_health = round(dmg['DMG'])
                                        o_health = t_health
                                    elif enh_type == 'FEAR':
                                        t_health = round(t_health - ((dmg['DMG'] / 100) * t_health))
                                        o_attack = round(o_attack - ((dmg['DMG'] / 100) * o_attack))
                                        o_defense = round(o_defense - ((dmg['DMG'] / 100) * o_defense))
                                    elif enh_type == 'WAVE':
                                        o_health = round(o_health - dmg['DMG'])
                                    elif enh_type == 'BLAST':
                                        o_health = round(o_health - dmg['DMG'])
                                    elif enh_type == 'CREATION':
                                        t_max_health = round(t_max_health + dmg['DMG'])
                                        t_health = round(t_health + dmg['DMG'])
                                    elif enh_type == 'DESTRUCTION':
                                        o_max_health = round(o_max_health - dmg['DMG'])
                                    t_stamina = t_stamina - int(dmg['STAMINA_USED'])
                                    embedVar = discord.Embed(title=f"{dmg['MESSAGE']}", colour=embed_color_t)
                                    await private_channel.send(embed=embedVar)
                                    turn_total = turn_total + 1
                                    turn = 0
                                elif dmg['DMG'] == 0:
                                    t_stamina = t_stamina - int(dmg['STAMINA_USED'])
                                    embedVar = discord.Embed(title=f"{dmg['MESSAGE']}", colour=embed_color_t)
                                    if tarm_barrier_active:
                                        tarm_barrier_active=False
                                        embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                    await private_channel.send(embed=embedVar)
                                    turn_total = turn_total + 1
                                    turn = 0
                                else:
                                    if o_universe == "Naruto" and o_stamina < 10:
                                        o_health = o_health 
                                        embedVar = discord.Embed(title=f"{o_card.upper()}: Substitution Jutsu", description=f"{t_card} strikes a log", colour=0xe91e63)
                                        if tarm_barrier_active:
                                            tarm_barrier_active=False
                                            embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                        await private_channel.send(embed=embedVar)
                                    elif oarm_shield_active:
                                        if oshield_value > 0:
                                            oshield_value = oshield_value -dmg['DMG']
                                            o_health = o_health 
                                            if oshield_value <=0:
                                                embedVar = discord.Embed(title=f"{o_card.upper()}'s' **Shield** Shattered!", description=f"{t_card} breaks the **Shield**!", colour=0xe91e63)
                                                if tarm_barrier_active:
                                                    tarm_barrier_active=False
                                                    embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                await ctx.send(embed=embedVar)
                                                oarm_shield_active = False
                                            else:
                                                embedVar = discord.Embed(title=f"{o_card.upper()} Activates **Shield** 🌐", description=f"{t_card} strikes the **Shield** for **{dmg['DMG']} DMG!**\n **{oshield_value} Shield** Left!", colour=0xe91e63)
                                                if tarm_barrier_active:
                                                    tarm_barrier_active=False
                                                    embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                await ctx.send(embed=embedVar)

                                    elif oarm_barrier_active:
                                        if obarrier_count >1:
                                            o_health = o_health 
                                            embedVar = discord.Embed(title=f"{o_card.upper()} Activates **Barrier** 💠", description=f"{t_card}'s attack **Nullified**!\n {obarrier_count - 1} **Barriers** remain!", colour=0xe91e63)
                                            if tarm_barrier_active:
                                                tarm_barrier_active=False
                                                embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                            await ctx.send(embed=embedVar)
                                            obarrier_count = obarrier_count - 1
                                        elif obarrier_count==1:
                                            embedVar = discord.Embed(title=f"{o_card.upper()}'s **Barrier** Broken!", description=f"{t_card} destroys the **Barrier**", colour=0xe91e63)
                                            obarrier_count = obarrier_count - 1
                                            if tarm_barrier_active:
                                                tarm_barrier_active=False
                                                embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                            await ctx.send(embed=embedVar)
                                            oarm_barrier_active = False
                                    elif oarm_parry_active:
                                        if oparry_count > 1:
                                            oparry_damage = round(dmg['DMG'] / 2)
                                            o_health = o_health - oparry_damage
                                            t_health = t_health - oparry_damage
                                            oparry_count = oparry_count - 1
                                            embedVar = discord.Embed(title=f"{o_card.upper()} Activates **Parry** 🔄", description=f"{t_card} takes {oparry_damage}! DMG\n **{oparry_count} Parries** to go!!", colour=0xe91e63)
                                            if tarm_barrier_active:
                                                tarm_barrier_active=False
                                                embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                            await ctx.send(embed=embedVar)
                                            
                                        elif oparry_count==1:
                                            embedVar = discord.Embed(title=f"{o_card.upper()} **Parry** Penetrated!!", description=f"{t_card} breaks the **Parry**", colour=0xe91e63)
                                            oparry_damage = round(dmg['DMG'] / 2)
                                            o_health = o_health - oparry_damage
                                            t_health = t_health - oparry_damage
                                            oparry_count = oparry_count - 1
                                            if tarm_barrier_active:
                                                tarm_barrier_active=False
                                                embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                            await ctx.send(embed=embedVar)
                                            oarm_parry_active = False
                                    else:
                                        o_health = o_health - int(dmg['DMG'])
                                        embedVar = discord.Embed(title=f"{dmg['MESSAGE']}", colour=embed_color_t)
                                        if tarm_barrier_active:
                                            tarm_barrier_active=False
                                            embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                        await private_channel.send(embed=embedVar)
                                    if o_health <= 0:
                                        if o_final_stand==True:
                                            embedVar = discord.Embed(title=f"{o_card.upper()}'s LAST STAND", description=f"{o_card} FINDS RESOLVE", colour=0xe91e63)
                                            embedVar.add_field(name=f"{o_card} resolved and continues to fight", value="All stats & stamina increased")
                                            if tarm_barrier_active:
                                                tarm_barrier_active=False
                                                embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                            await private_channel.send(embed=embedVar)
                                            o_health = int(.75 * (o_attack + o_defense))
                                            o_attack = o_attack + (.50 * o_attack)
                                            o_defense = o_defense + (.50 * o_defense)
                                            o_stamina = 100
                                            o_used_resolve = True
                                            o_used_focus = True
                                            o_final_stand = False
                                            t_stamina = t_stamina - int(dmg['STAMINA_USED'])
                                            turn_total = turn_total + 1
                                            turn = 0
                                        else:
                                            o_health = 0
                                            t_stamina = t_stamina - int(dmg['STAMINA_USED'])
                                            turn_total = turn_total + 1
                                    else:
                                        t_stamina = t_stamina - int(dmg['STAMINA_USED'])
                                        turn_total = turn_total + 1
                                        turn = 0
                            else:
                                await private_channel.send(m.NOT_ENOUGH_STAMINA)
                                turn = 1
            if botActive:
                end_message = "Use the /end command to end the tutorial lobby"
            else:
                end_message = "Try Again!"
            # End the match
            if o_health <= 0 or o_max_health <= 0:
                # await ctx.send(f":zap: {user2.mention} you win the match!")
                uid = t_DID
                tuser = await self.bot.fetch_user(uid)
                wintime = time.asctime()
                h_playtime = int(wintime[11:13])
                m_playtime = int(wintime[14:16])
                s_playtime = int(wintime[17:19])
                gameClock = getTime(int(h_gametime), int(m_gametime), int(s_gametime), h_playtime, m_playtime,
                                    s_playtime)
                match = await savematch(str(tuser), str(t_card), str(t_card_path), str(ttitle['TITLE']),
                                        str(tarm['ARM']), "N/A", "PVP", o['EXCLUSIVE'])
                ouid = sowner['DID']
                sownerctx = await self.bot.fetch_user(ouid)
                # response = await score(sownerctx, tuser)
                guild_query = {'FOUNDER': guild_info['FOUNDER']}
                guildwin = db.updateGuild(guild_query, {'$inc': {'BOUNTY': fee, 'STREAK': 1}})
                bounty = guild_info['BOUNTY']
                bonus = guild_info['STREAK']
                total_bounty = (bounty + ((bonus / 100) * bounty))
                wage = .10 * total_bounty

                await curse(3, str(ctx.author))
                await bless(8, t_user)
                if tguild:
                    await bless(wage, str(t_user))
                    await blessteam(wage, tteam)
                    await teamwin(tteam)
                    await blessguild(fee, tguild)
                    if oguild:
                        await curse(7, str(ctx.author))
                        await curseteam(15, oteam)
                        await teamloss(oteam)
                        await curseguild(30, oguild)
                embedVar = discord.Embed(title=f"🛡️ **{t_card}** defended the {guild_info['GNAME']}",
                                         description=f"Match concluded in {turn_total} turns\n**{t_card} says**\n`{t_win_description}`",
                                         colour=0x1abc9c)
                embedVar.set_author(name=f"{o_card} says:\n{o_lose_description}")
                if int(gameClock[0]) == 0 and int(gameClock[1]) == 0:
                    embedVar.set_footer(text=f"Battle Time: {gameClock[2]} Seconds.")
                elif int(gameClock[0]) == 0:
                    embedVar.set_footer(text=f"Battle Time: {gameClock[1]} Minutes and {gameClock[2]} Seconds.")
                else:
                    embedVar.set_footer(
                        text=f"Battle Time: {gameClock[0]} Hours {gameClock[1]} Minutes and {gameClock[2]} Seconds.")
                embedVar.add_field(name="Focus Count",
                                   value=f"**{o_card}**: {o_focus_count}\n**{t_card}**: {t_focus_count}")
                if o_focus_count >= t_focus_count:
                    embedVar.add_field(name="Most Focused", value=f"**{o_card}**")
                else:
                    embedVar.add_field(name="Most Focused", value=f"**{t_card}**")
                await ctx.send(embed=embedVar)

            elif t_health <= 0 or t_max_health <= 0:
                uid = o_DID
                tuser = await self.bot.fetch_user(uid)
                ouser = await self.bot.fetch_user(uid)
                wintime = time.asctime()
                h_playtime = int(wintime[11:13])
                m_playtime = int(wintime[14:16])
                s_playtime = int(wintime[17:19])
                gameClock = getTime(int(h_gametime), int(m_gametime), int(s_gametime), h_playtime, m_playtime,
                                    s_playtime)
                ouid = sowner['DID']
                sownerctx = await self.bot.fetch_user(ouid)
                # response = await score(sownerctx, ouser)
                guild_query = {'FOUNDER': guild_info['FOUNDER']}
                bounty = guild_info['BOUNTY']
                bonus = guild_info['STREAK']
                total_bounty = (bounty + ((bonus / 100) * bounty))
                winbonus = int(((bonus / 100) * bounty))
                if winbonus == 0:
                    winbonus = bounty
                wage = int(total_bounty / 3)
                endmessage = ":yen: SHIELD BOUNTY CLAIMED"
                if title_match_active:
                    if shield_test_active:
                        endmessage = f":flags: {guild_info['GNAME']} DEFENSE TEST OVER!"
                    else:
                        newshield = db.updateGuild(guild_query, {'$set': {'SHIELD': str(ctx.author)}})
                        guildwin = db.updateGuild(guild_query, {'$set': {'BOUNTY': winbonus, 'STREAK': 1}})
                        endmessage = f":flags: {guild_info['GNAME']} SHIELD CLAIMED!"
                else:
                    guildloss = db.updateGuild(guild_query, {'$set': {'BOUNTY': fee, 'STREAK': 0}})

                await bless(8, str(ctx.author))
                await curse(3, str(t_user))
                if oguild:
                    await bless(wage, str(ctx.author))
                    await blessteam(wage, oteam)
                    await teamwin(oteam)
                    await blessguild(wage, str(oguild_name))
                    if tguild:
                        await curse(7, str(t_user))
                        await curseteam(15, tteam)
                        await teamloss(tteam)
                        await curseguild(30, tguild)
                match = await savematch(str(ouser), str(o_card), str(o_card_path), str(otitle['TITLE']),
                                        str(oarm['ARM']), "N/A", "PVP", o['EXCLUSIVE'])
                embedVar = discord.Embed(
                    title=f"{endmessage}\n**{o_card} says**\n{o_win_description}\n\n You have defeated the {guild_info['GNAME']} SHIELD!",
                    description=f"The match lasted {turn_total} turns", colour=0xe91e63)
                embedVar.set_author(name=f"{t_card} says\n{t_lose_description}")
                if int(gameClock[0]) == 0 and int(gameClock[1]) == 0:
                    embedVar.set_footer(text=f"Battle Time: {gameClock[2]} Seconds.")
                elif int(gameClock[0]) == 0:
                    embedVar.set_footer(text=f"Battle Time: {gameClock[1]} Minutes and {gameClock[2]} Seconds.")
                else:
                    embedVar.set_footer(
                        text=f"Battle Time: {gameClock[0]} Hours {gameClock[1]} Minutes and {gameClock[2]} Seconds.")
                embedVar.add_field(name="Focus Count",
                                   value=f"**{o_card}**: {o_focus_count}\n**{t_card}**: {t_focus_count}")
                if o_focus_count >= t_focus_count:
                    embedVar.add_field(name="Most Focused", value=f"**{o_card}**")
                else:
                    embedVar.add_field(name="Most Focused", value=f"**{t_card}**")
                await ctx.send(embed=embedVar)
                if botActive:
                    embedVar = discord.Embed(title=f"TUTORIAL COMPLETE",
                                             description=f"Victories earn **ITEMS** ! Use the /end command to **END** the tutorial lobby\nOR use /start to **PLAY AGAIN**",
                                             colour=0xe91e63)
                    embedVar.set_author(name=f"Congratulations You Beat Senpai!")
                    embedVar.add_field(name="Tips!",
                                       value="Equiping stronger **TITLES** and **ARMS** will make you character tougher in a fight!")
                    embedVar.set_footer(
                        text="The /shop is full of strong CARDS, TITLES and ARMS try different combinations! ")
                    await ctx.send(embed=embedVar)
        except Exception as ex:
            trace = []
            tb = ex.__traceback__
            while tb is not None:
                trace.append({
                    "filename": tb.tb_frame.f_code.co_filename,
                    "name": tb.tb_frame.f_code.co_name,
                    "lineno": tb.tb_lineno
                })
                tb = tb.tb_next
            print(str({
                'type': type(ex).__name__,
                'message': str(ex),
                'trace': trace
            }))
            await ctx.send(f"ERROR:\nTYPE: {type(ex).__name__}\nMESSAGE: {str(ex)}\nLINE: {trace} ")
            return

    @cog_ext.cog_slash(description="View all Cards of a Universe you unlocked", guild_ids=main.guild_ids)
    async def cardlist(self, ctx: SlashContext, universe: str):
        universe_data = db.queryUniverse({'TITLE': {"$regex": str(universe), "$options": "i"}})
        user = db.queryUser({'DISNAME': str(ctx.author)})
        list_of_cards = db.queryAllCardsBasedOnUniverse({'UNIVERSE': {"$regex": str(universe), "$options": "i"}})
        cards = [x for x in list_of_cards]
        dungeon_card_details = []
        tales_card_details = []
        destiny_card_details = []
        for card in cards:
            available = ""
            is_skin = ""
            if card['AVAILABLE'] and card['EXCLUSIVE']:
                available = ":purple_circle:"
            elif card['AVAILABLE'] and not card['HAS_COLLECTION']:
                available = ":green_circle:"
            elif card['HAS_COLLECTION']:
                available = ":blue_circle:"
            else:
                available = "🟠"
            if card['IS_SKIN']:
                is_skin = ":white_circle:"
            if card['EXCLUSIVE'] and not card['HAS_COLLECTION']:
                dungeon_card_details.append(
                    f"{is_skin}{available} **{card['NAME']}**: :coin:{'{:,}'.format(card['PRICE'])}\n:heart: {card['HLT']} :dagger: {card['ATK']}  🛡️ {card['DEF']}\n")
            elif not card['HAS_COLLECTION']:
                tales_card_details.append(
                    f"{is_skin}{available} **{card['NAME']}**: :coin:{'{:,}'.format(card['PRICE'])}\n:heart: {card['HLT']} :dagger: {card['ATK']}  🛡️ {card['DEF']}\n")
            elif card['HAS_COLLECTION']:
                destiny_card_details.append(
                    f"{is_skin}{available} **{card['NAME']}**: :coin:{'{:,}'.format(card['PRICE'])}\n:heart: {card['HLT']} :dagger: {card['ATK']}  🛡️ {card['DEF']}\n")

        all_cards = []
        if tales_card_details:
            for t in tales_card_details:
                all_cards.append(t)

        if dungeon_card_details:
            for d in dungeon_card_details:
                all_cards.append(d)

        if destiny_card_details:
            for de in destiny_card_details:
                all_cards.append(de)

        total_cards = len(all_cards)

        # Adding to array until divisible by 10
        while len(all_cards) % 10 != 0:
            all_cards.append("")
        # Check if divisible by 10, then start to split evenly

        if len(all_cards) % 10 == 0:
            first_digit = int(str(len(all_cards))[:1])
            if len(all_cards) >= 89:
                if first_digit == 1:
                    first_digit = 10
            # first_digit = 10
            cards_broken_up = np.array_split(all_cards, first_digit)

        # If it's not an array greater than 10, show paginationless embed
        if len(all_cards) < 10:
            embedVar = discord.Embed(title=f"{universe} Card List", description="\n".join(all_cards), colour=0x7289da)
            embedVar.set_footer(
                text=f"{total_cards} Total Cards\n🟣 Dungeon Drop\n🟢 Tale Drop\n🔵 Destiny Line\n🟠 Unavailable\n⚪ Skin")
            await ctx.send(embed=embedVar)

        embed_list = []
        for i in range(0, len(cards_broken_up)):
            globals()['embedVar%s' % i] = discord.Embed(
                title=f":flower_playing_cards: {universe_data['TITLE']} Card List",
                description="\n".join(cards_broken_up[i]), colour=0x7289da)
            globals()['embedVar%s' % i].set_footer(
                text=f"{total_cards} Total Cards\n🟣 Dungeon Drop\n🟢 Tale Drop\n🔵 Destiny Line\n🟠 Unavailable\n⚪ Skin\n/viewcard 'Card Name' - View Card Details\n/destinies 'Universe Name' -View Destiny Lines")
            embed_list.append(globals()['embedVar%s' % i])

        paginator = DiscordUtils.Pagination.CustomEmbedPaginator(ctx, remove_reactions=True)
        paginator.add_reaction('⏮️', "first")
        paginator.add_reaction('⬅️', "back")
        paginator.add_reaction('🔐', "lock")
        paginator.add_reaction('➡️', "next")
        paginator.add_reaction('⏭️', "last")
        embeds = embed_list
        await paginator.run(embeds)

    @cog_ext.cog_slash(description="View all Titles of a Universe you unlocked", guild_ids=main.guild_ids)
    async def titlelist(self, ctx: SlashContext, universe: str):
        universe_data = db.queryUniverse({'TITLE': {"$regex": universe, "$options": "i"}})
        user = db.queryUser({'DISNAME': str(ctx.author)})
        list_of_titles = db.queryAllTitlesBasedOnUniverses({'UNIVERSE': {"$regex": str(universe), "$options": "i"}})
        titles = [x for x in list_of_titles]
        dungeon_titles_details = []
        tales_titles_details = []
        for title in titles:
            title_passive = title['ABILITIES'][0]
            title_passive_type = list(title_passive.keys())[0]
            title_passive_value = list(title_passive.values())[0]

            available = ""
            if title['AVAILABLE'] and title['EXCLUSIVE']:
                available = ":purple_circle:"
            elif title['AVAILABLE']:
                available = ":green_circle:"
            else:
                available = ":red_circle:"
            if title['EXCLUSIVE']:
                dungeon_titles_details.append(
                    f"{available} :reminder_ribbon: **{title['TITLE']}**\n**{title_passive_type}:** {title_passive_value}\n")
            else:
                tales_titles_details.append(
                    f"{available} :reminder_ribbon: **{title['TITLE']}**: :coin:{'{:,}'.format(title['PRICE'])}\n**{title_passive_type}:** {title_passive_value}\n")

        all_titles = []
        if tales_titles_details:
            for t in tales_titles_details:
                all_titles.append(t)

        if dungeon_titles_details:
            for d in dungeon_titles_details:
                all_titles.append(d)

        total_titles = len(all_titles)

        # Adding to array until divisible by 10
        while len(all_titles) % 10 != 0:
            all_titles.append("")
        # Check if divisible by 10, then start to split evenly
        if len(all_titles) % 10 == 0:
            first_digit = int(str(len(all_titles))[:1])
            if len(all_titles) >= 89:
                if first_digit == 1:
                    first_digit = 10
            titles_broken_up = np.array_split(all_titles, first_digit)

        # If it's not an array greater than 10, show paginationless embed
        if len(all_titles) < 10:
            embedVar = discord.Embed(title=f"{universe} Title List", description="\n".join(all_titles), colour=0x7289da)
            # embedVar.set_thumbnail(url={universe_data['PATH']})
            embedVar.set_footer(text=f"{total_titles} Total Titles\n🟣 Dungeon Drop\n🟢 Tale Drop\n🔴 Boss Drop")
            await ctx.send(embed=embedVar)

        embed_list = []
        for i in range(0, len(titles_broken_up)):
            globals()['embedVar%s' % i] = discord.Embed(title=f":reminder_ribbon: {universe_data['TITLE']} Title List",
                                                        description="\n".join(titles_broken_up[i]), colour=0x7289da)
            # globals()['embedVar%s' % i].set_thumbnail(url={universe_data['PATH']})
            globals()['embedVar%s' % i].set_footer(
                text=f"{total_titles} Total Titles\n🟣 Dungeon Drop\n🟢 Tale Drop\n🔴 Boss Drop\n/viewtitle 'Title Name' - View Title Details")
            embed_list.append(globals()['embedVar%s' % i])

        paginator = DiscordUtils.Pagination.CustomEmbedPaginator(ctx, remove_reactions=True)
        paginator.add_reaction('⏮️', "first")
        paginator.add_reaction('⬅️', "back")
        paginator.add_reaction('🔐', "lock")
        paginator.add_reaction('➡️', "next")
        paginator.add_reaction('⏭️', "last")
        embeds = embed_list
        await paginator.run(embeds)

    @cog_ext.cog_slash(description="View all Arms of a Universe you unlocked", guild_ids=main.guild_ids)
    async def armlist(self, ctx: SlashContext, universe: str):
        universe_data = db.queryUniverse({'TITLE': {"$regex": universe, "$options": "i"}})
        user = db.queryUser({'DISNAME': str(ctx.author)})
        list_of_arms = db.queryAllArmsBasedOnUniverses({'UNIVERSE': {"$regex": str(universe), "$options": "i"}})
        arms = [x for x in list_of_arms]
        dungeon_arms_details = []
        tales_arms_details = []
        for arm in arms:
            arm_passive = arm['ABILITIES'][0]
            arm_passive_type = list(arm_passive.keys())[0]
            arm_passive_value = list(arm_passive.values())[0]
            available = ""
            if arm['AVAILABLE'] and arm['EXCLUSIVE']:
                available = ":purple_circle:"
            elif arm['AVAILABLE']:
                available = ":green_circle:"
            else:
                available = ":red_circle:"
            if arm['EXCLUSIVE']:
                dungeon_arms_details.append(
                    f"{available} 🦾 **{arm['ARM']}**\n**{arm_passive_type}:** {arm_passive_value}\n")
            else:
                tales_arms_details.append(
                    f"{available} 🦾 **{arm['ARM']}**: :coin:{'{:,}'.format(arm['PRICE'])}\n**{arm_passive_type}:** {arm_passive_value}\n")

        all_arms = []
        if tales_arms_details:
            for t in tales_arms_details:
                all_arms.append(t)

        if dungeon_arms_details:
            for d in dungeon_arms_details:
                all_arms.append(d)

        total_arms = len(all_arms)
        # Adding to array until divisible by 10
        while len(all_arms) % 10 != 0:
            all_arms.append("")
        # Check if divisible by 10, then start to split evenly
        if len(all_arms) % 10 == 0:
            first_digit = int(str(len(all_arms))[:1])
            if len(all_arms) >= 89:
                if first_digit == 1:
                    first_digit = 10
            arms_broken_up = np.array_split(all_arms, first_digit)

        # If it's not an array greater than 10, show paginationless embed
        if len(all_arms) < 10:
            embedVar = discord.Embed(title=f"{universe} Arms List", description="\n".join(all_arms), colour=0x7289da)
            embedVar.set_footer(text=f"{total_arms} Total Arms\n🟣 Dungeon Drop\n🟢 Tale Drop\n🔴 Boss Drop")
            await ctx.send(embed=embedVar)

        embed_list = []
        for i in range(0, len(arms_broken_up)):
            globals()['embedVar%s' % i] = discord.Embed(title=f"🦾 {universe_data['TITLE']} Arms List",
                                                        description="\n".join(arms_broken_up[i]), colour=0x7289da)
            globals()['embedVar%s' % i].set_footer(
                text=f"{total_arms} Total Arms\n🟣 Dungeon Drop\n🟢 Tale Drop\n🔴 Boss Drop\n/viewarm 'Arm Name' - View Arm Details")
            embed_list.append(globals()['embedVar%s' % i])

        paginator = DiscordUtils.Pagination.CustomEmbedPaginator(ctx, remove_reactions=True)
        paginator.add_reaction('⏮️', "first")
        paginator.add_reaction('⬅️', "back")
        paginator.add_reaction('🔐', "lock")
        paginator.add_reaction('➡️', "next")
        paginator.add_reaction('⏭️', "last")
        embeds = embed_list
        await paginator.run(embeds)

    @cog_ext.cog_slash(description="View all Destinies of a Universe you unlocked", guild_ids=main.guild_ids)
    async def destinylist(self, ctx: SlashContext, universe: str):
        universe_data = db.queryUniverse({'TITLE': {"$regex": universe, "$options": "i"}})
        user = db.queryUser({'DISNAME': str(ctx.author)})
        destinies = []
        for destiny in d.destiny:
            if destiny["UNIVERSE"].upper() == universe.upper():
                destinies.append(destiny)

        destiny_details = []
        for de in destinies:
            destiny_details.append(
                f":sparkles: **{de['NAME']}**\nDefeat {de['DEFEAT']} with {' '.join(de['USE_CARDS'])} {str(de['REQUIRED'])} times: Unlock **{de['EARN']}**\n")

        total_destinies = len(destiny_details)

        # Adding to array until divisible by 10
        while len(destiny_details) % 10 != 0:
            destiny_details.append("")
        # Check if divisible by 10, then start to split evenly

        if len(destiny_details) % 10 == 0:
            first_digit = int(str(len(destiny_details))[:1])
            if len(destiny_details) >= 89:
                if first_digit == 1:
                    first_digit = 10
            destinies_broken_up = np.array_split(destiny_details, first_digit)

        # If it's not an array greater than 10, show paginationless embed
        if len(destiny_details) < 10:
            embedVar = discord.Embed(title=f"{universe} Destiny List", description="\n".join(destiny_details),
                                     colour=0x7289da)
            globals()['embedVar%s' % i].set_footer(text=f"{total_destinies} Total Destiny Lines")
            await ctx.send(embed=embedVar)

        embed_list = []
        for i in range(0, len(destinies_broken_up)):
            globals()['embedVar%s' % i] = discord.Embed(title=f":rosette: {universe_data['TITLE']} Destiny List",
                                                        description="\n".join(destinies_broken_up[i]), colour=0x7289da)
            globals()['embedVar%s' % i].set_footer(text=f"{total_destinies} Total Destiny Lines")
            embed_list.append(globals()['embedVar%s' % i])

        paginator = DiscordUtils.Pagination.CustomEmbedPaginator(ctx, remove_reactions=True)
        paginator.add_reaction('⏮️', "first")
        paginator.add_reaction('⬅️', "back")
        paginator.add_reaction('🔐', "lock")
        paginator.add_reaction('➡️', "next")
        paginator.add_reaction('⏭️', "last")
        embeds = embed_list
        await paginator.run(embeds)

    @cog_ext.cog_slash(description="View all Pets of a Universe you unlocked", guild_ids=main.guild_ids)
    async def petlist(self, ctx: SlashContext, universe: str):
        universe_data = db.queryUniverse({'TITLE': {"$regex": universe, "$options": "i"}})
        user = db.queryUser({'DISNAME': str(ctx.author)})
        list_of_pets = db.queryAllPetsBasedOnUniverses({'UNIVERSE': {"$regex": str(universe), "$options": "i"}})
        pets = [x for x in list_of_pets]
        dungeon_pets_details = []
        tales_pets_details = []
        for pet in pets:
            pet_ability = list(pet['ABILITIES'][0].keys())[0]
            pet_ability_power = list(pet['ABILITIES'][0].values())[0]
            pet_ability_type = list(pet['ABILITIES'][0].values())[1]
            available = ""
            if pet['AVAILABLE'] and pet['EXCLUSIVE']:
                available = ":purple_circle:"
            elif pet['AVAILABLE']:
                available = ":green_circle:"
            else:
                available = ":red_circle:"
            if pet['EXCLUSIVE']:
                dungeon_pets_details.append(
                    f"{available} :bird: **{pet['PET']}**\n**{pet_ability}:** {pet_ability_power}\n**Type:** {pet_ability_type}\n")
            else:
                tales_pets_details.append(
                    f"{available} :bird: **{pet['PET']}**\n**{pet_ability}:** {pet_ability_power}\n**Type:** {pet_ability_type}\n")

        all_pets = []
        if tales_pets_details:
            for t in tales_pets_details:
                all_pets.append(t)

        if dungeon_pets_details:
            for d in dungeon_pets_details:
                all_pets.append(d)

        total_pets = len(all_pets)

        # Adding to array until divisible by 10
        while len(all_pets) % 10 != 0:
            all_pets.append("")

        # Check if divisible by 10, then start to split evenly
        if len(all_pets) % 10 == 0:
            first_digit = int(str(len(all_pets))[:1])
            if len(all_pets) >= 89:
                if first_digit == 1:
                    first_digit = 10
            pets_broken_up = np.array_split(all_pets, first_digit)

        # If it's not an array greater than 10, show paginationless embed
        if len(all_pets) < 10:
            embedVar = discord.Embed(title=f"{universe} Pet List", description="\n".join(all_pets), colour=0x7289da)
            embedVar.set_footer(text=f"{total_pets} Total Pets\n🟣 Dungeon Drop\n🟢 Tale Drop\n🔴 Boss Drop")
            await ctx.send(embed=embedVar)

        embed_list = []
        for i in range(0, len(pets_broken_up)):
            globals()['embedVar%s' % i] = discord.Embed(title=f":dog: {universe_data['TITLE']} Pet List",
                                                        description="\n".join(pets_broken_up[i]), colour=0x7289da)
            globals()['embedVar%s' % i].set_footer(
                text=f"{total_pets} Total Pets\n🟣 Dungeon Drop\n🟢 Tale Drop\n🔴 Boss Drop\n/viewpet 'Pet Name' - View Pet Details")
            embed_list.append(globals()['embedVar%s' % i])

        paginator = DiscordUtils.Pagination.CustomEmbedPaginator(ctx, remove_reactions=True)
        paginator.add_reaction('⏮️', "first")
        paginator.add_reaction('⬅️', "back")
        paginator.add_reaction('🔐', "lock")
        paginator.add_reaction('➡️', "next")
        paginator.add_reaction('⏭️', "last")
        embeds = embed_list
        await paginator.run(embeds)

    @cog_ext.cog_slash(description="View all available Universes", guild_ids=main.guild_ids)
    async def universes(self, ctx: SlashContext):
        try:
            universe_data = db.queryAllUniverse()
            user = db.queryUser({'DISNAME': str(ctx.author)})

            available_universes = []
            unavailable_universes = []
            for uni in universe_data:
                available = ""
                if len(uni['CROWN_TALES']) > 2:
                    available = f"{Crest_dict[uni['TITLE']]}"
                    tier = ""
                    prerequisite = ""
                    if uni['TIER'] == 9:
                        tier = ":crystal_ball:"
                    else:
                        tier = str(uni['TIER'])

                    if uni['PREREQUISITE'] == "":
                        prerequisite = "*Starter Universe*"
                    else:
                        prerequisite = f":lock: *{uni['PREREQUISITE']}*"
                    if uni['TIER'] == 9:
                        prerequisite = "*Crown Rift*"
                    available_universes.append(
                        f"{available} **{uni['TITLE']}**\n:earth_africa: Tier {tier} | {prerequisite}\n")

            all_universes = []
            if available_universes:
                for a in available_universes:
                    all_universes.append(a)
            total_universes = len(all_universes)

            # Adding to array until divisible by 10
            while len(all_universes) % 10 != 0:
                all_universes.append("")

            # Check if divisible by 10, then start to split evenly
            if len(all_universes) % 10 == 0:
                first_digit = int(str(len(all_universes))[:1])
                universes_broken_up = np.array_split(all_universes, first_digit)

            # If it's not an array greater than 10, show paginationless embed
            if len(all_universes) < 10:
                embedVar = discord.Embed(title=f"Universe List | :lock: *Prerequisite*",
                                         description="\n".join(all_universes), colour=0x7289da)
                embedVar.set_footer(
                    text=f"{total_universes} Total Universes\n/viewuniverse *Universe Name*- Universe Details")
                await ctx.send(embed=embedVar)

            embed_list = []
            icon = ":crown:"
            if user['RIFT'] == 1:
                icon = ":crystal_ball:"
            for i in range(0, len(universes_broken_up)):
                globals()['embedVar%s' % i] = discord.Embed(title=f"{icon} Universe List | :lock: *Prerequisite*",
                                                            description="\n".join(universes_broken_up[i]),
                                                            colour=0x7289da)
                globals()['embedVar%s' % i].set_footer(
                    text=f"{total_universes} Total Universes\nFull list of Universes and their Crests\n/viewuniverse Universe - Universe Details")
                embed_list.append(globals()['embedVar%s' % i])

            paginator = DiscordUtils.Pagination.CustomEmbedPaginator(ctx, remove_reactions=True)
            paginator.add_reaction('⏮️', "first")
            paginator.add_reaction('⬅️', "back")
            paginator.add_reaction('🔐', "lock")
            paginator.add_reaction('➡️', "next")
            paginator.add_reaction('⏭️', "last")
            embeds = embed_list
            await paginator.run(embeds)
        except Exception as ex:
            trace = []
            tb = ex.__traceback__
            while tb is not None:
                trace.append({
                    "filename": tb.tb_frame.f_code.co_filename,
                    "name": tb.tb_frame.f_code.co_name,
                    "lineno": tb.tb_lineno
                })
                tb = tb.tb_next
            print(str({
                'type': type(ex).__name__,
                'message': str(ex),
                'trace': trace
            }))

    @cog_ext.cog_slash(description="View all Homes for purchase", guild_ids=main.guild_ids)
    async def houses(self, ctx: SlashContext):
        house_data = db.queryAllHouses()
        user = db.queryUser({'DISNAME': str(ctx.author)})

        house_list = []
        for homes in house_data:
            house_list.append(
                f":house: | {homes['HOUSE']}\n:coin: | **COST: **{'{:,}'.format(homes['PRICE'])}\n:part_alternation_mark: | **MULT: **{homes['MULT']}x\n_______________")

        total_houses = len(house_list)
        while len(house_list) % 10 != 0:
            house_list.append("")

        # Check if divisible by 10, then start to split evenly
        if len(house_list) % 10 == 0:
            first_digit = int(str(len(house_list))[:1])
            houses_broken_up = np.array_split(house_list, first_digit)

        # If it's not an array greater than 10, show paginationless embed
        if len(house_list) < 10:
            embedVar = discord.Embed(title=f"House List", description="\n".join(house_list), colour=0x7289da)
            embedVar.set_footer(text=f"{total_houses} Total Houses\n/viewhouse - View House Details")
            await ctx.send(embed=embedVar)

        embed_list = []
        for i in range(0, len(houses_broken_up)):
            globals()['embedVar%s' % i] = discord.Embed(title=f":house: House List",
                                                        description="\n".join(houses_broken_up[i]), colour=0x7289da)
            globals()['embedVar%s' % i].set_footer(text=f"{total_houses} Total Houses\n/viewhouse - View House Details")
            embed_list.append(globals()['embedVar%s' % i])

        paginator = DiscordUtils.Pagination.CustomEmbedPaginator(ctx, remove_reactions=True)
        paginator.add_reaction('⏮️', "first")
        paginator.add_reaction('⬅️', "back")
        paginator.add_reaction('🔐', "lock")
        paginator.add_reaction('➡️', "next")
        paginator.add_reaction('⏭️', "last")
        embeds = embed_list
        await paginator.run(embeds)

    @cog_ext.cog_slash(description="View all Guild Halls for purchase", guild_ids=main.guild_ids)
    async def halls(self, ctx: SlashContext):
        hall_data = db.queryAllHalls()
        user = db.queryUser({'DISNAME': str(ctx.author)})

        hall_list = []
        for homes in hall_data:
            hall_list.append(
                f":flags: | {homes['HALL']}\n🛡️ | **DEF: **{homes['DEFENSE']}\n:coin: | **COST: **{'{:,}'.format(homes['PRICE'])}\n:part_alternation_mark: | **MULT: **{homes['MULT']}x\n:moneybag: | **SPLIT: **{'{:,}'.format(homes['SPLIT'])}x\n:yen: | **FEE: **{'{:,}'.format(homes['FEE'])}\n_______________")

        total_halls = len(hall_list)
        while len(hall_list) % 10 != 0:
            hall_list.append("")

        # Check if divisible by 10, then start to split evenly
        if len(hall_list) % 10 == 0:
            first_digit = int(str(len(hall_list))[:1])
            halls_broken_up = np.array_split(hall_list, first_digit)

        # If it's not an array greater than 10, show paginationless embed
        if len(hall_list) < 10:
            embedVar = discord.Embed(title=f"Hall List", description="\n".join(hall_list), colour=0x7289da)
            embedVar.set_footer(text=f"{total_halls} Total Halls\n/viewhall - View Hall Details")
            await ctx.send(embed=embedVar)

        embed_list = []
        for i in range(0, len(halls_broken_up)):
            globals()['embedVar%s' % i] = discord.Embed(title=f":flags: Hall List",
                                                        description="\n".join(halls_broken_up[i]), colour=0x7289da)
            globals()['embedVar%s' % i].set_footer(text=f"{total_halls} Total Halls\n/viewhall - View Hall Details")
            embed_list.append(globals()['embedVar%s' % i])

        paginator = DiscordUtils.Pagination.CustomEmbedPaginator(ctx, remove_reactions=True)
        paginator.add_reaction('⏮️', "first")
        paginator.add_reaction('⬅️', "back")
        paginator.add_reaction('🔐', "lock")
        paginator.add_reaction('➡️', "next")
        paginator.add_reaction('⏭️', "last")
        embeds = embed_list
        await paginator.run(embeds)

    @cog_ext.cog_slash(description="Quit Match", guild_ids=main.guild_ids)
    async def ff(self, ctx: SlashContext):
        private_channel = ctx
        ov = private_channel.channel.overwrites
        validator = False
        for o in ov:
            if str(ctx.author) == str(o):
                validator = True
        if private_channel.guild and validator:
            await discord.TextChannel.delete(private_channel.channel, reason=None)


async def score(owner, user: User):
    session_query = {"OWNER": str(owner), "AVAILABLE": True, "KINGSGAMBIT": False}
    session_data = db.querySession(session_query)
    teams = [x for x in session_data['TEAMS']]
    winning_team = {}
    for x in teams:
        if str(user) in x['TEAM']:
            winning_team = x
    new_score = winning_team['SCORE'] + 1
    update_query = {'$set': {'TEAMS.$.SCORE': new_score}}
    query = {"_id": session_data["_id"], "TEAMS.TEAM": str(user)}
    response = db.updateSession(session_query, query, update_query)
    reciever = db.queryUser({'DISNAME': str(user)})
    name = reciever['DISNAME']
    message = ":one: You Scored, Don't Let Up :one:"

    if response:
        message = ":one:"
    else:
        message = "Score not added. Please, try again. "

    return message


async def quest(player, opponent, mode):
    user_data = db.queryVault({'OWNER': str(player)})
    quest_data = {}
    try:
        if user_data['QUESTS']:
            for quest in user_data['QUESTS']:
                if opponent == quest['OPPONENT']:
                    quest_data = quest

            if quest_data == {}:
                return
            completion = quest_data['GOAL'] - (quest_data['WINS'] + 1)
            reward = int(quest_data['REWARD'])

            if str(mode) == "Dungeon" and quest_data['TYPE'] == "Dungeon" and completion >= 0:
                message = "Dungeon Quest progressed!"
                if completion == 0:
                    await bless(reward, player)
                    message = f"Dungeon Quest Completed! :coin:{reward} has been added to your balance."

                query = {'OWNER': str(player)}
                update_query = {'$inc': {'QUESTS.$[type].' + "WINS": 1}}
                filter_query = [{'type.' + "OPPONENT": opponent}]
                resp = db.updateVault(query, update_query, filter_query)
                return message

            elif str(mode) == "Tales" and quest_data['TYPE'] == "Tales" and completion >= 0:
                message = "Tales Quest progressed!"
                if completion == 0:
                    if quest_data['GOAL'] == 5:
                        await bless(reward, player)
                        message = f"Tales Quest Completed! :coin:{reward} has been added to your balance."
                    elif quest_data['GOAL'] == 3:
                        await bless(reward, player)
                        message = f"Tales Quest Completed! :coin:{reward} has been added to your balance."

                query = {'OWNER': str(player)}
                update_query = {'$inc': {'QUESTS.$[type].' + "WINS": 1}}
                filter_query = [{'type.' + "OPPONENT": opponent}]
                resp = db.updateVault(query, update_query, filter_query)

                return message
            else:
                return False
        else:
            return False
    except Exception as ex:
        trace = []
        tb = ex.__traceback__
        while tb is not None:
            trace.append({
                "filename": tb.tb_frame.f_code.co_filename,
                "name": tb.tb_frame.f_code.co_name,
                "lineno": tb.tb_lineno
            })
            tb = tb.tb_next
        print(str({
            'type': type(ex).__name__,
            'message': str(ex),
            'trace': trace
        }))
        await ctx.send(
            "There's an issue with your Quest. Please use /ff to close this channel and start anew. Alert support.")
        return


async def destiny(player, opponent, mode):
    vault = db.queryVault({'OWNER': str(player)})
    user = db.queryUser({"DISNAME": str(player)})
    vault_query = {'OWNER': str(player)}
    owned_destinies = []
    for destiny in vault['DESTINY']:
        owned_destinies.append(destiny['NAME'])

    owned_card_levels_list = []
    for c in vault['CARD_LEVELS']:
        owned_card_levels_list.append(c['CARD'])
    message = ""
    completion = 1
    try:
        if vault['DESTINY']:
            # TALES
            for destiny in vault['DESTINY']:
                if user['CARD'] in destiny['USE_CARDS'] and opponent == destiny['DEFEAT'] and mode == "Tales":
                    if destiny['WINS'] < destiny['REQUIRED']:
                        message = f"Secured a win toward **{destiny['NAME']}**. Keep it up!"
                        completion = destiny['REQUIRED'] - (destiny['WINS'] + 1)

                    if completion == 0:
                        try:
                            if destiny['EARN'] not in owned_card_levels_list:
                                # Add the CARD_LEVELS for Destiny Card
                                card_data = db.queryCard({'NAME': str(destiny['EARN'])})
                                uni = db.queryUniverse({'TITLE': card_data['UNIVERSE']})
                                tier = uni['TIER']
                                update_query = {'$addToSet': {
                                    'CARD_LEVELS': {'CARD': str(destiny['EARN']), 'LVL': 0, 'TIER': int(tier), 'EXP': 0,
                                                    'HLT': 0, 'ATK': 0, 'DEF': 0, 'AP': 0}}}
                                db.updateVaultNoFilter(vault_query, update_query)
                                #
                        except Exception as ex:
                            print(f"Error in Completing Destiny: {ex}")

                        response = db.updateVaultNoFilter(vault_query, {'$addToSet': {'CARDS': str(destiny['EARN'])}})
                        message = f"**{destiny['NAME']}** completed! **{destiny['EARN']}** has been added to your vault!"
                        query = {'OWNER': str(player)}
                        update_query = {'$inc': {'DESTINY.$[type].' + "WINS": 1},
                                        '$set': {'DESTINY.$[type].' + "COMPLETED": True}}
                        filter_query = [{'type.' + "DEFEAT": opponent}]
                        resp = db.updateVault(query, update_query, filter_query)

                        for dest in d.destiny:
                            if destiny['EARN'] in dest["USE_CARDS"] and dest['NAME'] not in owned_destinies:
                                db.updateVaultNoFilter(vault_query, {'$addToSet': {'DESTINY': dest}})
                                message = f"**DESTINY AWAITS!**\n**New Destinies** have been added to your vault."
                        return message

                    query = {'OWNER': str(player)}
                    update_query = {'$inc': {'DESTINY.$[type].' + "WINS": 1}}
                    filter_query = [{'type.' + "DEFEAT": opponent}]
                    resp = db.updateVault(query, update_query, filter_query)
                    return message

            # Dungeon
            for destiny in vault['DESTINY']:
                if user['CARD'] in destiny['USE_CARDS'] and opponent == destiny['DEFEAT'] and mode == "Dungeon":
                    message = f"Secured a win toward **{destiny['NAME']}**. Keep it up!"
                    completion = destiny['REQUIRED'] - (destiny['WINS'] + 3)

                    if completion <= 0:
                        try:
                            if destiny['EARN'] not in owned_card_levels_list:
                                # Add the CARD_LEVELS for Destiny Card
                                card_data = db.queryCard({'NAME': str(destiny['EARN'])})
                                uni = db.queryUniverse({'TITLE': card_data['UNIVERSE']})
                                tier = uni['TIER']
                                update_query = {'$addToSet': {
                                    'CARD_LEVELS': {'CARD': str(destiny['EARN']), 'LVL': 0, 'TIER': int(tier), 'EXP': 0,
                                                    'HLT': 0, 'ATK': 0, 'DEF': 0, 'AP': 0}}}
                                db.updateVaultNoFilter(vault_query, update_query)
                                #
                        except Exception as ex:
                            print(f"Error in Completing Destiny: {ex}")
                        response = db.updateVaultNoFilter(vault_query, {'$addToSet': {'CARDS': str(destiny['EARN'])}})
                        message = f"**{destiny['NAME']}** completed! **{destiny['EARN']}** has been added to your vault!"
                        query = {'OWNER': str(player)}
                        update_query = {'$inc': {'DESTINY.$[type].' + "WINS": 3},
                                        '$set': {'DESTINY.$[type].' + "COMPLETED": True}}
                        filter_query = [{'type.' + "DEFEAT": opponent}]
                        resp = db.updateVault(query, update_query, filter_query)

                        for dest in d.destiny:
                            if destiny['EARN'] in dest["USE_CARDS"] and dest['NAME'] not in owned_destinies:
                                db.updateVaultNoFilter(vault_query, {'$addToSet': {'DESTINY': dest}})
                                message = f"**DESTINY AWAITS!**\n**New Destinies** have been added to your vault."

                        return message

                    query = {'OWNER': str(player)}
                    update_query = {'$inc': {'DESTINY.$[type].' + "WINS": 3}}
                    filter_query = [{'type.' + "DEFEAT": opponent}]
                    resp = db.updateVault(query, update_query, filter_query)
                    return message
        else:
            return False
    except Exception as ex:
        trace = []
        tb = ex.__traceback__
        while tb is not None:
            trace.append({
                "filename": tb.tb_frame.f_code.co_filename,
                "name": tb.tb_frame.f_code.co_name,
                "lineno": tb.tb_lineno
            })
            tb = tb.tb_next
        print(str({
            'type': type(ex).__name__,
            'message': str(ex),
            'trace': trace
        }))
        await ctx.send(
            "There's an issue with your Destiny. Please use /ff to close this channel and start anew. Alert support.")
        return


async def petlevel(pet, player):
    vault = db.queryVault({'OWNER': str(player)})
    petinfo = {}
    try:
        for x in vault['PETS']:
            if x['NAME'] == str(pet):
                petinfo = x

        lvl = petinfo['LVL']  # To Level Up -(lvl * 10 = xp required)
        lvl_req = lvl * 10
        exp = petinfo['EXP']
        petmove_text = list(petinfo.keys())[3]  # Name of the ability
        petmove_ap = list(petinfo.values())[3]  # Ability Power
        petmove_type = petinfo['TYPE']
        bond = petinfo['BOND']
        bondexp = petinfo['BONDEXP']
        bond_req = ((petmove_ap * 5) * (bond + 1))

        if lvl < 10:
            # Non Level Up Code
            if exp < (lvl_req - 1):
                query = {'OWNER': str(player)}
                update_query = {'$inc': {'PETS.$[type].' + "EXP": 1}}
                filter_query = [{'type.' + "NAME": str(pet)}]
                response = db.updateVault(query, update_query, filter_query)

            # Level Up Code
            if exp >= (lvl_req - 1):
                query = {'OWNER': str(player)}
                update_query = {'$set': {'PETS.$[type].' + "EXP": 0}, '$inc': {'PETS.$[type].' + "LVL": 1}}
                filter_query = [{'type.' + "NAME": str(pet)}]
                response = db.updateVault(query, update_query, filter_query)

        if bond < 3:
            # Non Bond Level Up Code
            if bondexp < (bond_req - 1):
                query = {'OWNER': str(player)}
                update_query = {'$inc': {'PETS.$[type].' + "BONDEXP": 1}}
                filter_query = [{'type.' + "NAME": str(pet)}]
                response = db.updateVault(query, update_query, filter_query)

            # Bond Level Up Code
            if bondexp >= (bond_req - 1):
                query = {'OWNER': str(player)}
                update_query = {'$set': {'PETS.$[type].' + "BONDEXP": 0}, '$inc': {'PETS.$[type].' + "BOND": 1}}
                filter_query = [{'type.' + "NAME": str(pet)}]
                response = db.updateVault(query, update_query, filter_query)
    except Exception as ex:
        trace = []
        tb = ex.__traceback__
        while tb is not None:
            trace.append({
                "filename": tb.tb_frame.f_code.co_filename,
                "name": tb.tb_frame.f_code.co_name,
                "lineno": tb.tb_lineno
            })
            tb = tb.tb_next
        print(str({
            'type': type(ex).__name__,
            'message': str(ex),
            'trace': trace
        }))
        await ctx.send(
            "There's an issue with leveling your Pet. Please use /ff to close this channel and start anew. Alert support.")
        return


async def cardlevel(card: str, player: str, card_universe: str, mode_universe: str, mode: str):
    vault = db.queryVault({'OWNER': str(player)})
    mode_uni = db.queryUniverse({'TITLE': mode_universe})
    mode_tier = mode_uni['TIER']
    multiplier = 0
    if mode == "Dungeon":
        multiplier = mode_tier
    uni = db.queryUniverse({'TITLE': card_universe})
    tier = uni['TIER']
    cardinfo = {}
    for x in vault['CARD_LEVELS']:
        if x['CARD'] == str(card):
            cardinfo = x

    lvl = cardinfo['LVL']
    lvl_req = 150
    exp = cardinfo['EXP']
    exp_gain = 0
    if tier == 1:
        exp_gain = 6 + mode_tier + multiplier
    if tier == 2:
        exp_gain = 4 + mode_tier + multiplier
    if tier == 3:
        exp_gain = 2 + mode_tier + multiplier
    if tier == 4:
        exp_gain = 1 + mode_tier + multiplier
    if tier == 5:
        exp_gain = 1 + mode_tier + multiplier
    if tier == 9:
        exp_gain = 3 + mode_tier + multiplier

    hlt_buff = 0
    atk_def_buff = 0
    ap_buff = 0

    if lvl < 500:
        # Experience Code
        if exp < (lvl_req - 1):
            query = {'OWNER': str(player)}
            update_query = {'$inc': {'CARD_LEVELS.$[type].' + "EXP": exp_gain}}
            filter_query = [{'type.' + "CARD": str(card)}]
            response = db.updateVault(query, update_query, filter_query)

        # Level Up Code
        if exp >= (lvl_req - exp_gain):
            if (lvl + 1) % 2 == 0:
                atk_def_buff = 1
            if (lvl + 1) % 3 == 0:
                ap_buff = 1
            if (lvl + 1) % 20 == 0:
                hlt_buff = 25
            query = {'OWNER': str(player)}
            update_query = {'$set': {'CARD_LEVELS.$[type].' + "EXP": 0},
                            '$inc': {'CARD_LEVELS.$[type].' + "LVL": 1, 'CARD_LEVELS.$[type].' + "ATK": atk_def_buff,
                                     'CARD_LEVELS.$[type].' + "DEF": atk_def_buff,
                                     'CARD_LEVELS.$[type].' + "AP": ap_buff, 'CARD_LEVELS.$[type].' + "HLT": hlt_buff}}
            filter_query = [{'type.' + "CARD": str(card)}]
            response = db.updateVault(query, update_query, filter_query)


async def savematch(player, card, path, title, arm, universe, universe_type, exclusive):
    matchquery = {'PLAYER': player, 'CARD': card, 'PATH': path, 'TITLE': title, 'ARM': arm, 'UNIVERSE': universe,
                  'UNIVERSE_TYPE': universe_type, 'EXCLUSIVE': exclusive}
    save_match = db.createMatch(data.newMatch(matchquery))


def starting_position(o, t):
    if o > t:
        return True
    else:
        return False


def damage_cal(universe, card, ability, attack, defense, op_defense, stamina, enhancer, health, op_health, op_stamina,
               maxhealth, op_attack, special_description, turn, ap_buff):
    if op_defense <= 0:
        op_defense = 25
    if attack <= 0:
        attack = 25
    if defense <= 0:
        defense = 25
    if op_attack <= 0:
        op_attack = 25

    move = list(ability.keys())[0]
    ap = list(ability.values())[0] + ap_buff
    move_stamina = list(ability.values())[1]
    can_use_move_flag = True

    enh = ""
    if enhancer:
        enh = list(ability.values())[2]

    # Do I have enough stamina to use this move?
    if stamina >= move_stamina:
        can_use_move_flag = True
    else:
        can_use_move_flag = False

    atk = attack
    defense = defense
    stam = stamina
    hlt = health
    lifesteal = 0
    drain = 0
    growth = 0
    flog = 0
    wither = 0
    brace = 0
    rage = 0
    bzrk = 0
    crystal = 0
    stance = 0
    confuse = 0
    blink = 0
    slow = 0
    haste = 0
    soulchain = 0
    gamble = 0
    fear = 0
    wave = 0
    creation = 0
    blast = 0
    destruction = 0

    enh_type = ""
    if enhancer:
        ap = ap - ap_buff
        if enh == 'ATK':
            enh_type = "ATK"
            atk = round((ap / 100) * attack)
        elif enh == 'DEF':
            enh_type = "DEF"
            defense = round((ap / 100) * defense)
        elif enh == 'STAM':
            enh_type = "STAM"
            stam = ap
        elif enh == 'HLT':
            enh_type = 'HLT'
            hlt = round(ap + (.16 * health))
        elif enh == 'LIFE':
            enh_type = 'LIFE'
            lifesteal = round(ap + (.09 * op_health))
        elif enh == 'DRAIN':
            enh_type = 'DRAIN'
            drain = ap
        elif enh == 'FLOG':
            enh_type = "FLOG"
            flog = round((ap / 100) * op_attack)
        elif enh == 'WITHER':
            enh_type = "WITHER"
            wither = round((ap / 100) * op_defense)
        elif enh == 'RAGE':
            enh_type = "RAGE"
            rage = round((ap / 100) * defense)
        elif enh == 'BRACE':
            enh_type = "BRACE"
            brace = round((ap / 100) * attack)
        elif enh == 'BZRK':
            enh_type = "BZRK"
            bzrk = round((ap / 100) * health)
        elif enh == 'CRYSTAL':
            enh_type = "CRYSTAL"
            crystal = round((ap / 100) * health)
        elif enh == 'GROWTH':
            enh_type = "GROWTH"
            growth = (ap / 100 * maxhealth)
        elif enh == 'STANCE':
            enh_type = "STANCE"
            stance = attack + ap
        elif enh == 'CONFUSE':
            enh_type = "CONFUSE"
            confuse = op_attack - ap
        elif enh == 'BLINK':
            enh_type = "BLINK"
            blink = ap

        elif enh == 'SLOW':
            enh_type = "SLOW"
            slow = ap
        elif enh == 'HASTE':
            enh_type = "HASTE"
            haste = ap
        elif enh == 'FEAR':
            enh_type = "FEAR"
            fear = (ap / 100 * maxhealth)
        elif enh == 'SOULCHAIN':
            enh_type = "SOULCHAIN"
            soulchain = ap
        elif enh == 'GAMBLE':
            enh_type = "GAMBLE"
            gamble = ap
        elif enh == 'WAVE':
            enh_type = "WAVE"
            wave = ap
        elif enh == 'CREATION':
            enh_type = "CREATION"
            creation = ap
        elif enh == 'BLAST':
            enh_type = "BLAST"
            blast = ap
        elif enh == 'DESTRUCTION':
            enh_type = "DESTRUCTION"
            destruction = ap

    # handle different staments for lifesteal and drain
    if enhancer:

        enhanced = 0
        if enh_type == "ATK":
            enhanced = atk
        elif enh_type == "DEF":
            enhanced = defense
        elif enh_type == "STAM":
            enhanced = stam
        elif enh_type == "HLT":
            enhanced = hlt
        elif enh_type == 'LIFE':
            newhealth = lifesteal + health
            if health >= maxhealth:
                enhanced = 0
            elif newhealth >= maxhealth:
                enhanced = maxhealth - health
            else:
                enhanced = lifesteal
        elif enh_type == 'DRAIN':
            enhanced = drain
        elif enh_type == "FLOG":
            enhanced = flog
        elif enh_type == "WITHER":
            enhanced = wither
        elif enh_type == "RAGE":
            enhanced = rage
        elif enh_type == 'BRACE':
            enhanced = brace
        elif enh_type == 'BZRK':
            enhanced = bzrk
        elif enh_type == "CRYSTAL":
            enhanced = crystal
        elif enh_type == "GROWTH":
            enhanced = growth
        elif enh_type == "STANCE":
            enhanced = stance
        elif enh_type == 'CONFUSE':
            enhanced = confuse
        elif enh_type == 'BLINK':
            enhanced = blink
        elif enh_type == "SLOW":
            enhanced = slow
        elif enh_type == "HASTE":
            enhanced = haste
        elif enh_type == "FEAR":
            enhanced = fear
        elif enh_type == 'SOULCHAIN':
            enhanced = soulchain
        elif enh_type == 'GAMBLE':
            enhanced = gamble
        elif enh_type == 'WAVE':
            if turn == 0:
                enhanced = ap
            else:
                rand = round(random.randint(2, 50))
                n = ap
                if turn % 10 == 0:
                    n = ap * .75
                elif n <= 0:
                    n = 30
                elif turn == rand:
                    n = ap * 2
                else:
                    n = ap / turn
                enhanced = n
        elif enh_type == 'BLAST':
            if turn == 0:
                enhanced = ap
            else:
                enhanced = round(ap * turn)
        elif enh_type == 'CREATION':
            if turn == 0:
                enhanced = ap
            else:
                rand = round(random.randint(2, 50))
                n = ap
                if turn % 10 == 0:
                    n = ap * .75
                elif n <= 0:
                    n = 30
                elif turn == rand:
                    n = ap * 2
                else:
                    n = ap / turn
                enhanced = n
        elif enh_type == 'DESTRUCTION':
            if turn == 0:
                enhanced = ap
            else:
                enhanced = round(ap * turn)
            if enhanced > op_health:
                message = f'**{card}** used **{move}** :microbe: Opponent has been reduced.'
                enhanced = op_health - 1

        if enh_type == 'ATK':
            message = f'**{card}** used **{move}** :microbe: Increasing **Attack** by **{enhanced}**'
        elif enh_type == 'DEF':
            message = f'**{card}** used **{move}** :microbe: Increasing **Defense** by **{enhanced}**'
        elif enh_type == 'STAM':
            message = f'**{card}** used **{move}** :microbe: Increasing Stamina by **{enhanced}**'
        elif enh_type == 'LIFE':
            if enhanced == 0:
                message = f'**{card}** used **{move}** :microbe: Stealing **{enhanced} Health** \n*Your **Health** is full!*'
            else:
                message = f'**{card}** used **{move}** :microbe: Stealing **{enhanced} Health**'
        elif enh_type == 'DRAIN':
            message = f'**{card}** used **{move}** :microbe: Draining **{enhanced} Stamina**'
        elif enh_type == 'FLOG':
            message = f'**{card}** used **{move}** :microbe: Stealing **{enhanced} Attack**'
        elif enh_type == 'WITHER':
            message = f'**{card}** used **{move}** :microbe: Stealing **{enhanced} Defense**'
        elif enh_type == 'RAGE':
            message = f'**{card}** used **{move}** :microbe: Sacrificing **{enhanced} Defense**, Increasing **Attack** by **{enhanced}**'
        elif enh_type == 'BRACE':
            message = f'**{card}** used **{move}** :microbe: Sacrificing **{enhanced} Attack**, Increasing **Defense** by **{enhanced}**'
        elif enh_type == 'BZRK':
            message = f'**{card}** used **{move}** :microbe: Sacrificing **{enhanced} Health**, Increasing **Attack** by **{enhanced}**'
        elif enh_type == 'CRYSTAL':
            message = f'**{card}** used **{move}** :microbe: Sacrifices **{enhanced} Health**, Increasing **Defense** by **{enhanced}**'
        elif enh_type == 'WAVE' or enh_type == 'BLAST':
            message = f'**{card}** used **{move}** :microbe: Dealing **{round(enhanced)} {enh_type}** Damage!'
        elif enh_type == 'CREATION':
            message = f'**{card}** used **{move}** :microbe: Healing and Increasing **Max Health** by **{round(enhanced)}**'
        elif enh_type == 'DESTRUCTION':
            message = f'**{card}** used **{move}** :microbe: Destroying **{round(enhanced)} Max Health**'
        elif enh_type == 'GROWTH':
            message = f'**{card}** used **{move}** :microbe: Sacrificing **{round(enhanced)}** **Max Health** to Increase **Attack** and **Defense** by **{round(enhanced * .5)}**'
        elif enh_type == 'STANCE':
            message = f'**{card}** used **{move}** :microbe: Swapping **Attack** and **Defense**, Increasing **Attack** to **{enhanced}**'
        elif enh_type == 'CONFUSE':
            message = f'**{card}** used **{move}** :microbe: Swapping **Attack** and **Defense**, Decreasing **Defense** to **{enhanced}**'
        elif enh_type == 'HLT':
            message = f'**{card}** used **{move}** :microbe: Healing for  **{enhanced}**!'
        elif enh_type == 'FEAR':
            message = f'**{card}** used **{move}** :microbe: Sacrificing **{round(enhanced)}** **Max Health** to Decrease **Attack** and **Defense** by **{round(enhanced * .5)}**'
        elif enh_type == 'SOULCHAIN':
            message = f'**{card}** used **{move}** :microbe: Synchronizing **Stamina** to **{enhanced}**'
        elif enh_type == 'GAMBLE':
            message = f'**{card}** used **{move}** :microbe: Synchronizing **Health** to **{enhanced}**'
        else:
            message = f'**{card}** used **{move}** :microbe: inflicts {enh_type}'

        response = {"DMG": enhanced, "MESSAGE": message, "STAMINA_USED": move_stamina,
                    "CAN_USE_MOVE": can_use_move_flag, "ENHANCED_TYPE": enh_type, "ENHANCE": True}
        return response

    else:
        # Calculate Damage

        # dmg = ((int(ap) + int(atk)) / (op_defense + 2) * (.20 * int(ap)))
        try:
            defensepower = op_defense - atk
            if defensepower <= 0:
                defensepower = 1

            attackpower = atk + ap

            abilitypower = round(attackpower / defensepower)
            if abilitypower <= 0:
                abilitypower = 25

            dmg = abilitypower
            if dmg > (ap * 1.5):  # If DMG > ap -> Dmg = ap * 1.5
                dmg = ap * 1.5
            elif dmg < (ap / 2):  # If you dmg is less than you base AP you do / of AP Damage
                dmg = ap / 2

            # print(f'{turn} : {card}')
            # print("DEF:" , defensepower, "Closer to 1 is stronger op def")
            # print("ATK:" ,attackpower, "Higher is better")
            # print("AP:" , abilitypower)
            # print("DMG:", dmg)

            # fortitude = round((maxhealth - health))
            # print("FORT:" , fortitude)
            # print("**********")
            # attackpower = round((int(atk) * int(ap)) / op_defense) #5.09
            # print(attackpower)
            # modifier = random.randint(6,11)
            # dmg = round((fortitude * attackpower))

            # dmg = ((attackpower * (100 * (100 / defensepower))) * .001) + int(ap)

            low = dmg - (dmg * .10)
            high = dmg + (dmg * .10)

            true_dmg = (random.randint(int(low), int(high))) + 25
            message = ""

            miss_hit = 4  # Miss
            low_hit = 7  # Lower Damage
            med_hit = 11  # Medium Damage
            standard_hit = 19  # Standard Damage
            high_hit = 20  # Crit Hit
            hit_roll = random.randint(4, 20)

            if hit_roll <= miss_hit:
                if universe == 'Crown Rift Slayers':
                    true_dmg = round(true_dmg)
                    message = f'**{move}** used Twice! The first strike misses but second hits for **{true_dmg}**! :bangbang:'
                else:
                    true_dmg = 0
                    message = f'**{move}** misses! :dash:'
            elif hit_roll <= low_hit and hit_roll > miss_hit:
                true_dmg = round(true_dmg * .70)
                message = f'**{move}** used! It chips for **{true_dmg}**! :anger:'
            elif hit_roll <= med_hit and hit_roll > low_hit:
                true_dmg = round(true_dmg * .85)
                message = f'**{move}** used! It connects for **{true_dmg}**! :bangbang:'
            elif hit_roll <= standard_hit and hit_roll > med_hit:
                true_dmg = round(true_dmg)
                message = f'**{move}** used! It hits for **{true_dmg}**! :anger_right:'
            elif hit_roll == 20:
                if universe == 'Crown Rift Awakening':
                    true_dmg = round(true_dmg * 4)
                    message = f"**{move}** used! :boom: IT MORTALLY WOUNDS FOR **{true_dmg}**!! :boom: "
                else:
                    true_dmg = round(true_dmg * 2)
                    message = f"**{move}** used! :boom: IT CRITICALLY HITS FOR **{true_dmg}**!! :boom: "

            if move_stamina == 80:
                message = f"{special_description}\n" + message
            response = {"DMG": true_dmg, "MESSAGE": message, "STAMINA_USED": move_stamina,
                        "CAN_USE_MOVE": can_use_move_flag, "ENHANCE": False}
            return response

        except Exception as ex:
            trace = []
            tb = ex.__traceback__
            while tb is not None:
                trace.append({
                    "filename": tb.tb_frame.f_code.co_filename,
                    "name": tb.tb_frame.f_code.co_name,
                    "lineno": tb.tb_lineno
                })
                tb = tb.tb_next
            print(str({
                'type': type(ex).__name__,
                'message': str(ex),
                'trace': trace
            }))
            return

# DONT REMOVE THIS
cache = dict()

def get_card(url, cardname, cardtype):
    try:
        save_path = f"image_cache/{str(cardtype)}/{str(cardname)}.png"
        # print(save_path)
        
        if url not in cache:
            # print("Not in Cache")
            cache[url] = save_path
            im = Image.open(requests.get(url, stream=True).raw)
            im.save(f"{save_path}", "PNG")
            # print(f"NO : {cardname}")
            return im

        else:
            # print("In Cache")
            im = Image.open(cache[url])
            # print(f"YES : {cardname}")
            return im
           
    except Exception as ex:
        trace = []
        tb = ex.__traceback__
        while tb is not None:
            trace.append({
                "filename": tb.tb_frame.f_code.co_filename,
                "name": tb.tb_frame.f_code.co_name,
                "lineno": tb.tb_lineno
            })
            tb = tb.tb_next
        print(str({
            'type': type(ex).__name__,
            'message': str(ex),
            'trace': trace
        }))
        return

def showcard(d, max_health, health, max_stamina, stamina, resolved, title, focused, attack, defense, turn_total, ap1,
             ap2, ap3, enh1, enhname, lvl, op_defense):
    # Card Name can be 16 Characters before going off Card
    # Lower Card Name Font once after 16 characters
    try:
        
        if health <= 0:
            im = get_card(d['PATH'], d['NAME'], "base")
            im.save("text.png")
            return discord.File("text.png")
        else:
            if resolved:
                im = get_card(d['RPATH'], d['RNAME'], "resolve")
            elif focused:
                if d["FPATH"]:
                    im = get_card(d['FPATH'], d['NAME'], "focus")
                else:
                    im = get_card(d['PATH'], d['NAME'], "base")
            else:
                im = get_card(d['PATH'], d['NAME'], "base")

            draw = ImageDraw.Draw(im)

            # Font Size Adjustments
            # Name not go over Card
            name_font_size = 62
            if len(list(d['NAME'])) >= 16 and not resolved:
                name_font_size = 45
            if len(list(d['RNAME'])) >= 16 and resolved:
                name_font_size = 45

            header = ImageFont.truetype("YesevaOne-Regular.ttf", name_font_size)
            s = ImageFont.truetype("Roboto-Bold.ttf", 22)
            h = ImageFont.truetype("YesevaOne-Regular.ttf", 37)
            m = ImageFont.truetype("Roboto-Bold.ttf", 25)
            r = ImageFont.truetype("Freedom-10eM.ttf", 40)
            lvl_font = ImageFont.truetype("Neuton-Bold.ttf", 68)
            health_and_stamina_font = ImageFont.truetype("Neuton-Light.ttf", 41)
            attack_and_shield_font = ImageFont.truetype("Neuton-Bold.ttf", 48)
            moveset_font = ImageFont.truetype("antonio.regular.ttf", 30)
            rhs = ImageFont.truetype("destructobeambb_bold.ttf", 35)
            stats = ImageFont.truetype("Freedom-10eM.ttf", 30)
            card_details_font_size = ImageFont.truetype("destructobeambb_bold.ttf", 25)
            card_levels = ImageFont.truetype("destructobeambb_bold.ttf", 40)
            engagement_basic = 0
            engagement_special = 0
            engagement_ultimate = 0
            ebasic = '💢'
            especial = '💢'
            eultimate = '💢'
            if op_defense is None:
                ebasic = ' '
                especial = ' '
                eultimate = ' '
            else:
                defensepower = op_defense - attack
                if defensepower <=0:
                    defensepower = 1
                basic = ((attack + ap1) / defensepower)
                if basic > (ap1 * 1.5):
                    engagement_basic = 2
                    ebasic = '‼️'
                elif basic < (ap1 / 2):
                    engagement_basic = 1
                    ebasic = '❕'
            
                    
                special = ((attack + ap2) / defensepower)
                if special > (ap2 * 1.5):
                    engagement_special = 2
                    especial = '‼️'
                elif special < (ap2 / 2):
                    engagement_special = 1
                    especial = '❕'
        
                ultimate = ((attack + ap3) / defensepower)
                if ultimate > (ap3 * 1.5):
                    engagement_ultimate = 2
                    eultimate = '‼️'
                elif ultimate < (ap3 / 2):
                    engagement_ultimate = 1
                    eultimate = '❕'

            if health == max_health:
                health_bar = f"{max_health}"
            else:
                health_bar = f"{health}/{max_health}"

            # Character & Title Name
            if not resolved:
                draw.text((600, 80), d['NAME'], (255, 255, 255), font=header, stroke_width=1, stroke_fill=(0, 0, 0),
                          align="left")
            if resolved:
                if d['RNAME'] != "":
                    draw.text((600, 80), d['RNAME'], (255, 255, 255), font=header, stroke_width=1, stroke_fill=(0, 0, 0),
                            align="left")
                else:
                    draw.text((600, 80), d['NAME'], (255, 255, 255), font=header, stroke_width=1, stroke_fill=(0, 0, 0),
                            align="left")

            # draw.text((602, 150), title['TITLE'], (255, 255, 255), font=h, stroke_width=1, stroke_fill=(0, 0, 0),
            #           align="left")

            # Level
            lvl_sizing = (89, 70)
            if int(lvl) > 9:
                lvl_sizing = (75, 70)
            if int(lvl) > 99:
                lvl_sizing = (55, 70)
            draw.text(lvl_sizing, f"{lvl}", (255, 255, 255), font=lvl_font, stroke_width=1, stroke_fill=(0, 0, 0),
                      align="center")

            # Health & Stamina
            draw.text((730, 417), health_bar, (255, 255, 255), font=health_and_stamina_font, stroke_width=1,
                      stroke_fill=(0, 0, 0), align="left")
            draw.text((730, 457), f"{stamina}", (255, 255, 255), font=health_and_stamina_font, stroke_width=1,
                      stroke_fill=(0, 0, 0), align="left")

            # Attack & Shield (Defense)
            a_sizing = (89, 515)
            d_sizing = (1062, 515)
            if int(attack) > 99:
                a_sizing = (78, 515)
            if int(defense) > 99:
                d_sizing = (1048, 515)

            draw.text(a_sizing, f"{round(attack)}", (255, 255, 255), font=attack_and_shield_font, stroke_width=1,
                      stroke_fill=(0, 0, 0), align="center")
            draw.text(d_sizing, f"{round(defense)}", (255, 255, 255), font=attack_and_shield_font, stroke_width=1,
                      stroke_fill=(0, 0, 0), align="center")

            # Moveset Start
            moveset = d['MOVESET']
            move1 = moveset[0]
            move1_ap = ap1
            move1_text = f"💥 {list(move1.keys())[0]}: {move1_ap} {ebasic}"

            move2 = moveset[1]
            move2_ap = ap2
            move2_text = f"☄️ {list(move2.keys())[0]}: {move2_ap} {especial}"

            move3 = moveset[2]
            move3_ap = ap3
            move3_text = f"🏵️ {list(move3.keys())[0]}: {move3_ap} {eultimate}"

            move_enhanced = moveset[3]
            move_enhanced_ap = enh1
            move_enhanced_name = enhname
            turn_crit = False
            if enhname in Turn_Enhancer_Check:
                if turn_total == 0:
                    move_enhanced_ap = round(enh1)
                elif turn_total % 10 == 0:
                    move_enhanced_ap = round(enh1 * .50)
                    turn_crit == True
                elif turn_total >= 1:
                    move_enhanced_ap = round(enh1 / turn_total)
                else:
                    move_enhanced_ap = enh1
            elif enhname in Damage_Enhancer_Check:
                if turn_total > 0:
                    move_enhanced_ap = round(enh1 * turn_total)
                else:
                    move_enhanced_ap = enh1
            if not turn_crit:
                move_enhanced_text = f"🦠 {list(move_enhanced.keys())[0]}: {move_enhanced_name} {move_enhanced_ap}{enhancer_suffix_mapping[enhname]}"
            else:
                move_enhanced_text = f"🎇 {list(move_enhanced.keys())[0]}: {move_enhanced_name} {move_enhanced_ap}{enhancer_suffix_mapping[enhname]}"

            # attack_stat = f"🗡️{round(attack)}"
            # defense_stat = f"🛡️{round(defense)}"
            with Pilmoji(im) as pilmoji:
                pilmoji.text((602, 150), f"🎗️ {title['TITLE']}", (255, 255, 255), font=h, stroke_width=1, stroke_fill=(0, 0, 0),
                      align="left")
                pilmoji.text((600, 250), move1_text.strip(), (255, 255, 255), font=moveset_font, stroke_width=2,
                             stroke_fill=(0, 0, 0))
                pilmoji.text((600, 290), move2_text.strip(), (255, 255, 255), font=moveset_font, stroke_width=2,
                             stroke_fill=(0, 0, 0))
                pilmoji.text((600, 330), move3_text.strip(), (255, 255, 255), font=moveset_font, stroke_width=2,
                             stroke_fill=(0, 0, 0))
                pilmoji.text((600, 370), move_enhanced_text.strip(), (255, 255, 255), font=moveset_font, stroke_width=2,
                             stroke_fill=(0, 0, 0))

                # pilmoji.text((40, 545), "🗡️", (255, 255, 255), font=moveset_font, stroke_width=2,
                #              stroke_fill=(0, 0, 0))
                # pilmoji.text((1000, 545), "🛡️", (255, 255, 255), font=moveset_font, stroke_width=2,
                #              stroke_fill=(0, 0, 0))
            # Moveset End

            with BytesIO() as image_binary:
                im.save(image_binary, "PNG")
                image_binary.seek(0)
                # await ctx.send(file=discord.File(fp=image_binary,filename="image.png"))
                file = discord.File(fp=image_binary,filename="image.png")
                return file

    except Exception as ex:
        trace = []
        tb = ex.__traceback__
        while tb is not None:
            trace.append({
                "filename": tb.tb_frame.f_code.co_filename,
                "name": tb.tb_frame.f_code.co_name,
                "lineno": tb.tb_lineno
            })
            tb = tb.tb_next
        print(str({
            'type': type(ex).__name__,
            'message': str(ex),
            'trace': trace
        }))
        return


def cardback(d, max_health, health, max_stamina, stamina, resolved, arm, focused, attack, defense, turn_total, passive_name,
             traitmessage, lvl, price_message, card_icon, passive_type, passive_num, active_pet, pet_ability_power, card_exp):
    # Card Name can be 16 Characters before going off Card
    # Lower Card Name Font once after 16 characters
    try:
        if health <= 0:
            im = get_card(d['PATH'], d['NAME'], "base")
            im.save("text.png")
            return discord.File("text.png")
        else:
            if resolved:
                im = get_card(d['RPATH'], d['RNAME'], "resolve")
            elif focused:
                if d["FPATH"]:
                    im = get_card(d['FPATH'], d['NAME'], "focus")
                else:
                    im = get_card(d['PATH'], d['NAME'], "base")
            else:
                im = get_card(d['PATH'], d['NAME'], "base")

            draw = ImageDraw.Draw(im)

            # Font Size Adjustments
            # Name not go over Card
            name_font_size = 62
            if len(list(d['NAME'])) >= 16 and not resolved:
                name_font_size = 45
            if len(list(d['RNAME'])) >= 16 and resolved:
                name_font_size = 45

            header = ImageFont.truetype("YesevaOne-Regular.ttf", name_font_size)
            s = ImageFont.truetype("Roboto-Bold.ttf", 22)
            h = ImageFont.truetype("YesevaOne-Regular.ttf", 37)
            m = ImageFont.truetype("Roboto-Bold.ttf", 25)
            r = ImageFont.truetype("Freedom-10eM.ttf", 40)
            lvl_font = ImageFont.truetype("Neuton-Bold.ttf", 68)
            health_and_stamina_font = ImageFont.truetype("Neuton-Light.ttf", 41)
            attack_and_shield_font = ImageFont.truetype("Neuton-Bold.ttf", 48)
            moveset_font = ImageFont.truetype("antonio.regular.ttf", 30)
            rhs = ImageFont.truetype("destructobeambb_bold.ttf", 35)
            stats = ImageFont.truetype("Freedom-10eM.ttf", 30)
            card_details_font_size = ImageFont.truetype("destructobeambb_bold.ttf", 25)
            card_levels = ImageFont.truetype("destructobeambb_bold.ttf", 40)

            if health == max_health:
                health_bar = f"{max_health}"
            else:
                health_bar = f"{health}/{max_health}"

            # Level
            lvl_sizing = (89, 70)
            if int(lvl) > 9:
                lvl_sizing = (75, 70)
            if int(lvl) > 99:
                lvl_sizing = (55, 70)
            draw.text(lvl_sizing, f"{lvl}", (255, 255, 255), font=lvl_font, stroke_width=1, stroke_fill=(0, 0, 0),
                      align="center")

            # Health & Stamina
            draw.text((730, 417), health_bar, (255, 255, 255), font=health_and_stamina_font, stroke_width=1,
                      stroke_fill=(0, 0, 0), align="left")
            draw.text((730, 457), f"{stamina}", (255, 255, 255), font=health_and_stamina_font, stroke_width=1,
                      stroke_fill=(0, 0, 0), align="left")

            # Attack & Shield (Defense)
            a_sizing = (89, 515)
            d_sizing = (1062, 515)
            if int(attack) > 99:
                a_sizing = (78, 515)
            if int(defense) > 99:
                d_sizing = (1048, 515)

            draw.text(a_sizing, f"{round(attack)}", (255, 255, 255), font=attack_and_shield_font, stroke_width=1,
                      stroke_fill=(0, 0, 0), align="center")
            draw.text(d_sizing, f"{round(defense)}", (255, 255, 255), font=attack_and_shield_font, stroke_width=1,
                      stroke_fill=(0, 0, 0), align="center")
            
            back_name = ""
            durability = ""
            pet_info = ""
            if price_message:
                back_name = f"{card_icon} {price_message}"
                pet_info = ""
            else:
                back_name = d['NAME']
                pet_info = f"🐦 {active_pet['NAME']}: {active_pet['TYPE']} {pet_ability_power}{enhancer_suffix_mapping[active_pet['TYPE']]}"

            
            # Level Message
            lvl_msg = ""
            if lvl == 500:
                lvl_msg = f"🔱 Max Level"
            else:
                lvl_msg = f"🔱 EXP Until Next Level: {150 - card_exp}"

            with Pilmoji(im) as pilmoji:
                pilmoji.text((600, 80), back_name, (255, 255, 255), font=header, stroke_width=1, stroke_fill=(0, 0, 0),
                          align="left")
                
                pilmoji.text((602, 150), f"🦾 {arm['ARM']}", (255, 255, 255), font=h, stroke_width=1, stroke_fill=(0, 0, 0),
                      align="left")
                pilmoji.text((600, 250), f"🩸 {passive_name}: {passive_type} by {passive_num}{enhancer_suffix_mapping[passive_type]}".strip(), (255, 255, 255), font=moveset_font, stroke_width=2,
                             stroke_fill=(0, 0, 0))
                pilmoji.text((600, 290), f"♾️ {traitmessage}".strip(), (255, 255, 255), font=moveset_font, stroke_width=2,
                             stroke_fill=(0, 0, 0))

                pilmoji.text((600, 330), f"{pet_info}".strip(), (255, 255, 255), font=moveset_font, stroke_width=2,stroke_fill=(0, 0, 0))
                
                pilmoji.text((600, 370), lvl_msg.strip(), (255, 255, 255), font=moveset_font, stroke_width=2,
                             stroke_fill=(0, 0, 0))



            with BytesIO() as image_binary:
                im.save(image_binary, "PNG")
                image_binary.seek(0)
                # await ctx.send(file=discord.File(fp=image_binary,filename="image.png"))
                file = discord.File(fp=image_binary,filename="backimage.png")
                return file
    except Exception as ex:
        trace = []
        tb = ex.__traceback__
        while tb is not None:
            trace.append({
                "filename": tb.tb_frame.f_code.co_filename,
                "name": tb.tb_frame.f_code.co_name,
                "lineno": tb.tb_lineno
            })
            tb = tb.tb_next
        print(str({
            'type': type(ex).__name__,
            'message': str(ex),
            'trace': trace
        }))
        return


def setup(bot):
    bot.add_cog(CrownUnlimited(bot))


async def build_player_stats(self, randomized_battle, ctx, sowner: str, o: dict, otitle: dict, t: dict, ttitle: dict,
                             mode: str, universe: str, currentopponent: int, oteam: str, ofam: str, abyss_scaling: None,
                             companion: None, c: None, ctitle: None, cteam: None, cfam: None, activeDeck: None,
                             boss: None, player2: None, player2team: None, player2guild: None):
    co_op_modes = ['CTales', 'DTales', 'CDungeon', 'DDungeon']
    ai_co_op_modes = ['DTales', 'DDungeon']
    U_modes = ['ATales', 'Tales', 'CTales', 'DTales']
    D_modes = ['CDungeon', 'DDungeon', 'Dungeon', 'ADungeon']
    B_modes = ['Boss', 'CBoss']
    solo_modes = ['ATales', 'Tales', 'Dungeon', 'Boss']
    pvp_modes = ['PVP']
    opponent_pet_modes = ['Dungeon', 'DDungeon', 'CDungeon']
    if mode not in pvp_modes:
        opponent_scaling = 15
        opponent_health_scaling = 0
        enemy_title = ""
        enemy_arm = ""
        currentopponent = 0
    t_user = ""
    if mode == "Abyss":
        opponent_scaling = abyss_scaling
    if mode in B_modes:
        bossname = boss['CARD']
        boss = db.queryBoss({'NAME': str(bossname)})
        enemy_arm = boss['ARM']
        enemy_pet = boss['PET']
        t_user = boss
        opponent_scaling = 350
    if mode in U_modes:
        enemy_title = "UTITLE"
        enemy_arm = "UARM"
        opponent_scaling = 25
        if randomized_battle:
            currentopponent = 10
            opponent_scaling = 25
    if mode in D_modes:
        enemy_title = "DTITLE"
        enemy_arm = "DARM"
        opponent_scaling = 175
        opponent_health_scaling = 350
        if randomized_battle:
            currentopponent = 30
            opponent_scaling = 275

    try:
        # Player 1 Data
        o_user = sowner
        oarm = db.queryArm({'ARM': o_user['ARM']})
        oarm_universe = oarm['UNIVERSE']
        oarm_passive = oarm['ABILITIES'][0]
        oarm_name = oarm['ARM']

        vault = db.queryVault({'OWNER': str(o_user['DISNAME']), 'PETS.NAME': o_user['PET']})
        update_durability_message = update_arm_durability(self, vault, oarm)
        if update_durability_message['MESSAGE']:
            await ctx.author.send(f"{update_durability_message['MESSAGE']}")
        opet = {}
        for pet in vault['PETS']:
            if o_user['PET'] == pet['NAME']:
                opet = pet

        opet_passive_type = opet['TYPE']
        opet_name = opet['NAME']
        opet_image = opet['PATH']
        opet_exp = opet['EXP']
        opet_lvl = opet['LVL']
        opet_bond = opet['BOND']

        o_DID = o_user['DID']
        o_card = o['NAME']

        ocard_lvl = 0
        ocard_tier = 0
        ocard_exp = 0
        ocard_lvl_attack_buff = 0
        ocard_lvl_defense_buff = 0
        ocard_lvl_ap_buff = 0
        ocard_lvl_hlt_buff = 0

        for x in vault['CARD_LEVELS']:
            if x['CARD'] == o_card:
                ocard_lvl = x['LVL']
                ocard_tier = x['TIER']
                ocard_exp = x['EXP']
                ocard_lvl_ap_buff = x['AP']
                ocard_lvl_attack_buff = x['ATK']
                ocard_lvl_defense_buff = x['DEF']
                ocard_lvl_hlt_buff = x['HLT']

        o_gif = o['GIF']
        o_destiny = o['HAS_COLLECTION']
        o_card_path = o['PATH']
        o_rcard_path = o['RPATH']

        o_health = o['HLT'] + ocard_lvl_hlt_buff
        o_max_health = o['HLT'] + ocard_lvl_hlt_buff
        o_stamina = o['STAM']
        o_max_stamina = o['STAM']
        o_moveset = o['MOVESET']
        o_attack = o['ATK'] + ocard_lvl_attack_buff
        o_defense = o['DEF'] + ocard_lvl_defense_buff
        o_type = o['TYPE']

        o_passive = o['PASS'][0]
        o_speed = o['SPD']
        o_universe = o['UNIVERSE']
        o_title_universe = otitle['UNIVERSE']
        o_title_passive = otitle['ABILITIES'][0]

        user1 = await self.bot.fetch_user(o_DID)
        o_title_passive_bool = False
        o_descriptions = []
        if o['DESCRIPTIONS']:
            o_descriptions = o['DESCRIPTIONS']
            o_greeting_description = o_descriptions[0]
            o_focus_description = o_descriptions[1]
            o_resolve_description = o_descriptions[2]
            o_special_move_description = o_descriptions[3]
            o_win_description = o_descriptions[4]
            o_lose_description = o_descriptions[5]
        else:
            o_greeting_description = "Are you ready to battle!"
            o_focus_description = "I still have more in the tank!"
            o_resolve_description = "Power up!"
            o_special_move_description = "Take this!"
            o_win_description = "Too easy. Come back when you're truly prepared."
            o_lose_description = "I can't believe I lost..."

        if companion:
            ### Companion Data
            c_user = companion

            if mode in ai_co_op_modes:
                cvault = vault
                cpet = {}
                for pet in vault['PETS']:
                    if activeDeck['PET'] == pet['NAME']:
                        cpet = pet
                carm = db.queryArm({'ARM': activeDeck['ARM']})
                carm_universe = carm['UNIVERSE']
                carm_passive = carm['ABILITIES'][0]
                carm_name = carm['ARM']
            else:
                cvault = db.queryVault({'OWNER': c_user['DISNAME'], 'PETS.NAME': c_user['PET']})
                cpet = {}
                for pet in cvault['PETS']:
                    if c_user['PET'] == pet['NAME']:
                        cpet = pet
                carm = db.queryArm({'ARM': c_user['ARM']})
                cupdate_durability_message = update_arm_durability(self, cvault, carm)
                if cupdate_durability_message['MESSAGE']:
                    await ctx.send(f"{cupdate_durability_message['MESSAGE']}")

                carm_universe = carm['UNIVERSE']
                carm_passive = carm['ABILITIES'][0]
                carm_name = carm['ARM']

            cpet_passive_type = cpet['TYPE']
            cpet_name = cpet['NAME']
            cpet_image = cpet['PATH']
            cpet_exp = cpet['EXP']
            cpet_lvl = cpet['LVL']
            cpet_bond = cpet['BOND']

            if mode in ai_co_op_modes:
                c_DID = o_user['DID']
            else:
                c_DID = c_user['DID']

            c_card = c['NAME']
            ccard_lvl = 0
            ccard_tier = 0
            ccard_exp = 0
            ccard_lvl_attack_buff = 0
            ccard_lvl_defense_buff = 0
            ccard_lvl_ap_buff = 0
            ccard_lvl_hlt_buff = 0

            for x in cvault['CARD_LEVELS']:
                if x['CARD'] == c_card:
                    ccard_lvl = x['LVL']
                    ccard_tier = x['TIER']
                    ccard_exp = x['EXP']
                    ccard_lvl_ap_buff = x['AP']
                    ccard_lvl_attack_buff = x['ATK']
                    ccard_lvl_defense_buff = x['DEF']
                    ccard_lvl_hlt_buff = x['HLT']

            c_gif = c['GIF']
            c_destiny = c['HAS_COLLECTION']
            c_card_path = c['PATH']
            c_rcard_path = c['RPATH']
            c_health = c['HLT'] + ccard_lvl_hlt_buff
            c_max_health = c['HLT'] + ccard_lvl_hlt_buff

            c_stamina = c['STAM']
            c_max_stamina = c['STAM']
            c_moveset = c['MOVESET']
            c_attack = c['ATK'] + ccard_lvl_attack_buff
            c_defense = c['DEF'] + ccard_lvl_defense_buff
            c_type = c['TYPE']

            c_passive = c['PASS'][0]
            c_speed = c['SPD']
            c_universe = c['UNIVERSE']
            c_title_universe = ctitle['UNIVERSE']
            c_title_passive = ctitle['ABILITIES'][0]

            user2 = await self.bot.fetch_user(c_DID)
            c_title_passive_bool = False
            c_descriptions = []
            if c['DESCRIPTIONS']:
                c_descriptions = c['DESCRIPTIONS']
                c_greeting_description = c_descriptions[0]
                c_focus_description = c_descriptions[1]
                c_resolve_description = c_descriptions[2]
                c_special_move_description = c_descriptions[3]
                c_win_description = c_descriptions[4]
                c_lose_description = c_descriptions[5]
            else:
                c_greeting_description = "Are you ready to battle!"
                c_focus_description = "I still have more in the tank!"
                c_resolve_description = "Power up!"
                c_special_move_description = "Take this!"
                c_win_description = "Too easy. Come back when you're truly prepared."
                c_lose_description = "I can't believe I lost..."

        if mode in pvp_modes:
            # Player 2 Data
            t_user = player2
            tarm = db.queryArm({'ARM': t_user['ARM']})
            tarm_universe = tarm['UNIVERSE']
            tarm_passive = tarm['ABILITIES'][0]
            tarm_name = tarm['ARM']
            print(tarm_name)

            tvault = db.queryVault({'OWNER': str(t_user['DISNAME']), 'PETS.NAME': t_user['PET']})
            tupdate_durability_message = update_arm_durability(self, tvault, tarm)
            if tupdate_durability_message['MESSAGE']:
                await ctx.send(f"{tupdate_durability_message['MESSAGE']}")

            tpet = {}
            for pet in vault['PETS']:
                if t_user['PET'] == pet['NAME']:
                    tpet = pet

            tpet_passive_type = tpet['TYPE']
            tpet_name = tpet['NAME']
            tpet_image = tpet['PATH']
            tpet_exp = tpet['EXP']
            tpet_lvl = tpet['LVL']
            tpet_bond = tpet['BOND']

            t_DID = t_user['DID']
            t_card = t['NAME']

            tcard_lvl = 0
            tcard_tier = 0
            tcard_exp = 0
            tcard_lvl_attack_buff = 0
            tcard_lvl_defense_buff = 0
            tcard_lvl_ap_buff = 0
            tcard_lvl_hlt_buff = 0

            for x in vault['CARD_LEVELS']:
                if x['CARD'] == t_card:
                    tcard_lvl = x['LVL']
                    tcard_tier = x['TIER']
                    tcard_exp = x['EXP']
                    tcard_lvl_ap_buff = x['AP']
                    tcard_lvl_attack_buff = x['ATK']
                    tcard_lvl_defense_buff = x['DEF']
                    tcard_lvl_hlt_buff = x['HLT']

            t_gif = t['GIF']
            t_destiny = t['HAS_COLLECTION']
            t_card_path = t['PATH']
            t_rcard_path = t['RPATH']

            t_health = t['HLT'] + tcard_lvl_hlt_buff
            t_max_health = t['HLT'] + tcard_lvl_hlt_buff
            t_stamina = t['STAM']
            t_max_stamina = t['STAM']
            t_moveset = t['MOVESET']
            t_attack = t['ATK'] + tcard_lvl_attack_buff
            t_defense = t['DEF'] + tcard_lvl_defense_buff
            t_type = t['TYPE']

            t_passive = t['PASS'][0]
            t_speed = t['SPD']
            t_universe = t['UNIVERSE']
            t_title_universe = ttitle['UNIVERSE']
            t_title_passive = ttitle['ABILITIES'][0]

            user2 = await self.bot.fetch_user(t_DID)
            t_title_passive_bool = False
            t_descriptions = []
            if t['DESCRIPTIONS']:
                t_descriptions = t['DESCRIPTIONS']
                t_greeting_description = t_descriptions[0]
                t_focus_description = t_descriptions[1]
                t_resolve_description = t_descriptions[2]
                t_special_move_description = t_descriptions[3]
                t_win_description = t_descriptions[4]
                t_lose_description = t_descriptions[5]
            else:
                t_greeting_description = "Are you ready to battle!"
                t_focus_description = "I still have more in the tank!"
                t_resolve_description = "Power up!"
                t_special_move_description = "Take this!"
                t_win_description = "Too easy. Come back when you're truly prepared."
                t_lose_description = "I can't believe I lost..."

        else:
            if mode in B_modes:
                tarm = db.queryArm({'ARM': enemy_arm})
            else:
                tarm = db.queryArm({'ARM': universe[enemy_arm]})

            tarm_universe = tarm['UNIVERSE']
            t_destiny = t['HAS_COLLECTION']
            if mode in B_modes:
                tpet = db.queryPet({'PET': enemy_pet})
            else:
                tpet = db.queryPet({'PET': universe['DPET']})
            tpet_passive = tpet['ABILITIES'][0]
            tpet_name = tpet['PET']
            tpet_image = tpet['PATH']
            if mode in D_modes:
                tpet_lvl = 10
                tpet_bond = 3
                tcard_lvl = 100
                tcard_lvl_ap_buff = 50 + (10 * currentopponent)
            else:
                tpet_lvl = 3
                tpet_bond = 1
                tcard_lvl = 10
                tcard_lvl_ap_buff = 10 + (10 * currentopponent)
            tarm_passive = tarm['ABILITIES'][0]
            tarm_name = tarm['ARM']
            t_card = t['NAME']
            t_gif = t['GIF']
            t_card_path = t['PATH']
            t_rcard_path = t['RPATH']
            t_health = t['HLT'] + (10 * currentopponent) + opponent_health_scaling
            t_max_health = t_health
            t_stamina = t['STAM']
            t_max_stamina = t['STAM']
            t_moveset = t['MOVESET']
            t_attack = t['ATK'] + (5 * currentopponent) + opponent_scaling
            t_defense = t['DEF'] + (5 * currentopponent) + opponent_scaling
            t_type = t['TYPE']

            t_passive = t['PASS'][0]
            t_speed = t['SPD']
            t_universe = t['UNIVERSE']
            t_title_universe = ttitle['UNIVERSE']
            t_title_passive = ttitle['ABILITIES'][0]

            # user2 = await self.bot.fetch_user(t_DID)
            t_title_passive_bool = False
            if t['DESCRIPTIONS']:
                t_descriptions = t['DESCRIPTIONS']
                t_greeting_description = t_descriptions[0]
                t_focus_description = t_descriptions[1]
                t_resolve_description = t_descriptions[2]
                t_special_move_description = t_descriptions[3]
                t_win_description = t_descriptions[4]
                t_lose_description = t_descriptions[5]
            else:
                t_greeting_description = "Are you ready to battle!"
                t_focus_description = "I still have more in the tank!"
                t_resolve_description = "Power up!"
                t_special_move_description = "Take this!"
                t_win_description = "Too easy. Come back when you're truly prepared."
                t_lose_description = "I can't believe I lost..."

        if mode in B_modes:
            # World Building
            t_arena = t_user['DESCRIPTION'][0]
            t_arenades = t_user['DESCRIPTION'][1]
            t_entrance = t_user['DESCRIPTION'][2]
            t_description = t_user['DESCRIPTION'][3]
            t_welcome = t_user['DESCRIPTION'][4]
            t_feeling = t_user['DESCRIPTION'][5]
            t_powerup = t_user['DESCRIPTION'][6]
            t_aura = t_user['DESCRIPTION'][7]
            t_assault = t_user['DESCRIPTION'][8]
            t_world = t_user['DESCRIPTION'][9]
            t_punish = t_user['DESCRIPTION'][10]
            t_rmessage = t_user['DESCRIPTION'][11]
            t_rebuke = t_user['DESCRIPTION'][12]
            t_concede = t_user['DESCRIPTION'][13]
            t_wins = t_user['DESCRIPTION'][14]

        # DBZ traits
        o_final_stand = False
        t_final_stand = False
        if o['UNIVERSE'] == "Dragon Ball Z":
            o_final_stand = True

        if t['UNIVERSE'] == "Dragon Ball Z":
            t_final_stand = True

        if companion:
            c_final_stand = False
            if c['UNIVERSE'] == "Dragon Ball Z":
                c_final_stand = True

            if oteam == cteam:
                o_defense = o_defense + 10
                c_defense = c_defense + 10
            if ofam == cfam:
                o_health = o_health + 50
                c_health = c_health + 50
                o_max_health = o_max_health + 50
                c_max_health = c_max_health + 50

            # Companion Passive Config
            if (c_universe == c_title_universe) or (c_title_universe == "Unbound"):
                c_title_passive_bool = True

            # Player 1 Focus & Resolve
            c_focus = 90
            c_used_focus = False
            c_resolve = 60
            c_used_resolve = False

            # Companion Moves
            c_1 = c_moveset[0]
            c_2 = c_moveset[1]
            c_3 = c_moveset[2]
            c_enhancer = c_moveset[3]
            c_enhancer_used = False
            c_pet_used = False
            c_block_used = False
            c_chainsaw = False
            c_defend_used = False
            c_def_chainsaw = False
            c_atk_chainsaw = False
            if c_universe == "Chainsawman":
                c_chainsaw = True

            cmove1_text = list(c_1.keys())[0]
            cmove2_text = list(c_2.keys())[0]
            cmove3_text = list(c_3.keys())[0]
            cmove_enhanced_text = list(c_enhancer.keys())[0]

            cpetmove_text = list(cpet.keys())[3]  # Name of the ability
            cpetmove_ap = (cpet_bond * cpet_lvl) + list(cpet.values())[3]  # Ability Power

            cpet_move = {str(cpetmove_text): int(cpetmove_ap), 'STAM': 15, 'TYPE': str(cpet_passive_type)}

            # Player 1 Card Passive
            c_card_passive_type = list(c_passive.values())[1]
            c_card_passive = list(c_passive.values())[0]

            if c_card_passive_type == 'ATK':
                c_attack = c_attack + int(c_card_passive)
            elif c_card_passive_type == 'DEF':
                c_defense = o_defense + int(c_card_passive)
            elif c_card_passive_type == 'STAM':
                c_stamina = o_stamina + int(c_card_passive)
            elif c_card_passive_type == 'HLT':
                c_max_health = c_max_health + int(c_card_passive)
                c_health = c_health + int(c_card_passive)
            elif c_card_passive_type == 'LIFE':
                if mode in B_modes:
                    c_max_health = c_max_health + int((c_card_passive / 200) * t_health)
                else:
                    c_max_health = c_max_health + int((c_card_passive / 100) * t_health)
            elif c_card_passive_type == 'DRAIN':
                t_stamina = t_stamina - int(c_card_passive)
                c_stamina = c_stamina + int(c_card_passive)
            elif c_card_passive_type == 'FLOG':
                c_attack = c_attack + int((c_card_passive / 100) * t_attack)
                t_attack = t_attack - int((c_card_passive / 100) * t_attack)
            elif c_card_passive_type == 'WITHER':
                c_defense = c_defense + int((c_card_passive / 100) * t_defense)
                t_defense = t_defense - int((c_card_passive / 100) * t_defense)
            elif c_card_passive_type == 'RAGE':
                c_attack = c_attack + int(((c_card_passive / 100) * c_defense))
                c_defense = c_defense - int(((c_card_passive / 100) * c_attack))
            elif c_card_passive_type == 'BRACE':
                c_defense = c_defense + int(((c_card_passive / 100) * c_attack))
                c_attack = c_attack - int(((c_card_passive / 100) * c_defense))
            elif c_card_passive_type == 'BZRK':
                c_attack = c_attack + int(((c_card_passive / 100) * c_health))
                c_health = c_health - int((c_attack))
            elif c_card_passive_type == 'CRYSTAL':
                c_defense = c_defense + int(((c_card_passive / 100) * c_health))
                c_health = c_health - int((c_defense))
            elif c_card_passive_type == 'GROWTH':
                c_attack = c_attack + int(((c_card_passive / 50) * c_max_health))
                c_defense = c_defense + int(((c_card_passive / 50) * c_max_health))
                c_max_health = c_max_health - int(((c_card_passive / 100) * c_max_health))
                # c_health = c_health - int(((c_card_passive / 100) * c_max_health))
            elif c_card_passive_type == 'STANCE':
                tempattack = c_attack + c_card_passive
                c_attack = c_defense + c_card_passive
                c_defense = tempattack
            elif c_card_passive_type == 'CONFUSE':
                tempattack = t_attack - c_card_passive
                t_attack = t_defense - c_card_passive
                t_defense = tempattack
            elif c_card_passive_type == 'BLINK':
                c_stamina = c_stamina - c_card_passive
                t_stamina = t_stamina + c_card_passive - 10
            elif c_card_passive_type == 'SLOW':
                tempstam = t_stamina + o_card_passive
                c_stamina = c_stamina - (2 * c_card_passive)
                t_stamina = c_stamina
                o_stamina = tempstam
            elif c_card_passive_type == 'HASTE':
                tempstam = t_stamina - c_card_passive
                c_stamina = c_stamina + (2 * c_card_passive)
                t_stamina = c_stamina
                c_stamina = tempstam
            elif c_card_passive_type == 'SOULCHAIN':
                c_stamina = c_card_passive
                t_stamina = c_card_passive
            elif c_card_passive_type == 'FEAR':
                if c_universe == "Chainsawman":
                    c_health = c_health - int((c_card_passive / 190) * c_max_health)
                    t_attack = t_attack - int((c_card_passive / 100) * c_max_health)
                    t_defense = t_defense - int((c_card_passive / 100) * c_max_health)
                else:
                    c_health = c_health - int((c_card_passive / 100) * c_max_health)
                    t_attack = t_attack - int((c_card_passive / 50) * c_max_health)
                    t_defense = t_defense - int((c_card_passive / 50) * c_max_health)
            elif c_card_passive_type == 'GAMBLE':
                if mode in B_modes:
                    c_health = o_card_passive
                    o_health = c_card_passive
                    t_health = o_card_passive * 3
                elif mode in D_modes:
                    c_health = o_card_passive
                    o_health = c_card_passive
                    t_health = o_card_passive * 2
                else:
                    c_health = o_card_passive
                    o_health = c_card_passive
                    t_health = o_card_passive

                    # Title Passive
            c_title_passive_type = list(c_title_passive.keys())[0]
            c_title_passive_value = list(c_title_passive.values())[0]

            if c_title_passive_bool:
                if c_title_passive_type == 'ATK':
                    c_attack = c_attack + int(c_title_passive_value)
                elif c_title_passive_type == 'DEF':
                    c_defense = c_defense + int(c_title_passive_value)
                elif c_title_passive_type == 'STAM':
                    c_stamina = c_stamina + int(c_title_passive_value)
                elif c_title_passive_type == 'HLT':
                    c_max_health = c_max_health + int(c_title_passive_value)
                    c_health = c_health + int(c_title_passive_value)
                elif c_title_passive_type == 'LIFE':
                    if mode in B_modes:
                        c_max_health = c_max_health + int((c_title_passive_value / 200) * t_health)
                    else:
                        c_max_health = c_max_health + int((c_title_passive_value / 100) * t_health)
                elif c_title_passive_type == 'DRAIN':
                    t_stamina = t_stamina - int(c_title_passive_value)
                    c_stamina = c_stamina + int(c_title_passive_value)
                elif c_title_passive_type == 'FLOG':
                    c_attack = c_attack + int((c_title_passive_value / 100) * t_attack)
                    t_attack = t_attack - int((c_title_passive_value / 100) * t_attack)
                elif c_title_passive_type == 'WITHER':
                    c_defense = c_defense + int((c_title_passive_value / 100) * t_defense)
                    t_defense = t_defense - int((c_title_passive_value / 100) * t_defense)
                elif c_title_passive_type == 'RAGE':
                    c_attack = c_attack + int(((c_title_passive_value / 100) * c_defense))
                    c_defense = c_defense - int(((c_title_passive_value / 100) * c_attack))
                elif c_title_passive_type == 'BRACE':
                    c_defense = c_defense + int(((c_title_passive_value / 100) * c_attack))
                    c_attack = c_attack - int(((c_title_passive_value / 100) * c_defense))
                elif c_title_passive_type == 'BZRK':
                    c_attack = c_attack + int(((c_title_passive_value / 100) * c_health))
                    c_health = c_health - int((c_attack))
                elif c_title_passive_type == 'CRYSTAL':
                    c_defense = c_defense + int(((c_title_passive_value / 100) * c_health))
                    c_health = c_health - int((c_defense))
                elif c_title_passive_type == 'GROWTH':
                    c_attack = c_attack + int(((c_title_passive_value / 50) * c_max_health))
                    c_defense = c_defense + int(((c_title_passive_value / 50) * c_max_health))
                    c_max_health = c_max_health - int(((c_title_passive_value / 100) * c_max_health))
                elif c_title_passive_type == 'STANCE':
                    tempattack = c_attack
                    c_attack = c_defense
                    c_defense = tempattack
                elif c_title_passive_type == 'CONFUSE':
                    tempattack = t_attack
                    t_attack = t_defense
                    t_defense = tempattack
                elif c_title_passive_type == 'BLINK':
                    c_stamina = c_stamina - c_title_passive_value
                    t_stamina = t_stamina + c_title_passive_value
                elif c_title_passive_type == 'SLOW':
                    tempstam = t_stamina + c_title_passive_value
                    c_stamina = c_stamina - c_title_passive_value
                    t_stamina = c_stamina
                    c_stamina = tempstam
                elif c_title_passive_type == 'HASTE':
                    tempstam = t_stamina - c_title_passive_value
                    c_stamina = c_stamina + c_title_passive_value
                    t_stamina = c_stamina
                    c_stamina = tempstam
                elif c_title_passive_type == 'SOULCHAIN':
                    c_stamina = c_title_passive_value
                    t_stamina = c_title_passive_value
                elif c_title_passive_type == 'FEAR':
                    if c_universe == "Chainsawman":
                        c_health = c_health - int((c_title_passive_value / 190) * c_max_health)
                        t_attack = t_attack - int((c_title_passive_value / 100) * c_max_health)
                        t_defense = t_defense - int((c_title_passive_value / 100) * c_max_health)
                    else:
                        c_health = c_health - int((c_title_passive_value / 100) * c_max_health)
                        t_attack = t_attack - int((c_title_passive_value / 50) * c_max_health)
                        t_defense = t_defense - int((c_title_passive_value / 50) * c_max_health)
                elif c_title_passive_type == 'GAMBLE':
                    if mode in B_modes:
                        c_health = o_card_passive
                        o_health = c_card_passive
                        t_health = o_card_passive * 3
                    elif mode in D_modes:
                        c_health = o_card_passive
                        o_health = c_card_passive
                        t_health = o_card_passive * 2
                    else:
                        c_health = o_card_passive
                        o_health = c_card_passive
                        t_health = o_card_passive

                        # Arm Passive Player 1
            carm_passive_type = list(carm_passive.keys())[0]
            carm_passive_value = list(carm_passive.values())[0]
            carm_shield_active = False
            cshield_value = 0
            carm_barrier_active = False
            cbarrier_count = 0
            carm_parry_active = False
            cparry_count = 0
            if carm_passive_type == 'BASIC':
                c_1[cmove1_text] = c_1[cmove1_text] + carm_passive_value
            elif carm_passive_type == 'SPECIAL':
                c_2[cmove2_text] = c_2[cmove2_text] + carm_passive_value
            elif carm_passive_type == 'ULTIMATE':
                c_3[cmove3_text] = c_3[cmove3_text] + carm_passive_value
            elif carm_passive_type == 'ULTIMAX':
                c_1[cmove1_text] = c_1[cmove1_text] + carm_passive_value
                c_2[cmove2_text] = c_2[cmove2_text] + carm_passive_value
                c_3[cmove3_text] = c_3[cmove3_text] + carm_passive_value
            elif carm_passive_type == 'MANA':
                c_enhancer[cmove_enhanced_text] = round(c_enhancer[cmove_enhanced_text] +  (c_enhancer[cmove_enhanced_text] * (carm_passive_value / 100)))
            elif carm_passive_type == 'SHIELD':
                carm_shield_active = True
                cshield_value = carm_passive_value
            elif carm_passive_type == 'BARRIER':
                carm_barrier_active = True
                cbarrier_count = carm_passive_value
            elif carm_passive_type == 'PARRY':
                carm_parry_active = True
                cparry_count = carm_passive_value

        ################################################################################

        # Player 1 Passive Config
        if (o_universe == o_title_universe) or (o_title_universe == "Unbound"):
            o_title_passive_bool = True

        # Player 1 Focus & Resolve
        o_focus = 90
        o_used_focus = False
        o_resolve = 60
        o_used_resolve = False

        # Player 1 Moves
        o_1 = o_moveset[0]
        o_2 = o_moveset[1]
        o_3 = o_moveset[2]
        o_enhancer = o_moveset[3]
        o_enhancer_used = False
        o_pet_used = False
        o_block_used = False
        o_defend_used = False
        o_chainsaw = False
        o_def_chainsaw = False
        o_atk_chainsaw = False
        if o_universe == "Chainsawman":
            o_chainsaw = True

        omove1_text = list(o_1.keys())[0]
        omove2_text = list(o_2.keys())[0]
        omove3_text = list(o_3.keys())[0]
        omove_enhanced_text = list(o_enhancer.keys())[0]

        opetmove_text = list(opet.keys())[3]  # Name of the ability
        opetmove_ap = (opet_bond * opet_lvl) + list(opet.values())[3]  # Ability Power

        opet_move = {str(opetmove_text): int(opetmove_ap), 'STAM': 15, 'TYPE': str(opet_passive_type)}

        # Player 1 Card Passive
        o_card_passive_type = list(o_passive.values())[1]
        o_card_passive = list(o_passive.values())[0]

        if o_card_passive_type == 'ATK':
            o_attack = o_attack + int(o_card_passive)
        elif o_card_passive_type == 'DEF':
            o_defense = o_defense + int(o_card_passive)
        elif o_card_passive_type == 'STAM':
            o_stamina = o_stamina + int(o_card_passive)
        elif o_card_passive_type == 'HLT':
            o_max_health = o_max_health + int(o_card_passive)
            o_health = o_health + int(o_card_passive)
        elif o_card_passive_type == 'LIFE':
            if mode in B_modes:
                o_max_health = o_max_health + int((o_card_passive / 200) * t_health)
            else:
                o_max_health = o_max_health + int((o_card_passive / 100) * t_health)
        elif o_card_passive_type == 'DRAIN':
            o_stamina = o_stamina + int(o_card_passive)
            t_stamina = t_stamina - int(o_card_passive)
        elif o_card_passive_type == 'FLOG':
            o_attack = o_attack + int((o_card_passive / 100) * t_attack)
            t_attack = t_attack - int((o_card_passive / 100) * t_attack)
        elif o_card_passive_type == 'WITHER':
            o_defense = o_defense + int((o_card_passive / 100) * t_defense)
            t_defense = t_defense - int((o_card_passive / 100) * t_defense)
        elif o_card_passive_type == 'RAGE':
            o_attack = o_attack + int(((o_card_passive / 100) * o_defense))
            o_defense = o_defense - int(((o_card_passive / 100) * o_attack))
        elif o_card_passive_type == 'BRACE':
            o_defense = o_defense + int(((o_card_passive / 100) * o_attack))
            o_attack = o_attack - int(((o_card_passive / 100) * o_defense))
        elif o_card_passive_type == 'BZRK':
            o_attack = o_attack + int(((o_card_passive / 100) * o_health))
            o_health = o_health - int((o_attack))
        elif o_card_passive_type == 'CRYSTAL':
            o_defense = o_defense + int(((o_card_passive / 100) * o_health))
            o_health = o_health - int((o_defense))
        elif o_card_passive_type == 'GROWTH':
            o_attack = o_attack + int(((o_card_passive / 50) * o_max_health))
            o_defense = o_defense + int(((o_card_passive / 50) * o_max_health))
            o_max_health = o_max_health - int(((o_card_passive / 100) * o_max_health))
            # o_health = o_health - int(((o_card_passive / 100) * o_max_health))
        elif o_card_passive_type == 'STANCE':
            tempattack = o_attack + o_card_passive
            o_attack = o_defense + o_card_passive
            o_defense = tempattack
        elif o_card_passive_type == 'CONFUSE':
            tempattack = t_attack - o_card_passive
            t_attack = t_defense - o_card_passive
            t_defense = tempattack
        elif o_card_passive_type == 'BLINK':
            o_stamina = o_stamina - o_card_passive
            t_stamina = t_stamina + o_card_passive - 10
        elif o_card_passive_type == 'SLOW':
            tempstam = t_stamina + o_card_passive
            o_stamina = o_stamina - (2 * o_card_passive)
            t_stamina = o_stamina
            o_stamina = tempstam
        elif o_card_passive_type == 'HASTE':
            tempstam = t_stamina - o_card_passive
            o_stamina = o_stamina + (2 * o_card_passive)
            t_stamina = o_stamina
            o_stamina = tempstam
        elif o_card_passive_type == 'SOULCHAIN':
            o_stamina = o_card_passive
            t_stamina = o_card_passive
        elif o_card_passive_type == 'FEAR':
            if o_universe == "Chainsawman":
                o_health = o_health - int((o_card_passive / 190) * o_max_health)
                t_attack = t_attack - int((o_card_passive / 100) * o_max_health)
                t_defense = t_defense - int((o_card_passive / 100) * o_max_health)
            else:
                o_health = o_health - int((o_card_passive / 100) * o_max_health)
                t_attack = t_attack - int((o_card_passive / 50) * o_max_health)
                t_defense = t_defense - int((o_card_passive / 50) * o_max_health)
        elif o_card_passive_type == 'GAMBLE':
            if mode in B_modes:
                o_health = o_card_passive
                t_health = o_card_passive * 3
            elif mode in D_modes:
                o_health = o_card_passive
                t_health = o_card_passive * 2
            else:
                o_health = o_card_passive
                t_health = o_card_passive
            if companion:
                c_health = o_card_passive

                # Title Passive
        o_title_passive_type = list(o_title_passive.keys())[0]
        o_title_passive_value = list(o_title_passive.values())[0]

        if o_title_passive_bool:
            if o_title_passive_type == 'ATK':
                o_attack = o_attack + int(o_title_passive_value)
            elif o_title_passive_type == 'DEF':
                o_defense = o_defense + int(o_title_passive_value)
            elif o_title_passive_type == 'STAM':
                o_stamina = o_stamina + int(o_title_passive_value)
            elif o_title_passive_type == 'HLT':
                o_max_health = o_max_health + int(o_title_passive_value)
                o_health = o_health + int(o_title_passive_value)
            elif o_title_passive_type == 'LIFE':
                if mode in B_modes:
                    o_max_health = o_max_health + int((o_title_passive_value / 200) * t_health)
                else:
                    o_max_health = o_max_health + int((o_title_passive_value / 100) * t_health)
            elif o_title_passive_type == 'DRAIN':
                t_stamina = t_stamina - int(o_title_passive_value)
                o_stamina = o_stamina + int(o_title_passive_value)
            elif o_title_passive_type == 'FLOG':
                o_attack = o_attack + int((o_title_passive_value / 100) * t_attack)
                t_attack = t_attack - int((o_title_passive_value / 100) * t_attack)
            elif o_title_passive_type == 'WITHER':
                o_defense = o_defense + int((o_title_passive_value / 100) * t_defense)
                t_defense = t_defense - int((o_title_passive_value / 100) * t_defense)
            elif o_title_passive_type == 'RAGE':
                o_attack = o_attack + int(((o_title_passive_value / 100) * o_defense))
                o_defense = o_defense - int(((o_title_passive_value / 100) * o_attack))
            elif o_title_passive_type == 'BRACE':
                o_defense = o_defense + int(((o_title_passive_value / 100) * o_attack))
                o_attack = o_attack - int(((o_title_passive_value / 100) * o_defense))
            elif o_title_passive_type == 'BZRK':
                o_attack = o_attack + int(((o_title_passive_value / 100) * o_health))
                o_health = o_health - int((o_attack))
            elif o_title_passive_type == 'CRYSTAL':
                o_defense = o_defense + int(((o_title_passive_value / 100) * o_health))
                o_health = o_health - int((o_defense))
            elif o_title_passive_type == 'GROWTH':
                o_attack = o_attack + int((o_title_passive_value / 50) * o_max_health)
                o_defense = o_defense + int((o_title_passive_value / 50) * o_max_health)
                o_max_health = o_max_health - int((o_title_passive_value / 100) * o_max_health)
            elif o_title_passive_type == 'STANCE':
                tempattack = o_attack
                o_attack = o_defense
                o_defense = tempattack
            elif o_title_passive_type == 'CONFUSE':
                tempattack = t_attack
                t_attack = t_defense
                t_defense = tempattack
            elif o_title_passive_type == 'BLINK':
                o_stamina = o_stamina - o_title_passive_value
                t_stamina = t_stamina + o_title_passive_value
            elif o_title_passive_type == 'SLOW':
                tempstam = t_stamina + o_title_passive_value
                o_stamina = o_stamina - o_title_passive_value
                t_stamina = o_stamina
                o_stamina = tempstam
            elif o_title_passive_type == 'HASTE':
                tempstam = t_stamina - o_title_passive_value
                o_stamina = o_stamina + o_title_passive_value
                t_stamina = o_stamina
                o_stamina = tempstam
            elif o_title_passive_type == 'SOULCHAIN':
                o_stamina = o_title_passive_value
                t_stamina = o_title_passive_value
            elif o_title_passive_type == 'FEAR':
                if o_universe == "Chainsawman":
                    o_health = o_health - int((o_title_passive_value / 190) * o_max_health)
                    t_attack = t_attack - int((o_title_passive_value / 100) * o_max_health)
                    t_defense = t_defense - int((o_title_passive_value / 100) * o_max_health)
                else:
                    o_health = o_health - int((o_title_passive_value / 100) * o_max_health)
                    t_attack = t_attack - int((o_title_passive_value / 50) * o_max_health)
                    t_defense = t_defense - int((o_title_passive_value / 50) * o_max_health)
            elif o_title_passive_type == 'GAMBLE':
                if mode in B_modes:
                    o_health = o_title_passive_value
                    t_health = o_title_passive_value * 3
                elif mode in D_modes:
                    o_health = o_title_passive_value
                    t_health = o_title_passive_value * 2
                else:
                    o_health = o_title_passive_value
                    t_health = o_title_passive_value
                if companion:
                    c_health = o_title_passive_value

        # Arm Passive Player 1
        oarm_passive_type = list(oarm_passive.keys())[0]
        oarm_passive_value = list(oarm_passive.values())[0]
        oarm_shield_active = False
        oshield_value = 0
        oarm_barrier_active = False
        obarrier_count = 0
        oarm_parry_active = False
        oparry_count = 0
        if oarm_passive_type == 'BASIC':
            o_1[omove1_text] = o_1[omove1_text] + oarm_passive_value
        elif oarm_passive_type == 'SPECIAL':
            o_2[omove2_text] = o_2[omove2_text] + oarm_passive_value
        elif oarm_passive_type == 'ULTIMATE':
            o_3[omove3_text] = o_3[omove3_text] + oarm_passive_value
        elif oarm_passive_type == 'ULTIMAX':
            o_1[omove1_text] = o_1[omove1_text] + oarm_passive_value
            o_2[omove2_text] = o_2[omove2_text] + oarm_passive_value
            o_3[omove3_text] = o_3[omove3_text] + oarm_passive_value
        elif oarm_passive_type == 'MANA':
            o_enhancer[omove_enhanced_text] = round(o_enhancer[omove_enhanced_text] + (o_enhancer[omove_enhanced_text] * (oarm_passive_value / 100)))
        elif oarm_passive_type == 'SHIELD':
            oarm_shield_active = True
            oshield_value = oarm_passive_value
        elif oarm_passive_type == 'BARRIER':
            oarm_barrier_active = True
            obarrier_count = oarm_passive_value
        elif oarm_passive_type == 'PARRY':
            oarm_parry_active = True
            oparry_count = oarm_passive_value

        if mode in pvp_modes:
            # Player 2 Moves
            t_1 = t_moveset[0]
            t_2 = t_moveset[1]
            t_3 = t_moveset[2]
            t_enhancer = t_moveset[3]

            tmove1_text = list(t_1.keys())[0]
            tmove2_text = list(t_2.keys())[0]
            tmove3_text = list(t_3.keys())[0]
            tmove_enhanced_text = list(t_enhancer.keys())[0]

            tpetmove_text = list(tpet.keys())[3]  # Name of the ability
            tpetmove_ap = (tpet_bond * opet_lvl) + list(tpet.values())[3]  # Ability Power
            tpet_move = {str(tpetmove_text): int(tpetmove_ap), 'STAM': 15, 'TYPE': str(tpet_passive_type)}
        else:
            t_1 = t_moveset[0]
            t_2 = t_moveset[1]
            t_3 = t_moveset[2]
            t_enhancer = t_moveset[3]
            
            tmove1_text = list(t_1.keys())[0]
            tmove2_text = list(t_2.keys())[0]
            tmove3_text = list(t_3.keys())[0]
            tmove_enhanced_text = list(t_enhancer.keys())[0]

            tpetmove_text = list(tpet_passive.keys())[0]
            tpetmove_ap = (tpet_bond * tpet_lvl) + list(opet.values())[3]  # Ability Power
            tpetmove_type = list(tpet_passive.values())[1]
            tpet_move = {str(tpetmove_text): int(tpetmove_ap), 'STAM': 15, 'TYPE': tpetmove_type}

        # Player 2 Passive Config
        if (t_universe == t_title_universe) or (t_title_universe == "Unbound"):
            t_title_passive_bool = True

        # Player 1 Card Passive
        t_card_passive_type = list(t_passive.values())[1]
        t_card_passive = list(t_passive.values())[0]

        if t_card_passive_type == 'ATK':
            t_attack = t_attack + int(t_card_passive)
        elif t_card_passive_type == 'DEF':
            t_defense = t_defense + int(t_card_passive)
        elif t_card_passive_type == 'STAM':
            t_stamina = t_stamina + int(t_card_passive)
        elif t_card_passive_type == 'HLT':
            t_max_health = t_max_health + int(t_card_passive)
            t_health = t_health + int(t_card_passive)
        elif t_card_passive_type == 'LIFE':
            if mode in B_modes:
                t_max_health = t_max_health + int((t_card_passive / 200) * o_health)
            else:
                t_max_health = t_max_health + int((t_card_passive / 100) * o_health)
        elif t_card_passive_type == 'DRAIN':
            if companion:
                c_stamina = c_stamina - int(t_card_passive)
            o_stamina = o_stamina - int(t_card_passive)
            t_stamina = t_stamina + int(t_card_passive)
        elif t_card_passive_type == 'FLOG':
            t_attack = t_attack + int((t_card_passive / 100) * o_attack)
            o_attack = o_attack - int((t_card_passive / 100) * o_attack)
            if companion:
                c_attack = c_attack - int((t_card_passive / 100) * c_attack)
        elif t_card_passive_type == 'WITHER':
            t_defense = t_defense + int((t_card_passive / 100) * o_defense)
            o_defense = o_defense - int((t_card_passive / 100) * o_defense)
            if companion:
                c_defense = c_defense - int((t_card_passive / 100) * c_defense)
        elif t_card_passive_type == 'RAGE':
            t_attack = t_attack + int((t_card_passive / 100) * t_defense)
            t_defense = t_defense - int((t_card_passive / 100) * t_attack)
        elif t_card_passive_type == 'BRACE':
            t_defense = t_defense + int((t_card_passive / 100) * t_attack)
            t_attack = t_attack - int((t_card_passive / 100) * t_defense)
        elif t_card_passive_type == 'BZRK':
            t_attack = t_attack + int(((t_card_passive / 100) * t_health))
            t_health = t_health - int((t_attack))
        elif t_card_passive_type == 'CRYSTAL':
            t_defense = t_defense + int((t_card_passive / 100) * t_health)
            t_health = t_health - int(t_defense)
        elif t_card_passive_type == 'GROWTH':
            t_attack = t_attack + int((t_card_passive / 50) * t_max_health)
            t_defense = t_defense + int((t_card_passive / 50) * t_max_health)
            t_max_health = t_max_health - int(((t_card_passive / 100) * t_max_health))
            # t_health = t_health - int(((t_card_passive / 100) * t_health))
        elif t_card_passive_type == 'STANCE':
            tempattack = t_attack + t_card_passive
            t_attack = t_defense + t_card_passive
            t_defense = tempattack
        elif t_card_passive_type == 'CONFUSE':
            tempattack = o_attack - t_card_passive
            o_attack = o_defense - t_card_passive
            o_defense = tempattack
        elif t_card_passive_type == 'BLINK':
            t_stamina = t_stamina - t_card_passive
            o_stamina = o_stamina + t_card_passive - 10
        elif t_card_passive_type == 'SLOW':
            tempstam = o_stamina + t_card_passive
            t_stamina = t_stamina - (2 * t_card_passive)
            o_stamina = t_stamina
            t_stamina = tempstam
        elif t_card_passive_type == 'HASTE':
            tempstam = o_stamina - t_card_passive
            t_stamina = t_stamina + (2 * t_card_passive)
            o_stamina = t_stamina
            t_stamina = tempstam
        elif t_card_passive_type == 'SOULCHAIN':
            t_stamina = t_card_passive
            o_stamina = t_card_passive
            if companion:
                c_stamina = t_card_passive
        elif t_card_passive_type == 'FEAR':
            if t_universe == "Chainsawman":
                t_health = t_health - int((t_card_passive / 190) * t_max_health)
                o_attack = o_attack - int((t_card_passive / 100) * t_max_health)
                o_defense = o_defense - int((t_card_passive / 100) * t_max_health)
                if companion:
                    c_attack = o_attack - int((t_card_passive / 50 * t_max_health))
                    c_defense = o_defense - int((t_card_passive / 50 * t_max_health))
            else:
                t_health = t_health - int((t_card_passive / 100) * t_max_health)
                o_attack = o_attack - int((t_card_passive / 50) * t_max_health)
                o_defense = o_defense - int((t_card_passive / 50) * t_max_health)
                if companion:
                    c_attack = o_attack - int((t_card_passive / 50 * t_max_health))
                    c_defense = o_defense - int((t_card_passive / 50 * t_max_health))
        elif t_card_passive_type == 'GAMBLE':
            if mode in B_modes:
                o_health = t_card_passive
                t_health = t_card_passive * 3
            elif mode in D_modes:
                o_health = t_card_passive
                t_health = t_card_passive * 2
            else:
                o_health = t_card_passive
                t_health = t_card_passive
            if companion:
                c_health = t_card_passive

        # Title Passive
        t_title_passive_type = list(t_title_passive.keys())[0]
        t_title_passive_value = list(t_title_passive.values())[0]

        if t_title_passive_bool:
            if t_title_passive_type == 'ATK':
                t_attack = t_attack + int(t_title_passive_value)
            elif t_title_passive_type == 'DEF':
                t_defense = t_defense + int(t_title_passive_value)
            elif t_title_passive_type == 'STAM':
                t_stamina = t_stamina + int(t_title_passive_value)
            elif t_title_passive_type == 'HLT':
                t_max_health = t_max_health + int(t_title_passive_value)
                t_health = t_health + int(t_title_passive_value)
            elif t_title_passive_type == 'LIFE':
                t_max_health = t_max_health + int((t_title_passive_value / 100) * o_health)
            elif t_title_passive_type == 'DRAIN':
                if companion:
                    c_stamina = c_stamina - int(t_title_passive_value)
                o_stamina = o_stamina - int(t_title_passive_value)
                t_stamina = t_stamina + int(t_title_passive_value)
            elif t_title_passive_type == 'FLOG':
                t_attack = t_attack + int((t_title_passive_value / 100) * o_attack)
                o_attack = o_attack - int((t_title_passive_value / 100) * o_attack)
                if companion:
                    c_attack = c_attack - int((t_title_passive_value / 100) * c_attack)
            elif t_title_passive_type == 'WITHER':
                t_defense = t_defense + int((t_title_passive_value / 100) * o_defense)
                o_defense = o_defense - int((t_title_passive_value / 100) * o_defense)
                if companion:
                    c_defense = c_defense - int((t_title_passive_value / 100) * c_defense)
            elif t_title_passive_type == 'RAGE':
                t_attack = t_attack + int(((t_title_passive_value / 100) * t_defense))
                t_defense = t_defense - int(((t_title_passive_value / 100) * t_attack))
            elif t_title_passive_type == 'BRACE':
                t_defense = t_defense + int(((t_title_passive_value / 100) * t_attack))
                t_attack = t_attack - int(((t_title_passive_value / 100) * t_defense))
            elif t_title_passive_type == 'BZRK':
                t_attack = t_attack + int(((t_title_passive_value / 100) * t_health))
                t_health = t_health - int((t_attack))
            elif t_title_passive_type == 'CRYSTAL':
                t_defense = t_defense + int(((t_title_passive_value / 100) * t_health))
                t_health = t_health - int(t_defense)
            elif t_title_passive_type == 'GROWTH':
                t_attack = t_attack + int(((t_title_passive_value / 50) * t_max_health))
                t_defense = t_defense + int(((t_title_passive_value / 50) * t_max_health))
                t_max_health = t_max_health - int(((t_title_passive_value / 100) * t_max_health))
            elif t_title_passive_type == 'STANCE':
                tempattack = t_attack + t_title_passive_value
                t_attack = t_defense + t_title_passive_value
                t_defense = tempattack
            elif t_title_passive_type == 'CONFUSE':
                tempattack = o_attack - t_title_passive_value
                o_attack = o_defense - t_title_passive_value
                o_defense = tempattack
                if companion:
                    c_attack = c_defense - t_title_passive_value
                    c_defense = tempattack
            elif t_title_passive_type == 'BLINK':
                t_stamina = t_stamina - t_title_passive_value
                o_stamina = o_stamina + t_title_passive_value
                if companion:
                    c_stamina = c_stamina + t_title_passive_value
            elif t_title_passive_type == 'SLOW':
                tempstam = o_stamina + t_title_passive_value
                t_stamina = t_stamina - t_title_passive_value
                o_stamina = t_stamina
                if companion:
                    c_stamina = t_stamina
                t_stamina = tempstam
            elif t_title_passive_type == 'HASTE':
                tempstam = o_stamina - t_title_passive_value
                t_stamina = t_stamina + t_title_passive_value
                o_stamina = t_stamina
                if companion:
                    c_stamina = t_stamina
                t_stamina = tempstam
            elif t_title_passive_type == 'SOULCHAIN':
                t_stamina = t_title_passive_value
                o_stamina = t_title_passive_value
                if companion:
                    c_stamina = t_title_passive_value
            elif t_title_passive_type == 'FEAR':
                if t_universe == "Chainsawman":
                    t_health = t_health - int((t_title_passive_value / 190) * t_max_health)
                    o_attack = o_attack - int((t_title_passive_value / 100) * t_max_health)
                    o_defense = o_defense - int((t_title_passive_value / 100) * t_max_health)
                    if companion:
                        c_attack = o_attack - int((t_title_passive_value / 50) * t_max_health)
                        c_defense = o_defense - int((t_title_passive_value / 50) * t_max_health)
                else:
                    t_health = t_health - int((t_title_passive_value / 100) * t_max_health)
                    o_attack = o_attack - int((t_title_passive_value / 50) * t_max_health)
                    o_defense = o_defense - int((t_title_passive_value / 50) * t_max_health)
                    if companion:
                        c_attack = o_attack - int((t_title_passive_value / 50) * t_max_health)
                        c_defense = o_defense - int((t_title_passive_value / 50) * t_max_health)
            elif t_title_passive_type == 'GAMBLE':
                if mode in B_modes:
                    o_health = t_title_passive_value
                    t_health = t_title_passive_value * 3
                elif mode in D_modes:
                    o_health = t_title_passive_value
                    t_health = t_title_passive_value * 2
                else:
                    o_health = t_title_passive_value
                    t_health = t_title_passive_value
                if companion:
                    c_health = t_title_passive_value

        # Arm Passive Player 2
        tarm_passive_type = list(tarm_passive.keys())[0]
        tarm_passive_value = list(tarm_passive.values())[0]
        tarm_shield_active = False
        tshield_value = 0
        tarm_barrier_active = False
        tbarrier_count = 0
        tarm_parry_active = False
        tparry_count = 0
        if tarm_passive_type == 'BASIC':
            t_1[tmove1_text] = t_1[tmove1_text] + tarm_passive_value
        elif tarm_passive_type == 'SPECIAL':
            t_2[tmove2_text] = t_2[tmove2_text] + tarm_passive_value
        elif tarm_passive_type == 'ULTIMATE':
            t_3[tmove3_text] = t_3[tmove3_text] + tarm_passive_value
        elif tarm_passive_type == 'ULTIMAX':
            t_1[tmove1_text] = t_1[tmove1_text] + tarm_passive_value
            t_2[tmove2_text] = t_2[tmove2_text] + tarm_passive_value
            t_3[tmove3_text] = t_3[tmove3_text] + tarm_passive_value
        elif tarm_passive_type == 'MANA':
            t_enhancer[tmove_enhanced_text] = round(t_enhancer[tmove_enhanced_text] + (t_enhancer[tmove_enhanced_text] * (tarm_passive_value / 100)))
        elif tarm_passive_type == 'SHIELD':
            tarm_shield_active = True
            tshield_value = tarm_passive_value
        elif tarm_passive_type == 'BARRIER':
            tarm_barrier_active = True
            tbarrier_count = tarm_passive_value
        elif tarm_passive_type == 'PARRY':
            tarm_parry_active = True
            tparry_count = tarm_passive_value

        if o['UNIVERSE'] == "Demon Slayer" and t_max_health >= o['HLT']:  # Demon Slayer Universal Trait
            o_max_health = t_max_health
            o_health = t_max_health

        if t['UNIVERSE'] == "Demon Slayer" and o_max_health >= t['HLT']:  # Demon Slayer Universal Trait
            t_max_health = o_max_health
            t_health = o_max_health

        if companion:
            if c['UNIVERSE'] == "Demon Slayer" and t_max_health >= c['HLT']:  # Demon Slayer Universal Trait
                c_max_health = t_max_health
                c_health = t_max_health

            if (carm_universe == c_universe) and (c_title_universe == c_universe):
                c_attack = c_attack + 20
                c_defense = c_defense + 20
                c_max_health = c_max_health + 100
                c_health = c_health + 100
                if c_destiny:
                    c_attack = c_attack + 5
                    c_defense = c_defense + 5
                    c_max_health = c_max_health + 50
                    c_health = c_health + 50

        if (oarm_universe == o_universe) and (o_title_universe == o_universe):
            o_attack = o_attack + 20
            o_defense = o_defense + 20
            o_max_health = o_max_health + 100
            o_health = o_health + 100
            if o_destiny:
                o_attack = o_attack + 5
                o_defense = o_defense + 5
                o_max_health = o_max_health + 50
                o_health = o_health + 50

        if (tarm_universe == t_universe) and (t_title_universe == t_universe):
            t_attack = t_attack + 20
            t_defense = t_defense + 20
            t_max_health = t_max_health + 100
            t_health = t_health + 100
            if t_destiny:
                t_attack = t_attack + 5
                t_defense = t_defense + 5
                t_max_health = t_max_health + 50
                t_health = t_health + 50

        # Player 1 Focus & Resolve
        t_focus = 90
        t_used_focus = False
        t_resolve = 60
        t_used_resolve = False
        t_chainsaw = False
        t_def_chainsaw = False
        t_atk_chainsaw = False
        if t_universe == "Chainsawman":
            t_chainsaw = True
        t_enhancer_used = False
        t_pet_used = False
        t_block_used = False
        t_defend_used = False

        # Rebirth Scaling
        o_attack = o_attack + (o_user['REBIRTH'] * 10)
        o_defense = o_defense + (o_user['REBIRTH'] * 10)

        if companion and mode not in ai_co_op_modes:
            c_attack = c_attack + (c_user['REBIRTH'] * 10)
            c_defense = c_defense + (c_user['REBIRTH'] * 10)

        STATS = {
            'o_card': o_card,
            'ocard_lvl': ocard_lvl,
            'o_card_path': o_card_path,
            'oarm': oarm,
            'oarm_passive_type' : oarm_passive_type,
            'oarm_passive_value' : oarm_passive_value,
            'o_user': o_user,
            'o_universe': o_universe,
            'o_attack': o_attack,
            'o_defense': o_defense,
            'o_stamina': o_stamina,
            'o_max_stamina': o_max_stamina,
            'o_health': o_health,
            'o_max_health': o_max_health,
            'o_DID': o_DID,
            'o_chainsaw': o_chainsaw,
            'o_atk_chainsaw': o_atk_chainsaw,
            'o_def_chainsaw': o_def_chainsaw,
            'omove1_text': omove1_text,
            'omove2_text': omove2_text,
            'omove3_text': omove3_text,
            'omove_enhanced_text': omove_enhanced_text,
            'o_1': o_1,
            'o_2': o_2,
            'o_3': o_3,
            'oarm_shield_active': oarm_shield_active,
            'oshield_value': oshield_value,
            'oarm_barrier_active': oarm_barrier_active,
            'obarrier_count': obarrier_count,
            'oarm_parry_active': oarm_parry_active,
            'oparry_count': oparry_count,
            'o_gif': o_gif,
            'o_enhancer': o_enhancer,
            'o_speed': o_speed,
            'o_special_move_description': o_special_move_description,
            'o_greeting_description': o_greeting_description,
            'o_focus_description': o_focus_description,
            'o_resolve_description': o_resolve_description,
            'o_special_move_description': o_special_move_description,
            'o_win_description': o_win_description,
            'o_lose_description': o_lose_description,
            'ocard_lvl_ap_buff': ocard_lvl_ap_buff,
            'opet_name': opet_name,
            'opet_move': opet_move,
            'opetmove_text': opetmove_text,
            'opet_image': opet_image,
            'o_pet_used': o_pet_used,
            'user1': user1,
            'o_focus': o_focus,
            'o_used_focus': o_used_focus,
            'o_resolve': o_resolve,
            'o_used_resolve': o_used_resolve,
            'o_block_used': o_block_used,
            'o_defend_used': o_defend_used,
            'o_enhancer_used': o_enhancer_used,
            'o_final_stand': o_final_stand,
            't_card': t_card,
            'tarm': tarm_name,
            'tarm_name': tarm_name,
            'tarm_passive_type' : tarm_passive_type,
            'tarm_passive_value' : tarm_passive_value,
            'tcard_lvl': tcard_lvl,
            't_universe': t_universe,
            't_attack': t_attack,
            't_defense': t_defense,
            't_health': t_health,
            't_max_health': t_max_health,
            't_chainsaw': t_chainsaw,
            't_atk_chainsaw': t_atk_chainsaw,
            't_def_chainsaw': t_def_chainsaw,
            't_stamina': t_stamina,
            't_max_stamina': t_max_stamina,
            't_1': t_1,
            't_2': t_2,
            't_3': t_3,
            'tarm_shield_active': tarm_shield_active,
            'tshield_value': tshield_value,
            'tarm_barrier_active': tarm_barrier_active,
            'tbarrier_count': tbarrier_count,
            'tarm_parry_active': tarm_parry_active,
            'tparry_count': tparry_count,
            'tmove1_text': tmove1_text,
            'tmove2_text': tmove2_text,
            'tmove3_text': tmove3_text,
            'tmove_enhanced_text': tmove_enhanced_text,
            't_enhancer': t_enhancer,
            't_enhancer_used': t_enhancer_used,
            't_speed': t_speed,
            't_special_move_description': t_special_move_description,
            't_gif': t_gif,
            't_greeting_description': t_greeting_description,
            't_focus_description': t_focus_description,
            't_resolve_description': t_resolve_description,
            't_special_move_description': t_special_move_description,
            't_win_description': t_win_description,
            't_lose_description': t_lose_description,
            't_focus': t_focus,
            't_used_focus': t_used_focus,
            't_resolve': t_resolve,
            't_used_resolve': t_used_resolve,
            't_final_stand': t_final_stand,
            'tcard_lvl_ap_buff': tcard_lvl_ap_buff,
            'tpet_name': tpet_name,
            'tpet_move': tpet_move,
            'tpetmove_text': tpetmove_text,
            'tpet_image': tpet_image,
            't_pet_used': t_pet_used
        }

        if mode in pvp_modes:
            STATS = {
                'o_card': o_card,
                'ocard_lvl': ocard_lvl,
                'o_card_path': o_card_path,
                'oarm': oarm,
                'oarm_passive_type' : oarm_passive_type,
                'oarm_passive_value' : oarm_passive_value,
                'o_user': o_user,
                'o_universe': o_universe,
                'o_attack': o_attack,
                'o_defense': o_defense,
                'o_stamina': o_stamina,
                'o_max_stamina': o_max_stamina,
                'o_health': o_health,
                'o_max_health': o_max_health,
                'o_DID': o_DID,
                'o_chainsaw': o_chainsaw,
                'o_atk_chainsaw': o_atk_chainsaw,
                'o_def_chainsaw': o_def_chainsaw,
                'omove1_text': omove1_text,
                'omove2_text': omove2_text,
                'omove3_text': omove3_text,
                'omove_enhanced_text': omove_enhanced_text,
                'o_1': o_1,
                'o_2': o_2,
                'o_3': o_3,
                'oarm_shield_active': oarm_shield_active,
                'oshield_value': oshield_value,
                'oarm_barrier_active': oarm_barrier_active,
                'obarrier_count': obarrier_count,
                'oarm_parry_active': oarm_parry_active,
                'oparry_count': oparry_count,
                'o_gif': o_gif,
                'o_enhancer': o_enhancer,
                'o_speed': o_speed,
                'o_special_move_description': o_special_move_description,
                'o_greeting_description': o_greeting_description,
                'o_focus_description': o_focus_description,
                'o_resolve_description': o_resolve_description,
                'o_special_move_description': o_special_move_description,
                'o_win_description': o_win_description,
                'o_lose_description': o_lose_description,
                'ocard_lvl_ap_buff': ocard_lvl_ap_buff,
                'opet_name': opet_name,
                'opet_move': opet_move,
                'opetmove_text': opetmove_text,
                'opet_image': opet_image,
                'o_pet_used': o_pet_used,
                'user1': user1,
                'o_focus': o_focus,
                'o_used_focus': o_used_focus,
                'o_resolve': o_resolve,
                'o_used_resolve': o_used_resolve,
                'o_block_used': o_block_used,
                'o_defend_used': o_defend_used,
                'o_enhancer_used': o_enhancer_used,
                'o_final_stand': o_final_stand,
                't_card': t_card,
                'tcard_lvl': tcard_lvl,
                'tarm': tarm_name,
                'tarm_name': tarm_name,
                'tarm_passive_type' : tarm_passive_type,
                'tarm_passive_value' : tarm_passive_value,
                't_universe': t_universe,
                't_attack': t_attack,
                't_defense': t_defense,
                't_health': t_health,
                't_max_health': t_max_health,
                't_chainsaw': t_chainsaw,
                't_atk_chainsaw': t_atk_chainsaw,
                't_def_chainsaw': t_def_chainsaw,
                't_stamina': t_stamina,
                't_max_stamina': t_max_stamina,
                't_1': t_1,
                't_2': t_2,
                't_3': t_3,
                'tarm_shield_active': tarm_shield_active,
                'tshield_value': tshield_value,
                'tarm_barrier_active': tarm_barrier_active,
                'tbarrier_count': tbarrier_count,
                'tarm_parry_active': tarm_parry_active,
                'tparry_count': tparry_count,
                'tmove1_text': tmove1_text,
                'tmove2_text': tmove2_text,
                'tmove3_text': tmove3_text,
                'tmove_enhanced_text': tmove_enhanced_text,
                't_enhancer': t_enhancer,
                't_enhancer_used': t_enhancer_used,
                't_speed': t_speed,
                't_special_move_description': t_special_move_description,
                't_gif': t_gif,
                't_greeting_description': t_greeting_description,
                't_focus_description': t_focus_description,
                't_resolve_description': t_resolve_description,
                't_special_move_description': t_special_move_description,
                't_win_description': t_win_description,
                't_lose_description': t_lose_description,
                't_focus': t_focus,
                't_used_focus': t_used_focus,
                't_resolve': t_resolve,
                't_used_resolve': t_used_resolve,
                't_final_stand': t_final_stand,
                'tcard_lvl_ap_buff': tcard_lvl_ap_buff,
                'tpet_name': tpet_name,
                'tpet_move': tpet_move,
                'tpetmove_text': tpetmove_text,
                'tpet_image': tpet_image,
                't_pet_used': t_pet_used,
                'user2': user2,
                't_DID': t_DID,
                't_card_path': t_card_path,
                'tarm': tarm,
                't_user': t_user,
                't_block_used': t_block_used,
                't_defend_used': t_defend_used
            }

        if mode == "Boss":
            STATS = {
                'o_card': o_card,
                'ocard_lvl': ocard_lvl,
                'o_card_path': o_card_path,
                'oarm': oarm,
                'oarm_passive_type' : oarm_passive_type,
                'oarm_passive_value' : oarm_passive_value,
                'o_user': o_user,
                'o_universe': o_universe,
                'o_attack': o_attack,
                'o_defense': o_defense,
                'o_stamina': o_stamina,
                'o_max_stamina': o_max_stamina,
                'o_health': o_health,
                'o_max_health': o_max_health,
                'o_DID': o_DID,
                'o_chainsaw': o_chainsaw,
                'o_atk_chainsaw': o_atk_chainsaw,
                'o_def_chainsaw': o_def_chainsaw,
                'omove1_text': omove1_text,
                'omove2_text': omove2_text,
                'omove3_text': omove3_text,
                'omove_enhanced_text': omove_enhanced_text,
                'o_1': o_1,
                'o_2': o_2,
                'o_3': o_3,
                'oarm_shield_active': oarm_shield_active,
                'oshield_value': oshield_value,
                'oarm_barrier_active': oarm_barrier_active,
                'obarrier_count': obarrier_count,
                'oarm_parry_active': oarm_parry_active,
                'oparry_count': oparry_count,
                'o_gif': o_gif,
                'o_enhancer': o_enhancer,
                'o_speed': o_speed,
                'o_special_move_description': o_special_move_description,
                'o_greeting_description': o_greeting_description,
                'o_focus_description': o_focus_description,
                'o_resolve_description': o_resolve_description,
                'o_special_move_description': o_special_move_description,
                'o_win_description': o_win_description,
                'o_lose_description': o_lose_description,
                'ocard_lvl_ap_buff': ocard_lvl_ap_buff,
                'opet_name': opet_name,
                'opet_move': opet_move,
                'opetmove_text': opetmove_text,
                'opet_image': opet_image,
                'o_pet_used': o_pet_used,
                'user1': user1,
                'o_focus': o_focus,
                'o_used_focus': o_used_focus,
                'o_resolve': o_resolve,
                'o_used_resolve': o_used_resolve,
                'o_block_used': o_block_used,
                'o_defend_used': o_defend_used,
                'o_enhancer_used': o_enhancer_used,
                'o_final_stand': o_final_stand,
                't_card': t_card,
                'tarm': tarm_name,
                'tarm_name': tarm_name,
                'tarm_passive_type' : tarm_passive_type,
                'tarm_passive_value' : tarm_passive_value,
                'tcard_lvl': tcard_lvl,
                't_universe': t_universe,
                't_attack': t_attack,
                't_defense': t_defense,
                't_health': t_health,
                't_max_health': t_max_health,
                't_chainsaw': t_chainsaw,
                't_atk_chainsaw': t_atk_chainsaw,
                't_def_chainsaw': t_def_chainsaw,
                't_stamina': t_stamina,
                't_max_stamina': t_max_stamina,
                'tmove1_text': tmove1_text,
                'tmove2_text': tmove2_text,
                'tmove3_text': tmove3_text,
                'tmove_enhanced_text': tmove_enhanced_text,
                't_1': t_1,
                't_2': t_2,
                't_3': t_3,
                'tarm_shield_active': tarm_shield_active,
                'tshield_value': tshield_value,
                'tarm_barrier_active': tarm_barrier_active,
                'tbarrier_count': tbarrier_count,
                'tarm_parry_active': tarm_parry_active,
                'tparry_count': tparry_count,
                't_enhancer': t_enhancer,
                't_enhancer_used': t_enhancer_used,
                't_speed': t_speed,
                't_special_move_description': t_special_move_description,
                't_gif': t_gif,
                't_greeting_description': t_greeting_description,
                't_focus_description': t_focus_description,
                't_resolve_description': t_resolve_description,
                't_special_move_description': t_special_move_description,
                't_win_description': t_win_description,
                't_lose_description': t_lose_description,
                't_focus': t_focus,
                't_used_focus': t_used_focus,
                't_resolve': t_resolve,
                't_used_resolve': t_used_resolve,
                't_final_stand': t_final_stand,
                'tcard_lvl_ap_buff': tcard_lvl_ap_buff,
                'tpet_name': tpet_name,
                'tpet_move': tpet_move,
                'tpetmove_text': tpetmove_text,
                'tpet_image': tpet_image,
                't_pet_used': t_pet_used,
                't_arena': t_arena,
                't_arenades': t_arenades,
                't_entrance': t_entrance,
                't_description': t_description,
                't_welcome': t_welcome,
                't_feeling': t_feeling,
                't_powerup': t_powerup,
                't_aura': t_aura,
                't_assault': t_assault,
                't_world': t_world,
                't_punish': t_punish,
                't_rmessage': t_rmessage,
                't_rebuke': t_rebuke,
                't_concede': t_concede,
                't_wins': t_wins
            }

        if mode == "CBoss":
            STATS = {
                'o_card': o_card,
                'ocard_lvl': ocard_lvl,
                'o_card_path': o_card_path,
                'oarm': oarm,
                'oarm_passive_type' : oarm_passive_type,
                'oarm_passive_value' : oarm_passive_value,
                'o_user': o_user,
                'o_universe': o_universe,
                'o_attack': o_attack,
                'o_defense': o_defense,
                'o_stamina': o_stamina,
                'o_max_stamina': o_max_stamina,
                'o_health': o_health,
                'o_max_health': o_max_health,
                'o_DID': o_DID,
                'o_chainsaw': o_chainsaw,
                'o_atk_chainsaw': o_atk_chainsaw,
                'o_def_chainsaw': o_def_chainsaw,
                'omove1_text': omove1_text,
                'omove2_text': omove2_text,
                'omove3_text': omove3_text,
                'omove_enhanced_text': omove_enhanced_text,
                'o_1': o_1,
                'o_2': o_2,
                'o_3': o_3,
                'oarm_shield_active': oarm_shield_active,
                'oshield_value': oshield_value,
                'oarm_barrier_active': oarm_barrier_active,
                'obarrier_count': obarrier_count,
                'oarm_parry_active': oarm_parry_active,
                'oparry_count': oparry_count,
                'o_gif': o_gif,
                'o_enhancer': o_enhancer,
                'o_speed': o_speed,
                'o_special_move_description': o_special_move_description,
                'o_greeting_description': o_greeting_description,
                'o_focus_description': o_focus_description,
                'o_resolve_description': o_resolve_description,
                'o_special_move_description': o_special_move_description,
                'o_win_description': o_win_description,
                'o_lose_description': o_lose_description,
                'ocard_lvl_ap_buff': ocard_lvl_ap_buff,
                'opet_name': opet_name,
                'opet_move': opet_move,
                'opetmove_text': opetmove_text,
                'opet_image': opet_image,
                'o_pet_used': o_pet_used,
                'user1': user1,
                'o_focus': o_focus,
                'o_used_focus': o_used_focus,
                'o_resolve': o_resolve,
                'o_used_resolve': o_used_resolve,
                'o_block_used': o_block_used,
                'o_defend_used': o_defend_used,
                'o_enhancer_used': o_enhancer_used,
                'o_final_stand': o_final_stand,
                't_card': t_card,
                'tarm': tarm_name,
                'tarm_name': tarm_name,
                'tarm_passive_type' : tarm_passive_type,
                'tarm_passive_value' : tarm_passive_value,
                'tcard_lvl': tcard_lvl,
                't_universe': t_universe,
                't_attack': t_attack,
                't_defense': t_defense,
                't_health': t_health,
                't_max_health': t_max_health,
                't_chainsaw': t_chainsaw,
                't_atk_chainsaw': t_atk_chainsaw,
                't_def_chainsaw': t_def_chainsaw,
                't_stamina': t_stamina,
                't_max_stamina': t_max_stamina,
                'tmove1_text': tmove1_text,
                'tmove2_text': tmove2_text,
                'tmove3_text': tmove3_text,
                'tmove_enhanced_text': tmove_enhanced_text,
                't_1': t_1,
                't_2': t_2,
                't_3': t_3,
                'tarm_shield_active': tarm_shield_active,
                'tshield_value': tshield_value,
                'tarm_barrier_active': tarm_barrier_active,
                'tbarrier_count': tbarrier_count,
                'tarm_parry_active': tarm_parry_active,
                'tparry_count': tparry_count,
                't_enhancer': t_enhancer,
                't_enhancer_used': t_enhancer_used,
                't_speed': t_speed,
                't_special_move_description': t_special_move_description,
                't_gif': t_gif,
                't_greeting_description': t_greeting_description,
                't_focus_description': t_focus_description,
                't_resolve_description': t_resolve_description,
                't_special_move_description': t_special_move_description,
                't_win_description': t_win_description,
                't_lose_description': t_lose_description,
                't_focus': t_focus,
                't_used_focus': t_used_focus,
                't_resolve': t_resolve,
                't_used_resolve': t_used_resolve,
                't_final_stand': t_final_stand,
                'tcard_lvl_ap_buff': tcard_lvl_ap_buff,
                'tpet_name': tpet_name,
                'tpet_move': tpet_move,
                'tpetmove_text': tpetmove_text,
                'tpet_image': tpet_image,
                't_pet_used': t_pet_used,
                't_arena': t_arena,
                't_arenades': t_arenades,
                't_entrance': t_entrance,
                't_description': t_description,
                't_welcome': t_welcome,
                't_feeling': t_feeling,
                't_powerup': t_powerup,
                't_aura': t_aura,
                't_assault': t_assault,
                't_world': t_world,
                't_punish': t_punish,
                't_rmessage': t_rmessage,
                't_rebuke': t_rebuke,
                't_concede': t_concede,
                't_wins': t_wins,
                'c_card': c_card,
                'ccard_lvl': ccard_lvl,
                'c_card_path': c_card_path,
                'carm': carm_name,
                'carm_name': carm_name,
                'carm_passive_type' : carm_passive_type,
                'carm_passive_value' : carm_passive_value,
                'c_user': c_user,
                'c_universe': c_universe,
                'c_attack': c_attack,
                'c_defense': c_defense,
                'c_stamina': c_stamina,
                'c_max_stamina': c_max_stamina,
                'c_health': c_health,
                'c_max_health': c_max_health,
                'c_DID': c_DID,
                'c_chainsaw': c_chainsaw,
                'c_atk_chainsaw': c_atk_chainsaw,
                'c_def_chainsaw': c_def_chainsaw,
                'cmove1_text': cmove1_text,
                'cmove2_text': cmove2_text,
                'cmove3_text': cmove3_text,
                'cmove_enhanced_text': cmove_enhanced_text,
                'c_1': c_1,
                'c_2': c_2,
                'c_3': c_3,
                'carm_shield_active': carm_shield_active,
                'cshield_value': cshield_value,
                'carm_barrier_active': carm_barrier_active,
                'cbarrier_count': cbarrier_count,
                'carm_parry_active': carm_parry_active,
                'cparry_count': cparry_count,
                'c_gif': c_gif,
                'c_enhancer': c_enhancer,
                'c_speed': c_speed,
                'c_special_move_description': c_special_move_description,
                'c_greeting_description': c_greeting_description,
                'c_focus_description': c_focus_description,
                'c_resolve_description': c_resolve_description,
                'c_special_move_description': c_special_move_description,
                'c_win_description': c_win_description,
                'c_lose_description': c_lose_description,
                'ccard_lvl_ap_buff': ccard_lvl_ap_buff,
                'cpet_name': cpet_name,
                'cpet_move': cpet_move,
                'cpetmove_text': cpetmove_text,
                'cpet_image': cpet_image,
                'c_pet_used': c_pet_used,
                'user2': user2,
                'c_focus': c_focus,
                'c_used_focus': c_used_focus,
                'c_resolve': c_resolve,
                'c_used_resolve': c_used_resolve,
                'c_block_used': c_block_used,
                'c_defend_used': c_defend_used,
                'c_enhancer_used': c_enhancer_used,
                'c_final_stand': c_final_stand,
            }

        if mode in co_op_modes and mode != "CBoss":
            STATS = {
                'o_card': o_card,
                'ocard_lvl': ocard_lvl,
                'o_card_path': o_card_path,
                'oarm': oarm,
                'oarm_passive_type' : oarm_passive_type,
                'oarm_passive_value' : oarm_passive_value,
                'o_user': o_user,
                'o_universe': o_universe,
                'o_attack': o_attack,
                'o_defense': o_defense,
                'o_stamina': o_stamina,
                'o_max_stamina': o_max_stamina,
                'o_health': o_health,
                'o_max_health': o_max_health,
                'o_DID': o_DID,
                'o_chainsaw': o_chainsaw,
                'o_atk_chainsaw': o_atk_chainsaw,
                'o_def_chainsaw': o_def_chainsaw,
                'omove1_text': omove1_text,
                'omove2_text': omove2_text,
                'omove3_text': omove3_text,
                'omove_enhanced_text': omove_enhanced_text,
                'o_1': o_1,
                'o_2': o_2,
                'o_3': o_3,
                'oarm_shield_active': oarm_shield_active,
                'oshield_value': oshield_value,
                'oarm_barrier_active': oarm_barrier_active,
                'obarrier_count': obarrier_count,
                'oarm_parry_active': oarm_parry_active,
                'oparry_count': oparry_count,
                'o_gif': o_gif,
                'o_enhancer': o_enhancer,

                'o_speed': o_speed,
                'o_special_move_description': o_special_move_description,
                'o_greeting_description': o_greeting_description,
                'o_focus_description': o_focus_description,
                'o_resolve_description': o_resolve_description,
                'o_special_move_description': o_special_move_description,
                'o_win_description': o_win_description,
                'o_lose_description': o_lose_description,
                'ocard_lvl_ap_buff': ocard_lvl_ap_buff,
                'opet_name': opet_name,
                'opet_move': opet_move,
                'opetmove_text': opetmove_text,
                'opet_image': opet_image,
                'o_pet_used': o_pet_used,
                'user1': user1,
                'o_focus': o_focus,
                'o_used_focus': o_used_focus,
                'o_resolve': o_resolve,
                'o_used_resolve': o_used_resolve,
                'o_block_used': o_block_used,
                'o_defend_used': o_defend_used,
                'o_enhancer_used': o_enhancer_used,
                'o_final_stand': o_final_stand,
                't_card': t_card,
                'tarm_name': tarm_name,
                'tarm': tarm_name,
                'tcard_lvl': tcard_lvl,
                't_universe': t_universe,
                't_attack': t_attack,
                't_defense': t_defense,
                't_health': t_health,
                't_max_health': t_max_health,
                't_chainsaw': t_chainsaw,
                't_atk_chainsaw': t_atk_chainsaw,
                't_def_chainsaw': t_def_chainsaw,
                't_stamina': t_stamina,
                't_max_stamina': t_max_stamina,
                'tmove1_text': tmove1_text,
                'tmove2_text': tmove2_text,
                'tmove3_text': tmove3_text,
                'tmove_enhanced_text': tmove_enhanced_text,
                't_1': t_1,
                't_2': t_2,
                't_3': t_3,
                'tarm_shield_active': tarm_shield_active,
                'tshield_value': tshield_value,
                'tarm_barrier_active': tarm_barrier_active,
                'tbarrier_count': tbarrier_count,
                'tarm_parry_active': tarm_parry_active,
                'tparry_count': tparry_count,
                't_enhancer': t_enhancer,
                't_enhancer_used': t_enhancer_used,

                't_speed': t_speed,
                't_special_move_description': t_special_move_description,
                't_gif': t_gif,
                't_greeting_description': t_greeting_description,
                't_focus_description': t_focus_description,
                't_resolve_description': t_resolve_description,
                't_special_move_description': t_special_move_description,
                't_win_description': t_win_description,
                't_lose_description': t_lose_description,
                't_focus': t_focus,
                't_used_focus': t_used_focus,
                't_resolve': t_resolve,
                't_used_resolve': t_used_resolve,
                't_final_stand': t_final_stand,
                'tcard_lvl_ap_buff': tcard_lvl_ap_buff,
                'tpet_name': tpet_name,
                'tpet_move': tpet_move,
                'tpetmove_text': tpetmove_text,
                'tpet_image': tpet_image,
                't_pet_used': t_pet_used,
                'c_card': c_card,
                'ccard_lvl': ccard_lvl,
                'c_card_path': c_card_path,
                'carm': carm_name,
                'carm_name': carm_name,
                'carm_passive_type' : carm_passive_type,
                'carm_passive_value' : carm_passive_value,
                'c_user': c_user,
                'c_universe': c_universe,
                'c_attack': c_attack,
                'c_defense': c_defense,
                'c_stamina': c_stamina,
                'c_max_stamina': c_max_stamina,
                'c_health': c_health,
                'c_max_health': c_max_health,
                'c_DID': c_DID,
                'c_chainsaw': c_chainsaw,
                'c_atk_chainsaw': c_atk_chainsaw,
                'c_def_chainsaw': c_def_chainsaw,
                'cmove1_text': cmove1_text,
                'cmove2_text': cmove2_text,
                'cmove3_text': cmove3_text,
                'cmove_enhanced_text': cmove_enhanced_text,
                'c_1': c_1,
                'c_2': c_2,
                'c_3': c_3,
                'carm_shield_active': carm_shield_active,
                'cshield_value': cshield_value,
                'carm_barrier_active': carm_barrier_active,
                'cbarrier_count': cbarrier_count,
                'carm_parry_active': carm_parry_active,
                'cparry_count': cparry_count,
                'c_gif': c_gif,
                'c_enhancer': c_enhancer,

                'c_speed': c_speed,
                'c_special_move_description': c_special_move_description,
                'c_greeting_description': c_greeting_description,
                'c_focus_description': c_focus_description,
                'c_resolve_description': c_resolve_description,
                'c_special_move_description': c_special_move_description,
                'c_win_description': c_win_description,
                'c_lose_description': c_lose_description,
                'ccard_lvl_ap_buff': ccard_lvl_ap_buff,
                'cpet_name': cpet_name,
                'cpet_move': cpet_move,
                'cpetmove_text': cpetmove_text,
                'cpet_image': cpet_image,
                'c_pet_used': c_pet_used,
                'user2': user2,
                'c_focus': c_focus,
                'c_used_focus': c_used_focus,
                'c_resolve': c_resolve,
                'c_used_resolve': c_used_resolve,
                'c_block_used': c_block_used,
                'c_defend_used': c_defend_used,
                'c_enhancer_used': c_enhancer_used,
                'c_final_stand': c_final_stand,
            }

        return STATS
    except Exception as ex:
        trace = []
        tb = ex.__traceback__
        while tb is not None:
            trace.append({
                "filename": tb.tb_frame.f_code.co_filename,
                "name": tb.tb_frame.f_code.co_name,
                "lineno": tb.tb_lineno
            })
            tb = tb.tb_next
        print(str({
            'type': type(ex).__name__,
            'message': str(ex),
            'trace': trace
        }))


async def enemy_approached(self, message, channel, player, selected_mode, universe, opponent, bounty):
    private_channel = channel
    mode = selected_mode

    channel_exists_response = existing_channel_check(self, message)
    if channel_exists_response:
        await private_channel.send(m.ALREADY_IN_TALES)
        return

    sowner = player
    guild = message.guild
    overwrites = {
        guild.default_role: discord.PermissionOverwrite(read_messages=True, manage_channels=False, kick_members=False,
                                                        mention_everyone=False, read_message_history=True,
                                                        send_messages=False, view_channel=True),
        guild.me: discord.PermissionOverwrite(read_messages=True),
        message.author: discord.PermissionOverwrite(read_messages=True, send_messages=True),
    }
    private_channel = await guild.create_text_channel(f'{str(message.author)}-{selected_mode}-run',
                                                      overwrites=overwrites)
    oguild = "RANDOMIZED_BATTLE"
    crestlist = opponent
    crestsearch = bounty
    await battle_commands(self, message.author, mode, universe, universe['TITLE'], None, oguild, crestlist, crestsearch,
                          private_channel, sowner, None, None, None, None, None, None, None, None)


async def select_universe(self, ctx, sowner: object, oteam: str, ofam: str, mode: str, user: None):
    U_modes = ['ATales', 'Tales', 'CTales', 'DTales']
    AUTO_BATTLE_modes = ['ATales', 'ADungeon']
    D_modes = ['CDungeon', 'DDungeon', 'Dungeon', 'ADungeon']
    B_modes = ['Boss', 'CBoss']
    C_MODES = ['CTales', 'CDungeon', 'CBoss']

    saved_spots = sowner['SAVE_SPOT']
    if isinstance(ctx.channel, discord.channel.DMChannel):
        await ctx.send(m.SERVER_FUNCTION_ONLY)
        return
    oguild = "PCG"
    prevault = db.queryVault({'OWNER': str(ctx.author)})
    balance = prevault['BALANCE']
    crestlist = []
    crestsearch = False
    autoBattle = False
    guild = ctx.guild
    overwrites = {
        guild.default_role: discord.PermissionOverwrite(read_messages=True, manage_channels=False, kick_members=False,
                                                        mention_everyone=False, read_message_history=True,
                                                        send_messages=False, view_channel=True),
        guild.me: discord.PermissionOverwrite(read_messages=True),
        ctx.author: discord.PermissionOverwrite(read_messages=True, send_messages=True),
    }

    if mode in C_MODES:
        overwrites = {
            guild.default_role: discord.PermissionOverwrite(read_messages=True, manage_channels=False,
                                                            kick_members=False, mention_everyone=False,
                                                            read_message_history=True, send_messages=False,
                                                            view_channel=True),
            guild.me: discord.PermissionOverwrite(read_messages=True),
            ctx.author: discord.PermissionOverwrite(read_messages=True, send_messages=True),
            user: discord.PermissionOverwrite(read_messages=True, send_messages=True),
        }
    if oteam != 'PCG':
        team_info = db.queryTeam({'TNAME': oteam})
        guildname = team_info['GUILD']
        if guildname != "PCG":
            oguild = db.queryGuildAlt({'GNAME': guildname})
            if oguild:
                crestlist = oguild['CREST']
                crestsearch = True
    if sowner['PATRON'] != True and mode in AUTO_BATTLE_modes:
        embedVar = discord.Embed(title=f"Auto-Battles Locked", description=f"To Unlock Auto-Battles Join Patreon!",
                                 colour=0xe91e63)
        embedVar.add_field(
            name=f"Check out the #patreon channel!\nThank you for supporting the development of future games!",
            value="-Party Chat Dev Team")
        await ctx.send(embed=embedVar)
        return
        autoBattle = True

    if mode in U_modes:
        completed_crown_tales = sowner['CROWN_TALES']
        all_universes = db.queryAllUniverse()
        available_universes = []
        universe_menu = []
        selected_universe = ""
        universe_embed_list = []
        if sowner['RIFT'] == 1:
            for uni in all_universes:
                if uni['HAS_CROWN_TALES'] == True or uni['TIER'] == 9:
                    if uni['TITLE'] in completed_crown_tales:
                        save_spot_text = "No Save Data"
                        for save in saved_spots:
                            if save['UNIVERSE'] == uni['TITLE'] and save['MODE'] in U_modes:
                                save_spot_text = str(save['CURRENTOPPONENT'])

                        embedVar = discord.Embed(title= f"{uni['TITLE']}", description=textwrap.dedent(f"""
                        {Crest_dict[uni['TITLE']]} **Number of Fights**: :crossed_swords: **{len(uni['CROWN_TALES'])}**
                        🎗️ **Universe Title**: {uni['UTITLE']}
                        🦾 **Universe Arm**: {uni['UARM']}
                        🐦 **Universe Pet**: {uni['UPET']}

                        **Saved Game**: :crossed_swords: *{save_spot_text}*
                        """))
                        embedVar.set_image(url=uni['PATH'])
                        universe_embed_list.append(embedVar)
                    else:
                        save_spot_text = "No Save Data"
                        for save in saved_spots:
                            if save['UNIVERSE'] == uni['TITLE'] and save['MODE'] in U_modes:
                                save_spot_text = str(save['CURRENTOPPONENT'])

                        embedVar = discord.Embed(title= f"{uni['TITLE']}", description=textwrap.dedent(f"""
                        {Crest_dict[uni['TITLE']]} **Number of Fights**: :crossed_swords: **{len(uni['CROWN_TALES'])}**
                        🎗️ **Universe Title**: {uni['UTITLE']}
                        🦾 **Universe Arm**: {uni['UARM']}
                        🐦 **Universe Pet**: {uni['UPET']}

                        **Saved Game**: :crossed_swords: *{save_spot_text}*
                        """))
                        embedVar.set_image(url=uni['PATH'])
                        universe_embed_list.append(embedVar)
        else:
            for uni in all_universes:
                if uni['HAS_CROWN_TALES'] == True and uni['TIER'] != 9:
                    if uni['TITLE'] in completed_crown_tales:
                        save_spot_text = "No Save Data"
                        for save in saved_spots:
                            if save['UNIVERSE'] == uni['TITLE'] and save['MODE'] in U_modes:
                                save_spot_text = str(save['CURRENTOPPONENT'])

                        embedVar = discord.Embed(title= f"{uni['TITLE']}", description=textwrap.dedent(f"""
                        {Crest_dict[uni['TITLE']]} **Number of Fights**: :crossed_swords: **{len(uni['CROWN_TALES'])}**
                        🎗️ **Universe Title**: {uni['UTITLE']}
                        🦾 **Universe Arm**: {uni['UARM']}
                        🐦 **Universe Pet**: {uni['UPET']}

                        **Saved Game**: :crossed_swords: *{save_spot_text}*
                        """))
                        embedVar.set_image(url=uni['PATH'])
                        universe_embed_list.append(embedVar)
                    else:
                        save_spot_text = "No Save Data"
                        for save in saved_spots:
                            if save['UNIVERSE'] == uni['TITLE'] and save['MODE'] in U_modes:
                                save_spot_text = str(save['CURRENTOPPONENT'])

                        embedVar = discord.Embed(title= f"{uni['TITLE']}", description=textwrap.dedent(f"""
                        {Crest_dict[uni['TITLE']]} **Number of Fights**: :crossed_swords: **{len(uni['CROWN_TALES'])}**
                        🎗️ **Universe Title**: {uni['UTITLE']}
                        🦾 **Universe Arm**: {uni['UARM']}
                        🐦 **Universe Pet**: {uni['UPET']}

                        **Saved Game**: :crossed_swords: *{save_spot_text}*
                        """))
                        embedVar.set_image(url=uni['PATH'])
                        universe_embed_list.append(embedVar)

        custom_button = manage_components.create_button(style=3, label="Start")

        async def custom_function(self, button_ctx):
            await button_ctx.send("Starting...", hidden=True)
            selected_universe = custom_function
            custom_function.selected_universe = str(button_ctx.origin_message.embeds[0].title)
            self.stop = True
            

        await Paginator(bot=self.bot, ctx=ctx, deleteAfterTimeout=True, pages=universe_embed_list, timeout=60,  customButton=[
            custom_button,
            custom_function,
        ]).run()
        

        try:
            channel_exists_response = existing_channel_check(self, ctx)
            if channel_exists_response:
                await ctx.send(m.ALREADY_IN_TALES)
                return

            # print(custom_function.selected_universe)
            selected_universe = custom_function.selected_universe

            universe = db.queryUniverse({'TITLE': str(selected_universe)})
            if not universe['CROWN_TALES']:
                await ctx.send(f"{selected_universe} is not ready to be explored! Check back later!")
                return

            private_channel = await guild.create_text_channel(f'{str(ctx.author)}-{mode}-run', overwrites=overwrites)
            await private_channel.send(f"{ctx.author.mention} private channel has been opened for you. Good luck!")
            
            # React to Saved Spots
            currentopponent = update_save_spot(self, ctx, saved_spots, selected_universe, U_modes)
            return {'SELECTED_UNIVERSE': selected_universe, 'PRIVATE_CHANNEL': private_channel,
                    'UNIVERSE_DATA': universe, 'CREST_LIST': crestlist, 'CREST_SEARCH': crestsearch,
                    'COMPLETED_TALES': completed_crown_tales, 'OGUILD': oguild, 'CURRENTOPPONENT': currentopponent}

            
        except Exception as ex:
            trace = []
            tb = ex.__traceback__
            while tb is not None:
                trace.append({
                    "filename": tb.tb_frame.f_code.co_filename,
                    "name": tb.tb_frame.f_code.co_name,
                    "lineno": tb.tb_lineno
                })
                tb = tb.tb_next
            print(str({
                'type': type(ex).__name__,
                'message': str(ex),
                'trace': trace
            }))
            return

    if mode in D_modes:
        completed_dungeons = sowner['DUNGEONS']
        completed_crown_tales = sowner['CROWN_TALES']
        all_universes = db.queryAllUniverse()
        available_universes = []
        universe_menu = []
        selected_universe = ""
        universe_embed_list = []
        for uni in completed_crown_tales:
            if uni != "":
                uni_option = db.queryUniverse({"TITLE": str(uni)})
                save_spot_text = "No Save Data"
                for save in saved_spots:
                    if save['UNIVERSE'] == uni and save['MODE'] in D_modes:
                        save_spot_text = str(save['CURRENTOPPONENT'])

                embedVar = discord.Embed(title= f"{uni}", description=textwrap.dedent(f"""
                {Crest_dict[uni_option['TITLE']]} **Number of Fights**: :fire: **{len(uni_option['DUNGEONS'])}**
                🎗️ **Dungeon Title**: {uni_option['DTITLE']}
                🦾 **Dungeon Arm**: {uni_option['DARM']}
                🐦 **Dungeon Pet**: {uni_option['DPET']}

                **Saved Game**: :fire: *{save_spot_text}*
                """))
                embedVar.set_image(url=uni_option['PATH'])
                universe_embed_list.append(embedVar)

        if not universe_embed_list:
            await ctx.send("No available Dungeons for you at this time!")
            return
        custom_button = manage_components.create_button(style=3, label="Start")

        async def custom_function(self, button_ctx):
            await button_ctx.send("Starting...", hidden=True)
            selected_universe = custom_function
            custom_function.selected_universe = str(button_ctx.origin_message.embeds[0].title)
            self.stop = True
            

        await Paginator(bot=self.bot, ctx=ctx, deleteAfterTimeout=True, pages=universe_embed_list, timeout=60,  customButton=[
            custom_button,
            custom_function,
        ]).run()

        try:
            selected_universe = custom_function.selected_universe
            channel_exists_response = existing_channel_check(self, ctx)
            if channel_exists_response:
                await ctx.send(m.ALREADY_IN_TALES)
                return
            # Universe Cost
            universe = db.queryUniverse({'TITLE': str(selected_universe)})
            if not universe['HAS_DUNGEON']:
                await ctx.send(f"**{selected_universe}'s** dungeon is not available at this time. ")
                return
            private_channel = await guild.create_text_channel(f'{str(ctx.author)}-{mode}-run', overwrites=overwrites)
            await ctx.send(f"{ctx.author.mention} private channel has been opened for you. Good luck!")
            
            
            currentopponent = update_save_spot(self, ctx, saved_spots, selected_universe, U_modes)
            return {'SELECTED_UNIVERSE': selected_universe, 'PRIVATE_CHANNEL': private_channel,
                    'UNIVERSE_DATA': universe, 'CREST_LIST': crestlist, 'CREST_SEARCH': crestsearch,
                    'COMPLETED_DUNGEONS': completed_dungeons, 'OGUILD': oguild, 'CURRENTOPPONENT': currentopponent}
        except Exception as ex:
            trace = []
            tb = ex.__traceback__
            while tb is not None:
                trace.append({
                    "filename": tb.tb_frame.f_code.co_filename,
                    "name": tb.tb_frame.f_code.co_name,
                    "lineno": tb.tb_lineno
                })
                tb = tb.tb_next
            print(str({
                'type': type(ex).__name__,
                'message': str(ex),
                'trace': trace
            }))
            return

    if mode in B_modes:
        completed_crown_tales = sowner['CROWN_TALES']
        completed_dungeons = sowner['DUNGEONS']
        all_universes = db.queryAllUniverse()
        available_universes = []
        selected_universe = ""
        universe_menu = []
        universe_embed_list = []
        for uni in completed_dungeons:
            if uni != "":
                searchUni = db.queryUniverse({'TITLE': str(uni)})
                if searchUni['UNIVERSE_BOSS'] != "":
                    boss_info = db.queryBoss({"NAME": searchUni['UNIVERSE_BOSS']})
                    if boss_info:
                        embedVar = discord.Embed(title= f"{uni}", description=textwrap.dedent(f"""
                        {Crest_dict[uni]} **Boss**: :japanese_ogre: **{boss_info['NAME']}**
                        🎗️ **Boss Title**: {boss_info['TITLE']}
                        🦾 **Boss Arm**: {boss_info['ARM']}
                        🐦 **Boss Pet**: {boss_info['PET']}

                        """))
                        embedVar.set_image(url=boss_info['PATH'])
                        universe_embed_list.append(embedVar)
        if not universe_embed_list:
            await ctx.send("No available Bosses for you at this time!")
            return
        
        custom_button = manage_components.create_button(style=3, label="Start")

        async def custom_function(self, button_ctx):
            await button_ctx.send("Starting...", hidden=True)
            selected_universe = custom_function
            custom_function.selected_universe = str(button_ctx.origin_message.embeds[0].title)
            self.stop = True
        
        await Paginator(bot=self.bot, ctx=ctx, deleteAfterTimeout=True, pages=universe_embed_list, timeout=60,  customButton=[
            custom_button,
            custom_function,
        ]).run()

        try:
            selected_universe = custom_function.selected_universe
            channel_exists_response = existing_channel_check(self, ctx)
            if channel_exists_response:
                await ctx.send(m.ALREADY_IN_TALES)
                return
            # Universe Cost
            universe = db.queryUniverse({'TITLE': str(selected_universe)})
            private_channel = await guild.create_text_channel(f'{str(ctx.author)}-{mode}-fight', overwrites=overwrites)
            await ctx.send(f"{ctx.author.mention} private channel has been opened for you.")

            currentopponent = 0
            return {'SELECTED_UNIVERSE': selected_universe, 'PRIVATE_CHANNEL': private_channel,
                    'UNIVERSE_DATA': universe, 'CREST_LIST': crestlist, 'CREST_SEARCH': crestsearch,
                    'COMPLETED_DUNGEONS': completed_dungeons, 'OGUILD': oguild, 'BOSS_NAME': universe['UNIVERSE_BOSS'],
                    'CURRENTOPPONENT': currentopponent}
        except:
            embedVar = discord.Embed(title=f"{m.STORY_NOT_SELECTED}", delete_after=30, colour=0xe91e63)
            await ctx.send(embed=embedVar)
            return


async def battle_commands(self, ctx, mode, universe, selected_universe, completed_universes, oguild, crestlist,
                          crestsearch, private_channel, sowner, oteam, ofam, currentopponent, cowner, cteam, cfam, deckNumber, user):
    randomized_battle = False
    co_op_modes = ['CTales', 'DTales', 'CDungeon', 'DDungeon', 'CBoss']
    ai_co_op_modes = ['DTales', 'DDungeon']
    AUTO_BATTLE_modes = ['ATales', 'ADungeon']
    U_modes = ['ATales', 'Tales', 'CTales', 'DTales']
    D_modes = ['CDungeon', 'DDungeon', 'Dungeon', 'ADungeon']
    B_modes = ['Boss', 'CBoss']
    PVP_MODES = ['PVP']
    solo_modes = ['ATales', 'Tales', 'Dungeon', 'Boss']
    opponent_pet_modes = ['Dungeon', 'DDungeon', 'CDungeon']

    try:
        starttime = time.asctime()
        h_gametime = starttime[11:13]
        m_gametime = starttime[14:16]
        s_gametime = starttime[17:19]

        if mode not in B_modes and not randomized_battle and mode not in PVP_MODES and mode not in D_modes:
            legends = [x for x in universe['CROWN_TALES']]
            total_legends = len(legends)
            # currentopponent = 0
        if mode not in B_modes and not randomized_battle and mode not in PVP_MODES and mode in D_modes:
            legends = [x for x in universe['DUNGEONS']]
            total_legends = len(legends)
            # currentopponent = 0

        continued = True

        while continued == True:

            o = db.queryCard({'NAME': sowner['CARD']})
            otitle = db.queryTitle({'TITLE': sowner['TITLE']})

            if mode in PVP_MODES:
                opponent = currentopponent
                t = db.queryCard({'NAME': opponent['CARD']})
                ttitle = db.queryTitle({'TITLE': opponent['TITLE']})
                tguild = cfam
                tteam = cteam

            if oguild == "RANDOMIZED_BATTLE":
                randomized_battle = True
                opponent = crestlist
                abyss_scaling = crestsearch
                if mode in U_modes:
                    t = db.queryCard({'NAME': opponent})
                    ttitle = db.queryTitle({'TITLE': universe['UTITLE']})
                    currentopponent = 8

                if mode in D_modes:
                    t = db.queryCard({'NAME': opponent})
                    ttitle = db.queryTitle({'TITLE': universe['DTITLE']})
                    currentopponent = 35

            if not randomized_battle:
                vault = db.queryVault({'OWNER': str(ctx.author)})
                abyss_scaling = 0
                if mode in B_modes:
                    bossname = universe['UNIVERSE_BOSS']
                    boss = db.queryBoss({'NAME': str(bossname)})
                    t = db.queryCard({'NAME': boss['CARD']})
                    ttitle = db.queryTitle({'TITLE': boss['TITLE']})

                if mode in U_modes:
                    t = db.queryCard({'NAME': legends[currentopponent]})
                    ttitle = db.queryTitle({'TITLE': universe['UTITLE']})

                if mode in D_modes:
                    t = db.queryCard({'NAME': legends[currentopponent]})
                    ttitle = db.queryTitle({'TITLE': universe['DTITLE']})

            if mode in ai_co_op_modes:
                activeDeck = vault['DECK'][deckNumber]
                companion = db.queryCard({'NAME': str(activeDeck['CARD'])})
                c = companion
                ctitle = db.queryTitle({'TITLE': str(activeDeck['TITLE'])})
            elif mode in co_op_modes:
                companion = db.queryCard({'NAME': str(cowner['CARD'])})
                c = companion
                ctitle = db.queryTitle({'TITLE': str(cowner['TITLE'])})

                if companion['NAME'] == o['NAME']:
                    await ctx.send(f"You're already using {o['NAME']}. Please use a different card as your companion. ")
                    await discord.TextChannel.delete(private_channel, reason=None)
                    return

            if mode in ai_co_op_modes:
                stats = await build_player_stats(self, randomized_battle, ctx, sowner, o, otitle, t, ttitle, mode,
                                                 universe, currentopponent, oteam, ofam, abyss_scaling, companion, c,
                                                 ctitle, cteam, cfam, activeDeck, None, None, None, None)
            elif mode in co_op_modes and mode != "CBoss":
                stats = await build_player_stats(self, randomized_battle, ctx, sowner, o, otitle, t, ttitle, mode,
                                                 universe, currentopponent, oteam, ofam, abyss_scaling, cowner, c,
                                                 ctitle, cteam, cfam, None, None, None, None, None)
            elif mode in B_modes:
                if mode == "CBoss":
                    stats = await build_player_stats(self, randomized_battle, ctx, sowner, o, otitle, t, ttitle, mode,
                                                     universe, 0, oteam, ofam, abyss_scaling, cowner, c, ctitle, cteam,
                                                     cfam, None, boss, None, None, None)
                else:
                    stats = await build_player_stats(self, randomized_battle, ctx, sowner, o, otitle, t, ttitle, mode,
                                                     universe, 0, oteam, ofam, abyss_scaling, None, None, None, None,
                                                     None, None, boss, None, None, None)
            elif mode in PVP_MODES:
                stats = await build_player_stats(self, randomized_battle, ctx, sowner, o, otitle, t, ttitle, mode, None,
                                                 None, oteam, ofam, None, None, None, None, None, None, None, None,
                                                 opponent, None, None)
            else:
                stats = await build_player_stats(self, randomized_battle, ctx, sowner, o, otitle, t, ttitle, mode,
                                                 universe, currentopponent, oteam, ofam, abyss_scaling, None, None,
                                                 None, None, None, None, None, None, None, None)

            o_card = stats['o_card']
            ocard_lvl = stats['ocard_lvl']
            o_card_path = stats['o_card_path']
            oarm = stats['oarm']
            oarm_name = oarm['ARM']
            oarm_passive_type = stats['oarm_passive_type']
            oarm_passive_value = stats['oarm_passive_value']
            o_user = stats['o_user']
            o_universe = stats['o_universe']
            o_attack = stats['o_attack']
            o_defense = stats['o_defense']
            o_stamina = stats['o_stamina']
            o_max_stamina = stats['o_max_stamina']
            o_health = stats['o_health']
            o_max_health = stats['o_max_health']
            o_DID = stats['o_DID']
            o_chainsaw = stats['o_chainsaw']
            o_atk_chainsaw = stats['o_atk_chainsaw']
            o_def_chainsaw = stats['o_def_chainsaw']
            omove1_text = stats['omove1_text']
            omove2_text = stats['omove2_text']
            omove3_text = stats['omove3_text']
            omove_enhanced_text = stats['omove_enhanced_text']
            o_enhancer_used = stats['o_enhancer_used']
            o_1 = stats['o_1']
            o_2 = stats['o_2']
            o_3 = stats['o_3']
            oarm_shield_active = stats['oarm_shield_active']
            oshield_value = stats['oshield_value']
            oarm_barrier_active = stats['oarm_barrier_active']
            obarrier_count = stats['obarrier_count']
            oarm_parry_active = stats['oarm_parry_active']
            oparry_count = stats['oparry_count']
            o_gif = stats['o_gif']
            o_enhancer = stats['o_enhancer']
            o_speed = stats['o_speed']
            o_special_move_description = stats['o_special_move_description']
            o_greeting_description = stats['o_greeting_description']
            o_focus_description = stats['o_focus_description']
            o_resolve_description = stats['o_resolve_description']
            o_special_move_description = stats['o_special_move_description']
            o_win_description = stats['o_win_description']
            o_lose_description = stats['o_lose_description']
            ocard_lvl_ap_buff = stats['ocard_lvl_ap_buff']
            opet_name = stats['opet_name']
            opet_move = stats['opet_move']
            opetmove_text = stats['opetmove_text']
            opet_image = stats['opet_image']
            o_pet_used = stats['o_pet_used']
            user1 = stats['user1']
            o_focus = stats['o_focus']
            o_used_focus = stats['o_used_focus']
            o_resolve = stats['o_resolve']
            o_used_resolve = stats['o_used_resolve']
            o_block_used = stats['o_block_used']
            o_defend_used = stats['o_defend_used']
            o_final_stand = stats['o_final_stand']

            if mode in PVP_MODES:
                t_card = stats['t_card']
                tcard_lvl = stats['tcard_lvl']
                t_card_path = stats['t_card_path']
                tarm = stats['tarm']
                tarm_name = stats['tarm_name']
                tarm_passive_type = stats['tarm_passive_type']
                tarm_passive_value = stats['tarm_passive_value']
                t_user = stats['t_user']
                t_universe = stats['t_universe']
                t_attack = stats['t_attack']
                t_defense = stats['t_defense']
                t_stamina = stats['t_stamina']
                t_max_stamina = stats['t_max_stamina']
                t_health = stats['t_health']
                t_max_health = stats['t_max_health']
                t_DID = stats['t_DID']
                t_chainsaw = stats['t_chainsaw']
                t_atk_chainsaw = stats['t_atk_chainsaw']
                t_def_chainsaw = stats['t_def_chainsaw']
                tmove1_text = stats['tmove1_text']
                tmove2_text = stats['tmove2_text']
                tmove3_text = stats['tmove3_text']
                tmove_enhanced_text = stats['tmove_enhanced_text']
                t_enhancer_used = stats['t_enhancer_used']
                t_1 = stats['t_1']
                t_2 = stats['t_2']
                t_3 = stats['t_3']
                tarm_shield_active = stats['tarm_shield_active']
                tshield_value = stats['tshield_value']
                tarm_barrier_active = stats['tarm_barrier_active']
                tbarrier_count = stats['tbarrier_count']
                tarm_parry_active = stats['tarm_parry_active']
                tparry_count = stats['tparry_count']
                t_gif = stats['t_gif']
                t_enhancer = stats['t_enhancer']
                t_speed = stats['t_speed']
                t_special_move_description = stats['t_special_move_description']
                t_greeting_description = stats['t_greeting_description']
                t_focus_description = stats['t_focus_description']
                t_resolve_description = stats['t_resolve_description']
                t_special_move_description = stats['t_special_move_description']
                t_win_description = stats['t_win_description']
                t_lose_description = stats['t_lose_description']
                tcard_lvl_ap_buff = stats['tcard_lvl_ap_buff']
                tpet_name = stats['tpet_name']
                tpet_move = stats['tpet_move']
                tpetmove_text = stats['tpetmove_text']
                tpet_image = stats['tpet_image']
                t_pet_used = stats['t_pet_used']
                user2 = stats['user2']
                t_focus = stats['t_focus']
                t_used_focus = stats['t_used_focus']
                t_resolve = stats['t_resolve']
                t_used_resolve = stats['t_used_resolve']
                t_block_used = stats['t_block_used']
                t_defend_used = stats['t_defend_used']
                t_final_stand = stats['t_final_stand']
            else:
                t_card = stats['t_card']
                tcard_lvl_ap_buff = stats['tcard_lvl_ap_buff']
                tarm = stats['tarm']
                tarm_name = stats['tarm_name']
                if mode in D_modes:
                    tcard_lvl = 300
                    tcard_lvl_ap_buff = 100
                elif mode in U_modes:
                    tcard_lvl = 50
                    tcard_lvl_ap_buff = 16
                elif mode in B_modes:
                    tcard_lvl = 500
                    tcard_lvl_ap_buff = 166
                t_universe = stats['t_universe']
                t_attack = stats['t_attack']
                t_defense = stats['t_defense']
                t_health = stats['t_health']
                t_max_health = stats['t_max_health']
                t_chainsaw = stats['t_chainsaw']
                t_atk_chainsaw = stats['t_atk_chainsaw']
                t_def_chainsaw = stats['t_def_chainsaw']
                t_stamina = stats['t_stamina']
                t_max_stamina = stats['t_max_stamina']
                tmove1_text = stats['tmove1_text']
                tmove2_text = stats['tmove2_text']
                tmove3_text = stats['tmove3_text']
                tmove_enhanced_text = stats['tmove_enhanced_text']
                t_enhancer_used = stats['t_enhancer_used']
                t_1 = stats['t_1']
                t_2 = stats['t_2']
                t_3 = stats['t_3']
                tarm_shield_active = stats['tarm_shield_active']
                tshield_value = stats['tshield_value']
                tarm_barrier_active = stats['tarm_barrier_active']
                tbarrier_count = stats['tbarrier_count']
                tarm_parry_active = stats['tarm_parry_active']
                tparry_count = stats['tparry_count']
                t_enhancer = stats['t_enhancer']
                t_enhancer_used = stats['t_enhancer_used']
                t_speed = stats['t_speed']
                t_special_move_description = stats['t_special_move_description']
                t_gif = stats['t_gif']
                t_greeting_description = stats['t_greeting_description']
                t_focus_description = stats['t_focus_description']
                t_resolve_description = stats['t_resolve_description']
                t_special_move_description = stats['t_special_move_description']
                t_win_description = stats['t_win_description']
                t_lose_description = stats['t_lose_description']
                t_focus = stats['t_focus']
                t_used_focus = stats['t_used_focus']
                t_resolve = stats['t_resolve']
                t_used_resolve = stats['t_used_resolve']
                t_final_stand = stats['t_final_stand']
                tpet_move = stats['tpet_move']
                tpet_name = stats['tpet_name']
                tpet_image = stats['tpet_image']
                t_pet_used = stats['t_pet_used']
                tpetmove_text = stats['tpetmove_text']

            if mode in B_modes:
                t_arena = stats['t_arena']
                t_arenades = stats['t_arenades']
                t_entrance = stats['t_entrance']
                t_description = stats['t_description']
                t_welcome = stats['t_welcome']
                t_feeling = stats['t_feeling']
                t_powerup = stats['t_powerup']
                t_aura = stats['t_aura']
                t_assault = stats['t_assault']
                t_world = stats['t_world']
                t_punish = stats['t_punish']
                t_rmessage = stats['t_rmessage']
                t_rebuke = stats['t_rebuke']
                t_concede = stats['t_concede']
                t_wins = stats['t_wins']
                boss_special_move_default_msg = t_special_move_description

            if mode not in co_op_modes:
                c_health = 0
                c_block_used = False
                c_card = "Not Co-op"
                c_max_health = 0

            if mode in co_op_modes:
                c_card = stats['c_card']
                ccard_lvl = stats['ccard_lvl']
                c_card_path = stats['c_card_path']
                carm = stats['carm']
                carm_name = stats['carm_name']
                carm_passive_type = stats['carm_passive_type']
                carm_passive_value = stats['carm_passive_value']
                c_user = stats['c_user']
                c_universe = stats['c_universe']
                c_attack = stats['c_attack']
                c_defense = stats['c_defense']
                c_stamina = stats['c_stamina']
                c_max_stamina = stats['c_max_stamina']
                c_health = stats['c_health']
                c_max_health = stats['c_max_health']
                c_DID = stats['c_DID']
                c_chainsaw = stats['c_chainsaw']
                c_atk_chainsaw = stats['c_atk_chainsaw']
                c_def_chainsaw = stats['c_def_chainsaw']
                cmove1_text = stats['cmove1_text']
                cmove2_text = stats['cmove2_text']
                cmove3_text = stats['cmove3_text']
                cmove_enhanced_text = stats['cmove_enhanced_text']
                c_enhancer_used = stats['c_enhancer_used']
                c_1 = stats['c_1']
                c_2 = stats['c_2']
                c_3 = stats['c_3']
                carm_shield_active = stats['carm_shield_active']
                cshield_value = stats['cshield_value']
                carm_barrier_active = stats['carm_barrier_active']
                cbarrier_count = stats['cbarrier_count']
                carm_parry_active = stats['carm_parry_active']
                cparry_count = stats['cparry_count']
                c_gif = stats['c_gif']
                c_enhancer = stats['c_enhancer']
                c_speed = stats['c_speed']
                c_special_move_description = stats['c_special_move_description']
                c_greeting_description = stats['c_greeting_description']
                c_focus_description = stats['c_focus_description']
                c_resolve_description = stats['c_resolve_description']
                c_special_move_description = stats['c_special_move_description']
                c_win_description = stats['c_win_description']
                c_lose_description = stats['c_lose_description']
                ccard_lvl_ap_buff = stats['ccard_lvl_ap_buff']
                cpet_name = stats['cpet_name']
                cpet_move = stats['cpet_move']
                cpetmove_text = stats['cpetmove_text']
                cpet_image = stats['cpet_image']
                c_pet_used = stats['c_pet_used']
                user2 = stats['user2']
                c_focus = stats['c_focus']
                c_used_focus = stats['c_used_focus']
                c_resolve = stats['c_resolve']
                c_used_resolve = stats['c_used_resolve']
                c_block_used = stats['c_block_used']
                c_defend_used = stats['c_defend_used']
                c_final_stand = stats['c_final_stand']
                c_focus_count = 0

            # Turn iterator
            o_focus_count = 0
            t_focus_count = 0
            turn = 0
            if o_speed > t_speed:
                turn = 0
            else:
                turn = 1
            turn_total = 0
            # Enhance Turn Iterators
            eo = 0
            et = 0
            botActive = True
            tutorial = False
            if mode in PVP_MODES:
                botActive = False
                tutorialbot = '837538366509154407'
                legendbot = '845672426113466395'
                userID = t_user['DID']

                if tutorialbot == userID:
                    botActive = True
                    tutorial = True
                    await private_channel.send(f"Welcome to Bootcamp!")
                    turn = 0
                elif legendbot == userID:
                    botActive = True
                    tutorial = True
                    await ctx.send(f"Welcome to Legends!")
                    turn = 0
                else:
                    botActive = False
                    start = starting_position(o_speed, t_speed)
                    if start == True:
                        turn = 0
                    else:
                        turn = 1

            if mode not in B_modes and not randomized_battle and mode not in PVP_MODES:
                lineup = f"{currentopponent + 1}/{total_legends}"
            options = [1, 2, 3, 4, 5, 0]

            while (((o_health > 0) and (c_health > 0)) and (t_health > 0) and mode in co_op_modes) or (
                    (o_health > 0) and (t_health > 0) and mode not in co_op_modes):
                if mode in PVP_MODES:
                    # Player 1 Turn Start
                    if turn == 0:
                        await asyncio.sleep(1)
                        if o_block_used == True:
                            o_block_used = False
                            o_defense = o_defense / 2
                        if o_universe == "Death Note" and turn_total == 0:
                            embedVar = discord.Embed(title=f"{o_card.upper()} Scheduled Death 📓",
                                                     description=f"**{o_card} says**\nYou will die in 24 turns...",
                                                     colour=0xe91e63)
                            await private_channel.send(embed=embedVar)
                        if t_universe == 'Death Note' and turn_total == 0:
                            embedVar = discord.Embed(title=f"{o_card.upper()} Scheduled Death 📓",
                                                     description=f"**{t_card} says**\nYou will die in 24 turns...",
                                                     colour=0xe91e63)
                            await private_channel.send(embed=embedVar)
                        if o_attack <= 25:
                            o_attack = 25
                        if o_defense <= 30:
                            o_defense = 30
                        if o_health >= o_max_health:
                            o_health = o_max_health

                        # Tutorial Instructions
                        if turn_total == 0:
                            if botActive:
                                embedVar = discord.Embed(title=f"Welcome to **Crown Unlimited**!",
                                                         description=f"Follow the instructions to learn how to play the Game!",
                                                         colour=0xe91e63)
                                embedVar.add_field(name="**How do I play?**",
                                                   value="The point of the game is to win **Battles**!\n**To do this**, you need to select moves outmanuevering your opponent to **secure the win**!")
                                embedVar.set_footer(
                                    text="Select a move to get started. DON'T WORRY! When your STAMINA depletes to 0 your character will Focus to REPLENISH!")
                                await private_channel.send(embed=embedVar)
                                await asyncio.sleep(5)
                            else:
                                # await ctx.send(f"{user1.mention}{user2.mention}")
                                embedVar = discord.Embed(
                                    title=f"**{o_card}** & {opet_name} VS **{t_card}** & {tpet_name} Ranked Battle has begun!",
                                    description=f"{o_card} Says:\n{o_greeting_description}", colour=0xe91e63)
                                await private_channel.send(embed=embedVar)

                        if o_health <= (o_max_health * .25):
                            embed_color_o = 0xe74c3c
                            if o_chainsaw == True:
                                if o_atk_chainsaw == False:
                                    o_atk_chainsaw = True
                                    o_chainsaw = False
                                    o_defense = o_defense * 2
                                    o_attack = o_attack * 2
                                    embedVar = discord.Embed(title=f"{o_card.upper()}'s Devilization",
                                                             description=f"**{o_card}** Doubles ATK and DEF",
                                                             colour=0xe91e63)
                                    await private_channel.send(embed=embedVar)

                        elif o_health <= (o_max_health * .50):
                            embed_color_o = 0xe67e22
                            if o_chainsaw == True:
                                if o_atk_chainsaw == False:
                                    o_atk_chainsaw = True
                                    o_chainsaw = False
                                    o_defense = o_defense * 2
                                    o_attack = o_attack * 2
                                    embedVar = discord.Embed(title=f"{o_card.upper()}'s Devilization",
                                                             description=f"**{o_card}** Doubles ATK and DEF",
                                                             colour=0xe91e63)
                                    await private_channel.send(embed=embedVar)
                        elif o_health <= (o_max_health * .75):
                            embed_color_o = 0xf1c40f

                        else:
                            embed_color_o = 0x2ecc71

                        if o_stamina < 10:
                            o_focus_count = o_focus_count + 1
                            if botActive and not o_used_focus:
                                embedVar = discord.Embed(title=f"You've entered **Focus State**!",
                                                         description=f"Entering **Focus State** sacrifices a turn to power up and regain **STAMINA**!",
                                                         colour=0xe91e63)
                                embedVar.add_field(name="**Strategy**",
                                                   value="Pay attention to your oppononets **STAMINA** bar. If they are entering **Focus State**, you will have the ability to **strike twice!**")
                                embedVar.set_footer(
                                    text="After you entered focus state once, a transformation is possible by strengthening your RESOLVE! **Press 5**")
                                await ctx.send(embed=embedVar)
                                await asyncio.sleep(5)
                            # Universal Trait
                            # fortitude or luck is based on health
                            fortitude = 0.0
                            low = o_health - (o_health * .90)
                            high = o_health - (o_health * .80)
                            fortitude = random.randint(int(low), int(high))

                            o_stamina = o_focus
                            o_healthcalc = round(((o_focus * .40) + (fortitude * 1)) / 2)
                            o_attackcalc = round(.20 * ((o_focus * .15) + round(fortitude * 1)))
                            o_defensecalc = round(.20 * ((o_focus * .15) + round(fortitude * 1)))
                            # check if user is at max health and sets messages and focus health value
                            o_newhealth = 0
                            healmessage = ""
                            messagenumber = 0
                            if o_universe == "Crown Rift Madness":
                                healmessage = "yet inner **Madness** drags on..."
                                messagenumber = 3
                            else:
                                if o_health <= o_max_health:
                                    o_newhealth = o_health + o_healthcalc
                                    if o_newhealth > o_max_health:
                                        healmessage = "the injuries dissapeared"
                                        messagenumber = 1
                                        o_health = o_max_health
                                    else:
                                        healmessage = "regained some vitality"
                                        messagenumber = 2
                                        o_health = o_newhealth
                                else:
                                    healmessage = f"**{t_card}**'s blows don't appear to have any effect!"
                                    messagenumber = 0
                            if not o_used_resolve:
                                o_attack = o_attack + o_attackcalc
                                o_defense = o_defense + o_defensecalc
                            o_used_focus = True

                            if botActive:
                                if messagenumber != 2:
                                    if messagenumber == 1:
                                        embedVar = discord.Embed(title=f"{o_card} Stamina has recovered!",
                                                                 colour=embed_color_o)
                                        await ctx.send(embed=embedVar)
                                    else:
                                        embedVar = discord.Embed(title=f"{o_card} Stamina has recovered!",
                                                                 colour=embed_color_o)
                                        await ctx.send(embed=embedVar)
                                else:
                                    embedVar = discord.Embed(title=f"{o_card} Stamina has recovered!",
                                                             colour=embed_color_o)
                                    await ctx.send(embed=embedVar)

                            # if not botActive:
                            #     embedVar = discord.Embed(title=f"{o_card.upper()} FOCUSED", description=f"**{o_card} says**\n{o_focus_description}", colour=0xe91e63)
                            #     embedVar.add_field(name=f"{o_card} focused and {healmessage}", value="All stats & stamina increased")
                            #     await ctx.send(embed=embedVar)
                            # Resolve Check and Calculation
                            if not o_used_resolve and o_used_focus and o_universe == "Digimon":  # Digimon Universal Trait
                                embedVar = discord.Embed(title=f"{o_card} STRENGTHENED RESOLVE :zap:",
                                                         description=f"**{o_card} says**\n{o_resolve_description}",
                                                         colour=0xe91e63)
                                embedVar.add_field(name=f"Transformation: Digivolve", value="On Focus you Resolve.")
                                await ctx.send(embed=embedVar)
                                # fortitude or luck is based on health
                                fortitude = 0.0
                                low = o_health - (o_health * .75)
                                high = o_health - (o_health * .66)
                                fortitude = random.randint(int(low), int(high))
                                # Resolve Scaling
                                o_resolve_health = round(fortitude + (.5 * o_resolve))
                                o_resolve_attack = round((.30 * o_defense) * (o_resolve / (.50 * o_defense)))
                                o_resolve_defense = round((.30 * o_defense) * (o_resolve / (.50 * o_defense)))

                                o_stamina = o_stamina + o_resolve
                                o_health = o_health + o_resolve_health
                                o_attack = round(o_attack + o_resolve_attack)
                                o_defense = round(o_defense - o_resolve_defense)
                                o_used_resolve = True
                                o_pet_used = False


                            elif o_universe == "League Of Legends":
                                embedVar = discord.Embed(title=f"Turret Shot hits {t_card} for **30** Damage 💥",
                                                         colour=0xe91e63)
                                await ctx.send(embed=embedVar)
                                t_health = round(t_health - 30)

                            elif o_universe == "Solo Leveling":
                                embedVar = discord.Embed(
                                    title=f"Ruler's Authority... Opponent loses **{30 + turn_total}** 🛡️ 🔻",
                                    colour=0xe91e63)
                                await ctx.send(embed=embedVar)
                                t_defense = round(t_defense - (30 + turn_total))

                            elif o_universe == "Attack On Titan":
                                embedVar = discord.Embed(title=f"Rally! **{o_card}** Increased Max Health ❤️",
                                                         colour=0xe91e63)
                                await ctx.send(embed=embedVar)
                                o_max_health = round(o_max_health + 100)

                            elif o_universe == "Black Clover":
                                embedVar = discord.Embed(title=f"Mana Zone! {o_card} Increased Stamina 🌀",
                                                         colour=0xe91e63)
                                await ctx.send(embed=embedVar)
                                o_stamina = 100
                                ocard_lvl_ap_buff = ocard_lvl_ap_buff + 30

                            elif o_universe == "Death Note":
                                if turn_total >= 24:
                                    embedVar = discord.Embed(title=f"{t_card.upper()}'s' Scheduled Death 📓",
                                                             description=f"**{o_card} says**\n**Delete**",
                                                             colour=0xe91e63)
                                    embedVar.add_field(name=f"{t_card} had a heart attack and died", value=f"Death....")
                                    await private_channel.send(embed=embedVar)
                                    t_health = 0

                            if t_universe == "One Punch Man":
                                embedVar = discord.Embed(
                                    title=f"Hero Reinforcements! {t_card}  Increased Health & Max Health ❤️",
                                    colour=0xe91e63)
                                await ctx.send(embed=embedVar)
                                t_health = round(t_health + 100)
                                t_max_health = round(t_max_health + 100)

                            elif t_universe == "7ds":
                                embedVar = discord.Embed(title=f"Increase Power Level! {t_card} Increased Stamina 🌀",
                                                         colour=0xe91e63)
                                await ctx.send(embed=embedVar)
                                t_stamina = t_stamina + 80

                            elif t_universe == "Souls":
                                embedVar = discord.Embed(
                                    title=f"Combo Recognition! {t_card} Increased Attack by **{30 + turn_total}** 🔺 ",
                                    colour=0xe91e63)
                                await ctx.send(embed=embedVar)
                                t_attack = round(t_attack + (30 + turn_total))
                            else:
                                turn_total = turn_total + 1
                                if o_universe != "Crown Rift Madness":
                                    turn = 1
                                else:
                                    turn = 0
                            turn_total = turn_total + 1
                            if o_universe != "Crown Rift Madness":
                                turn = 1
                            else:
                                turn = 0
                        else:
                            # Ap Levels
                            ap1 = list(o_1.values())[0] + ocard_lvl_ap_buff
                            ap2 = list(o_2.values())[0] + ocard_lvl_ap_buff
                            ap3 = list(o_3.values())[0] + ocard_lvl_ap_buff
                            enh1 = list(o_enhancer.values())[0]
                            enh_name = list(o_enhancer.values())[2]
                            pet_enh_name = list(opet_move.values())[2]
                            pet_msg_on_resolve = ""

                            # UNIVERSE CARD
                            player_1_card = showcard(o, o_max_health, o_health, o_max_stamina, o_stamina,
                                                     o_used_resolve, otitle, o_used_focus, o_attack, o_defense,
                                                     turn_total, ap1, ap2, ap3, enh1, enh_name, ocard_lvl, t_defense)
                            # await private_channel.send(file=player_1_card)

                            if o_used_focus and o_used_resolve:
                                options = ["q", "Q", "0", "1", "2", "3", "4", "6"]
                            elif o_used_focus and not o_used_resolve:
                                options = ["q", "Q", "0", "1", "2", "3", "4", "5"]
                            else:
                                options = ["q", "Q", "0", "1", "2", "3", "4"]

                            battle_buttons = [
                                manage_components.create_button(
                                    style=ButtonStyle.green,
                                    label=f"💥 10",
                                    custom_id="1"
                                ),
                                manage_components.create_button(
                                    style=ButtonStyle.green,
                                    label=f"☄️ 30",
                                    custom_id="2"
                                ),
                                manage_components.create_button(
                                    style=ButtonStyle.green,
                                    label=f"🏵️ 80",
                                    custom_id="3"
                                ),
                                manage_components.create_button(
                                    style=ButtonStyle.blue,
                                    label=f"🦠 20",
                                    custom_id="4"
                                )
                            ]

                            util_buttons = [
                                manage_components.create_button(
                                    style=ButtonStyle.grey,
                                    label="Block 20",
                                    custom_id="0"
                                ),
                                manage_components.create_button(
                                    style=ButtonStyle.grey,
                                    label="Quit | /ff",
                                    custom_id="q"
                                ),
                            ]

                            if o_used_focus and o_used_resolve and not o_pet_used:
                                util_buttons.append(
                                    manage_components.create_button(
                                        style=ButtonStyle.green,
                                        label="🐦 15",
                                        custom_id="6"
                                    )
                                )

                            if o_used_focus and not o_used_resolve:
                                util_buttons.append(
                                    manage_components.create_button(
                                        style=ButtonStyle.green,
                                        label="Resolve!",
                                        custom_id="5"
                                    )
                                )

                            battle_action_row = manage_components.create_actionrow(*battle_buttons)
                            util_action_row = manage_components.create_actionrow(*util_buttons)

                            if o_used_resolve:
                                pet_msg_on_resolve = f"🐦 {enhancer_mapping[pet_enh_name]}"
                            tarm_message = ""
                            if tarm_barrier_active:
                                tarm_message = f"💠{tbarrier_count}"
                            elif tarm_shield_active:
                                tarm_message = f"🌐{tshield_value}"
                            elif tarm_parry_active:
                                tarm_message = f"🔄{tparry_count}"
                            if oarm_passive_type == "BARRIER":
                                if oarm_barrier_active:
                                    oarm_passive_value = f"{obarrier_count}"
                                else:
                                    oarm_passive_value = 0
                            elif oarm_passive_type == "SHIELD":
                                if oarm_shield_active:
                                    oarm_passive_value = f"{oshield_value}"
                                else:
                                    oarm_passive_value = 0
                            elif oarm_passive_type == "PARRY":
                                if oarm_parry_active:
                                    oarm_passive_value = f"{oparry_count}"
                                else:
                                    oarm_passive_value = 0
                            embedVar = discord.Embed(title=f" Press your move below! _Turn_ {turn_total}", color=0xe74c3c)
                            embedVar.set_author(name=f"🦾 {oarm_name} - {oarm_passive_type} {oarm_passive_value} {enhancer_suffix_mapping[oarm_passive_type]}\n{pet_msg_on_resolve}")
                            embedVar.set_thumbnail(url=opet_image)
                            embedVar.set_image(url="attachment://image.png")
                            embedVar.set_footer(
                                text=f"{t_card}: ❤️{t_health} 🌀{t_stamina} 🗡️{t_attack}/🛡️{t_defense} {tarm_message}",
                                icon_url="https://cdn.discordapp.com/emojis/789290881654980659.gif?v=1")
                            await private_channel.send(embed=embedVar, components=[battle_action_row, util_action_row],
                                                       file=player_1_card)

                            # Make sure user is responding with move
                            def check(button_ctx):
                                return button_ctx.author == user1 and button_ctx.custom_id in options

                            try:
                                button_ctx: ComponentContext = await manage_components.wait_for_component(self.bot,
                                                                                                          components=[
                                                                                                              battle_action_row,
                                                                                                              util_action_row],
                                                                                                          timeout=45,
                                                                                                          check=check)

                                # calculate data based on selected move
                                if button_ctx.custom_id == "q" or button_ctx.custom_id == "Q":
                                    o_health = 0
                                    await button_ctx.send(f"{ctx.author.mention} has fled the battle...")
                                    return
                                if button_ctx.custom_id == "1":
                                    if botActive:
                                        embedVar = discord.Embed(title=f"Basic Attack!",
                                                                 description=f"Nice Hit! Your Basic Attack cost 10 Stamina to deal Damage!",
                                                                 colour=0xe91e63)
                                        embedVar.add_field(name=f"Combos!",
                                                           value="Chain your Basic Attack with Summons And Enhancers To Maximize Damage!")
                                        embedVar.set_footer(
                                            text=f"Basic Attacks are great when you are low on stamina, but don't be afraid to enter focus state and REPLENISH!")
                                        await button_ctx.send(embed=embedVar)
                                    dmg = damage_cal(o_universe, o_card, o_1, o_attack, o_defense, t_defense, o_stamina,
                                                     o_enhancer_used, o_health, t_health, t_stamina, o_max_health,
                                                     t_attack, o_special_move_description, turn_total,
                                                     ocard_lvl_ap_buff)

                                elif button_ctx.custom_id == "2":
                                    if botActive:
                                        embedVar = discord.Embed(title=f"Special Attack!",
                                                                 description=f"Great Shot! Your Special Attack cost 30 Stamina to deal great Damage!",
                                                                 colour=0xe91e63)
                                        embedVar.add_field(name=f"Strategy!",
                                                           value="Special Attacks are the balance between STAMINA cost and Damage output when trying to build Combos!")
                                        embedVar.set_footer(
                                            text=f"Special Attacks are great when you need to control the focus game! Use Them to Maximize your focus and build stronger combos!")
                                        await button_ctx.send(embed=embedVar)
                                    dmg = damage_cal(o_universe, o_card, o_2, o_attack, o_defense, t_defense, o_stamina,
                                                     o_enhancer_used, o_health, t_health, t_stamina, o_max_health,
                                                     t_attack, o_special_move_description, turn_total,
                                                     ocard_lvl_ap_buff)

                                elif button_ctx.custom_id == "3":
                                    if botActive:
                                        embedVar = discord.Embed(title=f"Ultimate Move!",
                                                                 description=f"Ultimate Moves cost 80 Stamina to deal incredible Damage!",
                                                                 colour=0xe91e63)
                                        embedVar.add_field(name=f"Ultimate GIF",
                                                           value="Using your ultimate move also comes with a bonus GIF to deliver that final blow!")
                                        embedVar.set_footer(
                                            text=f"Ultimate moves will consume most of your stamina! Use Them Wisely!")
                                        await button_ctx.send(embed=embedVar)
                                    dmg = damage_cal(o_universe, o_card, o_3, o_attack, o_defense, t_defense, o_stamina,
                                                     o_enhancer_used, o_health, t_health, t_stamina, o_max_health,
                                                     t_attack, o_special_move_description, turn_total,
                                                     ocard_lvl_ap_buff)

                                    if o_gif != "N/A":
                                        await private_channel.send(f"{o_gif}")
                                elif button_ctx.custom_id == "4":
                                    if botActive:
                                        embedVar = discord.Embed(title=f"Enhancers!",
                                                                 description=f"Enhancers cost 20 Stamina to Boost your Character or Debuff Your Opponent!",
                                                                 colour=0xe91e63)
                                        embedVar.add_field(
                                            name=f"Your Enhancer: {omove_enhanced_text} is a {list(o_enhancer.values())[2]}",
                                            value=f"Pay Attention to your enhancer messages to know what effect is being used!\n\n**{list(o_enhancer.values())[2]} : {enhancer_mapping[list(o_enhancer.values())[2]]}**")
                                        embedVar.set_footer(
                                            text=f"Use /enhancers to view a full list of enhancers! Look for the {list(o_enhancer.values())[2]} Enhancer")
                                        await button_ctx.send(embed=embedVar)
                                    o_enhancer_used = True
                                    dmg = damage_cal(o_universe, o_card, o_enhancer, o_attack, o_defense, t_defense,
                                                     o_stamina, o_enhancer_used, o_health, t_health, t_stamina,
                                                     o_max_health, t_attack, o_special_move_description, turn_total,
                                                     ocard_lvl_ap_buff)

                                    o_enhancer_used = False
                                elif button_ctx.custom_id == "5":
                                    # Resolve Check and Calculation
                                    if not o_used_resolve and o_used_focus:
                                        if botActive:
                                            embedVar = discord.Embed(title=f"RESOLVE STATE!",
                                                                     description=f"You've Entered Resolved State! Pay attention to your **STATS**!",
                                                                     colour=0xe91e63)
                                            embedVar.add_field(name=f"Trade Offs!",
                                                               value="Resolved Charactes sacrifice **DEFENSE** to **HEAL**, gain **ATK** and the ability to **SUMMON PETS**!")
                                            embedVar.set_footer(
                                                text=f"You can only enter Resolve once per match! Use the Heal Wisely!!!")
                                            await button_ctx.send(embed=embedVar)
                                            await asyncio.sleep(5)
                                        if o_universe == "My Hero Academia":  # My Hero Trait
                                            # fortitude or luck is based on health
                                            fortitude = 0.0
                                            low = o_health - (o_health * .75)
                                            high = o_health - (o_health * .66)
                                            fortitude = random.randint(int(low), int(high))
                                            # Resolve Scaling
                                            o_resolve_health = round(fortitude + (.5 * o_resolve))
                                            o_resolve_attack = round(
                                                (.30 * o_defense) * (o_resolve / (.50 * o_defense)))
                                            o_resolve_defense = round(
                                                (.30 * o_defense) * (o_resolve / (.50 * o_defense)))
                                            ocard_lvl_ap_buff = ocard_lvl_ap_buff + 50

                                            o_stamina = o_stamina + o_resolve
                                            o_health = o_health + o_resolve_health
                                            o_attack = round(o_attack + o_resolve_attack)
                                            o_defense = round(o_defense - o_resolve_defense)
                                            o_used_resolve = True
                                            o_pet_used = False
                                            embedVar = discord.Embed(title=f"{o_card.upper()} PLUS ULTRAAA",
                                                                     description=f"**{o_card} says**\n{o_resolve_description}",
                                                                     colour=0xe91e63)
                                            embedVar.add_field(name=f"Transformation: Plus Ultra",
                                                               value="You do not lose a turn after you Resolve.")
                                            await button_ctx.send(embed=embedVar)

                                            turn_total = turn_total + 1
                                            turn = 0
                                        if o_universe == "Attack On Titan":
                                            # fortitude or luck is based on health
                                            fortitude = 0.0
                                            low = o_health - (o_health * .75)
                                            high = o_health - (o_health * .66)
                                            fortitude = random.randint(int(low), int(high))
                                            # Resolve Scaling
                                            o_resolve_health = round(fortitude + (.5 * o_resolve))
                                            o_resolve_attack = round(
                                                (.30 * o_defense) * (o_resolve / (.50 * o_defense)))
                                            o_resolve_defense = round(
                                                (.30 * o_defense) * (o_resolve / (.50 * o_defense)))

                                            o_stamina = o_stamina + o_resolve
                                            o_health = o_health + o_resolve_health
                                            o_attack = round(o_attack + o_resolve_attack)
                                            o_defense = round(o_defense - o_resolve_defense)
                                            o_used_resolve = True
                                            o_pet_used = False
                                            health_boost = 100 * o_focus_count
                                            o_health = o_health + health_boost
                                            embedVar = discord.Embed(title=f"{o_card.upper()} Titan Mode",
                                                                     description=f"**{o_card} says**\n{o_resolve_description}",
                                                                     colour=0xe91e63)
                                            embedVar.add_field(name=f"Transformation Complete",
                                                               value=f"Health increased by **{health_boost}**!")
                                            await button_ctx.send(embed=embedVar)

                                            turn_total = turn_total + 1
                                            turn = 1

                                        elif o_universe == "Bleach":  # Bleach Trait
                                            # fortitude or luck is based on health
                                            fortitude = 0.0
                                            low = o_health - (o_health * .75)
                                            high = o_health - (o_health * .66)
                                            fortitude = random.randint(int(low), int(high))
                                            # Resolve Scaling
                                            o_resolve_health = round(fortitude + (.5 * o_resolve))
                                            o_resolve_attack = round(
                                                (.30 * o_defense) * (o_resolve / (.50 * o_defense)))
                                            o_resolve_defense = round(
                                                (.30 * o_defense) * (o_resolve / (.50 * o_defense)))

                                            o_stamina = o_stamina + o_resolve
                                            o_health = o_health + o_resolve_health
                                            o_attack = round((o_attack + (2 * o_resolve_attack)) * 2)
                                            o_defense = round(o_defense - o_resolve_defense)
                                            # if o_defense >= 120:
                                            # o_defense = 120
                                            o_used_resolve = True
                                            o_pet_used = False
                                            embedVar = discord.Embed(title=f"{o_card} BANKAI :zap:",
                                                                     description=f"**{o_card} says**\n{o_resolve_description}",
                                                                     colour=0xe91e63)
                                            embedVar.add_field(name=f"Transformation: Bankai",
                                                               value="Gain double Attack on Resolve.")
                                            await button_ctx.send(embed=embedVar)
                                            turn_total = turn_total + 1
                                            turn = 1
                                        elif o_universe == "God Of War":  # God Of War Trait
                                            # fortitude or luck is based on health
                                            fortitude = 0.0
                                            low = o_health - (o_health * .75)
                                            high = o_health - (o_health * .66)
                                            fortitude = random.randint(int(low), int(high))
                                            # Resolve Scaling
                                            o_resolve_health = round(fortitude + (.5 * o_resolve))
                                            o_resolve_attack = round(
                                                (.30 * o_defense) * (o_resolve / (.50 * o_defense)))
                                            o_resolve_defense = round(
                                                (.30 * o_defense) * (o_resolve / (.50 * o_defense)))

                                            o_stamina = o_stamina + o_resolve
                                            o_health = o_max_health
                                            o_attack = round(o_attack + o_resolve_attack)
                                            o_defense = round(o_defense - o_resolve_defense)
                                            o_used_resolve = True
                                            o_pet_used = False
                                            embedVar = discord.Embed(title=f"{o_card} ASCENDED :zap:",
                                                                     description=f"**{o_card} says**\n{o_resolve_description}",
                                                                     colour=0xe91e63)
                                            embedVar.add_field(name=f"Transformation: Ascension",
                                                               value="On Resolve Refill Health.")
                                            await button_ctx.send(embed=embedVar)
                                            turn_total = turn_total + 1
                                            turn = 1
                                        elif o_universe == "Fate":  # Fate Trait
                                            # fortitude or luck is based on health
                                            fortitude = 0.0
                                            low = o_health - (o_health * .75)
                                            high = o_health - (o_health * .66)
                                            fortitude = random.randint(int(low), int(high))
                                            # Resolve Scaling
                                            o_resolve_health = round(fortitude + (.5 * o_resolve))
                                            o_resolve_attack = round(
                                                (.30 * o_defense) * (o_resolve / (.50 * o_defense)))
                                            o_resolve_defense = round(
                                                (.30 * o_defense) * (o_resolve / (.50 * o_defense)))

                                            o_stamina = o_stamina + o_resolve
                                            o_health = o_health + o_resolve_health
                                            o_attack = round(o_attack + o_resolve_attack)
                                            o_defense = round(o_defense - o_resolve_defense)

                                            dmg = damage_cal(o_universe, o_card, o_3, o_attack, o_defense, t_defense,
                                                             o_stamina, o_enhancer_used, o_health, t_health, t_stamina,
                                                             o_max_health, t_attack, o_special_move_description,
                                                             turn_total, ocard_lvl_ap_buff)
                                            t_health = t_health - dmg['DMG']
                                            embedVar = discord.Embed(
                                                title=f"{o_card} COMMAND SEAL :zap:\n\n{dmg['MESSAGE']}",
                                                description=f"**{o_card} says**\n{o_resolve_description}",
                                                colour=0xe91e63)
                                            embedVar.add_field(name=f"Transformation: Command Seal",
                                                               value="On Resolve, Strike with Ultimate, then Focus.")
                                            await button_ctx.send(embed=embedVar)
                                            # o_stamina = 0
                                            o_used_resolve = True
                                            o_pet_used = False
                                            turn_total = turn_total + 1
                                            turn = 1
                                        elif o_universe == "Kanto Region" or o_universe == "Johto Region" or o_universe == "Hoenn Region" or o_universe == "Sinnoh Region" or o_universe == "Kalos Region" or o_universe == "Unova Region" or o_universe == "Alola Region" or o_universe == "Galar Region":  # Pokemon Resolves
                                            # fortitude or luck is based on health
                                            fortitude = 0.0
                                            low = o_health - (o_health * .75)
                                            high = o_health - (o_health * .66)
                                            fortitude = random.randint(int(low), int(high))
                                            # Resolve Scaling
                                            o_resolve_health = round(fortitude + (.5 * o_resolve))
                                            o_resolve_attack = round(
                                                (.30 * o_defense) * (o_resolve / (.50 * o_defense)))
                                            o_resolve_defense = round(
                                                (.30 * o_defense) * (o_resolve / (.50 * o_defense)))

                                            o_stamina = o_stamina + o_resolve
                                            o_health = o_health + o_resolve_health
                                            o_attack = round(o_attack + o_resolve_attack)
                                            o_defense = round(o_defense) * 2
                                            o_used_resolve = True
                                            o_pet_used = False
                                            embedVar = discord.Embed(title=f"{o_card} EVOLUTION :zap:",
                                                                     description=f"**{o_card} says**\n{o_resolve_description}",
                                                                     colour=0xe91e63)
                                            embedVar.add_field(name=f"Transformation: Evolution",
                                                               value="When you Resolve you do not lose Defense.")
                                            await button_ctx.send(embed=embedVar)
                                            turn_total = turn_total + 1
                                            turn = 1
                                        else:  # Standard Resolve
                                            # fortitude or luck is based on health
                                            fortitude = 0.0
                                            low = o_health - (o_health * .75)
                                            high = o_health - (o_health * .66)
                                            fortitude = random.randint(int(low), int(high))
                                            # Resolve Scaling
                                            o_resolve_health = round(fortitude + (.5 * o_resolve))
                                            o_resolve_attack = round(
                                                (.30 * o_defense) * (o_resolve / (.50 * o_defense)))
                                            o_resolve_defense = round(
                                                (.30 * o_defense) * (o_resolve / (.50 * o_defense)))

                                            o_stamina = o_stamina + o_resolve
                                            o_health = o_health + o_resolve_health
                                            o_attack = round(o_attack + o_resolve_attack)
                                            o_defense = round(o_defense - o_resolve_defense)
                                            o_used_resolve = True
                                            o_pet_used = False
                                            if o_universe == "League Of Legends":
                                                t_health = t_health - (30 * (o_focus_count + t_focus_count))
                                                embedVar = discord.Embed(title=f"{o_card.upper()} PENTA KILL!",
                                                                         description=f"**{o_card} says**\n{o_resolve_description}",
                                                                         colour=0xe91e63)
                                                embedVar.add_field(name=f"Nexus Destroyed",
                                                                   value=f"**{o_card}** dealt **{(30 * (o_focus_count + t_focus_count))}** damage.")
                                            else:
                                                embedVar = discord.Embed(title=f"{o_card} STRENGTHENED RESOLVE :zap:",
                                                                         description=f"**{o_card} says**\n{o_resolve_description}",
                                                                         colour=0xe91e63)
                                                embedVar.add_field(name=f"Transformation",
                                                                   value="All stats & stamina greatly increased")
                                            await button_ctx.send(embed=embedVar)
                                            turn_total = turn_total + 1
                                            turn = 1
                                    else:
                                        emessage = m.CANNOT_USE_RESOLVE
                                        embedVar = discord.Embed(title=emessage,
                                                                 description=f"Entering `Resolved State` sacrifices a turn to power up even greater and regain `Stamina`!",
                                                                 colour=0xe91e63)
                                        await button_ctx.send(embed=embedVar)
                                        turn = 0
                                elif button_ctx.custom_id == "6":
                                    # Resolve Check and Calculation
                                    if o_used_resolve and o_used_focus and not o_pet_used:
                                        if botActive:
                                            embedVar = discord.Embed(title=f"Pet Summons!",
                                                                     description=f"You've summoned {opet_name}",
                                                                     colour=0xe91e63)
                                            embedVar.add_field(name=f"Pet Enhancers!",
                                                               value="Pet Enhancers cost 15 Stamina but do not count as the Summoners turn!")
                                            embedVar.set_footer(
                                                text=f"Pets will Level Up and build Bond as you win battles! Train up your pets to perform better in the field!")
                                            await button_ctx.send(embed=embedVar)
                                            await asyncio.sleep(5)
                                        o_enhancer_used = True
                                        dmg = damage_cal(o_universe, o_card, opet_move, o_attack, o_defense, t_defense,
                                                         o_stamina, o_enhancer_used, o_health, t_health, t_stamina,
                                                         o_max_health, t_attack, o_special_move_description, turn_total,
                                                         ocard_lvl_ap_buff)
                                        o_enhancer_used = False
                                        o_pet_used = True
                                        opet_dmg = dmg['DMG']
                                        opet_type = dmg['ENHANCED_TYPE']
                                        if dmg['CAN_USE_MOVE']:
                                            if opet_type == 'ATK':
                                                o_attack = round(o_attack + dmg['DMG'])
                                            elif opet_type == 'DEF':
                                                o_defense = round(o_defense + dmg['DMG'])
                                            elif opet_type == 'STAM':
                                                o_stamina = round(o_stamina + dmg['DMG'])
                                            elif opet_type == 'HLT':
                                                o_health = round(o_health + dmg['DMG'])
                                            elif opet_type == 'LIFE':
                                                o_health = round(o_health + dmg['DMG'])
                                                t_health = round(t_health - dmg['DMG'])
                                            elif opet_type == 'DRAIN':
                                                o_stamina = round(o_stamina + dmg['DMG'])
                                                t_stamina = round(t_stamina - dmg['DMG'])
                                            elif opet_type == 'FLOG':
                                                o_attack = round(o_attack + dmg['DMG'])
                                                t_attack = round(t_attack - dmg['DMG'])
                                            elif opet_type == 'WITHER':
                                                o_defense = round(o_defense + dmg['DMG'])
                                                t_defense = round(t_defense - dmg['DMG'])
                                            elif opet_type == 'RAGE':
                                                o_defense = round(o_defense - dmg['DMG'])
                                                o_attack = round(o_attack + dmg['DMG'])
                                            elif opet_type == 'BRACE':
                                                o_defense = round(o_defense + dmg['DMG'])
                                                o_attack = round(o_attack - dmg['DMG'])
                                            elif opet_type == 'BZRK':
                                                o_health = round(o_health - dmg['DMG'])
                                                o_attack = round(o_attack + dmg['DMG'])
                                            elif opet_type == 'CRYSTAL':
                                                o_health = round(o_health - dmg['DMG'])
                                                o_defense = round(o_defense + dmg['DMG'])
                                            elif opet_type == 'GROWTH':
                                                o_max_health = round(o_max_health - dmg['DMG'])
                                                o_defense = round(o_defense + (dmg['DMG'] * .5))
                                                o_attack = round(o_attack + (dmg['DMG'] * .5))
                                            elif opet_type == 'STANCE':
                                                tempattack = dmg['DMG']
                                                o_attack = o_defense
                                                o_defense = tempattack
                                            elif opet_type == 'CONFUSE':
                                                tempattack = dmg['DMG']
                                                t_attack = t_defense
                                                t_defense = tempattack
                                            elif opet_type == 'BLINK':
                                                o_stamina = round(o_stamina - dmg['DMG'])
                                                t_stamina = round(t_stamina + dmg['DMG'] - 10)
                                            elif opet_type == 'SLOW':
                                                tempstam = round(t_stamina + dmg['DMG'])
                                                o_stamina = round(o_stamina - dmg['DMG'])
                                                t_stamina = o_stamina
                                                o_stamina = tempstam
                                            elif opet_type == 'HASTE':
                                                tempstam = round(t_stamina - dmg['DMG'])
                                                o_stamina = round(o_stamina + dmg['DMG'])
                                                t_stamina = o_stamina
                                                o_stamina = tempstam
                                            elif opet_type == 'SOULCHAIN':
                                                o_stamina = round(dmg['DMG'])
                                                t_stamina = o_stamina
                                            elif opet_type == 'GAMBLE':
                                                o_health = round(dmg['DMG'])
                                                t_health = o_health
                                            elif opet_type == 'FEAR':
                                                o_max_health = round(o_max_health - dmg['DMG'])
                                                t_defense = round(t_defense - (dmg['DMG'] * .5))
                                                t_attack = round(t_attack - (dmg['DMG'] * .5))
                                            elif opet_type == 'WAVE':
                                                t_health = round(t_health - dmg['DMG'])
                                            elif opet_type == 'BLAST':
                                                if dmg['DMG'] >= 100:
                                                    dmg['DMG'] = 100
                                                t_health = round(t_health - dmg['DMG'])
                                            elif opet_type == 'CREATION':
                                                o_max_health = round(o_max_health + dmg['DMG'])
                                                o_health = round(o_health + dmg['DMG'])
                                            elif opet_type == 'DESTRUCTION':
                                                t_max_health = round(t_max_health - dmg['DMG'])

                                            o_stamina = o_stamina - int(dmg['STAMINA_USED'])

                                            if o_universe == "Persona":
                                                petdmg = damage_cal(o_universe, o_card, o_1, o_attack, o_defense,
                                                                    t_defense, o_stamina, o_enhancer_used, o_health,
                                                                    t_health, t_stamina, o_max_health, t_attack,
                                                                    o_special_move_description, turn_total,
                                                                    ocard_lvl_ap_buff)
                                                t_health = t_health - petdmg['DMG']

                                                embedVar = discord.Embed(
                                                    title=f"**PERSONA!**\n{opet_name} was summoned from {o_card}'s soul dealing **{petdmg['DMG']}** damage!!",
                                                    colour=0xe91e63)
                                                embedVar.add_field(name=f"{opet_name} used **{opetmove_text}**!",
                                                                   value=f"Enhanced **{opet_type}**")

                                                embedVar.set_thumbnail(url=opet_image)
                                                embedVar.set_image(url="attachment://image.png")
                                            else:
                                                embedVar = discord.Embed(
                                                    title=f"{o_card.upper()} Summoned :bird: {opet_name}",
                                                    colour=0xe91e63)
                                                embedVar.add_field(name=f"{opet_name} used **{opetmove_text}**!",
                                                                   value=f"Enhanced **{opet_type}**")
                                                embedVar.set_thumbnail(url=opet_image)
                                                embedVar.set_image(url="attachment://image.png")
                                                embedVar.set_image(url="attachment://image.png")

                                            await button_ctx.send(embed=embedVar)
                                            turn = 0
                                        else:
                                            await button_ctx.send(f"{opet_name} needs a turn to rest...")
                                            turn = 0
                                    else:
                                        await private_channel.send(f"{opet_name} needs a turn to rest...")
                                elif button_ctx.custom_id == "0":
                                    if o_stamina >= 20:
                                        if botActive:
                                            embedVar = discord.Embed(title=f"Blocking!",
                                                                     description=f"Blocking cost 20 STAMINA! Double your defense for 1 round",
                                                                     colour=0xe91e63)
                                            embedVar.add_field(name=f"**Strategy**",
                                                               value="Sometimes the best Offense is a Stonewall Defense!")
                                            embedVar.set_footer(
                                                text=f"Use block strategically to defend against your opponents strongest abilities!")
                                            await button_ctx.send(embed=embedVar)
                                            await asyncio.sleep(5)
                                        o_stamina = o_stamina - 20
                                        o_block_used = True
                                        o_defense = o_defense * 2
                                        embedVar = discord.Embed(title=f"{o_card} **Defended** 🛡️", colour=0xe91e63)
                                        await button_ctx.send(embed=embedVar)
                                        turn_total = turn_total + 1
                                        turn = 1
                                    else:
                                        await button_ctx.send(f"{o_card} is too tired to block...")
                                        turn = 0

                                if button_ctx.custom_id != "5" and button_ctx.custom_id != "6" and button_ctx.custom_id != "0" and button_ctx.custom_id in options:
                                    # If you have enough stamina for move, use it
                                    if dmg['CAN_USE_MOVE']:
                                        o_pet_used = False
                                        if dmg['ENHANCE']:
                                            enh_type = dmg['ENHANCED_TYPE']
                                            if enh_type == 'ATK':
                                                o_attack = round(o_attack + dmg['DMG'])
                                            elif enh_type == 'DEF':
                                                o_defense = round(o_defense + dmg['DMG'])
                                            elif enh_type == 'STAM':
                                                o_stamina = round(o_stamina + dmg['DMG'])
                                            elif enh_type == 'HLT':
                                                o_health = round(o_health + dmg['DMG'])
                                            elif enh_type == 'LIFE':
                                                o_health = round(o_health + dmg['DMG'])
                                                t_health = round(t_health - dmg['DMG'])
                                            elif enh_type == 'DRAIN':
                                                o_stamina = round(o_stamina + dmg['DMG'])
                                                t_stamina = round(t_stamina - dmg['DMG'])
                                            elif enh_type == 'FLOG':
                                                o_attack = round(o_attack + dmg['DMG'])
                                                t_attack = round(t_attack - dmg['DMG'])
                                            elif enh_type == 'WITHER':
                                                o_defense = round(o_defense + dmg['DMG'])
                                                t_defense = round(t_defense - dmg['DMG'])
                                            elif enh_type == 'RAGE':
                                                o_defense = round(o_defense - dmg['DMG'])
                                                o_attack = round(o_attack + dmg['DMG'])
                                            elif enh_type == 'BRACE':
                                                o_defense = round(o_defense + dmg['DMG'])
                                                o_attack = round(o_attack - dmg['DMG'])
                                            elif enh_type == 'BZRK':
                                                o_health = round(o_health - dmg['DMG'])
                                                o_attack = round(o_attack + dmg['DMG'])
                                            elif enh_type == 'CRYSTAL':
                                                o_health = round(o_health - dmg['DMG'])
                                                o_defense = round(o_defense + dmg['DMG'])
                                            elif enh_type == 'GROWTH':
                                                o_max_health = round(o_max_health - dmg['DMG'])
                                                o_defense = round(o_defense + (dmg['DMG'] * .5))
                                                o_attack = round(o_attack + (dmg['DMG'] * .5))
                                            elif enh_type == 'STANCE':
                                                tempattack = dmg['DMG']
                                                o_attack = o_defense
                                                o_defense = tempattack
                                            elif enh_type == 'CONFUSE':
                                                tempattack = dmg['DMG']
                                                t_attack = t_defense
                                                t_defense = tempattack
                                            elif enh_type == 'BLINK':
                                                o_stamina = round(o_stamina - dmg['DMG'])
                                                t_stamina = round(t_stamina + dmg['DMG'] - 10)
                                            elif enh_type == 'SLOW':
                                                tempstam = round(t_stamina + dmg['DMG'])
                                                o_stamina = round(o_stamina - dmg['DMG'])
                                                t_stamina = o_stamina
                                                o_stamina = tempstam
                                            elif enh_type == 'HASTE':
                                                tempstam = round(t_stamina - dmg['DMG'])
                                                o_stamina = round(o_stamina + dmg['DMG'])
                                                t_stamina = o_stamina
                                                o_stamina = tempstam
                                            elif enh_type == 'SOULCHAIN':
                                                o_stamina = round(dmg['DMG'])
                                                t_stamina = o_stamina
                                            elif enh_type == 'GAMBLE':
                                                o_health = round(dmg['DMG'])
                                                t_health = o_health
                                            elif enh_type == 'FEAR':
                                                o_max_health = round(o_max_health - dmg['DMG'])
                                                t_defense = round(t_defense - (dmg['DMG'] * .5))
                                                t_attack = round(t_attack - (dmg['DMG'] * .5))
                                            elif enh_type == 'WAVE':
                                                t_health = round(t_health - dmg['DMG'])
                                            elif enh_type == 'BLAST':
                                                t_health = round(t_health - dmg['DMG'])
                                            elif enh_type == 'CREATION':
                                                o_max_health = round(o_max_health + dmg['DMG'])
                                                o_health = round(o_health + dmg['DMG'])
                                            elif enh_type == 'DESTRUCTION':
                                                t_max_health = round(t_max_health - dmg['DMG'])
                                            o_stamina = o_stamina - int(dmg['STAMINA_USED'])

                                            embedVar = discord.Embed(title=f"{dmg['MESSAGE']}", colour=embed_color_o)
                                            await button_ctx.send(embed=embedVar)
                                            if botActive:
                                                await asyncio.sleep(5)
                                            turn_total = turn_total + 1
                                            turn = 1
                                        elif dmg['DMG'] == 0:
                                            o_stamina = o_stamina - int(dmg['STAMINA_USED'])

                                            embedVar = discord.Embed(title=f"{dmg['MESSAGE']}", colour=embed_color_o)
                                            if oarm_barrier_active:
                                                oarm_barrier_active=False
                                                embedVar.add_field(name=f"{o_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                            await button_ctx.send(embed=embedVar)
                                            turn_total = turn_total + 1
                                            turn = 1
                                        else:
                                            if t_universe == "Naruto" and t_stamina < 10:
                                                t_health = t_health 
                                                embedVar = discord.Embed(title=f"{t_card.upper()}: Substitution Jutsu", description=f"{o_card} strikes a log", colour=0xe91e63)
                                                if oarm_barrier_active:
                                                    oarm_barrier_active=False
                                                    embedVar.add_field(name=f"{o_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                await button_ctx.send(embed=embedVar)
                                            elif tarm_shield_active:
                                                if tshield_value > 0:
                                                    tshield_value = tshield_value -dmg['DMG']
                                                    t_health = t_health 
                                                    if tshield_value <=0:
                                                        embedVar = discord.Embed(title=f"{t_card.upper()}'s' **Shield** Shattered!", description=f"{o_card} breaks the **Shield**!", colour=0xe91e63)
                                                        if oarm_barrier_active:
                                                            oarm_barrier_active=False
                                                            embedVar.add_field(name=f"{o_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                        await button_ctx.send(embed=embedVar)
                                                        tarm_shield_active = False
                                                    else:
                                                        embedVar = discord.Embed(title=f"{t_card.upper()} Activates **Shield** 🌐", description=f"{o_card} strikes the **Shield** for **{dmg['DMG']} DMG!**\n **{tshield_value} Shield** Left!", colour=0xe91e63)
                                                        if oarm_barrier_active:
                                                            oarm_barrier_active=False
                                                            embedVar.add_field(name=f"{o_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                        await button_ctx.send(embed=embedVar)

                                            elif tarm_barrier_active:
                                                if tbarrier_count >1:
                                                    t_health = t_health 
                                                    embedVar = discord.Embed(title=f"{t_card.upper()} Activates **Barrier** 💠", description=f"{o_card}'s attack **Nullified**!\n **{tbarrier_count - 1} Barriers** remain!", colour=0xe91e63)
                                                    if oarm_barrier_active:
                                                        oarm_barrier_active=False
                                                        embedVar.add_field(name=f"{o_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                    await button_ctx.send(embed=embedVar)
                                                    tbarrier_count = tbarrier_count - 1
                                                elif tbarrier_count==1:
                                                    embedVar = discord.Embed(title=f"{t_card.upper()}'s **Barrier** Broken!", description=f"{o_card} destroys the **Barrier**", colour=0xe91e63)
                                                    tbarrier_count = tbarrier_count - 1
                                                    if oarm_barrier_active:
                                                        oarm_barrier_active=False
                                                        embedVar.add_field(name=f"{o_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                    await button_ctx.send(embed=embedVar)
                                                    tarm_barrier_active = False
                                            elif tarm_parry_active:
                                                if tparry_count > 1:
                                                    t_health = t_health
                                                    tparry_damage = round(dmg['DMG'] / 2)
                                                    t_health = t_health - tparry_damage
                                                    o_health = o_health - tparry_damage
                                                    tparry_count = tparry_count - 1
                                                    embedVar = discord.Embed(title=f"{t_card.upper()} Activates **Parry** 🔄", description=f"{o_card} takes {tparry_damage}! DMG\n **{tparry_count} Parries** to go!!", colour=0xe91e63)
                                                    if oarm_barrier_active:
                                                        oarm_barrier_active=False
                                                        embedVar.add_field(name=f"{o_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                    await button_ctx.send(embed=embedVar)
                                                    
                                                elif tparry_count==1:
                                                    embedVar = discord.Embed(title=f"{t_card.upper()} **Parry** Penetrated!!", description=f"{o_card} breaks the **Parry**", colour=0xe91e63)
                                                    t_health = t_health
                                                    tparry_damage = round(dmg['DMG'] / 2)
                                                    t_health = t_health - tparry_damage
                                                    o_health = o_health - tparry_damage
                                                    tparry_count = tparry_count - 1
                                                    if oarm_barrier_active:
                                                        oarm_barrier_active=False
                                                        embedVar.add_field(name=f"{o_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                    await button_ctx.send(embed=embedVar)
                                                    tarm_parry_active = False
                                            else:
                                                t_health = t_health - dmg['DMG']
                                                embedVar = discord.Embed(title=f"{dmg['MESSAGE']}", colour=embed_color_o)
                                                if oarm_barrier_active:
                                                    oarm_barrier_active=False
                                                    embedVar.add_field(name=f"{o_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                await button_ctx.send(embed=embedVar)
                                                if botActive:
                                                    await asyncio.sleep(5)
                                            if t_health <= 0:
                                                if t_final_stand==True:
                                                    embedVar = discord.Embed(title=f"{t_card.upper()}'s LAST STAND", description=f"{t_card} FINDS RESOLVE", colour=0xe91e63)
                                                    embedVar.add_field(name=f"{t_card} RESOLVED :zap: and continues to fight", value="All stats & stamina increased")
                                                    if oarm_barrier_active:
                                                        oarm_barrier_active=False
                                                        embedVar.add_field(name=f"{o_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                    await button_ctx.send(embed=embedVar)
                                                    t_health = int(.75 * (t_attack + t_defense))
                                                    t_attack = t_attack + (.50 * t_attack)
                                                    t_defense = t_defense + (.50 * t_defense)
                                                    t_used_resolve = True
                                                    t_final_stand = False
                                                    t_used_focus = True
                                                    o_stamina = o_stamina - dmg['STAMINA_USED']
                                                    turn_total = turn_total + 1
                                                    turn = 1
                                                else:
                                                    t_health = 0
                                                    o_stamina = o_stamina - dmg['STAMINA_USED']
                                                    turn_total = turn_total + 1
                                            else:
                                                o_stamina = o_stamina - dmg['STAMINA_USED']
                                                turn_total = turn_total + 1
                                                turn = 1
                                    else:
                                        emessage = m.NOT_ENOUGH_STAMINA
                                        embedVar = discord.Embed(title=emessage,
                                                                 description=f"Use Enhancers to Increase **STAMINA** or attack to enter **FOCUS STATE**!",
                                                                 colour=0xe91e63)
                                        await button_ctx.send(embed=embedVar)
                                        turn = 0
                            except asyncio.TimeoutError:
                                await ctx.send(f"{ctx.author.mention}, the match has ended. ")
                                return
                    # Player 2 Turn Start
                    elif turn == 1:
                        await asyncio.sleep(1)
                        if t_block_used == True:
                            t_block_used = False
                            t_defense = int(t_defense / 2)
                        if t_attack <= 25:
                            t_attack = 25
                        if t_defense <= 30:
                            t_defense = 30
                        if t_health >= t_max_health:
                            t_health = t_max_health
                        if turn_total == 0:
                            embedVar = discord.Embed(title=f"MATCH START",
                                                     description=f"`{t_card} Says:`\n{t_greeting_description}",
                                                     colour=0xe91e63)
                            await ctx.send(embed=embedVar)

                        if t_health <= (t_max_health * .25):
                            embed_color_t = 0xe74c3c
                            if t_chainsaw == True:
                                if t_atk_chainsaw == False:
                                    t_atk_chainsaw = True
                                    t_chainsaw = False
                                    t_defense = t_defense * 2
                                    t_attack = t_attack * 2
                                    embedVar = discord.Embed(title=f"{t_card.upper()}'s Devilization",
                                                             description=f"**{t_card}** Doubles Stats", colour=0xe91e63)
                                    await private_channel.send(embed=embedVar)

                        elif t_health <= (t_max_health * .50):
                            embed_color_t = 0xe67e22
                            if t_chainsaw == True:
                                if t_atk_chainsaw == False:
                                    t_atk_chainsaw = True
                                    t_chainsaw = False
                                    t_defense = t_defense * 2
                                    t_attack = t_attack * 2
                                    embedVar = discord.Embed(title=f"{t_card.upper()}'s Devilization",
                                                             description=f"**{t_card}** Doubles Stats", colour=0xe91e63)
                                    await private_channel.send(embed=embedVar)
                        elif t_health <= (t_max_health * .75):
                            embed_color_t = 0xf1c40f
                        else:
                            embed_color_t = 0x2ecc71

                        # Focus

                        if t_stamina < 10:
                            t_focus_count = t_focus_count + 1
                            fortitude = 0.0
                            low = t_health - (t_health * .90)
                            high = t_health - (t_health * .80)
                            fortitude = random.randint(int(low), int(high))

                            t_stamina = t_focus
                            t_healthcalc = round(((t_focus * .40) + (fortitude * 1)) / 2)
                            t_attackcalc = round(.20 * ((t_focus * .15) + round(fortitude * 1)))
                            t_defensecalc = round(.20 * ((t_focus * .10) + round(fortitude * 1)))
                            t_newhealth = 0
                            healmessage = ""
                            messagenumber = 0
                            if t_universe == "Crown Rift Madness":
                                healmessage = "yet inner **Madness** drags on..."
                                messagenumber = 3
                            else:
                                if t_health <= t_max_health:
                                    t_newhealth = t_health + t_healthcalc
                                    if t_newhealth > t_max_health:
                                        healmessage = f"recovered!"
                                        messagenumber = 1
                                        t_health = t_max_health
                                    else:
                                        healmessage = f"stopped the bleeding..."
                                        messagenumber = 2
                                        t_health = t_newhealth
                                else:
                                    healmessage = f"hasn't been touched..."
                                    messagenumber = 0
                            if not t_used_resolve:
                                t_attack = t_attack + t_attackcalc
                                t_defense = t_defense + t_defensecalc
                            t_used_focus = True
                            # embedVar = discord.Embed(title=f"{t_card.upper()} FOCUSED", description=f"**{t_card} says**\n{t_focus_description}", colour=0xe91e63)
                            # embedVar.add_field(name=f"{t_card} focused and {healmessage}", value="All stats & stamina increased")
                            # await ctx.send(embed=embedVar)
                            if not t_used_resolve and t_used_focus and t_universe == "Digimon":  # Digimon Universal Trait
                                # fortitude or luck is based on health
                                fortitude = 0.0
                                low = t_health - (t_health * .75)
                                high = t_health - (t_health * .66)
                                fortitude = random.randint(int(low), int(high))
                                # Resolve Scaling
                                t_resolve_health = round(fortitude + (.5 * t_resolve))
                                t_resolve_attack = round((.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                t_resolve_defense = round((.30 * t_defense) * (t_resolve / (.50 * t_defense)))

                                t_stamina = t_stamina + t_resolve
                                t_health = t_health + t_resolve_health
                                t_attack = round(t_attack + t_resolve_attack)
                                t_defense = round(t_defense - t_resolve_defense)
                                t_used_resolve = True

                                embedVar = discord.Embed(title=f"{t_card} DIGIVOLUTION :zap:",
                                                         description=f"**{t_card} says**\n{t_resolve_description}",
                                                         colour=0xe91e63)
                                embedVar.add_field(name=f"Transformation: Digivolve", value="On Focus you Resolve.")
                                await ctx.send(embed=embedVar)
                            elif t_universe == "League Of Legends":
                                embedVar = discord.Embed(title=f"Turret Shot hits {o_card} for **30** Damage 💥",
                                                         colour=0xe91e63)
                                await ctx.send(embed=embedVar)
                                o_health = round(o_health - 30)
                            elif t_universe == "Solo Leveling":
                                embedVar = discord.Embed(
                                    title=f"Ruler's Authority... {o_card} loses **{30 + turn_total}** 🛡️ 🔻",
                                    colour=0xe91e63)
                                await ctx.send(embed=embedVar)
                                o_defense = round(o_defense - (30 + turn_total))
                            elif t_universe == "Attack On Titan":
                                embedVar = discord.Embed(title=f"Rally! **{t_card}** Increased Max Health ❤️",
                                                         colour=0xe91e63)
                                await ctx.send(embed=embedVar)
                                t_max_health = round(t_max_health + 100)
                            elif t_universe == "Black Clover":
                                embedVar = discord.Embed(title=f"Mana Zone! {t_card} Increased Stamina 🌀",
                                                         colour=0xe91e63)
                                await ctx.send(embed=embedVar)
                                t_stamina = 100
                                tcard_lvl_ap_buff = tcard_lvl_ap_buff + 30
                            elif t_universe == "Death Note":
                                if turn_total >= 24:
                                    embedVar = discord.Embed(title=f"{o_card.upper()}'s' Scheduled Death 📓",
                                                             description=f"**{t_card} says**\n**Delete**",
                                                             colour=0xe91e63)
                                    embedVar.add_field(name=f"{o_card} had a heart attack and died", value=f"Death....")
                                    await private_channel.send(embed=embedVar)
                                    o_health = 0
                            if o_universe == "One Punch Man":
                                embedVar = discord.Embed(title=f"Hero Reinforcements! {o_card} Increased Health!  ❤️",
                                                         colour=0xe91e63)
                                await private_channel.send(embed=embedVar)
                                o_health = round(o_health + 100)
                                o_max_health = round(o_max_health + 100)
                            elif o_universe == "7ds":
                                embedVar = discord.Embed(title=f"Increase Power Level! {o_card} Increased Stamina 🌀",
                                                         colour=0xe91e63)
                                await ctx.send(embed=embedVar)
                                o_stamina = o_stamina + 60
                            elif o_universe == "Souls":
                                embedVar = discord.Embed(
                                    title=f"Combo Recognition! {o_card} Increased Attack by **{30 + turn_total}** 🔺 ",
                                    colour=0xe91e63)
                                await ctx.send(embed=embedVar)
                                o_attack = round(o_attack + (30 + turn_total))
                            else:
                                turn_total = turn_total + 1
                                if t_universe != "Crown Rift Madness":
                                    turn = 0
                                else:
                                    turn = 1
                            turn_total = turn_total + 1
                            if t_universe != "Crown Rift Madness":
                                turn = 0
                            else:
                                turn = 1
                        else:
                            # Check If Playing Bot
                            if botActive != True:
                                # PlayUser
                                tap1 = list(t_1.values())[0] + tcard_lvl_ap_buff
                                tap2 = list(t_2.values())[0] + tcard_lvl_ap_buff
                                tap3 = list(t_3.values())[0] + tcard_lvl_ap_buff
                                tenh1 = list(t_enhancer.values())[0]
                                tenh_name = list(t_enhancer.values())[2]
                                tpet_enh_name = list(tpet_move.values())[2]
                                tpet_msg_on_resolve = ""
                                # UNIVERSE CARD
                                player_2_card = showcard(t, t_max_health, t_health, t_max_stamina, t_stamina,
                                                         t_used_resolve, ttitle, t_used_focus, t_attack, t_defense,
                                                         turn_total, tap1, tap2, tap3, tenh1, tenh_name, tcard_lvl, o_defense)
                                # await private_channel.send(file=player_2_card)

                                if t_used_focus and t_used_resolve:
                                    options = ["q", "Q", "0", "1", "2", "3", "4", "6"]
                                elif t_used_focus and not t_used_resolve:
                                    options = ["q", "Q", "0", "1", "2", "3", "4", "5"]
                                else:
                                    options = ["q", "Q", "0", "1", "2", "3", "4"]

                                battle_buttons = [
                                    manage_components.create_button(
                                        style=ButtonStyle.green,
                                        label=f"💥 10",
                                        custom_id="1"
                                    ),
                                    manage_components.create_button(
                                        style=ButtonStyle.green,
                                        label=f"☄️ 30",
                                        custom_id="2"
                                    ),
                                    manage_components.create_button(
                                        style=ButtonStyle.green,
                                        label=f"🏵️ 80",
                                        custom_id="3"
                                    ),
                                    manage_components.create_button(
                                        style=ButtonStyle.blue,
                                        label=f"🦠 20",
                                        custom_id="4"
                                    )
                                ]

                                util_buttons = [
                                    manage_components.create_button(
                                        style=ButtonStyle.grey,
                                        label="Block 20",
                                        custom_id="0"
                                    ),
                                    manage_components.create_button(
                                        style=ButtonStyle.grey,
                                        label="Quit | /ff",
                                        custom_id="q"
                                    ),
                                ]

                                if t_used_focus and t_used_resolve and not t_pet_used:
                                    util_buttons.append(
                                        manage_components.create_button(
                                            style=ButtonStyle.green,
                                            label="🐦 15",
                                            custom_id="6"
                                        )
                                    )

                                if t_used_focus and not t_used_resolve:
                                    util_buttons.append(
                                        manage_components.create_button(
                                            style=ButtonStyle.green,
                                            label="Resolve!",
                                            custom_id="5"
                                        )
                                    )

                                battle_action_row = manage_components.create_actionrow(*battle_buttons)
                                util_action_row = manage_components.create_actionrow(*util_buttons)
                                oarm_message =""
                                if t_used_resolve:
                                    tpet_msg_on_resolve = f"🐦 *{enhancer_mapping[tpet_enh_name]}*"
                                if oarm_barrier_active:
                                    oarm_message = f"💠{obarrier_count}"
                                elif oarm_shield_active:
                                    oarm_message = f"🌐{oshield_value}"
                                elif oarm_parry_active:
                                    oarm_message = f"🔄{oparry_count}"
                                if tarm_passive_type == "BARRIER":
                                    if tarm_barrier_active:
                                        tarm_passive_value = f"{tbarrier_count}"
                                    else:
                                        tarm_passive_value = 0
                                elif tarm_passive_type == "SHIELD":
                                    if tarm_shield_active:
                                        tarm_passive_value = f"{tshield_value}"
                                    else:
                                        tarm_passive_value = 0
                                elif tarm_passive_type == "PARRY":
                                    if tarm_parry_active:
                                        tarm_passive_value = f"{tparry_count}"
                                    else:
                                        tarm_passive_value = 0

                                embedVar = discord.Embed(title=f" Press your move below! _Turn_ {turn_total}", color=0xe74c3c)
                                embedVar.set_author(name=f"🦾 {tarm_name} - {tarm_passive_type} {tarm_passive_value} {enhancer_suffix_mapping[tarm_passive_type]}\n{tpet_msg_on_resolve}")
                                embedVar.set_thumbnail(url=tpet_image)
                                embedVar.set_image(url="attachment://image.png")
                                embedVar.set_footer(
                                    text=f"{o_card}: ❤️{o_health} 🌀{o_stamina} 🗡️{o_attack}/🛡️{o_defense}{oarm_message}",
                                    icon_url="https://cdn.discordapp.com/emojis/789290881654980659.gif?v=1")
                                await private_channel.send(embed=embedVar,
                                                           components=[battle_action_row, util_action_row],
                                                           file=player_2_card)

                                # Make sure user is responding with move
                                def check(button_ctx):
                                    return button_ctx.author == user2 and button_ctx.custom_id in options

                                try:
                                    button_ctx: ComponentContext = await manage_components.wait_for_component(self.bot,
                                                                                                              components=[
                                                                                                                  battle_action_row,
                                                                                                                  util_action_row],
                                                                                                              timeout=45,
                                                                                                              check=check)

                                    # calculate data based on selected move
                                    if button_ctx.custom_id == "q" or button_ctx.custom_id == "Q":
                                        t_health = 0
                                        uid = t_DID
                                        tuser = await self.bot.fetch_user(uid)
                                        await button_ctx.send(f"{tuser.mention} has fled the battle...")
                                        return
                                    if button_ctx.custom_id == "1":

                                        dmg = damage_cal(t_universe, t_card, t_1, t_attack, t_defense, o_defense,
                                                         t_stamina, t_enhancer_used, t_health, o_health, o_stamina,
                                                         t_max_health, o_attack, t_special_move_description, turn_total,
                                                         tcard_lvl_ap_buff)
                                    elif button_ctx.custom_id == "2":

                                        dmg = damage_cal(t_universe, t_card, t_2, t_attack, t_defense, o_defense,
                                                         t_stamina, t_enhancer_used, t_health, o_health, o_stamina,
                                                         t_max_health, o_attack, t_special_move_description, turn_total,
                                                         tcard_lvl_ap_buff)
                                    elif button_ctx.custom_id == "3":

                                        dmg = damage_cal(t_universe, t_card, t_3, t_attack, t_defense, o_defense,
                                                         t_stamina, t_enhancer_used, t_health, o_health, o_stamina,
                                                         t_max_health, o_attack, t_special_move_description, turn_total,
                                                         tcard_lvl_ap_buff)
                                        if t_gif != "N/A":
                                            await private_channel.send(f"{t_gif}")
                                    elif button_ctx.custom_id == "4":
                                        t_enhancer_used = True

                                        dmg = damage_cal(t_universe, t_card, t_enhancer, t_attack, t_defense, o_defense,
                                                         t_stamina, t_enhancer_used, t_health, o_health, o_stamina,
                                                         t_max_health, o_attack, t_special_move_description, turn_total,
                                                         tcard_lvl_ap_buff)
                                        t_enhancer_used = False
                                    elif button_ctx.custom_id == "5":
                                        if not t_used_resolve and t_used_focus:
                                            if t_universe == "My Hero Academia":  # My hero TRait
                                                # fortitude or luck is based on health
                                                fortitude = 0.0
                                                low = t_health - (t_health * .75)
                                                high = t_health - (t_health * .66)
                                                fortitude = random.randint(int(low), int(high))
                                                # Resolve Scaling
                                                t_resolve_health = round(fortitude + (.5 * t_resolve))
                                                t_resolve_attack = round(
                                                    (.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                                t_resolve_defense = round(
                                                    (.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                                tcard_lvl_ap_buff = tcard_lvl_ap_buff + 50

                                                t_stamina = t_stamina + t_resolve
                                                t_health = t_health + t_resolve_health
                                                t_attack = round(t_attack + t_resolve_attack)
                                                t_defense = round(t_defense - t_resolve_defense)
                                                t_used_resolve = True
                                                t_pet_used = False

                                                embedVar = discord.Embed(title=f"{t_card.upper()} PLUS ULTRAAA",
                                                                         description=f"**{t_card} says**\n{t_resolve_description}",
                                                                         colour=0xe91e63)
                                                embedVar.add_field(name=f"Transformation: Plus Ultra",
                                                                   value="You do not lose a turn after you Resolve.")
                                                await button_ctx.send(embed=embedVar)
                                                turn_total = turn_total + 1
                                                turn = 1
                                            elif t_universe == "Attack On Titan":
                                                # fortitude or luck is based on health
                                                fortitude = 0.0
                                                low = t_health - (t_health * .75)
                                                high = t_health - (t_health * .66)
                                                fortitude = random.randint(int(low), int(high))
                                                # Resolve Scaling
                                                t_resolve_health = round(fortitude + (.5 * t_resolve))
                                                t_resolve_attack = round(
                                                    (.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                                t_resolve_defense = round(
                                                    (.30 * t_defense) * (t_resolve / (.50 * t_defense)))

                                                t_stamina = t_stamina + t_resolve
                                                t_health = t_health + t_resolve_health
                                                t_attack = round(t_attack + t_resolve_attack)
                                                t_defense = round(t_defense - t_resolve_defense)
                                                t_used_resolve = True
                                                t_pet_used = False
                                                health_boost = 100 * t_focus_count
                                                t_health = t_health + health_boost
                                                embedVar = discord.Embed(title=f"{t_card.upper()} Titan Mode",
                                                                         description=f"**{t_card} says**\n{t_resolve_description}",
                                                                         colour=0xe91e63)
                                                embedVar.add_field(name=f"Transformation Complete",
                                                                   value=f"Health increased by **{health_boost}**!")
                                                await button_ctx.send(embed=embedVar)

                                                turn_total = turn_total + 1
                                                turn = 0

                                            elif t_universe == "Bleach":  # Bleach Trait
                                                # fortitude or luck is based on health
                                                fortitude = 0.0
                                                low = t_health - (t_health * .75)
                                                high = t_health - (t_health * .66)
                                                fortitude = random.randint(int(low), int(high))
                                                # Resolve Scaling
                                                t_resolve_health = round(fortitude + (.5 * t_resolve))
                                                t_resolve_attack = round(
                                                    (.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                                t_resolve_defense = round(
                                                    (.30 * t_defense) * (t_resolve / (.50 * t_defense)))

                                                t_stamina = t_stamina + t_resolve
                                                t_health = t_health + t_resolve_health
                                                t_attack = round((t_attack + (2 * t_resolve_attack)) * 2)
                                                t_defense = round(t_defense - t_resolve_defense)
                                                # if t_defense >= 120:
                                                # t_defense = 120
                                                t_used_resolve = True
                                                t_pet_used = False

                                                embedVar = discord.Embed(title=f"{t_card} STRENGTHENED RESOLVE :zap:",
                                                                         description=f"**{t_card} says**\n{t_resolve_description}",
                                                                         colour=0xe91e63)
                                                embedVar.add_field(name=f"Transformation: Bankai",
                                                                   value="Gain double Attack on Resolve.")
                                                await button_ctx.send(embed=embedVar)
                                                turn_total = turn_total + 1
                                                turn = 0
                                            elif t_universe == "God Of War":  # God Of War Trait
                                                # fortitude or luck is based on health
                                                fortitude = 0.0
                                                low = t_health - (t_health * .75)
                                                high = t_health - (t_health * .66)
                                                fortitude = random.randint(int(low), int(high))
                                                # Resolve Scaling
                                                t_resolve_health = round(fortitude + (.5 * t_resolve))
                                                t_resolve_attack = round(
                                                    (.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                                t_resolve_defense = round(
                                                    (.30 * t_defense) * (t_resolve / (.50 * t_defense)))

                                                t_stamina = t_stamina + t_resolve
                                                t_health = t_max_health
                                                t_attack = round(t_attack + t_resolve_attack)
                                                t_defense = round(t_defense - t_resolve_defense)
                                                t_used_resolve = True
                                                t_pet_used = False

                                                embedVar = discord.Embed(title=f"{t_card} STRENGTHENED RESOLVE :zap:",
                                                                         description=f"**{t_card} says**\n{t_resolve_description}",
                                                                         colour=0xe91e63)
                                                embedVar.add_field(name=f"Transformation: Ascension",
                                                                   value="On Resolve Refill Health.")
                                                await button_ctx.send(embed=embedVar)
                                                turn_total = turn_total + 1
                                                turn = 0
                                            elif t_universe == "Fate":  # Fate Trait
                                                # fortitude or luck is based on health
                                                fortitude = 0.0
                                                low = t_health - (t_health * .75)
                                                high = t_health - (t_health * .66)
                                                fortitude = random.randint(int(low), int(high))
                                                # Resolve Scaling
                                                t_resolve_health = round(fortitude + (.5 * t_resolve))
                                                t_resolve_attack = round(
                                                    (.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                                t_resolve_defense = round(
                                                    (.30 * t_defense) * (t_resolve / (.50 * t_defense)))

                                                t_stamina = t_stamina + t_resolve
                                                t_health = t_health + t_resolve_health
                                                t_attack = round(t_attack + t_resolve_attack)
                                                t_defense = round(t_defense - t_resolve_defense)
                                                t_used_resolve = True

                                                dmg = damage_cal(t_universe, t_card, t_3, t_attack, t_defense,
                                                                 o_defense, t_stamina, t_enhancer_used, t_health,
                                                                 o_health, o_stamina, t_max_health, o_attack,
                                                                 t_special_move_description, turn_total,
                                                                 tcard_lvl_ap_buff)
                                                t_pet_used = False
                                                o_health = o_health - int(dmg['DMG'])
                                                embedVar = discord.Embed(
                                                    title=f"{t_card} STRENGTHENED RESOLVE :zap:\n\n{dmg['MESSAGE']}",
                                                    description=f"**{t_card} says**\n{t_resolve_description}",
                                                    colour=0xe91e63)
                                                embedVar.add_field(name=f"Transformation: Command Seal",
                                                                   value="On Resolve, Strike with Ultimate, then Focus.")
                                                await button_ctx.send(embed=embedVar)
                                                # t_stamina = 0
                                                turn_total = turn_total + 1
                                                turn = 0
                                            elif t_universe == "Kanto Region" or t_universe == "Johto Region" or t_universe == "Hoenn Region" or t_universe == "Sinnoh Region" or t_universe == "Kalos Region" or t_universe == "Unova Region" or t_universe == "Alola Region" or t_universe == "Galar Region":  # Pokemon Resolves
                                                # fortitude or luck is based on health
                                                fortitude = 0.0
                                                low = t_health - (t_health * .75)
                                                high = t_health - (t_health * .66)
                                                fortitude = random.randint(int(low), int(high))
                                                # Resolve Scaling
                                                t_resolve_health = round(fortitude + (.5 * t_resolve))
                                                t_resolve_attack = round(
                                                    (.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                                t_resolve_defense = round(
                                                    (.30 * t_defense) * (t_resolve / (.50 * t_defense)))

                                                t_stamina = t_stamina + t_resolve
                                                t_health = t_health + t_resolve_health
                                                t_attack = round(t_attack + t_resolve_attack)
                                                t_defense = round(t_defense) * 2
                                                t_used_resolve = True
                                                t_pet_used = False

                                                embedVar = discord.Embed(title=f"{t_card} STRENGTHENED RESOLVE :zap:",
                                                                         description=f"**{t_card} says**\n{t_resolve_description}",
                                                                         colour=0xe91e63)
                                                embedVar.add_field(name=f"Transformation: Evolution",
                                                                   value="When you Resolve you do not lose Defense.")
                                                await button_ctx.send(embed=embedVar)
                                                turn_total = turn_total + 1
                                                turn = 0
                                            else:
                                                # fortitude or luck is based on health
                                                fortitude = 0.0
                                                low = t_health - (t_health * .75)
                                                high = t_health - (t_health * .66)
                                                fortitude = random.randint(int(low), int(high))
                                                # Resolve Scaling
                                                t_resolve_health = round(fortitude + (.5 * t_resolve))
                                                t_resolve_attack = round(
                                                    (.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                                t_resolve_defense = round(
                                                    (.30 * t_defense) * (t_resolve / (.50 * t_defense)))

                                                t_stamina = t_stamina + t_resolve
                                                t_health = t_health + t_resolve_health
                                                t_attack = round(t_attack + t_resolve_attack)
                                                t_defense = round(t_defense - t_resolve_defense)
                                                t_used_resolve = True
                                                t_pet_used = False

                                                if t_universe == "League Of Legends":
                                                    o_health = o_health - (30 * (o_focus_count + t_focus_count))
                                                    embedVar = discord.Embed(title=f"{t_card.upper()} PENTA KILL!",
                                                                             description=f"**{t_card} says**\n{t_resolve_description}",
                                                                             colour=0xe91e63)
                                                    embedVar.add_field(name=f"Nexus Destroyed",
                                                                       value=f"**{t_card}** dealt **{(30 * (o_focus_count + t_focus_count))}** damage.")
                                                else:
                                                    embedVar = discord.Embed(
                                                        title=f"{t_card} STRENGTHENED RESOLVE :zap:",
                                                        description=f"**{t_card} says**\n{t_resolve_description}",
                                                        colour=0xe91e63)
                                                    embedVar.add_field(name=f"Transformation",
                                                                       value="All stats & stamina greatly increased")
                                                await button_ctx.send(embed=embedVar)
                                                turn_total = turn_total + 1
                                                turn = 0
                                        else:
                                            emessage = m.CANNOT_USE_RESOLVE
                                            embedVar = discord.Embed(title=emessage, colour=0xe91e63)
                                            await button_ctx.send(embed=embedVar)
                                            await button_ctx.send(m.CANNOT_USE_RESOLVE)
                                            turn = 1
                                    elif button_ctx.custom_id == "6":
                                        # Resolve Check and Calculation
                                        if t_used_resolve and t_used_focus and not t_pet_used:
                                            t_enhancer_used = True
                                            dmg = damage_cal(t_universe, t_card, tpet_move, t_attack, t_defense,
                                                             o_defense, t_stamina, t_enhancer_used, t_health, o_health,
                                                             o_stamina, t_max_health, o_attack,
                                                             t_special_move_description, turn_total, tcard_lvl_ap_buff)
                                            t_enhancer_used = False
                                            t_pet_used = True
                                            tpet_dmg = dmg['DMG']
                                            tpet_type = dmg['ENHANCED_TYPE']
                                            if dmg['CAN_USE_MOVE']:
                                                if tpet_type == 'ATK':
                                                    t_attack = round(t_attack + dmg['DMG'])
                                                elif tpet_type == 'DEF':
                                                    t_defense = round(t_defense + dmg['DMG'])
                                                elif tpet_type == 'STAM':
                                                    t_stamina = round(t_stamina + dmg['DMG'])
                                                elif tpet_type == 'HLT':
                                                    t_health = round(t_health + dmg['DMG'])
                                                elif tpet_type == 'LIFE':
                                                    t_health = round(t_health + dmg['DMG'])
                                                    o_health = round(o_health - dmg['DMG'])
                                                elif tpet_type == 'DRAIN':
                                                    t_stamina = round(t_stamina + dmg['DMG'])
                                                    o_stamina = round(o_stamina - dmg['DMG'])
                                                elif tpet_type == 'FLOG':
                                                    t_attack = round(t_attack + dmg['DMG'])
                                                    o_attack = round(o_attack - dmg['DMG'])
                                                elif tpet_type == 'WITHER':
                                                    t_defense = round(t_defense + dmg['DMG'])
                                                    o_defense = round(o_defense - dmg['DMG'])
                                                elif tpet_type == 'RAGE':
                                                    t_defense = round(t_defense - dmg['DMG'])
                                                    t_attack = round(t_attack + dmg['DMG'])
                                                elif tpet_type == 'BRACE':
                                                    t_defense = round(t_defense + dmg['DMG'])
                                                    t_attack = round(t_attack - dmg['DMG'])
                                                elif tpet_type == 'BZRK':
                                                    t_health = round(t_health - dmg['DMG'])
                                                    t_attack = round(t_attack + dmg['DMG'])
                                                elif tpet_type == 'CRYSTAL':
                                                    t_health = round(t_health - dmg['DMG'])
                                                    t_defense = round(t_defense + dmg['DMG'])
                                                elif tpet_type == 'GROWTH':
                                                    t_max_health = round(t_max_health - dmg['DMG'])
                                                    t_defense = round(t_defense + (dmg['DMG'] * .5))
                                                    t_attack = round(t_attack + (dmg['DMG'] * .5))
                                                elif tpet_type == 'STANCE':
                                                    tempattack = dmg['DMG']
                                                    t_attack = t_defense
                                                    t_defense = tempattack
                                                elif tpet_type == 'CONFUSE':
                                                    tempattack = dmg['DMG']
                                                    o_attack = o_defense
                                                    o_defense = tempattack
                                                elif tpet_type == 'BLINK':
                                                    t_stamina = round(t_stamina - dmg['DMG'])
                                                    o_stamina = round(o_stamina + dmg['DMG'] - 10)
                                                elif tpet_type == 'SLOW':
                                                    tempstam = round(o_stamina + dmg['DMG'])
                                                    t_stamina = round(t_stamina - dmg['DMG'])
                                                    o_stamina = t_stamina
                                                    t_stamina = tempstam
                                                elif tpet_type == 'HASTE':
                                                    tempstam = round(o_stamina - dmg['DMG'])
                                                    t_stamina = round(t_stamina + dmg['DMG'])
                                                    o_stamina = t_stamina
                                                    t_stamina = tempstam
                                                elif tpet_type == 'SOULCHAIN':
                                                    t_stamina = round(dmg['DMG'])
                                                    o_stamina = t_stamina
                                                elif tpet_type == 'GAMBLE':
                                                    t_health = round(dmg['DMG'])
                                                    o_health = t_health
                                                elif tpet_type == 'FEAR':
                                                    t_max_health = round(t_max_health - dmg['DMG'])
                                                    o_defense = round(o_defense + (dmg['DMG'] * .5))
                                                    o_attack = round(o_attack + (dmg['DMG'] * .5))
                                                elif tpet_type == 'WAVE':
                                                    o_health = round(o_health - dmg['DMG'])
                                                elif tpet_type == 'BLAST':
                                                    if dmg['DMG'] >= 100:
                                                        dmg['DMG'] = 100
                                                    o_health = round(o_health - dmg['DMG'])
                                                elif tpet_type == 'CREATION':
                                                    t_max_health = round(t_max_health + dmg['DMG'])
                                                    t_health = round(t_health + dmg['DMG'])
                                                elif tpet_type == 'DESTRUCTION':
                                                    o_max_health = round(o_max_health - dmg['DMG'])
                                                t_stamina = t_stamina - int(dmg['STAMINA_USED'])

                                                if t_universe == "Persona":
                                                    petdmg = damage_cal(t_universe, t_card, t_1, t_attack, t_defense,
                                                                        o_defense, t_stamina, t_enhancer_used, t_health,
                                                                        o_health, o_stamina, t_max_health, o_attack,
                                                                        t_special_move_description, turn_total,
                                                                        tcard_lvl_ap_buff)
                                                    o_health = o_health - petdmg['DMG']

                                                    embedVar = discord.Embed(
                                                        title=f"**PERSONA!**\n{tpet_name} was summoned from {t_card}'s soul dealing **{petdmg['DMG']}** damage!!",
                                                        colour=0xe91e63)
                                                    embedVar.add_field(name=f"{tpet_name} used **{tpetmove_text}**!",
                                                                       value=f"Enhanced **{tpet_type}**")

                                                    embedVar.set_thumbnail(url=tpet_image)
                                                    embedVar.set_image(url="attachment://image.png")
                                                else:
                                                    embedVar = discord.Embed(
                                                        title=f"{t_card.upper()} Summoned :bird: {tpet_name}",
                                                        colour=0xe91e63)
                                                    embedVar.add_field(name=f"{tpet_name} used **{tpetmove_text}**!",
                                                                       value=f"Enhanced **{tpet_type}**")
                                                    embedVar.set_thumbnail(url=tpet_image)
                                                    embedVar.set_image(url="attachment://image.png")

                                                await button_ctx.send(embed=embedVar)
                                                turn = 1
                                            else:
                                                await button_ctx.send(f"{tpet_name} needs a turn to rest...")
                                                turn = 1
                                        else:
                                            await button_ctx.send(f"{tpet_name} needs a turn to rest...")
                                    elif button_ctx.custom_id == "0":
                                        if t_stamina >= 20:

                                            t_stamina = t_stamina - 20
                                            t_block_used = True
                                            t_defense = t_defense * 2
                                            embedVar = discord.Embed(title=f"{t_card} **Defended** 🛡️",
                                                                     colour=0xe91e63)

                                            await button_ctx.send(embed=embedVar)
                                            turn_total = turn_total + 1
                                            turn = 0
                                        else:
                                            await button_ctx.send(f"{t_card} is too tired to block...")
                                            turn = 1

                                    if button_ctx.custom_id != "5" and button_ctx.custom_id != "6" and button_ctx.custom_id != "0" and button_ctx.custom_id in options:

                                        # If you have enough stamina for move, use it
                                        if dmg['CAN_USE_MOVE']:
                                            t_pet_used = False
                                            if dmg['ENHANCE']:

                                                enh_type = dmg['ENHANCED_TYPE']
                                                if enh_type == 'ATK':
                                                    t_attack = round(t_attack + dmg['DMG'])
                                                elif enh_type == 'DEF':
                                                    t_defense = round(t_defense + dmg['DMG'])
                                                elif enh_type == 'STAM':
                                                    t_stamina = round(t_stamina + dmg['DMG'])
                                                elif enh_type == 'HLT':
                                                    t_health = round(t_health + dmg['DMG'])
                                                elif enh_type == 'LIFE':
                                                    t_health = round(t_health + dmg['DMG'])
                                                    o_health = round(o_health - dmg['DMG'])
                                                elif enh_type == 'DRAIN':
                                                    t_stamina = round(t_stamina + dmg['DMG'])
                                                    o_stamina = round(o_stamina - dmg['DMG'])
                                                elif enh_type == 'FLOG':
                                                    t_attack = round(t_attack + dmg['DMG'])
                                                    o_attack = round(o_attack - dmg['DMG'])
                                                elif enh_type == 'WITHER':
                                                    t_defense = round(t_defense + dmg['DMG'])
                                                    o_defense = round(o_defense - dmg['DMG'])
                                                elif enh_type == 'RAGE':
                                                    t_defense = round(t_defense - dmg['DMG'])
                                                    t_attack = round(t_attack + dmg['DMG'])
                                                elif enh_type == 'BRACE':
                                                    t_defense = round(t_defense + dmg['DMG'])
                                                    t_attack = round(t_attack - dmg['DMG'])
                                                elif enh_type == 'BZRK':
                                                    t_health = round(t_health - dmg['DMG'])
                                                    t_attack = round(t_attack + dmg['DMG'])
                                                elif enh_type == 'CRYSTAL':
                                                    t_health = round(t_health - dmg['DMG'])
                                                    t_defense = round(t_defense + dmg['DMG'])
                                                elif enh_type == 'GROWTH':
                                                    t_max_health = round(t_max_health - dmg['DMG'])
                                                    t_defense = round(t_defense + (dmg['DMG'] * .5))
                                                    t_attack = round(t_attack + (dmg['DMG'] * .5))
                                                elif enh_type == 'STANCE':
                                                    tempattack = dmg['DMG']
                                                    t_attack = t_defense
                                                    t_defense = tempattack
                                                elif enh_type == 'CONFUSE':
                                                    tempattack = dmg['DMG']
                                                    o_attack = o_defense
                                                    o_defense = tempattack
                                                elif enh_type == 'BLINK':
                                                    t_stamina = round(t_stamina - dmg['DMG'])
                                                    o_stamina = round(o_stamina + dmg['DMG'] - 10)
                                                elif enh_type == 'SLOW':
                                                    tempstam = round(o_stamina + dmg['DMG'])
                                                    t_stamina = round(t_stamina - dmg['DMG'])
                                                    o_stamina = t_stamina
                                                    t_stamina = tempstam
                                                elif enh_type == 'HASTE':
                                                    tempstam = round(o_stamina - dmg['DMG'])
                                                    t_stamina = round(t_stamina + dmg['DMG'])
                                                    o_stamina = t_stamina
                                                    t_stamina = tempstam
                                                elif enh_type == 'SOULCHAIN':
                                                    t_stamina = round(dmg['DMG'])
                                                    o_stamina = t_stamina
                                                elif enh_type == 'GAMBLE':
                                                    t_health = round(dmg['DMG'])
                                                    o_health = t_health
                                                elif enh_type == 'FEAR':
                                                    t_max_health = round(t_max_health - dmg['DMG'])
                                                    o_defense = round(o_defense - (dmg['DMG'] * .5))
                                                    o_attack = round(o_attack - (dmg['DMG'] * .5))
                                                elif enh_type == 'WAVE':
                                                    o_health = round(o_health - dmg['DMG'])
                                                elif enh_type == 'BLAST':
                                                    o_health = round(o_health - dmg['DMG'])
                                                elif enh_type == 'CREATION':
                                                    t_max_health = round(t_max_health + dmg['DMG'])
                                                    t_health = round(t_health + dmg['DMG'])
                                                elif enh_type == 'DESTRUCTION':
                                                    o_max_health = round(o_max_health - dmg['DMG'])
                                                t_stamina = t_stamina - int(dmg['STAMINA_USED'])
                                                embedVar = discord.Embed(title=f"{dmg['MESSAGE']}",
                                                                         colour=embed_color_t)
                                                await button_ctx.send(embed=embedVar)
                                                turn_total = turn_total + 1
                                                turn = 0
                                            elif dmg['DMG'] == 0:
                                                t_stamina = t_stamina - int(dmg['STAMINA_USED'])
                                                embedVar = discord.Embed(title=f"{dmg['MESSAGE']}", colour=embed_color_t)
                                                if tarm_barrier_active:
                                                    tarm_barrier_active=False
                                                    embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                await button_ctx.send(embed=embedVar)
                                                turn_total = turn_total + 1
                                                turn = 0
                                            else:
                                                if o_universe == "Naruto" and o_stamina < 10:
                                                    o_health = o_health 
                                                    embedVar = discord.Embed(title=f"{o_card.upper()}: Substitution Jutsu", description=f"{t_card} strikes a log", colour=0xe91e63)
                                                    if tarm_barrier_active:
                                                        tarm_barrier_active=False
                                                        embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                    await button_ctx.send(embed=embedVar)
                                                elif oarm_shield_active:
                                                    if oshield_value > 0:
                                                        oshield_value = oshield_value -dmg['DMG']
                                                        o_health = o_health 
                                                        if oshield_value <=0:
                                                            embedVar = discord.Embed(title=f"{o_card.upper()}'s' **Shield** Shattered!", description=f"{t_card} breaks the **Shield**!", colour=0xe91e63)
                                                            if tarm_barrier_active:
                                                                tarm_barrier_active=False
                                                                embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                            await button_ctx.send(embed=embedVar)
                                                            oarm_shield_active = False
                                                        else:
                                                            embedVar = discord.Embed(title=f"{o_card.upper()} Activates **Shield** 🌐", description=f"{t_card} strikes the **Shield** for **{dmg['DMG']} DMG!**\n **{oshield_value} Shield** Left!", colour=0xe91e63)
                                                            if tarm_barrier_active:
                                                                tarm_barrier_active=False
                                                                embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                            await button_ctx.send(embed=embedVar)

                                                elif oarm_barrier_active:
                                                    if obarrier_count >1:
                                                        o_health = o_health 
                                                        embedVar = discord.Embed(title=f"{o_card.upper()} Activates **Barrier** 💠", description=f"{t_card}'s attack **Nullified**!\n {obarrier_count - 1} **Barriers** remain!", colour=0xe91e63)
                                                        if tarm_barrier_active:
                                                            tarm_barrier_active=False
                                                            embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                        await button_ctx.send(embed=embedVar)
                                                        obarrier_count = obarrier_count - 1
                                                    elif obarrier_count==1:
                                                        embedVar = discord.Embed(title=f"{o_card.upper()}'s **Barrier** Broken!", description=f"{t_card} destroys the **Barrier**", colour=0xe91e63)
                                                        obarrier_count = obarrier_count - 1
                                                        if tarm_barrier_active:
                                                            tarm_barrier_active=False
                                                            embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                        await button_ctx.send(embed=embedVar)
                                                        oarm_barrier_active = False
                                                elif oarm_parry_active:
                                                    if oparry_count > 1:
                                                        oparry_damage = round(dmg['DMG'] / 2)
                                                        o_health = o_health - oparry_damage
                                                        t_health = t_health - oparry_damage
                                                        oparry_count = oparry_count - 1
                                                        embedVar = discord.Embed(title=f"{o_card.upper()} Activates **Parry** 🔄", description=f"{t_card} takes {oparry_damage}! DMG\n **{oparry_count} Parries** to go!!", colour=0xe91e63)
                                                        if tarm_barrier_active:
                                                            tarm_barrier_active=False
                                                            embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                        await button_ctx.send(embed=embedVar)
                                                        
                                                    elif oparry_count==1:
                                                        embedVar = discord.Embed(title=f"{o_card.upper()} **Parry** Penetrated!!", description=f"{t_card} breaks the **Parry**", colour=0xe91e63)
                                                        oparry_damage = round(dmg['DMG'] / 2)
                                                        o_health = o_health - oparry_damage
                                                        t_health = t_health - oparry_damage
                                                        oparry_count = oparry_count - 1
                                                        if tarm_barrier_active:
                                                            tarm_barrier_active=False
                                                            embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                        await button_ctx.send(embed=embedVar)
                                                        oarm_parry_active = False
                                                else:
                                                    o_health = o_health - int(dmg['DMG'])
                                                    embedVar = discord.Embed(title=f"{dmg['MESSAGE']}", colour=embed_color_t)
                                                    if tarm_barrier_active:
                                                        tarm_barrier_active=False
                                                        embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                    await button_ctx.send(embed=embedVar)
                                                if o_health <= 0:
                                                    if o_final_stand==True:
                                                        embedVar = discord.Embed(title=f"{o_card.upper()}'s LAST STAND", description=f"{o_card} FINDS RESOLVE", colour=0xe91e63)
                                                        embedVar.add_field(name=f"{o_card} resolved and continues to fight", value="All stats & stamina increased")
                                                        if tarm_barrier_active:
                                                            tarm_barrier_active=False
                                                            embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                        await private_channel.send(embed=embedVar)
                                                        o_health = int(.75 * (o_attack + o_defense))
                                                        o_attack = o_attack + (.50 * o_attack)
                                                        o_defense = o_defense + (.50 * o_defense)
                                                        o_stamina = 100
                                                        o_used_resolve = True
                                                        o_used_focus = True
                                                        o_final_stand = False
                                                        t_stamina = t_stamina - int(dmg['STAMINA_USED'])
                                                        turn_total = turn_total + 1
                                                        turn = 0
                                                    else:
                                                        o_health = 0
                                                        t_stamina = t_stamina - int(dmg['STAMINA_USED'])
                                                        turn_total = turn_total + 1
                                                else:
                                                    t_stamina = t_stamina - int(dmg['STAMINA_USED'])
                                                    turn_total = turn_total + 1
                                                    turn = 0

                                        else:
                                            emessage = m.NOT_ENOUGH_STAMINA
                                            embedVar = discord.Embed(title=emessage,
                                                                     description=f"Use abilities to Increase `STAM` or enter `FOCUS STATE`!",
                                                                     colour=0xe91e63)
                                            await button_ctx.send(embed=embedVar)
                                            turn = 1
                                except asyncio.TimeoutError:
                                    await ctx.send(f"{ctx.author.mention}, the match has ended.")
                                    return
                            # Play Bot
                            else:
                                # UNIVERSE CARD
                                tap1 = list(t_1.values())[0] + tcard_lvl_ap_buff
                                tap2 = list(t_2.values())[0] + tcard_lvl_ap_buff
                                tap3 = list(t_3.values())[0] + tcard_lvl_ap_buff
                                tenh1 = list(t_enhancer.values())[0]
                                tenh_name = list(t_enhancer.values())[2]
                                tpet_enh_name = list(tpet_move.values())[2]
                                tpet_msg_on_resolve = ""
                                # UNIVERSE CARD
                                player_2_card = showcard(t, t_max_health, t_health, t_max_stamina, t_stamina,
                                                         t_used_resolve, ttitle, t_used_focus, t_attack, t_defense,
                                                         turn_total, tap1, tap2, tap3, tenh1, tenh_name, tcard_lvl, o_defense)
                                await ctx.send(file=player_2_card)

                                aiMove = 0

                                if t_used_resolve and not t_pet_used:
                                    aiMove = 6
                                elif o_stamina == 0:
                                    aiMove = 1
                                elif t_health <= (.50 * t_max_health) and t_used_resolve == False and t_used_focus:
                                    aiMove = 5
                                elif t_stamina >= 160 and (t_health >= o_health):
                                    aiMove = 3
                                elif t_stamina >= 160:
                                    aiMove = 3
                                elif t_stamina >= 150 and (t_health >= o_health):
                                    aiMove = 1
                                elif t_stamina >= 150:
                                    aiMove = 1
                                elif t_stamina >= 140 and (t_health >= o_health):
                                    aiMove = 1
                                elif t_stamina >= 140:
                                    aiMove = 3
                                elif t_stamina >= 130 and (t_health >= o_health):
                                    aiMove = 1
                                elif t_stamina >= 130:
                                    aiMove = 3
                                elif t_stamina >= 120 and (t_health >= o_health):
                                    aiMove = 2
                                elif t_stamina >= 120:
                                    aiMove = 3
                                elif t_stamina >= 110 and (t_health >= o_health):
                                    aiMove = 1
                                elif t_stamina >= 110:
                                    aiMove = 2
                                elif t_stamina >= 100 and (t_health >= o_health):
                                    aiMove = 4
                                elif t_stamina >= 100:
                                    aiMove = 1
                                elif t_stamina >= 90 and (t_health >= o_health):
                                    aiMove = 3
                                elif t_stamina >= 90:
                                    aiMove = 4
                                elif t_stamina >= 80 and (t_health >= o_health):
                                    aiMove = 1
                                elif t_stamina >= 80:
                                    aiMove = 3
                                elif t_stamina >= 70 and (t_health >= o_health):
                                    aiMove = 4
                                elif t_stamina >= 70:
                                    aiMove = 1
                                elif t_stamina >= 60 and (t_health >= o_health):
                                    aiMove = 1
                                elif t_stamina >= 60:
                                    if t_used_resolve == False and t_used_focus:
                                        aiMove = 5
                                    elif t_used_focus == False:
                                        aiMove = 2
                                    else:
                                        aiMove = 1
                                elif t_stamina >= 50 and (t_health >= o_health):
                                    if t_stamina >= o_stamina:
                                        aiMove = 4
                                    else:
                                        aiMove = 1
                                elif t_stamina >= 50:
                                    aiMove = 2
                                elif t_stamina >= 40 and (t_health >= o_health):
                                    aiMove = 1
                                elif t_stamina >= 40:
                                    aiMove = 2
                                elif t_stamina >= 30 and (t_health >= o_health):
                                    aiMove = 4
                                elif t_stamina >= 30:
                                    aiMove = 2
                                elif t_stamina >= 20 and (t_health >= o_health):
                                    aiMove = 1
                                elif t_stamina >= 20:
                                    aiMove = 4
                                elif t_stamina >= 10:
                                    aiMove = 1
                                else:
                                    aiMove = 0

                                if int(aiMove) == 0:
                                    t_health = 0
                                if int(aiMove) == 1:
                                    dmg = damage_cal(t_universe, t_card, t_1, t_attack, t_defense, o_defense, t_stamina,
                                                     t_enhancer_used, t_health, o_health, o_stamina, t_max_health,
                                                     o_attack, t_special_move_description, turn_total,
                                                     tcard_lvl_ap_buff)
                                elif int(aiMove) == 2:
                                    dmg = damage_cal(t_universe, t_card, t_2, t_attack, t_defense, o_defense, t_stamina,
                                                     t_enhancer_used, t_health, o_health, o_stamina, t_max_health,
                                                     o_attack, t_special_move_description, turn_total,
                                                     tcard_lvl_ap_buff)
                                elif int(aiMove) == 3:
                                    dmg = damage_cal(t_universe, t_card, t_3, t_attack, t_defense, o_defense, t_stamina,
                                                     t_enhancer_used, t_health, o_health, o_stamina, t_max_health,
                                                     o_attack, t_special_move_description, turn_total,
                                                     tcard_lvl_ap_buff)
                                    if t_gif != "N/A":
                                        await private_channel.send(f"{t_gif}")
                                elif int(aiMove) == 4:
                                    t_enhancer_used = True
                                    dmg = damage_cal(t_universe, t_card, t_enhancer, t_attack, t_defense, o_defense,
                                                     t_stamina, t_enhancer_used, t_health, o_health, o_stamina,
                                                     t_max_health, o_attack, t_special_move_description, turn_total,
                                                     tcard_lvl_ap_buff)
                                    t_enhancer_used = False
                                elif int(aiMove) == 5:
                                    if not t_used_resolve and t_used_focus:
                                        if t_universe == "My Hero Academia":  # My hero TRait
                                            # fortitude or luck is based on health
                                            fortitude = 0.0
                                            low = t_health - (t_health * .75)
                                            high = t_health - (t_health * .66)
                                            fortitude = random.randint(int(low), int(high))
                                            # Resolve Scaling
                                            t_resolve_health = round(fortitude + (.5 * t_resolve))
                                            t_resolve_attack = round(
                                                (.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                            t_resolve_defense = round(
                                                (.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                            tcard_lvl_ap_buff = tcard_lvl_ap_buff + 50

                                            t_stamina = t_stamina + t_resolve
                                            t_health = t_health + t_resolve_health
                                            t_attack = round(t_attack + t_resolve_attack)
                                            t_defense = round(t_defense - t_resolve_defense)
                                            t_used_resolve = True

                                            embedVar = discord.Embed(title=f"{t_card.upper()} PLUS ULTRAAA",
                                                                     description=f"**{t_card} says**\n{t_resolve_description}",
                                                                     colour=0xe91e63)
                                            embedVar.add_field(name=f"Transformation: Plus Ultra",
                                                               value="You do not lose a turn after you Resolve.")
                                            await ctx.send(embed=embedVar)
                                            turn_total = turn_total + 1
                                            turn = 1
                                        elif t_universe == "Attack On Titan":
                                            # fortitude or luck is based on health
                                            fortitude = 0.0
                                            low = t_health - (t_health * .75)
                                            high = t_health - (t_health * .66)
                                            fortitude = random.randint(int(low), int(high))
                                            # Resolve Scaling
                                            t_resolve_health = round(fortitude + (.5 * t_resolve))
                                            t_resolve_attack = round(
                                                (.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                            t_resolve_defense = round(
                                                (.30 * t_defense) * (t_resolve / (.50 * t_defense)))

                                            t_stamina = t_stamina + t_resolve
                                            t_health = t_health + t_resolve_health
                                            t_attack = round(t_attack + t_resolve_attack)
                                            t_defense = round(t_defense - t_resolve_defense)
                                            t_used_resolve = True
                                            t_pet_used = False
                                            health_boost = 100 * t_focus_count
                                            t_health = t_health + health_boost
                                            embedVar = discord.Embed(title=f"{t_card.upper()} Titan Mode",
                                                                     description=f"**{t_card} says**\n{t_resolve_description}",
                                                                     colour=0xe91e63)
                                            embedVar.add_field(name=f"Transformation Complete",
                                                               value=f"Health increased by **{health_boost}**!")
                                            await button_ctx.send(embed=embedVar)

                                            turn_total = turn_total + 1
                                            turn = 0

                                        elif t_universe == "Bleach":  # Bleach Trait
                                            # fortitude or luck is based on health
                                            fortitude = 0.0
                                            low = t_health - (t_health * .75)
                                            high = t_health - (t_health * .66)
                                            fortitude = random.randint(int(low), int(high))
                                            # Resolve Scaling
                                            t_resolve_health = round(fortitude + (.5 * t_resolve))
                                            t_resolve_attack = round(
                                                (.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                            t_resolve_defense = round(
                                                (.30 * t_defense) * (t_resolve / (.50 * t_defense)))

                                            t_stamina = t_stamina + t_resolve
                                            t_health = t_health + t_resolve_health
                                            t_attack = round((t_attack + (2 * t_resolve_attack)) * 2)
                                            t_defense = round(t_defense - t_resolve_defense)
                                            # if t_defense >= 120:
                                            # t_defense = 120
                                            t_used_resolve = True

                                            embedVar = discord.Embed(title=f"{t_card} STRENGTHENED RESOLVE :zap:",
                                                                     description=f"**{t_card} says**\n{t_resolve_description}",
                                                                     colour=0xe91e63)
                                            embedVar.add_field(name=f"Transformation: Bankai",
                                                               value="Gain double Attack on Resolve.")
                                            await ctx.send(embed=embedVar)
                                            turn_total = turn_total + 1
                                            turn = 0
                                        elif t_universe == "God Of War":  # God Of War Trait
                                            # fortitude or luck is based on health
                                            fortitude = 0.0
                                            low = t_health - (t_health * .75)
                                            high = t_health - (t_health * .66)
                                            fortitude = random.randint(int(low), int(high))
                                            # Resolve Scaling
                                            t_resolve_health = round(fortitude + (.5 * t_resolve))
                                            t_resolve_attack = round(
                                                (.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                            t_resolve_defense = round(
                                                (.30 * t_defense) * (t_resolve / (.50 * t_defense)))

                                            t_stamina = t_stamina + t_resolve
                                            t_health = t_max_health
                                            t_attack = round(t_attack + t_resolve_attack)
                                            t_defense = round(t_defense - t_resolve_defense)
                                            t_used_resolve = True

                                            embedVar = discord.Embed(title=f"{t_card} STRENGTHENED RESOLVE :zap:",
                                                                     description=f"**{t_card} says**\n{t_resolve_description}",
                                                                     colour=0xe91e63)
                                            embedVar.add_field(name=f"Transformation: Ascension",
                                                               value="On Resolve Refill Health.")
                                            await ctx.send(embed=embedVar)
                                            turn_total = turn_total + 1
                                            turn = 0
                                        elif t_universe == "Fate":  # Fate Trait
                                            # fortitude or luck is based on health
                                            fortitude = 0.0
                                            low = t_health - (t_health * .75)
                                            high = t_health - (t_health * .66)
                                            fortitude = random.randint(int(low), int(high))
                                            # Resolve Scaling
                                            t_resolve_health = round(fortitude + (.5 * t_resolve))
                                            t_resolve_attack = round(
                                                (.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                            t_resolve_defense = round(
                                                (.30 * t_defense) * (t_resolve / (.50 * t_defense)))

                                            t_stamina = t_stamina + t_resolve
                                            t_health = t_health + t_resolve_health
                                            t_attack = round(t_attack + t_resolve_attack)
                                            t_defense = round(t_defense - t_resolve_defense)
                                            t_used_resolve = True

                                            dmg = damage_cal(t_universe, t_card, t_3, t_attack, t_defense, o_defense,
                                                             t_stamina, t_enhancer_used, t_health, o_health, o_stamina,
                                                             t_max_health, o_attack, t_special_move_description,
                                                             turn_total, tcard_lvl_ap_buff)
                                            t_pet_used = False
                                            o_health = o_health - int(dmg['DMG'])
                                            embedVar = discord.Embed(
                                                title=f"{t_card} STRENGTHENED RESOLVE :zap:\n\n{dmg['MESSAGE']}",
                                                description=f"**{t_card} says**\n{t_resolve_description}",
                                                colour=0xe91e63)
                                            embedVar.add_field(name=f"Transformation: Command Seal",
                                                               value="On Resolve, Strike with Ultimate, then Focus.")
                                            await ctx.send(embed=embedVar)
                                            # t_stamina = 0
                                            turn_total = turn_total + 1
                                            turn = 0
                                        elif t_universe == "Kanto Region" or t_universe == "Johto Region" or t_universe == "Hoenn Region" or t_universe == "Sinnoh Region" or t_universe == "Kalos Region" or t_universe == "Unova Region" or t_universe == "Alola Region" or t_universe == "Galar Region":  # Pokemon Resolves
                                            # fortitude or luck is based on health
                                            fortitude = 0.0
                                            low = t_health - (t_health * .75)
                                            high = t_health - (t_health * .66)
                                            fortitude = random.randint(int(low), int(high))
                                            # Resolve Scaling
                                            t_resolve_health = round(fortitude + (.5 * t_resolve))
                                            t_resolve_attack = round(
                                                (.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                            t_resolve_defense = round(
                                                (.30 * t_defense) * (t_resolve / (.50 * t_defense)))

                                            t_stamina = t_stamina + t_resolve
                                            t_health = t_health + t_resolve_health
                                            t_attack = round(t_attack + t_resolve_attack)
                                            t_defense = round(t_defense) * 2
                                            t_used_resolve = True

                                            embedVar = discord.Embed(title=f"{t_card} STRENGTHENED RESOLVE :zap:",
                                                                     description=f"**{t_card} says**\n{t_resolve_description}",
                                                                     colour=0xe91e63)
                                            embedVar.add_field(name=f"Transformation: Evolution",
                                                               value="When you Resolve you do not lose Defense.")
                                            await ctx.send(embed=embedVar)
                                            turn_total = turn_total + 1
                                            turn = 0
                                        else:
                                            # fortitude or luck is based on health
                                            fortitude = 0.0
                                            low = t_health - (t_health * .75)
                                            high = t_health - (t_health * .66)
                                            fortitude = random.randint(int(low), int(high))
                                            # Resolve Scaling
                                            t_resolve_health = round(fortitude + (.5 * t_resolve))
                                            t_resolve_attack = round(
                                                (.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                            t_resolve_defense = round(
                                                (.30 * t_defense) * (t_resolve / (.50 * t_defense)))

                                            t_stamina = t_stamina + t_resolve
                                            t_health = t_health + t_resolve_health
                                            t_attack = round(t_attack + t_resolve_attack)
                                            t_defense = round(t_defense - t_resolve_defense)
                                            t_used_resolve = True

                                            if t_universe == "League Of Legends":
                                                o_health = o_health - (30 * (o_focus_count + t_focus_count))
                                                embedVar = discord.Embed(title=f"{t_card.upper()} PENTA KILL!",
                                                                         description=f"**{t_card} says**\n{t_resolve_description}",
                                                                         colour=0xe91e63)
                                                embedVar.add_field(name=f"Nexus Destroyed",
                                                                   value=f"**{t_card}** dealt **{(30 * (o_focus_count + t_focus_count))}** damage.")
                                            else:
                                                embedVar = discord.Embed(title=f"{t_card} STRENGTHENED RESOLVE :zap:",
                                                                         description=f"**{t_card} says**\n{t_resolve_description}",
                                                                         colour=0xe91e63)
                                                embedVar.add_field(name=f"Transformation",
                                                                   value="All stats & stamina greatly increased")
                                            await ctx.send(embed=embedVar)
                                            turn_total = turn_total + 1
                                            turn = 0
                                    else:
                                        await ctx.send(m.CANNOT_USE_RESOLVE)
                                        turn = 1
                                elif int(aiMove) == 6:
                                    # Resolve Check and Calculation
                                    if t_used_resolve and t_used_focus and not t_pet_used:
                                        t_enhancer_used = True
                                        dmg = damage_cal(t_universe, t_card, tpet_move, t_attack, t_defense, o_defense,
                                                         t_stamina, t_enhancer_used, t_health, o_health, o_stamina,
                                                         t_max_health, o_attack, t_special_move_description, turn_total,
                                                         tcard_lvl_ap_buff)
                                        t_enhancer_used = False
                                        t_pet_used = True
                                        tpet_dmg = dmg['DMG']
                                        tpet_type = dmg['ENHANCED_TYPE']
                                        if dmg['CAN_USE_MOVE']:
                                            if tpet_type == 'ATK':
                                                t_attack = round(t_attack + dmg['DMG'])
                                            elif tpet_type == 'DEF':
                                                t_defense = round(t_defense + dmg['DMG'])
                                            elif tpet_type == 'STAM':
                                                t_stamina = round(t_stamina + dmg['DMG'])
                                            elif tpet_type == 'HLT':
                                                t_health = round(t_health + dmg['DMG'])
                                            elif tpet_type == 'LIFE':
                                                t_health = round(t_health + dmg['DMG'])
                                                o_health = round(o_health - dmg['DMG'])
                                            elif tpet_type == 'DRAIN':
                                                t_stamina = round(t_stamina + dmg['DMG'])
                                                o_stamina = round(o_stamina - dmg['DMG'])
                                            elif tpet_type == 'FLOG':
                                                t_attack = round(t_attack + dmg['DMG'])
                                                o_attack = round(o_attack - dmg['DMG'])
                                            elif tpet_type == 'WITHER':
                                                t_defense = round(t_defense + dmg['DMG'])
                                                o_defense = round(o_defense - dmg['DMG'])
                                            elif tpet_type == 'RAGE':
                                                t_defense = round(t_defense - dmg['DMG'])
                                                t_attack = round(t_attack + dmg['DMG'])
                                            elif tpet_type == 'BRACE':
                                                t_defense = round(t_defense + dmg['DMG'])
                                                t_attack = round(t_attack - dmg['DMG'])
                                            elif tpet_type == 'BZRK':
                                                t_health = round(t_health - dmg['DMG'])
                                                t_attack = round(t_attack + dmg['DMG'])
                                            elif tpet_type == 'CRYSTAL':
                                                t_health = round(t_health - dmg['DMG'])
                                                t_defense = round(t_defense + dmg['DMG'])
                                            elif tpet_type == 'GROWTH':
                                                t_max_health = round(t_max_health - dmg['DMG'])
                                                t_defense = round(t_defense + (dmg['DMG'] * .5))
                                                t_attack = round(t_attack + (dmg['DMG'] * .5))
                                            elif tpet_type == 'STANCE':
                                                tempattack = dmg['DMG']
                                                t_attack = t_defense
                                                t_defense = tempattack
                                            elif tpet_type == 'CONFUSE':
                                                tempattack = dmg['DMG']
                                                o_attack = o_defense
                                                o_defense = tempattack
                                            elif tpet_type == 'BLINK':
                                                t_stamina = round(t_stamina - dmg['DMG'])
                                                o_stamina = round(o_stamina + dmg['DMG'] - 10)
                                            elif tpet_type == 'SLOW':
                                                tempstam = round(o_stamina + dmg['DMG'])
                                                t_stamina = round(t_stamina - dmg['DMG'])
                                                o_stamina = t_stamina
                                                t_stamina = tempstam
                                            elif tpet_type == 'HASTE':
                                                tempstam = round(o_stamina - dmg['DMG'])
                                                t_stamina = round(t_stamina + dmg['DMG'])
                                                o_stamina = t_stamina
                                                t_stamina = tempstam
                                            elif tpet_type == 'SOULCHAIN':
                                                t_stamina = round(dmg['DMG'])
                                                o_stamina = t_stamina
                                            elif tpet_type == 'GAMBLE':
                                                t_health = round(dmg['DMG'])
                                                o_health = t_health
                                            elif tpet_type == 'FEAR':
                                                t_max_health = round(t_max_health - dmg['DMG'])
                                                o_defense = round(o_defense - (dmg['DMG'] * .5))
                                                o_attack = round(o_attack - (dmg['DMG'] * .5))
                                            elif tpet_type == 'WAVE':
                                                o_health = round(o_health - dmg['DMG'])
                                            elif tpet_type == 'BLAST':
                                                if dmg['DMG'] >= 100:
                                                    dmg['DMG'] = 100
                                                o_health = round(o_health - dmg['DMG'])
                                            elif tpet_type == 'CREATION':
                                                t_max_health = round(t_max_health + dmg['DMG'])
                                                t_health = round(t_health + dmg['DMG'])
                                            elif tpet_type == 'DESTRUCTION':
                                                o_max_health = round(o_max_health - dmg['DMG'])
                                            t_stamina = t_stamina - int(dmg['STAMINA_USED'])

                                            embedVar = discord.Embed(
                                                title=f"{t_card.upper()} Summoned :bird: {tpet_name}", colour=0xe91e63)
                                            embedVar.add_field(name=f"{tpet_name} used **{tpetmove_text}**!",
                                                               value=f"Enhanced **{tpet_type}**")
                                            embedVar.set_thumbnail(url=tpet_image)
                                            embedVar.set_image(url="attachment://image.png")
                                            await private_channel.send(embed=embedVar)
                                            turn = 1
                                        else:
                                            await private_channel.send(f"{tpet_name} needs a turn to rest...")
                                            turn = 1
                                    else:
                                        await ctx.send(f"{tpet_name} needs a turn to rest...")

                                if int(aiMove) != 5 and int(aiMove) != 6:
                                    # If you have enough stamina for move, use it
                                    if dmg['CAN_USE_MOVE']:
                                        t_pet_used = False
                                        if dmg['ENHANCE']:
                                            enh_type = dmg['ENHANCED_TYPE']
                                            if enh_type == 'ATK':
                                                t_attack = round(t_attack + dmg['DMG'])
                                            elif enh_type == 'DEF':
                                                t_defense = round(t_defense + dmg['DMG'])
                                            elif enh_type == 'STAM':
                                                t_stamina = round(t_stamina + dmg['DMG'])
                                            elif enh_type == 'HLT':
                                                t_health = round(t_health + dmg['DMG'])
                                            elif enh_type == 'LIFE':
                                                t_health = round(t_health + dmg['DMG'])
                                                o_health = round(o_health - dmg['DMG'])
                                            elif enh_type == 'DRAIN':
                                                t_stamina = round(t_stamina + dmg['DMG'])
                                                o_stamina = round(o_stamina - dmg['DMG'])
                                            elif enh_type == 'FLOG':
                                                t_attack = round(t_attack + dmg['DMG'])
                                                o_attack = round(o_attack - dmg['DMG'])
                                            elif enh_type == 'WITHER':
                                                t_defense = round(t_defense + dmg['DMG'])
                                                o_defense = round(o_defense - dmg['DMG'])
                                            elif enh_type == 'RAGE':
                                                t_defense = round(t_defense - dmg['DMG'])
                                                t_attack = round(t_attack + dmg['DMG'])
                                            elif enh_type == 'BRACE':
                                                t_defense = round(t_defense + dmg['DMG'])
                                                t_attack = round(t_attack - dmg['DMG'])
                                            elif enh_type == 'BZRK':
                                                t_health = round(t_health - dmg['DMG'])
                                                t_attack = round(t_attack + (.75 * dmg['DMG']))
                                            elif enh_type == 'CRYSTAL':
                                                t_health = round(t_health - dmg['DMG'])
                                                t_defense = round(t_defense + dmg['DMG'])
                                            elif enh_type == 'GROWTH':
                                                t_max_health = round(t_max_health - dmg['DMG'])
                                                t_defense = round(t_defense + (dmg['DMG'] * .5))
                                                t_attack = round(t_attack + (dmg['DMG'] * .5))
                                            elif enh_type == 'STANCE':
                                                tempattack = dmg['DMG']
                                                t_attack = t_defense
                                                t_defense = tempattack
                                            elif enh_type == 'CONFUSE':
                                                tempattack = dmg['DMG']
                                                o_attack = o_defense
                                                o_defense = tempattack
                                            elif enh_type == 'BLINK':
                                                t_stamina = round(t_stamina - dmg['DMG'])
                                                o_stamina = round(o_stamina + dmg['DMG'] - 10)
                                            elif enh_type == 'SLOW':
                                                tempstam = round(o_stamina + dmg['DMG'])
                                                t_stamina = round(t_stamina - dmg['DMG'])
                                                o_stamina = t_stamina
                                                t_stamina = tempstam
                                            elif enh_type == 'HASTE':
                                                tempstam = round(o_stamina - dmg['DMG'])
                                                t_stamina = round(t_stamina + dmg['DMG'])
                                                o_stamina = t_stamina
                                                t_stamina = tempstam
                                            elif enh_type == 'SOULCHAIN':
                                                t_stamina = round(dmg['DMG'])
                                                o_stamina = t_stamina
                                            elif enh_type == 'GAMBLE':
                                                t_health = round(dmg['DMG'])
                                                o_health = t_health
                                            elif enh_type == 'FEAR':
                                                t_max_health = round(t_max_health - dmg['DMG'])
                                                o_defense = round(o_defense - (dmg['DMG'] * .5))
                                                o_attack = round(o_attack - (dmg['DMG'] * .5))
                                            elif enh_type == 'WAVE':
                                                o_health = round(o_health - dmg['DMG'])
                                            elif enh_type == 'BLAST':
                                                o_health = round(o_health - dmg['DMG'])
                                            elif enh_type == 'CREATION':
                                                t_max_health = round(t_max_health + dmg['DMG'])
                                                t_health = round(t_health + dmg['DMG'])
                                            elif enh_type == 'DESTRUCTION':
                                                o_max_health = round(o_max_health - dmg['DMG'])
                                            t_stamina = t_stamina - int(dmg['STAMINA_USED'])

                                            embedVar = discord.Embed(title=f"{dmg['MESSAGE']}", colour=embed_color_t)
                                            await ctx.send(embed=embedVar)
                                            turn_total = turn_total + 1
                                            turn = 0
                                        elif dmg['DMG'] == 0:
                                            t_stamina = t_stamina - int(dmg['STAMINA_USED'])
                                            embedVar = discord.Embed(title=f"{dmg['MESSAGE']}", colour=embed_color_t)
                                            if tarm_barrier_active:
                                                tarm_barrier_active=False
                                                embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                            await ctx.send(embed=embedVar)
                                            turn_total = turn_total + 1
                                            turn = 0
                                        else:
                                            if o_universe == "Naruto" and o_stamina < 10:
                                                o_health = o_health 
                                                embedVar = discord.Embed(title=f"{o_card.upper()}: Substitution Jutsu", description=f"{t_card} strikes a log", colour=0xe91e63)
                                                if tarm_barrier_active:
                                                    tarm_barrier_active=False
                                                    embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                await ctx.send(embed=embedVar)
                                            elif oarm_shield_active:
                                                if oshield_value > 0:
                                                    oshield_value = oshield_value -dmg['DMG']
                                                    o_health = o_health 
                                                    if oshield_value <=0:
                                                        embedVar = discord.Embed(title=f"{o_card.upper()}'s' **Shield** Shattered!", description=f"{t_card} breaks the **Shield**!", colour=0xe91e63)
                                                        if tarm_barrier_active:
                                                            tarm_barrier_active=False
                                                            embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                        await button_ctx.send(embed=embedVar)
                                                        oarm_shield_active = False
                                                    else:
                                                        embedVar = discord.Embed(title=f"{o_card.upper()} Activates **Shield** 🌐", description=f"{t_card} strikes the **Shield** for **{dmg['DMG']} DMG!**\n **{oshield_value} Shield** Left!", colour=0xe91e63)
                                                        if tarm_barrier_active:
                                                            tarm_barrier_active=False
                                                            embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                        await button_ctx.send(embed=embedVar)

                                            elif oarm_barrier_active:
                                                if obarrier_count >1:
                                                    o_health = o_health 
                                                    embedVar = discord.Embed(title=f"{o_card.upper()} Activates **Barrier** 💠", description=f"{t_card}'s attack **Nullified**!\n {obarrier_count - 1} **Barriers** remain!", colour=0xe91e63)
                                                    if tarm_barrier_active:
                                                        tarm_barrier_active=False
                                                        embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                    await button_ctx.send(embed=embedVar)
                                                    obarrier_count = obarrier_count - 1
                                                elif obarrier_count==1:
                                                    embedVar = discord.Embed(title=f"{o_card.upper()}'s **Barrier** Broken!", description=f"{t_card} destroys the **Barrier**", colour=0xe91e63)
                                                    obarrier_count = obarrier_count - 1
                                                    if tarm_barrier_active:
                                                        tarm_barrier_active=False
                                                        embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                    await button_ctx.send(embed=embedVar)
                                                    oarm_barrier_active = False
                                            elif oarm_parry_active:
                                                if oparry_count > 1:
                                                    oparry_damage = round(dmg['DMG'] / 2)
                                                    o_health = o_health - oparry_damage
                                                    t_health = t_health - oparry_damage
                                                    oparry_count = oparry_count - 1
                                                    embedVar = discord.Embed(title=f"{o_card.upper()} Activates **Parry** 🔄", description=f"{t_card} takes {oparry_damage}! DMG\n **{oparry_count} Parries** to go!!", colour=0xe91e63)
                                                    if tarm_barrier_active:
                                                        tarm_barrier_active=False
                                                        embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                    await button_ctx.send(embed=embedVar)
                                                    
                                                elif oparry_count==1:
                                                    embedVar = discord.Embed(title=f"{o_card.upper()} **Parry** Penetrated!!", description=f"{t_card} breaks the **Parry**", colour=0xe91e63)
                                                    oparry_damage = round(dmg['DMG'] / 2)
                                                    o_health = o_health - oparry_damage
                                                    t_health = t_health - oparry_damage
                                                    oparry_count = oparry_count - 1
                                                    if tarm_barrier_active:
                                                        tarm_barrier_active=False
                                                        embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                    await button_ctx.send(embed=embedVar)
                                                    oarm_parry_active = False
                                            else:
                                                o_health = o_health - int(dmg['DMG'])
                                                embedVar = discord.Embed(title=f"{dmg['MESSAGE']}", colour=embed_color_t)
                                                if tarm_barrier_active:
                                                    tarm_barrier_active=False
                                                    embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                await ctx.send(embed=embedVar)
                                            if o_health <= 0:
                                                if o_final_stand==True:
                                                    embedVar = discord.Embed(title=f"{o_card.upper()}'s LAST STAND", description=f"{o_card} FINDS RESOLVE", colour=0xe91e63)
                                                    embedVar.add_field(name=f"{o_card} resolved and continues to fight", value="All stats & stamina increased")
                                                    if tarm_barrier_active:
                                                        tarm_barrier_active=False
                                                        embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                    await private_channel.send(embed=embedVar)
                                                    o_health = int(.75 * (o_attack + o_defense))
                                                    o_attack = o_attack + (.50 * o_attack)
                                                    o_defense = o_defense + (.50 * o_defense)
                                                    o_stamina = 100
                                                    o_used_resolve = True
                                                    o_final_stand = False
                                                    o_used_focus = True
                                                    t_stamina = t_stamina - int(dmg['STAMINA_USED'])
                                                    turn_total = turn_total + 1
                                                    turn = 0
                                                else:
                                                    o_health = 0
                                                    t_stamina = t_stamina - int(dmg['STAMINA_USED'])
                                                    turn_total = turn_total + 1
                                            else:
                                                t_stamina = t_stamina - int(dmg['STAMINA_USED'])
                                                turn_total = turn_total + 1
                                                turn = 0

                                    else:
                                        await ctx.send(m.NOT_ENOUGH_STAMINA)
                                        turn = 1
                # End the match
                else:
                    # Player 1 Turn Start
                    if turn == 0:
                        await asyncio.sleep(1)
                        if o_block_used == True:
                            o_defense = int(o_defense / 2)
                            o_block_used = False
                        if o_defend_used == True:
                            o_defense = int(o_defense / 2)
                            o_defend_used = False
                        if o_universe == "Death Note" and turn_total == 0:
                            embedVar = discord.Embed(title=f"{o_card.upper()} Scheduled Death 📓",
                                                     description=f"**{o_card} says**\nYou will die in 24 turns...",
                                                     colour=0xe91e63)
                            await private_channel.send(embed=embedVar)

                        if mode in B_modes:
                            embedVar = discord.Embed(title=f"**{t_card}** Boss of `{t_universe}`",
                                                     description=f"*{t_description}*", colour=0xe91e63)
                            embedVar.add_field(name=f"{t_arena}", value=f"{t_arenades}")
                            embedVar.add_field(name=f"Entering the {t_arena}", value=f"{t_entrance}", inline=False)
                            embedVar.set_footer(text=f"{t_card} waits for you to strike....")
                        if mode in co_op_modes:
                            if c_universe == "Death Note" and turn_total == 0:
                                embedVar = discord.Embed(title=f"{c_card.upper()} Scheduled Death 📓",
                                                         description=f"**{c_card} says**\nYou will die in 24 turns...",
                                                         colour=0xe91e63)
                                await private_channel.send(embed=embedVar)
                        if t_universe == 'Death Note' and turn_total == 0:
                            embedVar = discord.Embed(title=f"{o_card.upper()} Scheduled Death 📓",
                                                     description=f"**{t_card} says**\nYou will die in 24 turns...",
                                                     colour=0xe91e63)
                            await private_channel.send(embed=embedVar)
                        if o_attack <= 25:
                            o_attack = 25
                        if o_defense <= 30:
                            o_defense = 30
                        if o_health >= o_max_health:
                            o_health = o_max_health

                        # Tutorial Instructions
                        if turn_total == 0:
                            if mode in B_modes:
                                embedVar = discord.Embed(title=f"**{t_card}** Boss of `{t_universe}`",
                                                         description=f"*{t_description}*", colour=0xe91e63)
                                embedVar.add_field(name=f"{t_arena}", value=f"{t_arenades}")
                                embedVar.add_field(name=f"Entering the {t_arena}", value=f"{t_entrance}", inline=False)
                                embedVar.set_footer(text=f"{t_card} waits for you to strike....")
                                await asyncio.sleep(5)
                            elif mode in co_op_modes and mode not in B_modes:
                                embedVar = discord.Embed(
                                    title=f"**{o_card}** & **{c_card}** VS **{t_card}** has begun! {lineup}\n{t_universe} {mode} Battle",
                                    description=f"`{o_card} Says:`\n{o_greeting_description}", colour=0xe91e63)
                            elif mode in AUTO_BATTLE_modes:
                                embedVar = discord.Embed(
                                    title=f"**{o_card}** VS **{t_card}** has begun! {lineup}\n{t_universe} {mode} Battle\nThe Result of this Automated Battle will be reported soon.",
                                    colour=0xe91e63)
                            elif randomized_battle:
                                embedVar = discord.Embed(
                                    title=f"**{o_card}** VS **{t_card}** has begun!\n{t_universe} {mode} Battle",
                                    description=f"`{o_card} Says:`\n{o_greeting_description}", colour=0xe91e63)
                            else:
                                embedVar = discord.Embed(
                                    title=f"**{o_card}** VS **{t_card}** has begun!\n{lineup}\n{t_universe} {mode} Battle",
                                    description=f"`{o_card} Says:`\n{o_greeting_description}", colour=0xe91e63)

                            await private_channel.send(embed=embedVar)

                        if o_health <= (o_max_health * .25):
                            embed_color_o = 0xe74c3c
                            if o_chainsaw == True:
                                if o_atk_chainsaw == False:
                                    o_atk_chainsaw = True
                                    o_chainsaw = False
                                    o_defense = o_defense * 2
                                    o_attack = o_attack * 2
                                    embedVar = discord.Embed(title=f"{o_card.upper()}'s Devilization",
                                                             description=f"**{o_card}** Doubles ATK and DEF",
                                                             colour=0xe91e63)
                                    await private_channel.send(embed=embedVar)

                        elif o_health <= (o_max_health * .50):
                            embed_color_o = 0xe67e22
                            if o_chainsaw == True:
                                if o_atk_chainsaw == False:
                                    o_atk_chainsaw = True
                                    o_chainsaw = False
                                    o_defense = o_defense * 2
                                    o_attack = o_attack * 2
                                    embedVar = discord.Embed(title=f"{o_card.upper()}'s Devilization",
                                                             description=f"**{o_card}** Doubles ATK and DEF",
                                                             colour=0xe91e63)
                                    await private_channel.send(embed=embedVar)
                        elif o_health <= (o_max_health * .75):
                            embed_color_o = 0xf1c40f
                        else:
                            embed_color_o = 0x2ecc71

                        if o_stamina < 10:
                            o_focus_count = o_focus_count + 1
                            if mode in B_modes:
                                embedVar = discord.Embed(title=f"{t_punish}")
                                embedVar.add_field(name=f"{t_arena}", value=f"{t_world}", inline=False)
                                embedVar.set_footer(text=f"{t_assault}")
                                await private_channel.send(embed=embedVar)
                                await asyncio.sleep(5)
                            # fortitude or luck is based on health
                            fortitude = 0.0
                            low = o_health - (o_health * .90)
                            high = o_health - (o_health * .80)
                            fortitude = random.randint(int(low), int(high))

                            o_stamina = o_focus
                            o_healthcalc = round(((o_focus * .40) + (fortitude * 1)) / 2)
                            o_attackcalc = round(.20 * ((o_focus * .15) + round(fortitude * 1)))
                            o_defensecalc = round(.20 * ((o_focus * .15) + round(fortitude * 1)))
                            # check if user is at max health and sets messages and focus health value
                            o_newhealth = 0
                            healmessage = ""
                            messagenumber = 0
                            if o_universe == "Crown Rift Madness":
                                healmessage = "yet inner **Madness** drags on..."
                                messagenumber = 3
                            else:
                                if o_health <= o_max_health:
                                    o_newhealth = o_health + o_healthcalc
                                    if o_newhealth > o_max_health:
                                        healmessage = "the injuries dissapeared"
                                        messagenumber = 1
                                        o_health = o_max_health
                                    else:
                                        healmessage = "regained some vitality"
                                        messagenumber = 2
                                        o_health = o_newhealth
                                else:
                                    healmessage = f"**{t_card}**'s blows don't appear to have any effect!"
                                    messagenumber = 0
                            if not o_used_resolve:
                                o_attack = o_attack + o_attackcalc
                                o_defense = o_defense + o_defensecalc
                            o_used_focus = True

                            # embedVar = discord.Embed(title=f"{o_card.upper()} FOCUSED", description=f"**{o_card} says**\n{o_focus_description}", colour=0xe91e63)
                            # embedVar.add_field(name=f"{o_card} focused and {healmessage}", value="All stats & stamina increased")
                            # await private_channel.send(embed=embedVar)

                            # Resolve Check and Calculation
                            if not o_used_resolve and o_used_focus and o_universe == "Digimon":  # Digimon Universal Trait
                                embedVar = discord.Embed(title=f"{o_card} STRENGTHENED RESOLVE :zap:",
                                                         description=f"**{o_card} says**\n{o_resolve_description}",
                                                         colour=0xe91e63)
                                embedVar.add_field(name=f"Transformation: Digivolve", value="On Focus you Resolve.")
                                await private_channel.send(embed=embedVar)
                                # fortitude or luck is based on health
                                fortitude = 0.0
                                low = o_health - (o_health * .75)
                                high = o_health - (o_health * .66)
                                fortitude = random.randint(int(low), int(high))
                                # Resolve Scaling
                                o_resolve_health = round(fortitude + (.5 * o_resolve))
                                o_resolve_attack = round((.30 * o_defense) * (o_resolve / (.50 * o_defense)))
                                o_resolve_defense = round((.30 * o_defense) * (o_resolve / (.50 * o_defense)))

                                o_stamina = o_stamina + o_resolve
                                o_health = o_health + o_resolve_health
                                o_attack = round(o_attack + o_resolve_attack)
                                o_defense = round(o_defense - o_resolve_defense)
                                o_used_resolve = True
                                o_pet_used = False

                            elif o_universe == "League Of Legends":
                                embedVar = discord.Embed(title=f"Turret Shot hits {t_card} for **30** Damage 💥",
                                                         colour=0xe91e63)
                                await private_channel.send(embed=embedVar)
                                t_health = round(t_health - 30)

                            elif o_universe == "Solo Leveling":
                                embedVar = discord.Embed(
                                    title=f"Ruler's Authority... Opponent loses **{30 + turn_total}** 🛡️ 🔻",
                                    colour=0xe91e63)
                                await private_channel.send(embed=embedVar)
                                t_defense = round(t_defense - (30 + turn_total))

                            elif o_universe == "Attack On Titan":
                                embedVar = discord.Embed(title=f"Rally! **{o_card}** Increased Max Health ❤️",
                                                         colour=0xe91e63)
                                await private_channel.send(embed=embedVar)
                                o_max_health = round(o_max_health + 100)

                            elif o_universe == "Black Clover":
                                embedVar = discord.Embed(title=f"Mana Zone! {o_card} Increased Stamina 🌀",
                                                         colour=0xe91e63)
                                await private_channel.send(embed=embedVar)
                                o_stamina = 100
                                ocard_lvl_ap_buff = ocard_lvl_ap_buff + 30
                            elif o_universe == "Death Note":
                                if turn_total >= 24:
                                    if t_universe == "Death Note":
                                        embedVar = discord.Embed(title=f"{o_card.upper()}'s' Scheduled Death 📓",
                                                                 description=f"**{t_card} says**\n**Delete**",
                                                                 colour=0xe91e63)
                                        embedVar.add_field(name=f"{o_card} had a heart attack and died",
                                                           value=f"You cannot cheat a Shinigami in the Shinagami Realm....")
                                        await private_channel.send(embed=embedVar)
                                        o_health = 0
                                    else:
                                        embedVar = discord.Embed(title=f"{t_card.upper()}'s' Scheduled Death 📓",
                                                                 description=f"**{o_card} says**\n**Delete**",
                                                                 colour=0xe91e63)
                                        embedVar.add_field(name=f"{t_card} had a heart attack and died",
                                                           value=f"Death....")
                                        await private_channel.send(embed=embedVar)
                                        t_health = 0

                            if t_universe == "One Punch Man":
                                embedVar = discord.Embed(
                                    title=f"Hero Reinforcements! {t_card}  Increased Health & Max Health ❤️",
                                    colour=0xe91e63)
                                await private_channel.send(embed=embedVar)
                                t_health = round(t_health + 100)
                                t_max_health = round(t_max_health + 100)

                            elif t_universe == "7ds":
                                embedVar = discord.Embed(title=f"Increase Power Level! {t_card} Increased Stamina 🌀",
                                                         colour=0xe91e63)
                                await private_channel.send(embed=embedVar)
                                t_stamina = t_stamina + 80

                            elif t_universe == "Souls":
                                embedVar = discord.Embed(
                                    title=f"Combo Recognition! {t_card} Increased Attack by **{30 + turn_total}** 🔺 ",
                                    colour=0xe91e63)
                                await private_channel.send(embed=embedVar)
                                t_attack = round(t_attack + (30 + turn_total))

                            else:
                                turn_total = turn_total + 1
                                if o_universe != "Crown Rift Madness":
                                    turn = 1
                                else:
                                    turn = 0
                            turn_total = turn_total + 1
                            if o_universe != "Crown Rift Madness":
                                turn = 1
                            else:
                                turn = 0
                        else:
                            if mode in AUTO_BATTLE_modes:
                                aiMove = 0
                                if turn_total == 0 and o_enhancer['TYPE'] in Turn_Enhancer_Check:
                                    if o_stamina >= 20:
                                        aiMove = 4
                                    else:
                                        aiMove = 1
                                elif t_stamina < 10:
                                    aiMove = 1
                                elif o_health <= (.50 * o_max_health) and o_used_resolve == False and o_used_focus:
                                    aiMove = 5
                                elif o_stamina >= 160 and (o_health >= t_health):
                                    aiMove = 3
                                elif o_stamina >= 160:
                                    aiMove = 3
                                elif o_stamina >= 150 and (o_health >= t_health):
                                    aiMove = 1
                                elif o_stamina >= 150:
                                    aiMove = 1
                                elif o_stamina >= 140 and (o_health >= t_health):
                                    aiMove = 1
                                elif o_stamina >= 140:
                                    aiMove = 3
                                elif o_stamina >= 130 and (o_health >= t_health):
                                    aiMove = 1
                                elif o_stamina >= 130:
                                    aiMove = 3
                                elif o_stamina >= 120 and (o_health >= t_health):
                                    aiMove = 2
                                elif o_stamina >= 120:
                                    aiMove = 3
                                elif o_stamina >= 110 and (o_health >= t_health):
                                    aiMove = 1
                                elif o_stamina >= 110:
                                    aiMove = 2
                                elif o_stamina >= 100 and (o_health >= t_health):
                                    if o_enhancer['TYPE'] in Healer_Enhancer_Check:
                                        aiMove = 3
                                    elif o_enhancer['TYPE'] in Support_Enhancer_Check or o_enhancer[
                                        'TYPE'] in Stamina_Enhancer_Check:
                                        aiMove = 4
                                    else:
                                        aiMove = 1
                                elif o_stamina >= 100:
                                    aiMove = 1
                                elif o_stamina >= 90 and (o_health >= t_health):
                                    aiMove = 3
                                elif o_stamina >= 90:
                                    if o_enhancer['TYPE'] in Control_Enhancer_Check:
                                        aiMove = 4
                                    else:
                                        aiMove = 2
                                elif o_stamina >= 80 and (o_health >= t_health):
                                    aiMove = 1
                                elif o_stamina >= 80:
                                    aiMove = 3
                                elif o_stamina >= 70 and (o_health >= t_health):
                                    aiMove = 2
                                elif o_stamina >= 70:
                                    aiMove = 1
                                elif o_stamina >= 60 and (o_health >= t_health):
                                    if o_used_resolve == False and o_used_focus:
                                        aiMove = 5
                                    elif o_used_focus == False:
                                        aiMove = 2
                                    else:
                                        aiMove = 1
                                elif o_stamina >= 60:
                                    if o_used_resolve == False and o_used_focus:
                                        aiMove = 5
                                    elif o_used_focus == False:
                                        aiMove = 2
                                    else:
                                        aiMove = 1
                                elif o_stamina >= 50 and (o_health >= t_health):
                                    if o_stamina >= o_stamina:
                                        if o_enhancer['TYPE'] in Control_Enhancer_Check:
                                            aiMove = 2
                                        else:
                                            aiMove = 4
                                    else:
                                        aiMove = 1
                                elif o_stamina >= 50:
                                    aiMove = 2
                                elif o_stamina >= 40 and (o_health >= t_health):
                                    aiMove = 1
                                elif o_stamina >= 40:
                                    if o_enhancer['TYPE'] in Control_Enhancer_Check:
                                        aiMove = 0
                                    else:
                                        aiMove = 2
                                elif o_stamina >= 30 and (o_health >= t_health):
                                    if o_enhancer['TYPE'] in Control_Enhancer_Check:
                                        aiMove = 2
                                    else:
                                        aiMove = 4
                                elif o_stamina >= 30:
                                    aiMove = 2
                                elif o_stamina >= 20 and (o_health >= t_health):
                                    aiMove = 1
                                elif o_stamina >= 20:
                                    if o_enhancer['TYPE'] in Control_Enhancer_Check:
                                        aiMove = 0
                                    else:
                                        aiMove = 4
                                elif o_stamina >= 10:
                                    aiMove = 1
                                else:
                                    aiMove = 1

                                # Make sure user is responding with move

                                if aiMove == 1:

                                    dmg = damage_cal(o_universe, o_card, o_1, o_attack, o_defense, t_defense, o_stamina,
                                                     o_enhancer_used, o_health, t_health, t_stamina, o_max_health,
                                                     t_attack, o_special_move_description, turn_total,
                                                     ocard_lvl_ap_buff)
                                elif aiMove == 2:

                                    dmg = damage_cal(o_universe, o_card, o_2, o_attack, o_defense, t_defense, o_stamina,
                                                     o_enhancer_used, o_health, t_health, t_stamina, o_max_health,
                                                     t_attack, o_special_move_description, turn_total,
                                                     ocard_lvl_ap_buff)
                                elif aiMove == 3:

                                    dmg = damage_cal(o_universe, o_card, o_3, o_attack, o_defense, t_defense, o_stamina,
                                                     o_enhancer_used, o_health, t_health, t_stamina, o_max_health,
                                                     t_attack, o_special_move_description, turn_total,
                                                     ocard_lvl_ap_buff)
                                elif aiMove == 4:
                                    o_enhancer_used = True

                                    dmg = damage_cal(o_universe, o_card, o_enhancer, o_attack, o_defense, t_defense,
                                                     o_stamina, o_enhancer_used, o_health, t_health, t_stamina,
                                                     o_max_health, t_attack, o_special_move_description, turn_total,
                                                     ocard_lvl_ap_buff)
                                    o_enhancer_used = False
                                elif aiMove == 5:
                                    # Resolve Check and Calculation
                                    if not o_used_resolve and o_used_focus:
                                        if o_universe == "My Hero Academia":  # My Hero Trait
                                            # fortitude or luck is based on health
                                            fortitude = 0.0
                                            low = o_health - (o_health * .75)
                                            high = o_health - (o_health * .66)
                                            fortitude = random.randint(int(low), int(high))
                                            # Resolve Scaling
                                            o_resolve_health = round(fortitude + (.5 * o_resolve))
                                            o_resolve_attack = round(
                                                (.30 * o_defense) * (o_resolve / (.50 * o_defense)))
                                            o_resolve_defense = round(
                                                (.30 * o_defense) * (o_resolve / (.50 * o_defense)))

                                            o_stamina = o_stamina + o_resolve
                                            o_health = o_health + o_resolve_health
                                            o_attack = round(o_attack + o_resolve_attack)
                                            o_defense = round(o_defense - o_resolve_defense)
                                            o_used_resolve = True
                                            o_pet_used = False
                                            ocard_lvl_ap_buff = ocard_lvl_ap_buff + 50

                                            turn_total = turn_total + 1
                                            turn = 0
                                        elif o_universe == "Attack On Titan":
                                            # fortitude or luck is based on health
                                            fortitude = 0.0
                                            low = o_health - (o_health * .75)
                                            high = o_health - (o_health * .66)
                                            fortitude = random.randint(int(low), int(high))
                                            # Resolve Scaling
                                            o_resolve_health = round(fortitude + (.5 * o_resolve))
                                            o_resolve_attack = round(
                                                (.30 * o_defense) * (o_resolve / (.50 * o_defense)))
                                            o_resolve_defense = round(
                                                (.30 * o_defense) * (o_resolve / (.50 * o_defense)))

                                            o_stamina = o_stamina + o_resolve
                                            o_health = o_health + o_resolve_health
                                            o_attack = round(o_attack + o_resolve_attack)
                                            o_defense = round(o_defense - o_resolve_defense)
                                            o_used_resolve = True
                                            o_pet_used = False
                                            health_boost = 100 * o_focus_count
                                            o_health = o_health + health_boost

                                            turn_total = turn_total + 1
                                            turn = 1
                                        elif o_universe == "Bleach":  # Bleach Trait
                                            # fortitude or luck is based on health
                                            fortitude = 0.0
                                            low = o_health - (o_health * .75)
                                            high = o_health - (o_health * .66)
                                            fortitude = random.randint(int(low), int(high))
                                            # Resolve Scaling
                                            o_resolve_health = round(fortitude + (.5 * o_resolve))
                                            o_resolve_attack = round(
                                                (.30 * o_defense) * (o_resolve / (.50 * o_defense)))
                                            o_resolve_defense = round(
                                                (.30 * o_defense) * (o_resolve / (.50 * o_defense)))

                                            o_stamina = o_stamina + o_resolve
                                            o_health = o_health + o_resolve_health
                                            o_attack = round((o_attack + (2 * o_resolve_attack)) * 2)
                                            o_defense = round(o_defense - o_resolve_defense)
                                            # # if o_defense >= 120:
                                            # o_defense = 120
                                            o_used_resolve = True
                                            o_pet_used = False
                                            turn_total = turn_total + 1
                                            turn = 1
                                        elif o_universe == "God Of War":  # God Of War Trait
                                            # fortitude or luck is based on health
                                            fortitude = 0.0
                                            low = o_health - (o_health * .75)
                                            high = o_health - (o_health * .66)
                                            fortitude = random.randint(int(low), int(high))
                                            # Resolve Scaling
                                            o_resolve_health = round(fortitude + (.5 * o_resolve))
                                            o_resolve_attack = round(
                                                (.30 * o_defense) * (o_resolve / (.50 * o_defense)))
                                            o_resolve_defense = round(
                                                (.30 * o_defense) * (o_resolve / (.50 * o_defense)))

                                            o_stamina = o_stamina + o_resolve
                                            o_health = o_max_health
                                            o_attack = round(o_attack + o_resolve_attack)
                                            o_defense = round(o_defense - o_resolve_defense)
                                            o_used_resolve = True
                                            o_pet_used = False
                                            turn_total = turn_total + 1
                                            turn = 1
                                        elif o_universe == "Fate":  # Fate Trait
                                            # fortitude or luck is based on health
                                            fortitude = 0.0
                                            low = o_health - (o_health * .75)
                                            high = o_health - (o_health * .66)
                                            fortitude = random.randint(int(low), int(high))
                                            # Resolve Scaling
                                            o_resolve_health = round(fortitude + (.5 * o_resolve))
                                            o_resolve_attack = round(
                                                (.30 * o_defense) * (o_resolve / (.50 * o_defense)))
                                            o_resolve_defense = round(
                                                (.30 * o_defense) * (o_resolve / (.50 * o_defense)))

                                            o_stamina = o_stamina + o_resolve
                                            o_health = o_health + o_resolve_health
                                            o_attack = round(o_attack + o_resolve_attack)
                                            o_defense = round(o_defense - o_resolve_defense)

                                            dmg = damage_cal(o_universe, o_card, o_3, o_attack, o_defense, t_defense,
                                                             o_stamina, o_enhancer_used, o_health, t_health, t_stamina,
                                                             o_max_health, t_attack, o_special_move_description,
                                                             turn_total, ocard_lvl_ap_buff)
                                            t_health = t_health - dmg['DMG']
                                            # o_stamina = 0
                                            o_used_resolve = True
                                            o_pet_used = False
                                            turn_total = turn_total + 1
                                            turn = 1
                                        elif o_universe == "Kanto Region" or o_universe == "Johto Region" or o_universe == "Hoenn Region" or o_universe == "Sinnoh Region" or o_universe == "Kalos Region" or o_universe == "Unova Region" or o_universe == "Alola Region" or o_universe == "Galar Region":  # Pokemon Resolves
                                            # fortitude or luck is based on health
                                            fortitude = 0.0
                                            low = o_health - (o_health * .75)
                                            high = o_health - (o_health * .66)
                                            fortitude = random.randint(int(low), int(high))
                                            # Resolve Scaling
                                            o_resolve_health = round(fortitude + (.5 * o_resolve))
                                            o_resolve_attack = round(
                                                (.30 * o_defense) * (o_resolve / (.50 * o_defense)))
                                            o_resolve_defense = round(
                                                (.30 * o_defense) * (o_resolve / (.50 * o_defense)))

                                            o_stamina = o_stamina + o_resolve
                                            o_health = o_health + o_resolve_health
                                            o_attack = round(o_attack + o_resolve_attack)
                                            o_defense = round(o_defense) * 2
                                            o_used_resolve = True
                                            o_pet_used = False
                                            turn_total = turn_total + 1
                                            turn = 1
                                        else:  # Standard Resolve
                                            # fortitude or luck is based on health
                                            fortitude = 0.0
                                            low = o_health - (o_health * .75)
                                            high = o_health - (o_health * .66)
                                            fortitude = random.randint(int(low), int(high))
                                            # Resolve Scaling
                                            o_resolve_health = round(fortitude + (.5 * o_resolve))
                                            o_resolve_attack = round(
                                                (.30 * o_defense) * (o_resolve / (.50 * o_defense)))
                                            o_resolve_defense = round(
                                                (.30 * o_defense) * (o_resolve / (.50 * o_defense)))

                                            o_stamina = o_stamina + o_resolve
                                            o_health = o_health + o_resolve_health
                                            o_attack = round(o_attack + o_resolve_attack)
                                            o_defense = round(o_defense - o_resolve_defense)
                                            o_used_resolve = True
                                            o_pet_used = False
                                            if o_universe == "League Of Legends":
                                                t_health = t_health - (30 * (o_focus_count + t_focus_count))

                                            turn_total = turn_total + 1
                                            turn = 1

                                    else:
                                        turn = 0
                                elif aiMove == 6:
                                    # Resolve Check and Calculation
                                    if o_used_resolve and o_used_focus and not o_pet_used:
                                        o_enhancer_used = True
                                        dmg = damage_cal(o_universe, o_card, opet_move, o_attack, o_defense, t_defense,
                                                         o_stamina, o_enhancer_used, o_health, t_health, t_stamina,
                                                         o_max_health, t_attack, o_special_move_description, turn_total,
                                                         ocard_lvl_ap_buff)
                                        o_enhancer_used = False
                                        o_pet_used = True
                                        opet_dmg = dmg['DMG']
                                        opet_type = dmg['ENHANCED_TYPE']
                                        if dmg['CAN_USE_MOVE']:
                                            if opet_type == 'ATK':
                                                o_attack = round(o_attack + dmg['DMG'])
                                            elif opet_type == 'DEF':
                                                o_defense = round(o_defense + dmg['DMG'])
                                            elif opet_type == 'STAM':
                                                o_stamina = round(o_stamina + dmg['DMG'])
                                            elif opet_type == 'HLT':
                                                o_health = round(o_health + dmg['DMG'])
                                            elif opet_type == 'LIFE':
                                                o_health = round(o_health + dmg['DMG'])
                                                t_health = round(t_health - dmg['DMG'])
                                            elif opet_type == 'DRAIN':
                                                o_stamina = round(o_stamina + dmg['DMG'])
                                                t_stamina = round(t_stamina - dmg['DMG'])
                                            elif opet_type == 'FLOG':
                                                o_attack = round(o_attack + dmg['DMG'])
                                                t_attack = round(t_attack - dmg['DMG'])
                                            elif opet_type == 'WITHER':
                                                o_defense = round(o_defense + dmg['DMG'])
                                                t_defense = round(t_defense - dmg['DMG'])
                                            elif opet_type == 'RAGE':
                                                o_defense = round(o_defense - dmg['DMG'])
                                                o_attack = round(o_attack + dmg['DMG'])
                                            elif opet_type == 'BRACE':
                                                o_defense = round(o_defense + dmg['DMG'])
                                                o_attack = round(o_attack - dmg['DMG'])
                                            elif opet_type == 'BZRK':
                                                o_health = round(o_health - dmg['DMG'])
                                                o_attack = round(o_attack + dmg['DMG'])
                                            elif opet_type == 'CRYSTAL':
                                                o_health = round(o_health - dmg['DMG'])
                                                o_defense = round(o_defense + dmg['DMG'])
                                            elif opet_type == 'GROWTH':
                                                o_max_health = round(o_max_health - dmg['DMG'])
                                                o_defense = round(o_defense + (dmg['DMG'] * .5))
                                                o_attack = round(o_attack + (dmg['DMG'] * .5))
                                            elif opet_type == 'STANCE':
                                                tempattack = dmg['DMG']
                                                o_attack = o_defense
                                                o_defense = tempattack
                                            elif opet_type == 'CONFUSE':
                                                tempattack = dmg['DMG']
                                                t_attack = t_defense
                                                t_defense = tempattack
                                            elif opet_type == 'BLINK':
                                                o_stamina = round(o_stamina - dmg['DMG'])
                                                t_stamina = round(t_stamina + dmg['DMG'] - 10)
                                            elif opet_type == 'SLOW':
                                                tempstam = round(t_stamina + dmg['DMG'])
                                                o_stamina = round(o_stamina - dmg['DMG'])
                                                t_stamina = o_stamina
                                                o_stamina = tempstam
                                            elif opet_type == 'HASTE':
                                                tempstam = round(t_stamina - dmg['DMG'])
                                                o_stamina = round(o_stamina + dmg['DMG'])
                                                t_stamina = o_stamina
                                                o_stamina = tempstam
                                            elif opet_type == 'SOULCHAIN':
                                                o_stamina = round(dmg['DMG'])
                                                t_stamina = o_stamina
                                            elif opet_type == 'GAMBLE':
                                                o_health = round(dmg['DMG'])
                                                t_health = o_health
                                            elif opet_type == 'FEAR':
                                                o_max_health = round(o_max_health - dmg['DMG'])
                                                t_defense = round(t_defense - (dmg['DMG'] * .5))
                                                t_attack = round(t_attack - (dmg['DMG'] * .5))
                                            elif opet_type == 'WAVE':
                                                t_health = round(t_health - dmg['DMG'])
                                            elif opet_type == 'BLAST':
                                                if dmg['DMG'] >= 100:
                                                    dmg['DMG'] = 100
                                                t_health = round(t_health - dmg['DMG'])
                                            elif opet_type == 'CREATION':
                                                o_max_health = round(o_max_health + dmg['DMG'])
                                                o_health = round(o_health + dmg['DMG'])
                                            elif opet_type == 'DESTRUCTION':
                                                t_max_health = round(t_max_health - dmg['DMG'])

                                            o_stamina = o_stamina - int(dmg['STAMINA_USED'])

                                            if o_universe == "Persona":
                                                petdmg = damage_cal(o_universe, o_card, o_1, o_attack, o_defense,
                                                                    t_defense, o_stamina, o_enhancer_used, o_health,
                                                                    t_health, t_stamina, o_max_health, t_attack,
                                                                    o_special_move_description, turn_total,
                                                                    ocard_lvl_ap_buff)
                                                t_health = t_health - petdmg['DMG']

                                            turn = 0
                                        else:
                                            turn = 0
                                    else:
                                        turn = 0
                                elif aiMove == 0:
                                    if o_stamina >= 20:
                                        o_stamina = o_stamina - 20
                                        o_block_used = True
                                        o_defense = o_defense * 2
                                        turn_total = turn_total + 1
                                        turn = 1
                                    else:
                                        turn = 0

                                if aiMove != 5 and aiMove != 6 and aiMove != 0:
                                    # If you have enough stamina for move, use it
                                    if dmg['CAN_USE_MOVE']:
                                        o_pet_used = False
                                        if dmg['ENHANCE']:
                                            enh_type = dmg['ENHANCED_TYPE']

                                            if enh_type == 'ATK':
                                                o_attack = round(o_attack + dmg['DMG'])
                                            elif enh_type == 'DEF':
                                                o_defense = round(o_defense + dmg['DMG'])
                                            elif enh_type == 'STAM':
                                                o_stamina = round(o_stamina + dmg['DMG'])
                                            elif enh_type == 'HLT':
                                                o_health = round(o_health + dmg['DMG'])
                                            elif enh_type == 'LIFE':
                                                o_health = round(o_health + dmg['DMG'])
                                                t_health = round(t_health - dmg['DMG'])
                                            elif enh_type == 'DRAIN':
                                                o_stamina = round(o_stamina + dmg['DMG'])
                                                t_stamina = round(t_stamina - dmg['DMG'])
                                            elif enh_type == 'FLOG':
                                                o_attack = round(o_attack + dmg['DMG'])
                                                t_attack = round(t_attack - dmg['DMG'])
                                            elif enh_type == 'WITHER':
                                                o_defense = round(o_defense + dmg['DMG'])
                                                t_defense = round(t_defense - dmg['DMG'])
                                            elif enh_type == 'RAGE':
                                                o_defense = round(o_defense - dmg['DMG'])
                                                o_attack = round(o_attack + dmg['DMG'])
                                            elif enh_type == 'BRACE':
                                                o_defense = round(o_defense + dmg['DMG'])
                                                o_attack = round(o_attack - dmg['DMG'])
                                            elif enh_type == 'BZRK':
                                                o_health = round(o_health - dmg['DMG'])
                                                o_attack = round(o_attack + dmg['DMG'])
                                            elif enh_type == 'CRYSTAL':
                                                o_health = round(o_health - dmg['DMG'])
                                                o_defense = round(o_defense + dmg['DMG'])
                                            elif enh_type == 'GROWTH':
                                                o_max_health = round(o_max_health - dmg['DMG'])
                                                o_defense = round(o_defense + (dmg['DMG'] * .5))
                                                o_attack = round(o_attack + (dmg['DMG'] * .5))
                                            elif enh_type == 'STANCE':
                                                tempattack = dmg['DMG']
                                                o_attack = o_defense
                                                o_defense = tempattack
                                            elif enh_type == 'CONFUSE':
                                                tempattack = dmg['DMG']
                                                t_attack = t_defense
                                                t_defense = tempattack
                                            elif enh_type == 'BLINK':
                                                o_stamina = round(o_stamina - dmg['DMG'])
                                                t_stamina = round(t_stamina + dmg['DMG'] - 10)
                                            elif enh_type == 'SLOW':
                                                tempstam = round(t_stamina + dmg['DMG'])
                                                o_stamina = round(o_stamina - dmg['DMG'])
                                                t_stamina = o_stamina
                                                o_stamina = tempstam
                                            elif enh_type == 'HASTE':
                                                tempstam = round(t_stamina - dmg['DMG'])
                                                o_stamina = round(o_stamina + dmg['DMG'])
                                                t_stamina = o_stamina
                                                o_stamina = tempstam
                                            elif enh_type == 'SOULCHAIN':
                                                o_stamina = round(dmg['DMG'])
                                                t_stamina = o_stamina
                                            elif enh_type == 'GAMBLE':
                                                if mode in D_modes:
                                                    t_health = round(dmg['DMG']) * 2
                                                    o_health = round(dmg['DMG'])
                                                elif mode in B_modes:
                                                    t_health = round(dmg['DMG']) * 4
                                                    o_health = round(dmg['DMG'])
                                                else:
                                                    t_health = round(dmg['DMG'])
                                                    o_health = round(dmg['DMG'])
                                            elif enh_type == 'FEAR':
                                                o_max_health = round(o_max_health - dmg['DMG'])
                                                t_defense = round(t_defense - (dmg['DMG'] * .5))
                                                t_attack = round(t_attack - (dmg['DMG'] * .5))
                                            elif enh_type == 'WAVE':
                                                t_health = round(t_health - dmg['DMG'])
                                            elif enh_type == 'BLAST':
                                                t_health = round(t_health - dmg['DMG'])
                                            elif enh_type == 'CREATION':
                                                o_max_health = round(o_max_health + dmg['DMG'])
                                                o_health = round(o_health + dmg['DMG'])
                                            elif enh_type == 'DESTRUCTION':
                                                t_max_health = round(t_max_health - dmg['DMG'])

                                            o_stamina = o_stamina - int(dmg['STAMINA_USED'])

                                            turn_total = turn_total + 1
                                            turn = 1
                                        elif dmg['DMG'] == 0:
                                            o_stamina = o_stamina - int(dmg['STAMINA_USED'])

                                            turn_total = turn_total + 1
                                            turn = 1
                                        else:
                                            if t_universe == "Naruto" and t_stamina < 10:
                                                t_health = t_health
                                            else:
                                                t_health = t_health - dmg['DMG']
                                            if t_health <= 0:
                                                if t_final_stand == True:
                                                    t_health = int(.75 * (t_attack + t_defense))
                                                    t_attack = t_attack + (.50 * t_attack)
                                                    t_defense = t_defense + (.50 * t_defense)
                                                    t_used_resolve = True
                                                    t_used_focus = True
                                                    t_final_stand = False
                                                    o_stamina = o_stamina - dmg['STAMINA_USED']
                                                    turn_total = turn_total + 1
                                                    turn = 1
                                                else:
                                                    t_health = 0
                                                    o_stamina = o_stamina - dmg['STAMINA_USED']
                                                    turn_total = turn_total + 1
                                            else:
                                                o_stamina = o_stamina - dmg['STAMINA_USED']
                                                turn_total = turn_total + 1
                                                turn = 1

                                    else:
                                        turn = 0
                            else:
                                # UNIVERSE CARD
                                ap1 = list(o_1.values())[0] + ocard_lvl_ap_buff
                                ap2 = list(o_2.values())[0] + ocard_lvl_ap_buff
                                ap3 = list(o_3.values())[0] + ocard_lvl_ap_buff
                                enh1 = list(o_enhancer.values())[0]
                                enh_name = list(o_enhancer.values())[2]
                                pet_enh_name = list(opet_move.values())[2]
                                pet_msg_on_resolve = ""

                                # UNIVERSE CARD
                                player_1_card = showcard(o, o_max_health, o_health, o_max_stamina, o_stamina,
                                                         o_used_resolve, otitle, o_used_focus, o_attack, o_defense,
                                                         turn_total, ap1, ap2, ap3, enh1, enh_name, ocard_lvl, t_defense)
                                # await private_channel.send(file=player_1_card)

                                # Configure options which are buttons used to play
                                main_options = ["1", "2", "3", "4"]
                                if o_used_focus and o_used_resolve:
                                    if mode in co_op_modes:
                                        options = ["q", "Q", "0", "1", "2", "3", "4", "6", "7", "8", "9"]
                                    else:
                                        options = ["q", "Q", "0", "1", "2", "3", "4", "6"]

                                elif o_used_focus and not o_used_resolve:
                                    if mode in co_op_modes:
                                        options = ["q", "Q", "0", "1", "2", "3", "4", "5", "7", "8", "9", "s"]
                                    else:
                                        options = ["q", "Q", "0", "1", "2", "3", "4", "5", "s"]

                                else:
                                    if mode in co_op_modes:
                                        options = ["q", "Q", "0", "1", "2", "3", "4", "7", "8", "9", "s"]
                                    else:
                                        options = ["q", "Q", "0", "1", "2", "3", "4", "s"]

                                battle_buttons = [
                                    manage_components.create_button(
                                        style=ButtonStyle.green,
                                        label=f"💥 10",
                                        custom_id="1"
                                    ),
                                    manage_components.create_button(
                                        style=ButtonStyle.green,
                                        label=f"☄️ 30",
                                        custom_id="2"
                                    ),
                                    manage_components.create_button(
                                        style=ButtonStyle.green,
                                        label=f"🏵️ 80",
                                        custom_id="3"
                                    ),
                                    manage_components.create_button(
                                        style=ButtonStyle.blue,
                                        label=f"🦠 20",
                                        custom_id="4"
                                    )
                                ]

                                util_buttons = [
                                    manage_components.create_button(
                                        style=ButtonStyle.grey,
                                        label="Block 20",
                                        custom_id="0"
                                    ),
                                    manage_components.create_button(
                                        style=ButtonStyle.grey,
                                        label="Quit | /ff",
                                        custom_id="q"
                                    ),
                                    manage_components.create_button(
                                        style=ButtonStyle.red,
                                        label=f"Save",
                                        custom_id="s"
                                    )
                                ]

                                if mode in ai_co_op_modes:
                                    coop_util_buttons = [
                                        manage_components.create_button(
                                            style=ButtonStyle.blue,
                                            label="Assist Companion 20",
                                            custom_id="7"
                                        ),
                                        manage_components.create_button(
                                            style=ButtonStyle.blue,
                                            label="Request Assistance",
                                            custom_id="8"
                                        ),
                                        manage_components.create_button(
                                            style=ButtonStyle.blue,
                                            label="Request Block",
                                            custom_id="9"
                                        ),
                                    ]
                                elif mode in co_op_modes and mode not in ai_co_op_modes:
                                    coop_util_buttons = [
                                        manage_components.create_button(
                                            style=ButtonStyle.blue,
                                            label="Assist Companion 20",
                                            custom_id="7"
                                        )
                                    ]

                                if o_used_focus and o_used_resolve and not o_pet_used:
                                    util_buttons.append(
                                        manage_components.create_button(
                                            style=ButtonStyle.green,
                                            label="🐦 15",
                                            custom_id="6"
                                        )
                                    )

                                if o_used_focus and not o_used_resolve:
                                    util_buttons.append(
                                        manage_components.create_button(
                                            style=ButtonStyle.green,
                                            label="Resolve!",
                                            custom_id="5"
                                        )
                                    )

                                battle_action_row = manage_components.create_actionrow(*battle_buttons)
                                util_action_row = manage_components.create_actionrow(*util_buttons)
                                if mode in co_op_modes:
                                    coop_util_action_row = manage_components.create_actionrow(*coop_util_buttons)

                                companion_stats = ""
                                if mode in co_op_modes:
                                    components = [battle_action_row, util_action_row, coop_util_action_row]
                                    companion_stats = f"\n{c_card}: ❤️{c_health} 🌀{c_stamina} 🗡️{c_attack}/🛡️{c_defense}"
                                else:
                                    components = [battle_action_row, util_action_row]

                                if o_used_resolve:
                                    pet_msg_on_resolve = f"🐦 {enhancer_mapping[pet_enh_name]}"
                                tarm_message = ""
                                if tarm_barrier_active:
                                    tarm_message = f"💠{tbarrier_count}"
                                elif tarm_shield_active:
                                    tarm_message = f"🌐{tshield_value}"
                                elif tarm_parry_active:
                                    tarm_message = f"🔄{tparry_count}"
                                if oarm_passive_type == "BARRIER":
                                    if oarm_barrier_active:
                                        oarm_passive_value = f"{obarrier_count}"
                                    else:
                                        oarm_passive_value = 0
                                elif oarm_passive_type == "SHIELD":
                                    if oarm_shield_active:
                                        oarm_passive_value = f"{oshield_value}"
                                    else:
                                        oarm_passive_value = 0
                                elif oarm_passive_type == "PARRY":
                                    if oarm_parry_active:
                                        oarm_passive_value = f"{oparry_count}"
                                    else:
                                        oarm_passive_value = 0
                                embedVar = discord.Embed(title=f" Press your move below! _Turn_ {turn_total}", color=0xe74c3c)
                                embedVar.set_author(name=f"🦾 {oarm_name} - {oarm_passive_type} {oarm_passive_value} {enhancer_suffix_mapping[oarm_passive_type]}\n{pet_msg_on_resolve}")
                                embedVar.set_thumbnail(url=opet_image)
                                embedVar.set_image(url="attachment://image.png")
                                embedVar.set_footer(
                                    text=f"{t_card}: ❤️{t_health} 🌀{t_stamina} 🗡️{t_attack}/🛡️{t_defense} {tarm_message}{companion_stats}",
                                    icon_url="https://cdn.discordapp.com/emojis/789290881654980659.gif?v=1")
                                await private_channel.send(embed=embedVar, components=components, file=player_1_card)

                                # Make sure user is responding with move
                                def check(button_ctx):
                                    return button_ctx.author == user1 and button_ctx.custom_id in options

                                try:
                                    button_ctx: ComponentContext = await manage_components.wait_for_component(self.bot,
                                                                                                              components=components,
                                                                                                              timeout=120,
                                                                                                              check=check)
                                    if button_ctx.custom_id == "s":
                                        print("SAVE INVOKED")
                                        o_health = 0
                                        await save_spot(self, ctx, universe, mode, currentopponent)
                                        await discord.TextChannel.delete(private_channel, reason=None)
                                        return

                                    # calculate data based on selected move
                                    if button_ctx.custom_id == "q" or button_ctx.custom_id == "Q":
                                        o_health = 0
                                        await discord.TextChannel.delete(private_channel, reason=None)
                                        return
                                    
                                    if button_ctx.custom_id == "1":

                                        dmg = damage_cal(o_universe, o_card, o_1, o_attack, o_defense, t_defense,
                                                         o_stamina, o_enhancer_used, o_health, t_health, t_stamina,
                                                         o_max_health, t_attack, o_special_move_description, turn_total,
                                                         ocard_lvl_ap_buff)
                                    elif button_ctx.custom_id == "2":

                                        dmg = damage_cal(o_universe, o_card, o_2, o_attack, o_defense, t_defense,
                                                         o_stamina, o_enhancer_used, o_health, t_health, t_stamina,
                                                         o_max_health, t_attack, o_special_move_description, turn_total,
                                                         ocard_lvl_ap_buff)
                                    elif button_ctx.custom_id == "3":

                                        dmg = damage_cal(o_universe, o_card, o_3, o_attack, o_defense, t_defense,
                                                         o_stamina, o_enhancer_used, o_health, t_health, t_stamina,
                                                         o_max_health, t_attack, o_special_move_description, turn_total,
                                                         ocard_lvl_ap_buff)
                                        if o_gif != "N/A":
                                            await private_channel.send(f"{o_gif}")
                                    elif button_ctx.custom_id == "4":
                                        o_enhancer_used = True

                                        dmg = damage_cal(o_universe, o_card, o_enhancer, o_attack, o_defense, t_defense,
                                                         o_stamina, o_enhancer_used, o_health, t_health, t_stamina,
                                                         o_max_health, t_attack, o_special_move_description, turn_total,
                                                         ocard_lvl_ap_buff)
                                        o_enhancer_used = False
                                    elif button_ctx.custom_id == "5":
                                        # Resolve Check and Calculation
                                        if not o_used_resolve and o_used_focus:
                                            if o_universe == "My Hero Academia":  # My Hero Trait
                                                # fortitude or luck is based on health
                                                fortitude = 0.0
                                                low = o_health - (o_health * .75)
                                                high = o_health - (o_health * .66)
                                                fortitude = random.randint(int(low), int(high))
                                                # Resolve Scaling
                                                o_resolve_health = round(fortitude + (.5 * o_resolve))
                                                o_resolve_attack = round(
                                                    (.30 * o_defense) * (o_resolve / (.50 * o_defense)))
                                                o_resolve_defense = round(
                                                    (.30 * o_defense) * (o_resolve / (.50 * o_defense)))
                                                ocard_lvl_ap_buff = ocard_lvl_ap_buff + 50

                                                o_stamina = o_stamina + o_resolve
                                                o_health = o_health + o_resolve_health
                                                o_attack = round(o_attack + o_resolve_attack)
                                                o_defense = round(o_defense - o_resolve_defense)
                                                o_used_resolve = True
                                                o_pet_used = False
                                                embedVar = discord.Embed(title=f"{o_card.upper()} PLUS ULTRAAA",
                                                                         description=f"**{o_card} says**\n{o_resolve_description}",
                                                                         colour=0xe91e63)
                                                embedVar.add_field(name=f"Transformation: Plus Ultra",
                                                                   value="You do not lose a turn after you Resolve.")
                                                if mode in B_modes:
                                                    embedVar.add_field(name=f"{t_card}'s Rebuke", value=f"{t_rebuke}",
                                                                       inline=False)
                                                    embedVar.set_footer(text=f"{o_card} this is your chance!")
                                                await button_ctx.send(embed=embedVar)

                                                turn_total = turn_total + 1
                                                turn = 0
                                            elif o_universe == "Attack On Titan":
                                                # fortitude or luck is based on health
                                                fortitude = 0.0
                                                low = o_health - (o_health * .75)
                                                high = o_health - (o_health * .66)
                                                fortitude = random.randint(int(low), int(high))
                                                # Resolve Scaling
                                                o_resolve_health = round(fortitude + (.5 * o_resolve))
                                                o_resolve_attack = round(
                                                    (.30 * o_defense) * (o_resolve / (.50 * o_defense)))
                                                o_resolve_defense = round(
                                                    (.30 * o_defense) * (o_resolve / (.50 * o_defense)))

                                                o_stamina = o_stamina + o_resolve
                                                o_health = o_health + o_resolve_health
                                                o_attack = round(o_attack + o_resolve_attack)
                                                o_defense = round(o_defense - o_resolve_defense)
                                                o_used_resolve = True
                                                o_pet_used = False
                                                health_boost = 100 * o_focus_count
                                                o_health = o_health + health_boost
                                                embedVar = discord.Embed(title=f"{o_card.upper()} Titan Mode",
                                                                         description=f"**{o_card} says**\n{o_resolve_description}",
                                                                         colour=0xe91e63)
                                                embedVar.add_field(name=f"Transformation Complete",
                                                                   value=f"Health increased by **{health_boost}**!")
                                                if mode in B_modes:
                                                    embedVar.add_field(name=f"{t_card}'s Rebuke", value=f"{t_rebuke}",
                                                                       inline=False)
                                                    embedVar.set_footer(text=f"{o_card} this is your chance!")
                                                await button_ctx.send(embed=embedVar)

                                                turn_total = turn_total + 1
                                                turn = 1

                                            elif o_universe == "Bleach":  # Bleach Trait
                                                # fortitude or luck is based on health
                                                fortitude = 0.0
                                                low = o_health - (o_health * .75)
                                                high = o_health - (o_health * .66)
                                                fortitude = random.randint(int(low), int(high))
                                                # Resolve Scaling
                                                o_resolve_health = round(fortitude + (.5 * o_resolve))
                                                o_resolve_attack = round(
                                                    (.30 * o_defense) * (o_resolve / (.50 * o_defense)))
                                                o_resolve_defense = round(
                                                    (.30 * o_defense) * (o_resolve / (.50 * o_defense)))

                                                o_stamina = o_stamina + o_resolve
                                                o_health = o_health + o_resolve_health
                                                o_attack = round((o_attack + (2 * o_resolve_attack)) * 2)
                                                o_defense = round(o_defense - o_resolve_defense)
                                                # if o_defense >= 120:
                                                # # o_defense = 120
                                                o_used_resolve = True
                                                o_pet_used = False
                                                embedVar = discord.Embed(title=f"{o_card} STRENGTHENED RESOLVE :zap:",
                                                                         description=f"**{o_card} says**\n{o_resolve_description}",
                                                                         colour=0xe91e63)
                                                embedVar.add_field(name=f"Transformation: Bankai",
                                                                   value="Gain double Attack on Resolve.")
                                                if mode in B_modes:
                                                    embedVar.add_field(name=f"{t_card}'s Rebuke", value=f"{t_rebuke}",
                                                                       inline=False)
                                                    embedVar.set_footer(text=f"{o_card} this is your chance!")
                                                await button_ctx.send(embed=embedVar)
                                                turn_total = turn_total + 1
                                                turn = 1
                                            elif o_universe == "God Of War":  # God Of War Trait
                                                # fortitude or luck is based on health
                                                fortitude = 0.0
                                                low = o_health - (o_health * .75)
                                                high = o_health - (o_health * .66)
                                                fortitude = random.randint(int(low), int(high))
                                                # Resolve Scaling
                                                o_resolve_health = round(fortitude + (.5 * o_resolve))
                                                o_resolve_attack = round(
                                                    (.30 * o_defense) * (o_resolve / (.50 * o_defense)))
                                                o_resolve_defense = round(
                                                    (.30 * o_defense) * (o_resolve / (.50 * o_defense)))

                                                o_stamina = o_stamina + o_resolve
                                                o_health = o_max_health
                                                o_attack = round(o_attack + o_resolve_attack)
                                                o_defense = round(o_defense - o_resolve_defense)
                                                o_used_resolve = True
                                                o_pet_used = False
                                                embedVar = discord.Embed(title=f"{o_card} STRENGTHENED RESOLVE :zap:",
                                                                         description=f"**{o_card} says**\n{o_resolve_description}",
                                                                         colour=0xe91e63)
                                                embedVar.add_field(name=f"Transformation: Ascension",
                                                                   value="On Resolve Refill Health.")
                                                if mode in B_modes:
                                                    embedVar.add_field(name=f"{t_card}'s Rebuke", value=f"{t_rebuke}",
                                                                       inline=False)
                                                    embedVar.set_footer(text=f"{o_card} this is your chance!")
                                                await button_ctx.send(embed=embedVar)
                                                turn_total = turn_total + 1
                                                turn = 1
                                            elif o_universe == "Fate":  # Fate Trait
                                                # fortitude or luck is based on health
                                                fortitude = 0.0
                                                low = o_health - (o_health * .75)
                                                high = o_health - (o_health * .66)
                                                fortitude = random.randint(int(low), int(high))
                                                # Resolve Scaling
                                                o_resolve_health = round(fortitude + (.5 * o_resolve))
                                                o_resolve_attack = round(
                                                    (.30 * o_defense) * (o_resolve / (.50 * o_defense)))
                                                o_resolve_defense = round(
                                                    (.30 * o_defense) * (o_resolve / (.50 * o_defense)))

                                                o_stamina = o_stamina + o_resolve
                                                o_health = o_health + o_resolve_health
                                                o_attack = round(o_attack + o_resolve_attack)
                                                o_defense = round(o_defense - o_resolve_defense)

                                                embedVar = discord.Embed(title=f"{o_card} STRENGTHENED RESOLVE :zap:",
                                                                         description=f"**{o_card} says**\n{o_resolve_description}",
                                                                         colour=0xe91e63)
                                                embedVar.add_field(name=f"Transformation: Command Seal",
                                                                   value="On Resolve, Strike with Ultimate, then Focus.")
                                                if mode in B_modes:
                                                    embedVar.add_field(name=f"{t_card}'s Rebuke", value=f"{t_rebuke}",
                                                                       inline=False)
                                                    embedVar.set_footer(text=f"{o_card} this is your chance!")
                                                dmg = damage_cal(o_universe, o_card, o_3, o_attack, o_defense,
                                                                 t_defense, o_stamina, o_enhancer_used, o_health,
                                                                 t_health, t_stamina, o_max_health, t_attack,
                                                                 o_special_move_description, turn_total,
                                                                 ocard_lvl_ap_buff)
                                                t_health = t_health - dmg['DMG']
                                                embedVar = discord.Embed(
                                                    title=f"{o_card} STRENGTHENED RESOLVE :zap:\n\n{dmg['MESSAGE']}",
                                                    description=f"**{o_card} says**\n{o_resolve_description}",
                                                    colour=0xe91e63)
                                                embedVar.add_field(name=f"Transformation: Command Seal",
                                                                   value="On Resolve, Strike with Ultimate, then Focus.")
                                                await button_ctx.send(embed=embedVar)
                                                # o_stamina = 0
                                                o_used_resolve = True
                                                o_pet_used = False
                                                turn_total = turn_total + 1
                                                turn = 1
                                            elif o_universe == "Kanto Region" or o_universe == "Johto Region" or o_universe == "Hoenn Region" or o_universe == "Sinnoh Region" or o_universe == "Kalos Region" or o_universe == "Unova Region" or o_universe == "Alola Region" or o_universe == "Galar Region":  # Pokemon Resolves
                                                # fortitude or luck is based on health
                                                fortitude = 0.0
                                                low = o_health - (o_health * .75)
                                                high = o_health - (o_health * .66)
                                                fortitude = random.randint(int(low), int(high))
                                                # Resolve Scaling
                                                o_resolve_health = round(fortitude + (.5 * o_resolve))
                                                o_resolve_attack = round(
                                                    (.30 * o_defense) * (o_resolve / (.50 * o_defense)))
                                                o_resolve_defense = round(
                                                    (.30 * o_defense) * (o_resolve / (.50 * o_defense)))

                                                o_stamina = o_stamina + o_resolve
                                                o_health = o_health + o_resolve_health
                                                o_attack = round(o_attack + o_resolve_attack)
                                                o_defense = o_defense * 2
                                                o_used_resolve = True
                                                o_pet_used = False
                                                embedVar = discord.Embed(title=f"{o_card} STRENGTHENED RESOLVE :zap:",
                                                                         description=f"**{o_card} says**\n{o_resolve_description}",
                                                                         colour=0xe91e63)
                                                embedVar.add_field(name=f"Transformation: Evolution",
                                                                   value="When you Resolve your Defense doubles")
                                                if mode in B_modes:
                                                    embedVar.add_field(name=f"{t_card}'s Rebuke", value=f"{t_rebuke}",
                                                                       inline=False)
                                                    embedVar.set_footer(text=f"{o_card} this is your chance!")
                                                await button_ctx.send(embed=embedVar)
                                                turn_total = turn_total + 1
                                                turn = 1
                                            else:  # Standard Resolve
                                                # fortitude or luck is based on health
                                                fortitude = 0.0
                                                low = o_health - (o_health * .75)
                                                high = o_health - (o_health * .66)
                                                fortitude = random.randint(int(low), int(high))
                                                # Resolve Scaling
                                                o_resolve_health = round(fortitude + (.5 * o_resolve))
                                                o_resolve_attack = round(
                                                    (.30 * o_defense) * (o_resolve / (.50 * o_defense)))
                                                o_resolve_defense = round(
                                                    (.30 * o_defense) * (o_resolve / (.50 * o_defense)))

                                                o_stamina = o_stamina + o_resolve
                                                o_health = o_health + o_resolve_health
                                                o_attack = round(o_attack + o_resolve_attack)
                                                o_defense = round(o_defense - o_resolve_defense)
                                                o_used_resolve = True
                                                o_pet_used = False
                                                if o_universe == "League Of Legends":
                                                    t_health = t_health - (30 * (o_focus_count + t_focus_count))
                                                    embedVar = discord.Embed(title=f"{o_card.upper()} PENTA KILL!",
                                                                             description=f"**{o_card} says**\n{o_resolve_description}",
                                                                             colour=0xe91e63)
                                                    embedVar.add_field(name=f"Nexus Destroyed",
                                                                       value=f"**{o_card}** dealt **{(30 * (o_focus_count + t_focus_count))}** damage.")
                                                else:
                                                    embedVar = discord.Embed(
                                                        title=f"{o_card} STRENGTHENED RESOLVE :zap:",
                                                        description=f"**{o_card} says**\n{o_resolve_description}",
                                                        colour=0xe91e63)
                                                    embedVar.add_field(name=f"Transformation",
                                                                       value="All stats & stamina greatly increased")
                                                if mode in B_modes:
                                                    embedVar.add_field(name=f"{t_card}'s Rebuke", value=f"{t_rebuke}",
                                                                       inline=False)
                                                    embedVar.set_footer(text=f"{o_card} this is your chance!")
                                                await button_ctx.send(embed=embedVar)
                                                turn_total = turn_total + 1
                                                turn = 1
                                        else:
                                            emessage = m.CANNOT_USE_RESOLVE
                                            embedVar = discord.Embed(title=emessage, colour=0xe91e63)
                                            await button_ctx.send(embed=embedVar)
                                            turn = 0
                                    elif button_ctx.custom_id == "6":
                                        # Resolve Check and Calculation
                                        if o_used_resolve and o_used_focus and not o_pet_used:
                                            o_enhancer_used = True
                                            dmg = damage_cal(o_universe, o_card, opet_move, o_attack, o_defense,
                                                             t_defense, o_stamina, o_enhancer_used, o_health, t_health,
                                                             t_stamina, o_max_health, t_attack,
                                                             o_special_move_description, turn_total, ocard_lvl_ap_buff)
                                            o_enhancer_used = False
                                            o_pet_used = True
                                            opet_dmg = dmg['DMG']
                                            opet_type = dmg['ENHANCED_TYPE']
                                            if dmg['CAN_USE_MOVE']:
                                                if opet_type == 'ATK':
                                                    o_attack = round(o_attack + dmg['DMG'])
                                                elif opet_type == 'DEF':
                                                    o_defense = round(o_defense + dmg['DMG'])
                                                elif opet_type == 'STAM':
                                                    o_stamina = round(o_stamina + dmg['DMG'])
                                                elif opet_type == 'HLT':
                                                    o_health = round(o_health + dmg['DMG'])
                                                elif opet_type == 'LIFE':
                                                    o_health = round(o_health + dmg['DMG'])
                                                    t_health = round(t_health - dmg['DMG'])
                                                elif opet_type == 'DRAIN':
                                                    o_stamina = round(o_stamina + dmg['DMG'])
                                                    t_stamina = round(t_stamina - dmg['DMG'])
                                                elif opet_type == 'FLOG':
                                                    o_attack = round(o_attack + dmg['DMG'])
                                                    t_attack = round(t_attack - dmg['DMG'])
                                                elif opet_type == 'WITHER':
                                                    o_defense = round(o_defense + dmg['DMG'])
                                                    t_defense = round(t_defense - dmg['DMG'])
                                                elif opet_type == 'RAGE':
                                                    o_defense = round(o_defense - dmg['DMG'])
                                                    o_attack = round(o_attack + dmg['DMG'])
                                                elif opet_type == 'BRACE':
                                                    o_defense = round(o_defense + dmg['DMG'])
                                                    o_attack = round(o_attack - dmg['DMG'])
                                                elif opet_type == 'BZRK':
                                                    o_health = round(o_health - dmg['DMG'])
                                                    o_attack = round(o_attack + dmg['DMG'])
                                                elif opet_type == 'CRYSTAL':
                                                    o_health = round(o_health - dmg['DMG'])
                                                    o_defense = round(o_defense + dmg['DMG'])
                                                elif opet_type == 'GROWTH':
                                                    o_max_health = round(o_max_health - dmg['DMG'])
                                                    o_defense = round(o_defense + (dmg['DMG'] * .5))
                                                    o_attack = round(o_attack + (dmg['DMG'] * .5))
                                                elif opet_type == 'STANCE':
                                                    tempattack = dmg['DMG']
                                                    o_attack = o_defense
                                                    o_defense = tempattack
                                                elif opet_type == 'CONFUSE':
                                                    tempattack = dmg['DMG']
                                                    t_attack = t_defense
                                                    t_defense = tempattack
                                                elif opet_type == 'BLINK':
                                                    o_stamina = round(o_stamina - dmg['DMG'])
                                                    t_stamina = round(t_stamina + dmg['DMG'] - 10)
                                                elif opet_type == 'SLOW':
                                                    tempstam = round(t_stamina + dmg['DMG'])
                                                    o_stamina = round(o_stamina - dmg['DMG'])
                                                    t_stamina = o_stamina
                                                    o_stamina = tempstam
                                                elif opet_type == 'HASTE':
                                                    tempstam = round(t_stamina - dmg['DMG'])
                                                    o_stamina = round(o_stamina + dmg['DMG'])
                                                    t_stamina = o_stamina
                                                    o_stamina = tempstam
                                                elif opet_type == 'SOULCHAIN':
                                                    o_stamina = round(dmg['DMG'])
                                                    t_stamina = o_stamina
                                                elif opet_type == 'GAMBLE':
                                                    o_health = round(dmg['DMG'])
                                                    t_health = o_health
                                                elif opet_type == 'FEAR':
                                                    o_max_health = round(o_max_health - dmg['DMG'])
                                                    t_defense = round(t_defense - (dmg['DMG'] * .5))
                                                    t_attack = round(t_attack - (dmg['DMG'] * .5))
                                                elif opet_type == 'WAVE':
                                                    t_health = round(t_health - dmg['DMG'])
                                                elif opet_type == 'BLAST':
                                                    if dmg['DMG'] >= 100:
                                                        dmg['DMG'] = 100
                                                    t_health = round(t_health - dmg['DMG'])
                                                elif opet_type == 'CREATION':
                                                    o_max_health = round(o_max_health + dmg['DMG'])
                                                    o_health = round(o_health + dmg['DMG'])
                                                elif opet_type == 'DESTRUCTION':
                                                    t_max_health = round(t_max_health - dmg['DMG'])

                                                o_stamina = o_stamina - int(dmg['STAMINA_USED'])
                                                if o_universe == "Persona":
                                                    petdmg = damage_cal(o_universe, o_card, o_1, o_attack, o_defense,
                                                                        t_defense, o_stamina, o_enhancer_used, o_health,
                                                                        t_health, t_stamina, o_max_health, t_attack,
                                                                        o_special_move_description, turn_total,
                                                                        ocard_lvl_ap_buff)
                                                    t_health = t_health - petdmg['DMG']

                                                    embedVar = discord.Embed(
                                                        title=f"**PERSONA!**\n{opet_name} was summoned from {o_card}'s soul dealing **{petdmg['DMG']}** damage!!",
                                                        colour=0xe91e63)
                                                    embedVar.add_field(name=f"{opet_name} used **{opetmove_text}**!",
                                                                       value=f"Enhanced **{opet_type}**")

                                                    embedVar.set_thumbnail(url=opet_image)
                                                    embedVar.set_image(url="attachment://image.png")
                                                    await button_ctx.send(embed=embedVar)
                                                else:
                                                    embedVar = discord.Embed(
                                                        title=f"{o_card.upper()} Summoned :bird: {opet_name}",
                                                        colour=0xe91e63)
                                                    embedVar.add_field(name=f"{opet_name} used **{opetmove_text}**!",
                                                                       value=f"Enhanced **{opet_type}**")
                                                    embedVar.set_thumbnail(url=opet_image)
                                                    embedVar.set_image(url="attachment://image.png")
                                                    await button_ctx.send(embed=embedVar)
                                                turn = 0
                                            else:
                                                await button_ctx.send(f"{opet_name} needs a turn to rest...")
                                                turn = 0
                                        else:
                                            await button_ctx.send(f"{opet_name} needs a turn to rest...")
                                    elif mode in co_op_modes:
                                        if button_ctx.custom_id == "7":
                                            o_enhancer_used = True
                                            dmg = damage_cal(o_universe, o_card, o_enhancer, o_attack, o_defense,
                                                             c_defense, o_stamina, o_enhancer_used, o_health, c_health,
                                                             c_stamina, o_max_health, c_attack,
                                                             o_special_move_description, turn_total, ocard_lvl_ap_buff)
                                            o_enhancer_used = False
                                            comp_dmg = dmg['DMG']
                                            comp_enh = dmg['ENHANCED_TYPE']
                                            if dmg['CAN_USE_MOVE']:
                                                if comp_enh == 'ATK':
                                                    c_attack = round(c_attack + dmg['DMG'])
                                                elif comp_enh == 'DEF':
                                                    c_defense = round(c_defense + dmg['DMG'])
                                                elif comp_enh == 'STAM':
                                                    c_stamina = round(c_stamina + dmg['DMG'])
                                                elif comp_enh == 'HLT':
                                                    c_health = round(c_health + dmg['DMG'])
                                                elif comp_enh == 'LIFE':
                                                    c_health = round(c_health + dmg['DMG'])
                                                    o_health = round(o_health - dmg['DMG'])
                                                elif comp_enh == 'DRAIN':
                                                    c_stamina = round(c_stamina + dmg['DMG'])
                                                    o_stamina = round(o_stamina - dmg['DMG'])
                                                elif comp_enh == 'FLOG':
                                                    c_attack = round(c_attack + dmg['DMG'])
                                                    t_attack = round(o_attack - dmg['DMG'])
                                                elif comp_enh == 'WITHER':
                                                    c_defense = round(c_defense + dmg['DMG'])
                                                    t_defense = round(o_defense - dmg['DMG'])
                                                elif comp_enh == 'RAGE':
                                                    c_defense = round(c_defense - dmg['DMG'])
                                                    c_attack = round(c_attack + dmg['DMG'])
                                                elif comp_enh == 'BRACE':
                                                    c_defense = round(c_defense + dmg['DMG'])
                                                    c_attack = round(c_attack - dmg['DMG'])
                                                elif comp_enh == 'BZRK':
                                                    c_health = round(c_health - dmg['DMG'])
                                                    c_attack = round(c_attack + dmg['DMG'])
                                                elif comp_enh == 'CRYSTAL':
                                                    c_health = round(c_health - dmg['DMG'])
                                                    c_defense = round(c_defense + dmg['DMG'])
                                                elif comp_enh == 'GROWTH':
                                                    c_max_health = round(c_max_health - dmg['DMG'])
                                                    c_defense = round(c_defense + (dmg['DMG'] * .5))
                                                    c_attack = round(c_attack + (dmg['DMG'] * .5))
                                                elif comp_enh == 'STANCE':
                                                    tempattack = dmg['DMG']
                                                    c_attack = c_defense
                                                    c_defense = tempattack
                                                elif comp_enh == 'CONFUSE':
                                                    tempattack = dmg['DMG']
                                                    o_attack = o_defense
                                                    o_defense = tempattack
                                                elif comp_enh == 'BLINK':
                                                    c_stamina = round(c_stamina - dmg['DMG'])
                                                    o_stamina = round(o_stamina + dmg['DMG'] - 10)
                                                elif comp_enh == 'SLOW':
                                                    tempstam = round(o_stamina + dmg['DMG'])
                                                    c_stamina = round(c_stamina - dmg['DMG'])
                                                    o_stamina = c_stamina
                                                    c_stamina = tempstam
                                                elif comp_enh == 'HASTE':
                                                    tempstam = round(o_stamina - dmg['DMG'])
                                                    c_stamina = round(c_stamina + dmg['DMG'])
                                                    o_stamina = c_stamina
                                                    c_stamina = tempstam
                                                elif comp_enh == 'SOULCHAIN':
                                                    c_stamina = round(dmg['DMG'])
                                                    o_stamina = c_stamina
                                                elif comp_enh == 'GAMBLE':
                                                    c_health = round(dmg['DMG'])
                                                    o_health = c_health
                                                elif comp_enh == 'FEAR':
                                                    c_max_health = round(c_max_health - dmg['DMG'])
                                                    t_defense = round(t_defense - (dmg['DMG'] * .5))
                                                    t_attack = round(t_attack - (dmg['DMG'] * .5))
                                                elif comp_enh == 'WAVE':
                                                    t_health = round(t_health - dmg['DMG'])
                                                elif comp_enh == 'BLAST':
                                                    t_health = round(t_health - dmg['DMG'])
                                                elif comp_enh == 'CREATION':
                                                    c_max_health = round(c_max_health + dmg['DMG'])
                                                    c_health = round(c_health + dmg['DMG'])
                                                elif comp_enh == 'DESTRUCTION':
                                                    t_max_health = round(t_max_health - dmg['DMG'])

                                                o_stamina = o_stamina - int(dmg['STAMINA_USED'])

                                                embedVar = discord.Embed(
                                                    title=f"{o_card.upper()} ASSISTED {c_card.upper()}",
                                                    colour=0xe91e63)
                                                embedVar.add_field(name=f"{o_card} used {omove_enhanced_text}!",
                                                                   value=f"Enhanced {comp_enh}")
                                                await button_ctx.send(embed=embedVar)
                                                turn_total = turn_total + 1
                                                turn = 1
                                            else:
                                                await button_ctx.send(m.NOT_ENOUGH_STAMINA)
                                                turn = 0
                                        elif button_ctx.custom_id == "8":
                                            c_enhancer_used = True
                                            dmg = damage_cal(c_universe, c_card, c_enhancer, c_attack, c_defense,
                                                             o_defense, c_stamina, c_enhancer_used, c_health, o_health,
                                                             o_stamina, c_max_health, o_attack,
                                                             c_special_move_description, turn_total, ccard_lvl_ap_buff)
                                            c_enhancer_used = False
                                            cdmg = dmg['DMG']
                                            cenh_type = dmg['ENHANCED_TYPE']
                                            if dmg['CAN_USE_MOVE']:
                                                if cenh_type == 'ATK':
                                                    o_attack = round(o_attack + dmg['DMG'])
                                                elif cenh_type == 'DEF':
                                                    o_defense = round(o_defense + dmg['DMG'])
                                                elif cenh_type == 'STAM':
                                                    o_stamina = round(o_stamina + dmg['DMG'])
                                                elif cenh_type == 'HLT':
                                                    o_health = round(o_health + dmg['DMG'])
                                                elif cenh_type == 'LIFE':
                                                    o_health = round(o_health + dmg['DMG'])
                                                    c_health = round(c_health - dmg['DMG'])
                                                elif cenh_type == 'DRAIN':
                                                    o_stamina = round(o_stamina + dmg['DMG'])
                                                    c_stamina = round(c_stamina - dmg['DMG'])
                                                elif cenh_type == 'FLOG':
                                                    o_attack = round(o_attack + dmg['DMG'])
                                                    t_attack = round(t_attack - dmg['DMG'])
                                                elif cenh_type == 'WITHER':
                                                    o_defense = round(o_defense + dmg['DMG'])
                                                    t_defense = round(t_defense - dmg['DMG'])
                                                elif cenh_type == 'RAGE':
                                                    o_defense = round(o_defense - dmg['DMG'])
                                                    o_attack = round(o_attack + dmg['DMG'])
                                                elif cenh_type == 'BRACE':
                                                    o_defense = round(o_defense + dmg['DMG'])
                                                    o_attack = round(o_attack - dmg['DMG'])
                                                elif cenh_type == 'BZRK':
                                                    o_health = round(o_health - dmg['DMG'])
                                                    o_attack = round(o_attack + dmg['DMG'])
                                                elif cenh_type == 'CRYSTAL':
                                                    o_health = round(o_health - dmg['DMG'])
                                                    o_defense = round(o_defense + dmg['DMG'])
                                                elif cenh_type == 'GROWTH':
                                                    o_max_health = round(o_max_health - dmg['DMG'])
                                                    o_defense = round(o_defense + (dmg['DMG'] * .5))
                                                    o_attack = round(o_attack + (dmg['DMG'] * .5))
                                                elif cenh_type == 'STANCE':
                                                    tempattack = dmg['DMG']
                                                    o_attack = o_defense
                                                    o_defense = tempattack
                                                elif cenh_type == 'CONFUSE':
                                                    tempattack = dmg['DMG']
                                                    c_attack = c_defense
                                                    c_defense = tempattack
                                                elif cenh_type == 'BLINK':
                                                    o_stamina = round(o_stamina - dmg['DMG'])
                                                    c_stamina = round(c_stamina + dmg['DMG'] - 10)
                                                elif cenh_type == 'SLOW':
                                                    tempstam = round(c_stamina + dmg['DMG'])
                                                    o_stamina = round(o_stamina - dmg['DMG'])
                                                    c_stamina = o_stamina
                                                    o_stamina = tempstam
                                                elif cenh_type == 'HASTE':
                                                    tempstam = round(c_stamina - dmg['DMG'])
                                                    o_stamina = round(o_stamina + dmg['DMG'])
                                                    c_stamina = o_stamina
                                                    o_stamina = tempstam
                                                elif cenh_type == 'SOULCHAIN':
                                                    o_stamina = round(dmg['DMG'])
                                                    c_stamina = o_stamina
                                                elif cenh_type == 'GAMBLE':
                                                    o_health = round(dmg['DMG'])
                                                    c_health = o_health
                                                elif cenh_type == 'FEAR':
                                                    o_max_health = round(o_max_health - dmg['DMG'])
                                                    t_defense = round(t_defense - (dmg['DMG'] * .5))
                                                    t_attack = round(t_attack - (dmg['DMG'] * .5))
                                                elif cenh_type == 'WAVE':
                                                    t_health = round(t_health - dmg['DMG'])
                                                elif cenh_type == 'BLAST':
                                                    t_health = round(t_health - dmg['DMG'])
                                                elif cenh_type == 'CREATION':
                                                    o_max_health = round(o_max_health + dmg['DMG'])
                                                    o_health = round(o_health + dmg['DMG'])
                                                elif enh_type == 'DESTRUCTION':
                                                    t_max_health = round(t_max_health - dmg['DMG'])

                                                c_stamina = c_stamina - int(dmg['STAMINA_USED'])

                                                embedVar = discord.Embed(
                                                    title=f"{c_card.upper()} ASSISTED {o_card.upper()}",
                                                    colour=0xe91e63)
                                                embedVar.add_field(name=f"{c_card} used {cmove_enhanced_text}!",
                                                                   value=f"Enhanced {cenh_type}")
                                                await button_ctx.send(embed=embedVar)
                                                turn_total = turn_total + 1
                                                turn = 1
                                            else:
                                                await button_ctx.send(m.NOT_ENOUGH_STAMINA)
                                                turn = 0
                                        elif button_ctx.custom_id == "9":
                                            if c_stamina >= 20:
                                                c_stamina = c_stamina - 20
                                                c_block_used = True
                                                c_defense = c_defense * 2
                                                embedVar = discord.Embed(
                                                    title=f"{c_card} **Defended** 🛡️ {o_card.upper()}",
                                                    colour=0xe91e63)

                                                await button_ctx.send(embed=embedVar)
                                                turn_total = turn_total + 1
                                                turn = 1
                                            else:
                                                await button_ctx.send(f"{c_card} is too tired to block...")
                                                turn = 0

                                    if button_ctx.custom_id == "0":
                                        block_message = ""
                                        if o_stamina >= 20:
                                            if mode in co_op_modes:
                                                block_message = f"{o_card} **Defended** 🛡️ {c_card.upper()}"
                                                o_defend_used = True
                                            else:
                                                block_message = f"{o_card} **Defended** 🛡️"
                                                o_block_used = True
                                            o_stamina = o_stamina - 20
                                            o_defense = o_defense * 2
                                            embedVar = discord.Embed(title=f"{block_message}", colour=0xe91e63)

                                            await button_ctx.send(embed=embedVar)
                                            turn_total = turn_total + 1
                                            turn = 1
                                        else:
                                            await button_ctx.send(f"{o_card} is too tired to block...")
                                            turn = 0

                                    if button_ctx.custom_id in main_options:
                                        # If you have enough stamina for move, use it
                                        if dmg['CAN_USE_MOVE']:
                                            o_pet_used = False
                                            if dmg['ENHANCE']:
                                                enh_type = dmg['ENHANCED_TYPE']

                                                if enh_type == 'ATK':
                                                    o_attack = round(o_attack + dmg['DMG'])
                                                elif enh_type == 'DEF':
                                                    o_defense = round(o_defense + dmg['DMG'])
                                                elif enh_type == 'STAM':
                                                    o_stamina = round(o_stamina + dmg['DMG'])
                                                elif enh_type == 'HLT':
                                                    o_health = round(o_health + dmg['DMG'])
                                                elif enh_type == 'LIFE':
                                                    o_health = round(o_health + dmg['DMG'])
                                                    t_health = round(t_health - dmg['DMG'])
                                                elif enh_type == 'DRAIN':
                                                    o_stamina = round(o_stamina + dmg['DMG'])
                                                    t_stamina = round(t_stamina - dmg['DMG'])
                                                elif enh_type == 'FLOG':
                                                    o_attack = round(o_attack + dmg['DMG'])
                                                    t_attack = round(t_attack - dmg['DMG'])
                                                elif enh_type == 'WITHER':
                                                    o_defense = round(o_defense + dmg['DMG'])
                                                    t_defense = round(t_defense - dmg['DMG'])
                                                elif enh_type == 'RAGE':
                                                    o_defense = round(o_defense - dmg['DMG'])
                                                    o_attack = round(o_attack + dmg['DMG'])
                                                elif enh_type == 'BRACE':
                                                    o_defense = round(o_defense + dmg['DMG'])
                                                    o_attack = round(o_attack - dmg['DMG'])
                                                elif enh_type == 'BZRK':
                                                    o_health = round(o_health - dmg['DMG'])
                                                    o_attack = round(o_attack + dmg['DMG'])
                                                elif enh_type == 'CRYSTAL':
                                                    o_health = round(o_health - dmg['DMG'])
                                                    o_defense = round(o_defense + dmg['DMG'])
                                                elif enh_type == 'GROWTH':
                                                    o_max_health = round(o_max_health - dmg['DMG'])
                                                    o_defense = round(o_defense + (dmg['DMG'] * .5))
                                                    o_attack = round(o_attack + (dmg['DMG'] * .5))
                                                elif enh_type == 'STANCE':
                                                    tempattack = dmg['DMG']
                                                    o_attack = o_defense
                                                    o_defense = tempattack
                                                elif enh_type == 'CONFUSE':
                                                    tempattack = dmg['DMG']
                                                    t_attack = t_defense
                                                    t_defense = tempattack
                                                elif enh_type == 'BLINK':
                                                    o_stamina = round(o_stamina - dmg['DMG'])
                                                    t_stamina = round(t_stamina + dmg['DMG'] - 10)
                                                elif enh_type == 'SLOW':
                                                    tempstam = round(t_stamina + dmg['DMG'])
                                                    o_stamina = round(o_stamina - dmg['DMG'])
                                                    t_stamina = o_stamina
                                                    o_stamina = tempstam
                                                elif enh_type == 'HASTE':
                                                    tempstam = round(t_stamina - dmg['DMG'])
                                                    o_stamina = round(o_stamina + dmg['DMG'])
                                                    t_stamina = o_stamina
                                                    o_stamina = tempstam
                                                elif enh_type == 'SOULCHAIN':
                                                    o_stamina = round(dmg['DMG'])
                                                    t_stamina = o_stamina
                                                elif enh_type == 'GAMBLE':
                                                    if mode in D_modes:
                                                        t_health = round(dmg['DMG']) * 2
                                                        o_health = round(dmg['DMG'])
                                                    elif mode in B_modes:
                                                        t_health = round(dmg['DMG']) * 3
                                                        o_health = round(dmg['DMG'])
                                                    else:
                                                        t_health = round(dmg['DMG'])
                                                        o_health = round(dmg['DMG'])
                                                elif enh_type == 'FEAR':
                                                    o_max_health = round(o_max_health - dmg['DMG'])
                                                    t_defense = round(t_defense - (dmg['DMG'] * .5))
                                                    t_attack = round(t_attack - (dmg['DMG'] * .5))
                                                elif enh_type == 'WAVE':
                                                    t_health = round(t_health - dmg['DMG'])
                                                elif enh_type == 'BLAST':
                                                    t_health = round(t_health - dmg['DMG'])
                                                elif enh_type == 'CREATION':
                                                    o_max_health = round(o_max_health + dmg['DMG'])
                                                    o_health = round(o_health + dmg['DMG'])
                                                elif enh_type == 'DESTRUCTION':
                                                    t_max_health = round(t_max_health - dmg['DMG'])

                                                o_stamina = o_stamina - int(dmg['STAMINA_USED'])

                                                embedVar = discord.Embed(title=f"{dmg['MESSAGE']}",
                                                                         colour=embed_color_o)
                                                await button_ctx.send(embed=embedVar)
                                                turn_total = turn_total + 1
                                                turn = 1
                                            elif dmg['DMG'] == 0:
                                                o_stamina = o_stamina - int(dmg['STAMINA_USED'])

                                                embedVar = discord.Embed(title=f"{dmg['MESSAGE']}", colour=embed_color_o)
                                                if oarm_barrier_active:
                                                    oarm_barrier_active=False
                                                    embedVar.add_field(name=f"{o_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                await button_ctx.send(embed=embedVar)
                                                turn_total = turn_total + 1
                                                turn = 1
                                            else:
                                                if t_universe == "Naruto" and t_stamina < 10:
                                                    t_health = t_health 
                                                    embedVar = discord.Embed(title=f"{t_card.upper()}: Substitution Jutsu", description=f"{o_card} strikes a log", colour=0xe91e63)
                                                    if oarm_barrier_active:
                                                        oarm_barrier_active=False
                                                        embedVar.add_field(name=f"{o_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                    await button_ctx.send(embed=embedVar)
                                                elif tarm_shield_active:

                                                    if tshield_value > 0:
                                                        tshield_value = tshield_value -dmg['DMG']
                                                        t_health = t_health 
                                                        if tshield_value <=0:
                                                            embedVar = discord.Embed(title=f"{t_card.upper()}'s' **Shield** Shattered!", description=f"{o_card} breaks the **Shield**!", colour=0xe91e63)
                                                            if oarm_barrier_active:
                                                                oarm_barrier_active=False
                                                                embedVar.add_field(name=f"{o_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                            await button_ctx.send(embed=embedVar)
                                                            tarm_shield_active = False
                                                        else:
                                                            embedVar = discord.Embed(title=f"{t_card.upper()} Activates **Shield** 🌐", description=f"{o_card} strikes the **Shield** for **{dmg['DMG']} DMG!**\n **{tshield_value} Shield** Left!", colour=0xe91e63)
                                                            if oarm_barrier_active:
                                                                oarm_barrier_active=False
                                                                embedVar.add_field(name=f"{o_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                            await button_ctx.send(embed=embedVar)

                                                elif tarm_barrier_active:
                                                    if tbarrier_count >1:
                                                        t_health = t_health 
                                                        embedVar = discord.Embed(title=f"{t_card.upper()} Activates **Barrier** 💠", description=f"{o_card}'s attack **Nullified**!\n **{tbarrier_count - 1} Barriers** remain!", colour=0xe91e63)
                                                        if oarm_barrier_active:
                                                            oarm_barrier_active=False
                                                            embedVar.add_field(name=f"{o_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                        await button_ctx.send(embed=embedVar)
                                                        tbarrier_count = tbarrier_count - 1
                                                    elif tbarrier_count==1:
                                                        embedVar = discord.Embed(title=f"{t_card.upper()}'s **Barrier** Broken!", description=f"{o_card} destroys the **Barrier**", colour=0xe91e63)
                                                        tbarrier_count = tbarrier_count - 1
                                                        if oarm_barrier_active:
                                                            oarm_barrier_active=False
                                                            embedVar.add_field(name=f"{o_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                        await button_ctx.send(embed=embedVar)
                                                        tarm_barrier_active = False
                                                elif tarm_parry_active:
                                                    if tparry_count > 1:
                                                        t_health = t_health
                                                        tparry_damage = round(dmg['DMG'] / 2)
                                                        t_health = t_health - tparry_damage
                                                        o_health = o_health - tparry_damage
                                                        tparry_count = tparry_count - 1
                                                        embedVar = discord.Embed(title=f"{t_card.upper()} Activates **Parry** 🔄", description=f"{o_card} takes {tparry_damage}! DMG\n **{tparry_count} Parries** to go!!", colour=0xe91e63)
                                                        if oarm_barrier_active:
                                                            oarm_barrier_active=False
                                                            embedVar.add_field(name=f"{o_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                        await button_ctx.send(embed=embedVar)
                                                        
                                                    elif tparry_count==1:
                                                        embedVar = discord.Embed(title=f"{t_card.upper()} **Parry** Penetrated!!", description=f"{o_card} breaks the **Parry**", colour=0xe91e63)
                                                        t_health = t_health
                                                        tparry_damage = round(dmg['DMG'] / 2)
                                                        t_health = t_health - tparry_damage
                                                        o_health = o_health - tparry_damage
                                                        tparry_count = tparry_count - 1
                                                        if oarm_barrier_active:
                                                            oarm_barrier_active=False
                                                            embedVar.add_field(name=f"{o_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                        await button_ctx.send(embed=embedVar)
                                                        tarm_parry_active = False
                                                else:
                                                    t_health = t_health - dmg['DMG']
                                                    embedVar = discord.Embed(title=f"{dmg['MESSAGE']}", colour=embed_color_o)
                                                    if oarm_barrier_active:
                                                        oarm_barrier_active=False
                                                        embedVar.add_field(name=f"{o_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                    await button_ctx.send(embed=embedVar)
                                                if t_health <= 0:
                                                    if t_final_stand==True:
                                                        
                                                        embedVar = discord.Embed(title=f"{t_card.upper()}'s LAST STAND", description=f"{t_card} FINDS RESOLVE", colour=0xe91e63)
                                                        embedVar.add_field(name=f"{t_card} resolved and continues to fight", value="All stats & stamina increased")
                                                        if oarm_barrier_active:
                                                            oarm_barrier_active=False
                                                            embedVar.add_field(name=f"{o_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                        await button_ctx.send(embed=embedVar)
                                                        t_health = int(.75 * (t_attack + t_defense))
                                                        t_attack = t_attack + (.50 * t_attack)
                                                        t_defense = t_defense + (.50 * t_defense)
                                                        t_used_resolve = True
                                                        t_used_focus = True
                                                        t_final_stand = False
                                                        o_stamina = o_stamina - dmg['STAMINA_USED']
                                                        turn_total = turn_total + 1
                                                        turn = 1
                                                    else:
                                                        t_health = 0
                                                        o_stamina = o_stamina - dmg['STAMINA_USED']
                                                        turn_total = turn_total + 1
                                                else:
                                                    o_stamina = o_stamina - dmg['STAMINA_USED']
                                                    turn_total = turn_total + 1
                                                    turn = 1
                                        else:
                                            emessage = m.NOT_ENOUGH_STAMINA
                                            embedVar = discord.Embed(title=emessage,
                                                                     description=f"Use abilities to Increase `STAM` or enter `FOCUS STATE`!",
                                                                     colour=0xe91e63)
                                            await button_ctx.send(embed=embedVar)
                                            turn = 0
                                except asyncio.TimeoutError:

                                    await private_channel.send(f"{ctx.author.mention} {m.STORY_ENDED}")
                                    if private_channel.guild:
                                        await discord.TextChannel.delete(private_channel, reason=None)
                                    return

                    # Opponent Turn Start
                    elif turn == 1:
                        await asyncio.sleep(1)
                        if turn_total == 1 and botActive and mode in B_modes:
                            embedVar = discord.Embed(title=f"**{t_card}** Says : ", description=f"{t_welcome}",
                                                     colour=0xe91e63)
                            embedVar.add_field(name=f"**{o_card}** Braces: ", value=f"{t_feeling}")
                            embedVar.set_footer(text=f"{t_card} begins his assault")
                            await private_channel.send(embed=embedVar)
                            await asyncio.sleep(5)
                        if t_attack <= 25:
                            t_attack = 25
                        if t_defense <= 30:
                            t_defense = 30
                        if t_health >= t_max_health:
                            t_health = t_max_health
                        # o_pet_used = True
                        if t_health <= (t_max_health * .25):
                            embed_color_t = 0xe74c3c
                            if t_chainsaw == True:
                                if t_atk_chainsaw == False:
                                    t_atk_chainsaw = True
                                    t_chainsaw = False
                                    t_defense = t_defense * 2
                                    t_attack = t_attack * 2
                                    embedVar = discord.Embed(title=f"{t_card.upper()}'s Devilization",
                                                             description=f"**{t_card}** Doubles Stats", colour=0xe91e63)
                                    await private_channel.send(embed=embedVar)

                        elif t_health <= (t_max_health * .50):
                            embed_color_t = 0xe67e22
                            if t_chainsaw == True:
                                if t_atk_chainsaw == False:
                                    t_atk_chainsaw = True
                                    t_chainsaw = False
                                    t_defense = t_defense * 2
                                    t_attack = t_attack * 2
                                    embedVar = discord.Embed(title=f"{t_card.upper()}'s Devilization",
                                                             description=f"**{t_card}** Doubles Stats", colour=0xe91e63)
                                    await private_channel.send(embed=embedVar)
                        elif t_health <= (t_max_health * .75):
                            embed_color_t = 0xf1c40f
                        else:
                            embed_color_t = 0x2ecc71

                        # Focus
                        if t_stamina < 10:
                            t_focus_count = t_focus_count + 1

                            # o_pet_used = True
                            fortitude = 0.0
                            low = t_health - (t_health * .90)
                            high = t_health - (t_health * .80)
                            fortitude = random.randint(int(low), int(high))

                            t_stamina = t_focus
                            t_healthcalc = round(((t_focus * .40) + (fortitude * 1)) / 2)
                            t_attackcalc = round(.20 * ((t_focus * .15) + round(fortitude * 1)))
                            t_defensecalc = round(.20 * ((t_focus * .10) + round(fortitude * 1)))
                            t_newhealth = 0
                            healmessage = ""
                            messagenumber = 0
                            if t_universe == "Crown Rift Madness":
                                healmessage = "yet inner **Madness** drags on..."
                                messagenumber = 3
                            else:
                                if t_health <= t_max_health:
                                    t_newhealth = t_health + t_healthcalc
                                    if t_newhealth > t_max_health:
                                        healmessage = f"recovered!"
                                        messagenumber = 1
                                        t_health = t_max_health
                                    else:
                                        healmessage = f"stopped the bleeding..."
                                        messagenumber = 2
                                        t_health = t_newhealth
                                else:
                                    healmessage = f"hasn't been touched..."
                                    messagenumber = 0
                            if not t_used_resolve:
                                t_attack = t_attack + t_attackcalc
                                t_defense = t_defense + t_defensecalc
                            t_used_focus = True
                            if mode not in AUTO_BATTLE_modes:
                                if mode in B_modes:
                                    embedVar = discord.Embed(title=f"**{t_card}** Enters Focus State",
                                                             description=f"{t_powerup}", colour=0xe91e63)
                                    embedVar.add_field(name=f"A great aura starts to envelop **{t_card}** ",
                                                       value=f"{t_aura}")
                                    embedVar.set_footer(text=f"{t_card} Says: 'Now, are you ready for a real fight?'")
                                    await private_channel.send(embed=embedVar)
                                else:
                                    embedVar = discord.Embed(title=f"{t_card.upper()} FOCUSED",
                                                             description=f"**{t_card} says**\n{t_focus_description}",
                                                             colour=0xe91e63)
                                    embedVar.add_field(name=f"{t_card} focused and {healmessage}",
                                                       value="All stats & stamina increased")
                                    await private_channel.send(embed=embedVar)
                            if not t_used_resolve and t_used_focus and t_universe == "Digimon":  # Digimon Universal Trait
                                # fortitude or luck is based on health
                                fortitude = 0.0
                                low = t_health - (t_health * .75)
                                high = t_health - (t_health * .66)
                                fortitude = random.randint(int(low), int(high))
                                # Resolve Scaling
                                t_resolve_health = round(fortitude + (.5 * t_resolve))
                                t_resolve_attack = round((.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                t_resolve_defense = round((.30 * t_defense) * (t_resolve / (.50 * t_defense)))

                                t_stamina = t_stamina + t_resolve
                                t_health = t_health + t_resolve_health
                                t_attack = round(t_attack + t_resolve_attack)
                                t_defense = round(t_defense - t_resolve_defense)
                                t_used_resolve = True

                                embedVar = discord.Embed(title=f"{t_card} STRENGTHENED RESOLVE :zap:",
                                                         description=f"**{t_card} says**\n{t_resolve_description}",
                                                         colour=0xe91e63)
                                embedVar.add_field(name=f"Transformation: Digivolve", value="On Focus you Resolve.")
                                await private_channel.send(embed=embedVar)
                                if mode in B_modes:
                                    embedVar = discord.Embed(title=f"{t_card} Resolved!", description=f"{t_rmessage}",
                                                             colour=0xe91e63)
                                    embedVar.set_footer(text=f"{o_card} this will not be easy...")
                                    await private_channel.send(embed=embedVar)

                            elif t_universe == "League Of Legends":
                                embedVar = discord.Embed(title=f"Turret Shot hits {o_card} for **30** Damage 💥",
                                                         colour=0xe91e63)
                                await private_channel.send(embed=embedVar)
                                o_health = round(o_health - 30)

                            elif t_universe == "Solo Leveling":
                                embedVar = discord.Embed(
                                    title=f"Ruler's Authority... {o_card} loses **{30 + turn_total}** 🛡️ 🔻",
                                    colour=0xe91e63)
                                await private_channel.send(embed=embedVar)
                                o_defense = round(o_defense - (30 + turn_total))

                            elif t_universe == "Attack On Titan":
                                embedVar = discord.Embed(title=f"Rally! **{t_card}** Increased Max Health ❤️",
                                                         colour=0xe91e63)
                                await private_channel.send(embed=embedVar)
                                t_max_health = round(t_max_health + 100)

                            elif t_universe == "Black Clover":
                                embedVar = discord.Embed(title=f"Mana Zone! {t_card} Increased Stamina 🌀",
                                                         colour=0xe91e63)
                                await private_channel.send(embed=embedVar)
                                t_stamina = 100
                                tcard_lvl_ap_buff = tcard_lvl_ap_buff + 30
                            elif t_universe == "Death Note":
                                if turn_total >= 24:
                                    embedVar = discord.Embed(title=f"{o_card.upper()}'s' Scheduled Death 📓",
                                                             description=f"**{t_card} says**\n**Delete**",
                                                             colour=0xe91e63)
                                    embedVar.add_field(name=f"{o_card} had a heart attack and died", value=f"Death....")
                                    await private_channel.send(embed=embedVar)
                                    o_health = 0

                            if o_universe == "One Punch Man":
                                embedVar = discord.Embed(title=f"Hero Reinforcements! {o_card} Increased Health!  ❤️",
                                                         colour=0xe91e63)
                                await private_channel.send(embed=embedVar)
                                o_health = round(o_health + 100)
                                o_max_health = round(o_max_health + 100)

                            elif o_universe == "7ds":
                                embedVar = discord.Embed(title=f"Increase Power Level! {o_card} Increased Stamina 🌀",
                                                         colour=0xe91e63)
                                await private_channel.send(embed=embedVar)
                                o_stamina = o_stamina + 60

                            elif o_universe == "Souls":
                                embedVar = discord.Embed(
                                    title=f"Combo Recognition! {o_card} Increased Attack by **{30 + turn_total}** 🔺 ",
                                    colour=0xe91e63)
                                await private_channel.send(embed=embedVar)
                                o_attack = round(o_attack + (30 + turn_total))

                            else:
                                turn_total = turn_total + 1
                                if t_universe != "Crown Rift Madness":
                                    if mode in co_op_modes:
                                        turn = 2
                                    else:
                                        turn = 0
                                else:
                                    turn = 1
                            turn_total = turn_total + 1
                            if t_universe != "Crown Rift Madness":
                                if mode in co_op_modes:
                                    turn = 2
                                else:
                                    turn = 0
                            else:
                                turn = 1
                        else:
                            # UNIVERSE CARD
                            # Turn Selector is for determining if in co-op or not, swapping turns after using moves
                            turn_selector = 0
                            if mode in co_op_modes:
                                turn_selector = 2
                            else:
                                turn_selector = 0
                            if mode not in AUTO_BATTLE_modes:
                                tap1 = list(t_1.values())[0] + tcard_lvl_ap_buff
                                tap2 = list(t_2.values())[0] + tcard_lvl_ap_buff
                                tap3 = list(t_3.values())[0] + tcard_lvl_ap_buff
                                tenh1 = list(t_enhancer.values())[0]
                                tenh_name = list(t_enhancer.values())[2]
                                tpet_enh_name = list(tpet_move.values())[2]
                                tpet_msg_on_resolve = ""
                                # UNIVERSE CARD
                                player_2_card = showcard(t, t_max_health, t_health, t_max_stamina, t_stamina,
                                                         t_used_resolve, ttitle, t_used_focus, t_attack, t_defense,
                                                         turn_total, tap1, tap2, tap3, tenh1, tenh_name, tcard_lvl, o_defense)
                                await private_channel.send(file=player_2_card)
                            aiMove = 0

                            if t_used_resolve and not t_pet_used and t_stamina >= 30:
                                aiMove = 6
                            elif o_stamina < 10:
                                if t_enhancer['TYPE'] in Gamble_Enhancer_Check:
                                    if t_stamina >= 20:
                                        aiMove = 4
                                    else:
                                        aiMove = 1
                                else:
                                    aiMove = 1
                            elif t_health <= (.50 * t_max_health) and t_used_resolve == False and t_used_focus:
                                aiMove = 5
                            elif t_stamina >= 160 and (t_health >= o_health):
                                aiMove = 3
                            elif t_stamina >= 160:
                                aiMove = 3
                            elif t_stamina >= 150 and (t_health >= o_health):
                                aiMove = 1
                            elif t_stamina >= 150:
                                aiMove = 1
                            elif t_stamina >= 140 and (t_health >= o_health):
                                aiMove = 1
                            elif t_stamina >= 140:
                                aiMove = 3
                            elif t_stamina >= 130 and (t_health >= o_health):
                                aiMove = 1
                            elif t_stamina >= 130:
                                aiMove = 3
                            elif t_stamina >= 120 and (t_health >= o_health):
                                aiMove = 2
                            elif t_stamina >= 120:
                                aiMove = 3
                            elif t_stamina >= 110 and (t_health >= o_health):
                                aiMove = 1
                            elif t_stamina >= 110:
                                aiMove = 2
                            elif t_stamina >= 100 and (t_health >= o_health):
                                if t_enhancer['TYPE'] in Gamble_Enhancer_Check or t_enhancer[
                                    'TYPE'] in Healer_Enhancer_Check:
                                    aiMove = 3
                                elif t_enhancer['TYPE'] in Support_Enhancer_Check or t_enhancer[
                                    'TYPE'] in Stamina_Enhancer_Check or t_enhancer['TYPE'] in Turn_Enhancer_Check:
                                    aiMove = 4
                                else:
                                    aiMove = 1
                            elif t_stamina >= 100:
                                aiMove = 1
                            elif t_stamina >= 90 and (t_health >= o_health):
                                aiMove = 3
                            elif t_stamina >= 90:
                                if t_enhancer['TYPE'] in Gamble_Enhancer_Check:
                                    aiMove = 3
                                elif t_enhancer['TYPE'] in Support_Enhancer_Check or t_enhancer[
                                    'TYPE'] in Stamina_Enhancer_Check or t_enhancer['TYPE'] in Sacrifice_Enhancer_Check:
                                    aiMove = 4
                                else:
                                    aiMove = 1
                            elif t_stamina >= 80 and (t_health >= o_health):
                                aiMove = 1
                            elif t_stamina >= 80:
                                aiMove = 3
                            elif t_stamina >= 70 and (t_health >= o_health):
                                if t_enhancer['TYPE'] in Gamble_Enhancer_Check:
                                    aiMove = 1
                                else:
                                    aiMove = 4
                            elif t_stamina >= 70:
                                aiMove = 1
                            elif t_stamina >= 60 and (t_health >= o_health):
                                if t_used_resolve == False and t_used_focus:
                                    aiMove = 5
                                elif t_used_focus == False:
                                    aiMove = 2
                                else:
                                    aiMove = 1
                            elif t_stamina >= 60:
                                if t_used_resolve == False and t_used_focus:
                                    aiMove = 5
                                elif t_used_focus == False:
                                    aiMove = 2
                                else:
                                    aiMove = 1
                            elif t_stamina >= 50 and (t_health >= o_health):
                                if t_used_resolve == False and t_used_focus:
                                    aiMove = 5
                                elif t_used_focus == False:
                                    aiMove = 2
                                else:
                                    aiMove = 1
                            elif t_stamina >= 50:
                                if t_used_resolve == False and t_used_focus:
                                    aiMove = 5
                                elif t_used_focus == False:
                                    aiMove = 2
                                elif t_enhancer['TYPE'] in Support_Enhancer_Check or t_enhancer[
                                    'TYPE'] in Stamina_Enhancer_Check:
                                    aiMove = 4
                                else:
                                    aiMove = 1
                            elif t_stamina >= 40 and (t_health >= o_health):
                                aiMove = 1
                            elif t_stamina >= 40:
                                aiMove = 2
                            elif t_stamina >= 30 and (t_health >= o_health):
                                if t_enhancer['TYPE'] in Gamble_Enhancer_Check:
                                    aiMove = 1
                                elif t_enhancer['TYPE'] in Support_Enhancer_Check or t_enhancer[
                                    'TYPE'] in Stamina_Enhancer_Check:
                                    aiMove = 2
                                else:
                                    aiMove = 4
                            elif t_stamina >= 30:
                                aiMove = 2
                            elif t_stamina >= 20 and (t_health >= o_health):
                                aiMove = 1
                            elif t_stamina >= 20:
                                if t_enhancer['TYPE'] in Gamble_Enhancer_Check:
                                    aiMove = 1
                                elif t_enhancer['TYPE'] in Support_Enhancer_Check or t_enhancer[
                                    'TYPE'] in Stamina_Enhancer_Check:
                                    aiMove = 1
                                else:
                                    aiMove = 4
                            elif t_stamina >= 10:
                                aiMove = 1
                            else:
                                aiMove = 0

                            t_special_move_description = " "
                            if int(aiMove) == 0:
                                t_health = 0
                            if int(aiMove) == 1:

                                if c_block_used == True:
                                    dmg = damage_cal(t_universe, t_card, t_1, t_attack, t_defense, c_defense, t_stamina,
                                                     t_enhancer_used, t_health, c_health, c_stamina, t_max_health,
                                                     c_attack, t_special_move_description, turn_total,
                                                     tcard_lvl_ap_buff)
                                else:
                                    dmg = damage_cal(t_universe, t_card, t_1, t_attack, t_defense, o_defense, t_stamina,
                                                     t_enhancer_used, t_health, o_health, o_stamina, t_max_health,
                                                     o_attack, t_special_move_description, turn_total,
                                                     tcard_lvl_ap_buff)
                            elif int(aiMove) == 2:

                                if c_block_used == True:
                                    dmg = damage_cal(t_universe, t_card, t_2, t_attack, t_defense, c_defense, t_stamina,
                                                     t_enhancer_used, t_health, c_health, c_stamina, t_max_health,
                                                     c_attack, t_special_move_description, turn_total,
                                                     tcard_lvl_ap_buff)
                                else:
                                    dmg = damage_cal(t_universe, t_card, t_2, t_attack, t_defense, o_defense, t_stamina,
                                                     t_enhancer_used, t_health, o_health, o_stamina, t_max_health,
                                                     o_attack, t_special_move_description, turn_total,
                                                     tcard_lvl_ap_buff)
                            elif int(aiMove) == 3:

                                if c_block_used == True:
                                    dmg = damage_cal(t_universe, t_card, t_3, t_attack, t_defense, c_defense, t_stamina,
                                                     t_enhancer_used, t_health, c_health, c_stamina, t_max_health,
                                                     c_attack, t_special_move_description, turn_total,
                                                     tcard_lvl_ap_buff)
                                else:
                                    dmg = damage_cal(t_universe, t_card, t_3, t_attack, t_defense, o_defense, t_stamina,
                                                     t_enhancer_used, t_health, o_health, o_stamina, t_max_health,
                                                     o_attack, t_special_move_description, turn_total,
                                                     tcard_lvl_ap_buff)
                                if mode not in AUTO_BATTLE_modes:
                                    if t_gif != "N/A":
                                        await private_channel.send(f"{t_gif}")
                            elif int(aiMove) == 4:

                                t_enhancer_used = True
                                if c_block_used == True:
                                    dmg = damage_cal(t_universe, t_card, t_enhancer, t_attack, t_defense, c_defense,
                                                     t_stamina, t_enhancer_used, t_health, c_health, c_stamina,
                                                     t_max_health, c_attack, t_special_move_description, turn_total,
                                                     tcard_lvl_ap_buff)
                                else:
                                    dmg = damage_cal(t_universe, t_card, t_enhancer, t_attack, t_defense, o_defense,
                                                     t_stamina, t_enhancer_used, t_health, o_health, o_stamina,
                                                     t_max_health, o_attack, t_special_move_description, turn_total,
                                                     tcard_lvl_ap_buff)
                                t_enhancer_used = False
                            elif int(aiMove) == 5:
                                if not t_used_resolve and t_used_focus:
                                    if mode in B_modes:
                                        embedVar = discord.Embed(title=f"{t_card} Resolved!",
                                                                 description=f"{t_rmessage}", colour=0xe91e63)
                                        embedVar.set_footer(text=f"{o_card} this will not be easy...")
                                        await private_channel.send(embed=embedVar)
                                        await asyncio.sleep(5)

                                    if t_universe == "My Hero Academia":  # My hero TRait
                                        # fortitude or luck is based on health
                                        fortitude = 0.0
                                        low = t_health - (t_health * .75)
                                        high = t_health - (t_health * .66)
                                        fortitude = random.randint(int(low), int(high))
                                        # Resolve Scaling
                                        t_resolve_health = round(fortitude + (.5 * t_resolve))
                                        t_resolve_attack = round((.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                        t_resolve_defense = round((.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                        tcard_lvl_ap_buff = tcard_lvl_ap_buff + 50

                                        t_stamina = t_stamina + t_resolve
                                        t_health = t_health + t_resolve_health
                                        t_attack = round(t_attack + t_resolve_attack)
                                        t_defense = round(t_defense - t_resolve_defense)
                                        t_used_resolve = True
                                        t_pet_used = False
                                        if mode not in AUTO_BATTLE_modes:
                                            embedVar = discord.Embed(title=f"{t_card.upper()} PLUS ULTRAAA",
                                                                     description=f"**{t_card} says**\n{t_resolve_description}",
                                                                     colour=0xe91e63)
                                            embedVar.add_field(name=f"Transformation: Plus Ultra",
                                                               value="You do not lose a turn after you Resolve.")
                                            await private_channel.send(embed=embedVar)
                                        turn_total = turn_total + 1
                                        turn = 1
                                    elif t_universe == "Attack On Titan":
                                        # fortitude or luck is based on health
                                        fortitude = 0.0
                                        low = t_health - (t_health * .75)
                                        high = t_health - (t_health * .66)
                                        fortitude = random.randint(int(low), int(high))
                                        # Resolve Scaling
                                        t_resolve_health = round(fortitude + (.5 * t_resolve))
                                        t_resolve_attack = round((.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                        t_resolve_defense = round((.30 * t_defense) * (t_resolve / (.50 * t_defense)))

                                        t_stamina = t_stamina + t_resolve
                                        t_health = t_health + t_resolve_health
                                        t_attack = round(t_attack + t_resolve_attack)
                                        t_defense = round(t_defense - t_resolve_defense)
                                        t_used_resolve = True
                                        t_pet_used = False
                                        health_boost = 100 * t_focus_count
                                        t_health = t_health + health_boost
                                        if mode not in AUTO_BATTLE_modes:
                                            embedVar = discord.Embed(title=f"{t_card.upper()} Titan Mode",
                                                                     description=f"**{t_card} says**\n{t_resolve_description}",
                                                                     colour=0xe91e63)
                                            embedVar.add_field(name=f"Transformation Complete",
                                                               value=f"Health increased by **{health_boost}**!")
                                            await button_ctx.send(embed=embedVar)

                                        turn_total = turn_total + 1
                                        turn = turn_selector
                                    elif t_universe == "Bleach":  # Bleach Trai
                                        # fortitude or luck is based on health
                                        fortitude = 0.0
                                        low = t_health - (t_health * .75)
                                        high = t_health - (t_health * .66)
                                        fortitude = random.randint(int(low), int(high))
                                        # Resolve Scaling
                                        t_resolve_health = round(fortitude + (.5 * t_resolve))
                                        t_resolve_attack = round((.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                        t_resolve_defense = round((.30 * t_defense) * (t_resolve / (.50 * t_defense)))

                                        t_stamina = t_stamina + t_resolve
                                        t_health = t_health + t_resolve_health
                                        t_attack = round((t_attack + (2 * t_resolve_attack)) * 2)
                                        t_defense = round(t_defense - t_resolve_defense)
                                        # if t_defense >= 120:
                                        # t_defense = 120
                                        t_used_resolve = True
                                        t_pet_used = False
                                        if mode not in AUTO_BATTLE_modes:
                                            embedVar = discord.Embed(title=f"{t_card} BANKAI! :zap:",
                                                                     description=f"**{t_card} says**\n{t_resolve_description}",
                                                                     colour=0xe91e63)
                                            embedVar.add_field(name=f"Transformation: Bankai",
                                                               value="Gain double Attack on Resolve.")
                                            await private_channel.send(embed=embedVar)
                                        turn_total = turn_total + 1
                                        turn = turn_selector
                                    elif t_universe == "God Of War":  # God Of War Trait
                                        # fortitude or luck is based on health
                                        fortitude = 0.0
                                        low = t_health - (t_health * .75)
                                        high = t_health - (t_health * .66)
                                        fortitude = random.randint(int(low), int(high))
                                        # Resolve Scaling
                                        t_resolve_health = round(fortitude + (.5 * t_resolve))
                                        t_resolve_attack = round((.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                        t_resolve_defense = round((.30 * t_defense) * (t_resolve / (.50 * t_defense)))

                                        t_stamina = t_stamina + t_resolve
                                        t_health = t_max_health
                                        t_attack = round(t_attack + t_resolve_attack)
                                        t_defense = round(t_defense - t_resolve_defense)
                                        t_used_resolve = True
                                        t_pet_used = False
                                        if mode not in AUTO_BATTLE_modes:
                                            embedVar = discord.Embed(title=f"{t_card} ASCENDED :zap:",
                                                                     description=f"**{t_card} says**\n{t_resolve_description}",
                                                                     colour=0xe91e63)
                                            embedVar.add_field(name=f"Transformation: Ascension",
                                                               value="On Resolve Refill Health.")
                                            await private_channel.send(embed=embedVar)
                                        turn_total = turn_total + 1
                                        turn = turn_selector
                                    elif t_universe == "Fate":  # Fate Trait
                                        # fortitude or luck is based on health
                                        fortitude = 0.0
                                        low = t_health - (t_health * .75)
                                        high = t_health - (t_health * .66)
                                        fortitude = random.randint(int(low), int(high))
                                        # Resolve Scaling
                                        t_resolve_health = round(fortitude + (.5 * t_resolve))
                                        t_resolve_attack = round((.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                        t_resolve_defense = round((.30 * t_defense) * (t_resolve / (.50 * t_defense)))

                                        t_stamina = t_stamina + t_resolve
                                        t_health = t_health + t_resolve_health
                                        t_attack = round(t_attack + t_resolve_attack)
                                        t_defense = round(t_defense - t_resolve_defense)
                                        t_used_resolve = True
                                        if mode not in AUTO_BATTLE_modes:
                                            embedVar = discord.Embed(title=f"{t_card} COMMAND SEAL :zap:",
                                                                     description=f"**{t_card} says**\n{t_resolve_description}",
                                                                     colour=0xe91e63)
                                            embedVar.add_field(name=f"Transformation: Command Seal",
                                                               value="On Resolve, Strike with Ultimate, then Focus.")
                                            await private_channel.send(embed=embedVar)
                                        if c_block_used == True:
                                            dmg = damage_cal(t_universe, t_card, t_3, t_attack, t_defense, c_defense,
                                                             t_stamina, t_enhancer_used, t_health, c_health, c_stamina,
                                                             t_max_health, c_attack, t_special_move_description,
                                                             turn_total, tcard_lvl_ap_buff)
                                            c_health = c_health - int(dmg['DMG'])
                                        else:
                                            dmg = damage_cal(t_universe, t_card, t_3, t_attack, t_defense, o_defense,
                                                             t_stamina, t_enhancer_used, t_health, o_health, o_stamina,
                                                             t_max_health, o_attack, t_special_move_description,
                                                             turn_total, tcard_lvl_ap_buff)
                                            o_health = o_health - int(dmg['DMG'])
                                        t_pet_used = False

                                        if mode not in AUTO_BATTLE_modes:
                                            embedVar = discord.Embed(title=f"{dmg['MESSAGE']}", colour=embed_color_t)
                                            await private_channel.send(embed=embedVar)
                                        # t_stamina = 0
                                        turn_total = turn_total + 1
                                        turn = turn_selector
                                    elif t_universe == "Kanto Region" or t_universe == "Johto Region" or t_universe == "Hoenn Region" or t_universe == "Sinnoh Region" or t_universe == "Kalos Region" or t_universe == "Unova Region" or t_universe == "Alola Region" or t_universe == "Galar Region":  # Pokemon Resolves
                                        # fortitude or luck is based on health
                                        fortitude = 0.0
                                        low = t_health - (t_health * .75)
                                        high = t_health - (t_health * .66)
                                        fortitude = random.randint(int(low), int(high))
                                        # Resolve Scaling
                                        t_resolve_health = round(fortitude + (.5 * t_resolve))
                                        t_resolve_attack = round((.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                        t_resolve_defense = round((.30 * t_defense) * (t_resolve / (.50 * t_defense)))

                                        t_stamina = t_stamina + t_resolve
                                        t_health = t_health + t_resolve_health
                                        t_attack = round(t_attack + t_resolve_attack)
                                        t_defense = round(t_defense) * 2
                                        t_used_resolve = True
                                        t_pet_used = False

                                        if mode not in AUTO_BATTLE_modes:
                                            embedVar = discord.Embed(title=f"{t_card} EVOLUTION :zap:",
                                                                     description=f"**{t_card} says**\n{t_resolve_description}",
                                                                     colour=0xe91e63)
                                            embedVar.add_field(name=f"Transformation: Evolution",
                                                               value="When you Resolve your Defense doubles")
                                            await private_channel.send(embed=embedVar)
                                        turn_total = turn_total + 1
                                        turn = turn_selector
                                    else:
                                        # fortitude or luck is based on health
                                        fortitude = 0.0
                                        low = t_health - (t_health * .75)
                                        high = t_health - (t_health * .66)
                                        fortitude = random.randint(int(low), int(high))
                                        # Resolve Scaling
                                        t_resolve_health = round(fortitude + (.5 * t_resolve))
                                        t_resolve_attack = round((.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                        t_resolve_defense = round((.30 * t_defense) * (t_resolve / (.50 * t_defense)))

                                        t_stamina = t_stamina + t_resolve
                                        t_health = t_health + t_resolve_health
                                        t_attack = round(t_attack + t_resolve_attack)
                                        t_defense = round(t_defense - t_resolve_defense)
                                        t_used_resolve = True
                                        t_pet_used = False

                                        if mode not in AUTO_BATTLE_modes:
                                            if t_universe == "League Of Legends":
                                                if c_block_used == True:
                                                    c_health = c_health - (30 * (c_focus_count + t_focus_count))
                                                    embedVar = discord.Embed(title=f"{t_card.upper()} PENTA KILL!",
                                                                             description=f"**{t_card} says**\n{t_resolve_description}",
                                                                             colour=0xe91e63)
                                                    embedVar.add_field(name=f"Nexus Destroyed",
                                                                       value=f"**{t_card}** dealt **{(30 * (c_focus_count + t_focus_count))}** damage.")
                                                else:
                                                    o_health = o_health - (30 * (o_focus_count + t_focus_count))
                                                    embedVar = discord.Embed(title=f"{t_card.upper()} PENTA KILL!",
                                                                             description=f"**{t_card} says**\n{t_resolve_description}",
                                                                             colour=0xe91e63)
                                                    embedVar.add_field(name=f"Nexus Destroyed",
                                                                       value=f"**{t_card}** dealt **{(30 * (o_focus_count + t_focus_count))}** damage.")
                                            else:
                                                embedVar = discord.Embed(title=f"{t_card} STRENGTHENED RESOLVE :zap:",
                                                                         description=f"**{t_card} says**\n{t_resolve_description}",
                                                                         colour=0xe91e63)
                                                embedVar.add_field(name=f"Transformation",
                                                                   value="All stats & stamina greatly increased")
                                            await private_channel.send(embed=embedVar)
                                        turn_total = turn_total + 1
                                        turn = turn_selector
                                else:
                                    if mode not in AUTO_BATTLE_modes:
                                        await private_channel.send(m.CANNOT_USE_RESOLVE)
                                    turn = 1
                            elif int(aiMove) == 6:
                                # Resolve Check and Calculation
                                if t_used_resolve and t_used_focus and not t_pet_used:
                                    if mode in co_op_modes:
                                        if c_block_used == True:
                                            t_enhancer_used = True
                                            dmg = damage_cal(t_universe, t_card, tpet_move, t_attack, t_defense,
                                                             c_defense, t_stamina, t_enhancer_used, t_health, c_health,
                                                             c_stamina, t_max_health, c_attack,
                                                             t_special_move_description, turn_total, tcard_lvl_ap_buff)
                                            t_enhancer_used = False
                                            t_pet_used = True
                                            tpet_dmg = dmg['DMG']
                                            tpet_type = dmg['ENHANCED_TYPE']
                                            if dmg['CAN_USE_MOVE']:
                                                if tpet_type == 'ATK':
                                                    t_attack = round(t_attack + dmg['DMG'])
                                                elif tpet_type == 'DEF':
                                                    t_defense = round(t_defense + dmg['DMG'])
                                                elif tpet_type == 'STAM':
                                                    t_stamina = round(t_stamina + dmg['DMG'])
                                                elif tpet_type == 'HLT':
                                                    t_health = round(t_health + dmg['DMG'])
                                                elif tpet_type == 'LIFE':
                                                    t_health = round(t_health + dmg['DMG'])
                                                    c_health = round(c_health - dmg['DMG'])
                                                elif tpet_type == 'DRAIN':
                                                    t_stamina = round(t_stamina + dmg['DMG'])
                                                    c_stamina = round(c_stamina - dmg['DMG'])
                                                elif tpet_type == 'FLOG':
                                                    t_attack = round(t_attack + dmg['DMG'])
                                                    c_attack = round(c_attack - dmg['DMG'])
                                                elif tpet_type == 'WITHER':
                                                    t_defense = round(t_defense + dmg['DMG'])
                                                    c_defense = round(c_defense - dmg['DMG'])
                                                elif tpet_type == 'RAGE':
                                                    t_defense = round(t_defense - dmg['DMG'])
                                                    t_attack = round(t_attack + dmg['DMG'])
                                                elif tpet_type == 'BRACE':
                                                    t_defense = round(t_defense + dmg['DMG'])
                                                    t_attack = round(t_attack - dmg['DMG'])
                                                elif tpet_type == 'BZRK':
                                                    t_health = round(t_health - dmg['DMG'])
                                                    t_attack = round(t_attack + dmg['DMG'])
                                                elif tpet_type == 'CRYSTAL':
                                                    t_health = round(t_health - dmg['DMG'])
                                                    t_defense = round(t_defense + dmg['DMG'])
                                                elif tpet_type == 'GROWTH':
                                                    t_max_health = round(t_max_health - dmg['DMG'])
                                                    t_defense = round(t_defense + (dmg['DMG'] * .5))
                                                    t_attack = round(t_attack + (dmg['DMG'] * .5))
                                                elif tpet_type == 'STANCE':
                                                    tempattack = dmg['DMG']
                                                    t_attack = t_defense
                                                    t_defense = tempattack
                                                elif tpet_type == 'CONFUSE':
                                                    tempattack = dmg['DMG']
                                                    c_attack = c_defense
                                                    c_defense = tempattack
                                                elif tpet_type == 'BLINK':
                                                    t_stamina = round(t_stamina - dmg['DMG'])
                                                    c_stamina = round(c_stamina + dmg['DMG'] - 10)
                                                elif tpet_type == 'SLOW':
                                                    tempstam = round(c_stamina + dmg['DMG'])
                                                    t_stamina = round(t_stamina - dmg['DMG'])
                                                    c_stamina = t_stamina
                                                    t_stamina = tempstam
                                                elif tpet_type == 'HASTE':
                                                    tempstam = round(c_stamina - dmg['DMG'])
                                                    t_stamina = round(t_stamina + dmg['DMG'])
                                                    c_stamina = t_stamina
                                                    t_stamina = tempstam
                                                elif tpet_type == 'SOULCHAIN':
                                                    t_stamina = round(dmg['DMG'])
                                                    c_stamina = t_stamina
                                                elif tpet_type == 'GAMBLE':
                                                    t_health = round(dmg['DMG'])
                                                    c_health = t_health
                                                elif tpet_type == 'FEAR':
                                                    t_max_health = round(t_max_health - dmg['DMG'])
                                                    c_defense = round(c_defense - (dmg['DMG'] * .5))
                                                    c_attack = round(c_attack - (dmg['DMG'] * .5))
                                                elif tpet_type == 'WAVE':
                                                    c_health = round(c_health - dmg['DMG'])
                                                elif tpet_type == 'BLAST':
                                                    if dmg['DMG'] >= 100:
                                                        dmg['DMG'] = 100
                                                    c_health = round(c_health - dmg['DMG'])
                                                elif tpet_type == 'CREATION':
                                                    t_max_health = round(t_max_health + dmg['DMG'])
                                                    t_health = round(t_health + dmg['DMG'])
                                                elif tpet_type == 'DESTRUCTION':
                                                    c_max_health = round(c_max_health - dmg['DMG'])
                                                t_stamina = t_stamina - int(dmg['STAMINA_USED'])
                                                if mode not in AUTO_BATTLE_modes:
                                                    if t_universe == "Persona":
                                                        petdmg = damage_cal(t_universe, t_card, t_1, t_attack,
                                                                            t_defense, c_defense, t_stamina,
                                                                            t_enhancer_used, t_health, c_health,
                                                                            c_stamina, t_max_health, c_attack,
                                                                            t_special_move_description, turn_total,
                                                                            tcard_lvl_ap_buff)

                                                        c_health = c_health - petdmg['DMG']

                                                        embedVar = discord.Embed(
                                                            title=f"**PERSONA!**\n{tpet_name} was summoned from {t_card}'s soul dealing **{petdmg['DMG']}** damage!!",
                                                            colour=0xe91e63)
                                                        embedVar.add_field(
                                                            name=f"{tpet_name} used **{tpetmove_text}**!",
                                                            value=f"Enhanced **{tpet_type}**")
                                                        embedVar.add_field(
                                                            name=f"{tpet_name} used a follow up attack dealing **{petdmg['DMG']}** damage!",
                                                            value=f"Enhanced **{tpet_type}**")
                                                        embedVar.set_thumbnail(url=tpet_image)
                                                        embedVar.set_image(url="attachment://image.png")
                                                        await button_ctx.send(embed=embedVar)
                                                    else:
                                                        embedVar = discord.Embed(
                                                            title=f"{t_card.upper()} Summoned :bird: {tpet_name}",
                                                            colour=0xe91e63)
                                                        embedVar.add_field(
                                                            name=f"{tpet_name} used **{tpetmove_text}**!",
                                                            value=f"Enhanced **{tpet_type}**")
                                                        embedVar.set_thumbnail(url=tpet_image)
                                                        embedVar.set_image(url="attachment://image.png")
                                                        await private_channel.send(embed=embedVar)

                                                if t_universe == "Persona":
                                                    petdmg = damage_cal(t_universe, t_card, t_1, t_attack, t_defense,
                                                                        c_defense, t_stamina, t_enhancer_used, t_health,
                                                                        c_health, c_stamina, t_max_health, c_attack,
                                                                        t_special_move_description, turn_total,
                                                                        tcard_lvl_ap_buff)

                                                turn = turn_selector
                                            else:
                                                if mode not in AUTO_BATTLE_modes:
                                                    await private_channel.send(f"{tpet_name} needs a turn to rest...")
                                                turn = 1
                                        else:
                                            t_enhancer_used = True
                                            dmg = damage_cal(t_universe, t_card, tpet_move, t_attack, t_defense,
                                                             o_defense, t_stamina, t_enhancer_used, t_health, o_health,
                                                             o_stamina, t_max_health, o_attack,
                                                             t_special_move_description, turn_total, tcard_lvl_ap_buff)
                                            t_enhancer_used = False
                                            t_pet_used = True
                                            tpet_dmg = dmg['DMG']
                                            tpet_type = dmg['ENHANCED_TYPE']
                                            if dmg['CAN_USE_MOVE']:
                                                if tpet_type == 'ATK':
                                                    t_attack = round(t_attack + dmg['DMG'])
                                                elif tpet_type == 'DEF':
                                                    t_defense = round(t_defense + dmg['DMG'])
                                                elif tpet_type == 'STAM':
                                                    t_stamina = round(t_stamina + dmg['DMG'])
                                                elif tpet_type == 'HLT':
                                                    t_health = round(t_health + dmg['DMG'])
                                                elif tpet_type == 'LIFE':
                                                    t_health = round(t_health + dmg['DMG'])
                                                    o_health = round(o_health - dmg['DMG'])
                                                elif tpet_type == 'DRAIN':
                                                    t_stamina = round(t_stamina + dmg['DMG'])
                                                    o_stamina = round(o_stamina - dmg['DMG'])
                                                elif tpet_type == 'FLOG':
                                                    t_attack = round(t_attack + dmg['DMG'])
                                                    o_attack = round(o_attack - dmg['DMG'])
                                                elif tpet_type == 'WITHER':
                                                    t_defense = round(t_defense + dmg['DMG'])
                                                    o_defense = round(o_defense - dmg['DMG'])
                                                elif tpet_type == 'RAGE':
                                                    t_defense = round(t_defense - dmg['DMG'])
                                                    t_attack = round(t_attack + dmg['DMG'])
                                                elif tpet_type == 'BRACE':
                                                    t_defense = round(t_defense + dmg['DMG'])
                                                    t_attack = round(t_attack - dmg['DMG'])
                                                elif tpet_type == 'BZRK':
                                                    t_health = round(t_health - dmg['DMG'])
                                                    t_attack = round(t_attack + dmg['DMG'])
                                                elif tpet_type == 'CRYSTAL':
                                                    t_health = round(t_health - dmg['DMG'])
                                                    t_defense = round(t_defense + dmg['DMG'])
                                                elif tpet_type == 'GROWTH':
                                                    t_max_health = round(t_max_health - dmg['DMG'])
                                                    t_defense = round(t_defense + (dmg['DMG'] * .5))
                                                    t_attack = round(t_attack + (dmg['DMG'] * .5))
                                                elif tpet_type == 'STANCE':
                                                    tempattack = dmg['DMG']
                                                    t_attack = t_defense
                                                    t_defense = tempattack
                                                elif tpet_type == 'CONFUSE':
                                                    tempattack = dmg['DMG']
                                                    o_attack = o_defense
                                                    o_defense = tempattack
                                                elif tpet_type == 'BLINK':
                                                    t_stamina = round(t_stamina - dmg['DMG'])
                                                    o_stamina = round(o_stamina + dmg['DMG'] - 10)
                                                elif tpet_type == 'SLOW':
                                                    tempstam = round(o_stamina + dmg['DMG'])
                                                    t_stamina = round(t_stamina - dmg['DMG'])
                                                    o_stamina = t_stamina
                                                    t_stamina = tempstam
                                                elif tpet_type == 'HASTE':
                                                    tempstam = round(o_stamina - dmg['DMG'])
                                                    t_stamina = round(t_stamina + dmg['DMG'])
                                                    o_stamina = t_stamina
                                                    t_stamina = tempstam
                                                elif tpet_type == 'SOULCHAIN':
                                                    t_stamina = round(dmg['DMG'])
                                                    o_stamina = t_stamina
                                                elif tpet_type == 'GAMBLE':
                                                    t_health = round(dmg['DMG'])
                                                    o_health = t_health
                                                elif tpet_type == 'FEAR':
                                                    t_max_health = round(t_max_health - dmg['DMG'])
                                                    o_defense = round(o_defense - (dmg['DMG'] * .5))
                                                    o_attack = round(o_attack - (dmg['DMG'] * .5))
                                                elif tpet_type == 'WAVE':
                                                    o_health = round(o_health - dmg['DMG'])
                                                elif tpet_type == 'BLAST':
                                                    if dmg['DMG'] >= 100:
                                                        dmg['DMG'] = 100
                                                    o_health = round(o_health - dmg['DMG'])
                                                elif tpet_type == 'CREATION':
                                                    t_max_health = round(t_max_health + dmg['DMG'])
                                                    t_health = round(t_health + dmg['DMG'])
                                                elif tpet_type == 'DESTRUCTION':
                                                    o_max_health = round(o_max_health - dmg['DMG'])
                                                t_stamina = t_stamina - int(dmg['STAMINA_USED'])

                                                if mode not in AUTO_BATTLE_modes:
                                                    if t_universe == "Persona":
                                                        petdmg = damage_cal(t_universe, t_card, t_1, t_attack,
                                                                            t_defense, c_defense, t_stamina,
                                                                            t_enhancer_used, t_health, c_health,
                                                                            c_stamina, t_max_health, c_attack,
                                                                            t_special_move_description, turn_total,
                                                                            tcard_lvl_ap_buff)

                                                        o_health = o_health - petdmg['DMG']

                                                        embedVar = discord.Embed(
                                                            title=f"**PERSONA!**\n{tpet_name} was summoned from {t_card}'s soul dealing **{petdmg['DMG']}** damage!!",
                                                            colour=0xe91e63)
                                                        embedVar.add_field(
                                                            name=f"{tpet_name} used **{tpetmove_text}**!",
                                                            value=f"Enhanced **{tpet_type}**")

                                                        embedVar.set_thumbnail(url=tpet_image)
                                                        embedVar.set_image(url="attachment://image.png")
                                                        await button_ctx.send(embed=embedVar)
                                                    else:
                                                        embedVar = discord.Embed(
                                                            title=f"{t_card.upper()} Summoned :bird: {tpet_name}",
                                                            colour=0xe91e63)
                                                        embedVar.add_field(
                                                            name=f"{tpet_name} used **{tpetmove_text}**!",
                                                            value=f"Enhanced **{tpet_type}**")
                                                        embedVar.set_thumbnail(url=tpet_image)
                                                        embedVar.set_image(url="attachment://image.png")
                                                        await button_ctx.send(embed=embedVar)

                                                if t_universe == "Persona":
                                                    petdmg = damage_cal(t_universe, t_card, t_1, t_attack, t_defense,
                                                                        c_defense, t_stamina, t_enhancer_used, t_health,
                                                                        c_health, c_stamina, t_max_health, c_attack,
                                                                        t_special_move_description, turn_total,
                                                                        tcard_lvl_ap_buff)
                                                    o_health = o_health - petdmg['DMG']
                                                turn = 1
                                            else:
                                                await private_channel.send(f"{tpet_name} needs a turn to rest...")
                                                turn = 1

                                    else:
                                        t_enhancer_used = True
                                        dmg = damage_cal(t_universe, t_card, tpet_move, t_attack, t_defense, o_defense,
                                                         t_stamina, t_enhancer_used, t_health, o_health, o_stamina,
                                                         t_max_health, o_attack, t_special_move_description, turn_total,
                                                         tcard_lvl_ap_buff)
                                        t_enhancer_used = False
                                        t_pet_used = True
                                        tpet_dmg = dmg['DMG']
                                        tpet_type = dmg['ENHANCED_TYPE']
                                        if dmg['CAN_USE_MOVE']:
                                            if tpet_type == 'ATK':
                                                t_attack = round(t_attack + dmg['DMG'])
                                            elif tpet_type == 'DEF':
                                                t_defense = round(t_defense + dmg['DMG'])
                                            elif tpet_type == 'STAM':
                                                t_stamina = round(t_stamina + dmg['DMG'])
                                            elif tpet_type == 'HLT':
                                                t_health = round(t_health + dmg['DMG'])
                                            elif tpet_type == 'LIFE':
                                                t_health = round(t_health + dmg['DMG'])
                                                o_health = round(o_health - dmg['DMG'])
                                            elif tpet_type == 'DRAIN':
                                                t_stamina = round(t_stamina + dmg['DMG'])
                                                o_stamina = round(o_stamina - dmg['DMG'])
                                            elif tpet_type == 'FLOG':
                                                t_attack = round(t_attack + dmg['DMG'])
                                                o_attack = round(o_attack - dmg['DMG'])
                                            elif tpet_type == 'WITHER':
                                                t_defense = round(t_defense + dmg['DMG'])
                                                o_defense = round(o_defense - dmg['DMG'])
                                            elif tpet_type == 'RAGE':
                                                t_defense = round(t_defense - dmg['DMG'])
                                                t_attack = round(t_attack + dmg['DMG'])
                                            elif tpet_type == 'BRACE':
                                                t_defense = round(t_defense + dmg['DMG'])
                                                t_attack = round(t_attack - dmg['DMG'])
                                            elif tpet_type == 'BZRK':
                                                t_health = round(t_health - dmg['DMG'])
                                                t_attack = round(t_attack + dmg['DMG'])
                                            elif tpet_type == 'CRYSTAL':
                                                t_health = round(t_health - dmg['DMG'])
                                                t_defense = round(t_defense + dmg['DMG'])
                                            elif tpet_type == 'GROWTH':
                                                t_max_health = round(t_max_health - dmg['DMG'])
                                                t_defense = round(t_defense + (dmg['DMG'] * .5))
                                                t_attack = round(t_attack + (dmg['DMG'] * .5))
                                            elif tpet_type == 'STANCE':
                                                tempattack = dmg['DMG']
                                                t_attack = t_defense
                                                t_defense = tempattack
                                            elif tpet_type == 'CONFUSE':
                                                tempattack = dmg['DMG']
                                                o_attack = o_defense
                                                o_defense = tempattack
                                            elif tpet_type == 'BLINK':
                                                t_stamina = round(t_stamina - dmg['DMG'])
                                                o_stamina = round(o_stamina + dmg['DMG'] - 10)
                                            elif tpet_type == 'SLOW':
                                                tempstam = round(o_stamina + dmg['DMG'])
                                                t_stamina = round(t_stamina - dmg['DMG'])
                                                o_stamina = t_stamina
                                                t_stamina = tempstam
                                            elif tpet_type == 'HASTE':
                                                tempstam = round(o_stamina - dmg['DMG'])
                                                t_stamina = round(t_stamina + dmg['DMG'])
                                                o_stamina = t_stamina
                                                t_stamina = tempstam
                                            elif tpet_type == 'SOULCHAIN':
                                                t_stamina = round(dmg['DMG'])
                                                o_stamina = t_stamina
                                            elif tpet_type == 'GAMBLE':
                                                t_health = round(dmg['DMG'])
                                                o_health = t_health
                                            elif tpet_type == 'FEAR':
                                                t_max_health = round(t_max_health - dmg['DMG'])
                                                o_defense = round(o_defense - (dmg['DMG'] * .5))
                                                o_attack = round(o_attack - (dmg['DMG'] * .5))
                                            elif tpet_type == 'WAVE':
                                                o_health = round(o_health - dmg['DMG'])
                                            elif tpet_type == 'BLAST':
                                                if dmg['DMG'] >= 100:
                                                    dmg['DMG'] = 100
                                                o_health = round(o_health - dmg['DMG'])
                                            elif tpet_type == 'CREATION':
                                                t_max_health = round(t_max_health + dmg['DMG'])
                                                t_health = round(t_health + dmg['DMG'])
                                            elif tpet_type == 'DESTRUCTION':
                                                o_max_health = round(o_max_health - dmg['DMG'])
                                            t_stamina = t_stamina - int(dmg['STAMINA_USED'])

                                            if mode not in AUTO_BATTLE_modes:
                                                if t_universe == "Persona":
                                                    petdmg = damage_cal(t_universe, t_card, tpet_move, t_attack,
                                                                        t_defense, o_defense, t_stamina,
                                                                        t_enhancer_used, t_health, o_health, o_stamina,
                                                                        t_max_health, o_attack,
                                                                        t_special_move_description, turn_total,
                                                                        tcard_lvl_ap_buff)

                                                    o_health = o_health - petdmg['DMG']

                                                    embedVar = discord.Embed(
                                                        title=f"**PERSONA!**\n{tpet_name} was summoned from {t_card}'s soul dealing **{petdmg['DMG']}** damage!!",
                                                        colour=0xe91e63)
                                                    embedVar.add_field(name=f"{tpet_name} used **{tpetmove_text}**!",
                                                                       value=f"Enhanced **{tpet_type}**")

                                                    embedVar.set_thumbnail(url=tpet_image)
                                                    embedVar.set_image(url="attachment://image.png")
                                                    await button_ctx.send(embed=embedVar)
                                                else:
                                                    embedVar = discord.Embed(
                                                        title=f"{t_card.upper()} Summoned :bird: {tpet_name}",
                                                        colour=0xe91e63)
                                                    embedVar.add_field(name=f"{tpet_name} used **{tpetmove_text}**!",
                                                                       value=f"Enhanced **{tpet_type}**")
                                                    embedVar.set_thumbnail(url=tpet_image)
                                                    embedVar.set_image(url="attachment://image.png")
                                                    await private_channel.send(embed=embedVar)
                                            turn = 1
                                        else:
                                            await private_channel.send(f"{tpet_name} needs a turn to rest...")
                                            turn = 1
                                else:
                                    await private_channel.send(f"{tpet_name} needs a turn to rest...")

                            if int(aiMove) != 5 and int(aiMove) != 6:

                                # If you have enough stamina for move, use it
                                # if c used block
                                if mode in co_op_modes:
                                    if c_block_used == True:
                                        if dmg['CAN_USE_MOVE']:
                                            t_pet_used = False
                                            if dmg['ENHANCE']:
                                                enh_type = dmg['ENHANCED_TYPE']
                                                if enh_type == 'ATK':
                                                    t_attack = round(t_attack + dmg['DMG'])
                                                elif enh_type == 'DEF':
                                                    t_defense = round(t_defense + dmg['DMG'])
                                                elif enh_type == 'STAM':
                                                    t_stamina = round(t_stamina + dmg['DMG'])
                                                elif enh_type == 'HLT':
                                                    t_health = round(t_health + dmg['DMG'])
                                                elif enh_type == 'LIFE':
                                                    t_health = round(t_health + dmg['DMG'])
                                                    c_health = round(c_health - dmg['DMG'])
                                                elif enh_type == 'DRAIN':
                                                    t_stamina = round(t_stamina + dmg['DMG'])
                                                    c_stamina = round(c_stamina - dmg['DMG'])
                                                elif enh_type == 'FLOG':
                                                    t_attack = round(t_attack + dmg['DMG'])
                                                    c_attack = round(c_attack - dmg['DMG'])
                                                elif enh_type == 'WITHER':
                                                    t_defense = round(t_defense + dmg['DMG'])
                                                    c_defense = round(t_defense - dmg['DMG'])
                                                elif enh_type == 'RAGE':
                                                    t_defense = round(t_defense - dmg['DMG'])
                                                    t_attack = round(t_attack + dmg['DMG'])
                                                elif enh_type == 'BRACE':
                                                    t_defense = round(t_defense + dmg['DMG'])
                                                    t_attack = round(t_attack - dmg['DMG'])
                                                elif enh_type == 'BZRK':
                                                    t_health = round(t_health - dmg['DMG'])
                                                    t_attack = round(t_attack + (.75 * dmg['DMG']))
                                                elif enh_type == 'CRYSTAL':
                                                    t_health = round(t_health - dmg['DMG'])
                                                    t_defense = round(t_defense + dmg['DMG'])
                                                elif enh_type == 'GROWTH':
                                                    t_max_health = round(t_max_health - dmg['DMG'])
                                                    t_defense = round(t_defense + (dmg['DMG'] * .5))
                                                    t_attack = round(t_attack + (dmg['DMG'] * .5))
                                                elif enh_type == 'STANCE':
                                                    tempattack = dmg['DMG']
                                                    t_attack = t_defense
                                                    t_defense = tempattack
                                                elif enh_type == 'CONFUSE':
                                                    tempattack = dmg['DMG']
                                                    c_attack = c_defense
                                                    c_defense = tempattack
                                                elif enh_type == 'BLINK':
                                                    t_stamina = round(t_stamina - dmg['DMG'])
                                                    c_stamina = round(c_stamina + dmg['DMG'] - 10)
                                                elif enh_type == 'SLOW':
                                                    tempstam = round(c_stamina + dmg['DMG'])
                                                    t_stamina = round(t_stamina - dmg['DMG'])
                                                    c_stamina = t_stamina
                                                    t_stamina = tempstam
                                                elif enh_type == 'HASTE':
                                                    tempstam = round(c_stamina - dmg['DMG'])
                                                    t_stamina = round(t_stamina + dmg['DMG'])
                                                    c_stamina = t_stamina
                                                    t_stamina = tempstam
                                                elif enh_type == 'SOULCHAIN':
                                                    t_stamina = round(dmg['DMG'])
                                                    c_stamina = t_stamina
                                                elif enh_type == 'GAMBLE':
                                                    if mode in D_modes:
                                                        t_health = round(dmg['DMG']) * 2
                                                        c_health = round(dmg['DMG'])
                                                    elif mode in B_modes:
                                                        t_health = round(dmg['DMG']) * 4
                                                        c_health = round(dmg['DMG'])
                                                    else:
                                                        t_health = round(dmg['DMG'])
                                                        _health = round(dmg['DMG'])
                                                elif enh_type == 'FEAR':
                                                    t_max_health = round(t_max_health - dmg['DMG'])
                                                    c_attack = round(c_attack - ((dmg['DMG'] * .5)))
                                                    c_defense = round(c_defense - ((dmg['DMG'] * .5)))
                                                elif enh_type == 'WAVE':
                                                    c_health = round(c_health - dmg['DMG'])
                                                elif enh_type == 'BLAST':
                                                    c_health = round(c_health - dmg['DMG'])
                                                elif enh_type == 'CREATION':
                                                    t_max_health = round(t_max_health + dmg['DMG'])
                                                    t_health = round(t_health + dmg['DMG'])
                                                elif enh_type == 'DESTRUCTION':
                                                    c_max_health = round(c_max_health - dmg['DMG'])
                                                t_stamina = t_stamina - int(dmg['STAMINA_USED'])

                                                if mode not in AUTO_BATTLE_modes:
                                                    embedVar = discord.Embed(title=f"{dmg['MESSAGE']}",
                                                                             colour=embed_color_t)
                                                    await private_channel.send(embed=embedVar)
                                                turn_total = turn_total + 1
                                                turn = turn_selector
                                            elif dmg['DMG'] == 0:
                                                t_stamina = t_stamina - int(dmg['STAMINA_USED'])
                                                if mode not in AUTO_BATTLE_modes:
                                                    embedVar = discord.Embed(title=f"{dmg['MESSAGE']}", colour=embed_color_t)
                                                    if tarm_barrier_active:
                                                        tarm_barrier_active=False
                                                        embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                    await private_channel.send(embed=embedVar)
                                                turn_total = turn_total + 1
                                                turn = turn_selector
                                            else:
                                                if c_universe == "Naruto" and c_stamina < 10:
                                                    c_health = c_health
                                                    if mode not in AUTO_BATTLE_modes:
                                                        embedVar = discord.Embed(title=f"{c_card.upper()}: Substitution Jutsu", description=f"{t_card} strikes a log", colour=0xe91e63)
                                                        if tarm_barrier_active:
                                                            tarm_barrier_active=False
                                                            embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                        await private_channel.send(embed=embedVar)
                                                elif carm_shield_active:
                                                    if cshield_value > 0:
                                                        cshield_value = cshield_value -dmg['DMG']
                                                        c_health = c_health 
                                                        if cshield_value <=0:
                                                            embedVar = discord.Embed(title=f"{c_card.upper()}'s' **Shield** Shattered!", description=f"{t_card} breaks the **Shield**!", colour=0xe91e63)
                                                            if tarm_barrier_active:
                                                                tarm_barrier_active=False
                                                                embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                            await private_channel.send(embed=embedVar)
                                                            carm_shield_active = False
                                                        else:
                                                            embedVar = discord.Embed(title=f"{c_card.upper()} Activates **Shield** 🌐", description=f"{t_card} strikes the **Shield** for **{dmg['DMG']} DMG!**\n **{cshield_value} Shield** Left!", colour=0xe91e63)
                                                            if tarm_barrier_active:
                                                                tarm_barrier_active=False
                                                                embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                            await private_channel.send(embed=embedVar)

                                                elif carm_barrier_active:
                                                    if cbarrier_count >1:
                                                        c_health = c_health 
                                                        embedVar = discord.Embed(title=f"{c_card.upper()} Activates **Barrier** 💠", description=f"{t_card}'s attack **Nullified**!\n **{cbarrier_count - 1} Barriers** remain!", colour=0xe91e63)
                                                        if tarm_barrier_active:
                                                            tarm_barrier_active=False
                                                            embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                        await private_channel.send(embed=embedVar)
                                                        cbarrier_count = cbarrier_count - 1
                                                    elif cbarrier_count==1:
                                                        embedVar = discord.Embed(title=f"{c_card.upper()}'s **Barrier** Broken!", description=f"{t_card} destroys the **Barrier**", colour=0xe91e63)
                                                        cbarrier_count = cbarrier_count - 1
                                                        if tarm_barrier_active:
                                                            tarm_barrier_active=False
                                                            embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                        await private_channel.send(embed=embedVar)
                                                        carm_barrier_active = False
                                                elif carm_parry_active:
                                                    if cparry_count > 1:
                                                        c_health = c_health
                                                        cparry_damage = round(dmg['DMG'] / 2)
                                                        c_health = c_health - cparry_damage
                                                        t_health = t_health - cparry_damage
                                                        cparry_count = cparry_count - 1
                                                        embedVar = discord.Embed(title=f"{c_card.upper()} Activates **Parry** 🔄", description=f"{t_card} takes {cparry_damage}! DMG\n **{cparry_count} Parries** to go!!", colour=0xe91e63)
                                                        if tarm_barrier_active:
                                                            tarm_barrier_active=False
                                                            embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                        await private_channel.send(embed=embedVar)
                                                        
                                                    elif cparry_count==1:
                                                        embedVar = discord.Embed(title=f"{c_card.upper()} **Parry** Penetrated!!", description=f"{t_card} breaks the **Parry**", colour=0xe91e63)
                                                        c_health = c_health
                                                        cparry_damage = round(dmg['DMG'] / 2)
                                                        c_health = c_health - cparry_damage
                                                        t_health = t_health - cparry_damage
                                                        cparry_count = cparry_count - 1
                                                        if tarm_barrier_active:
                                                            tarm_barrier_active=False
                                                            embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                        await private_channel.send(embed=embedVar)
                                                        carm_parry_active = False
                                                else:
                                                    c_health = c_health - int(dmg['DMG'])
                                                    embedVar = discord.Embed(title=f"{dmg['MESSAGE']}", colour=embed_color_t)
                                                    if tarm_barrier_active:
                                                        tarm_barrier_active=False
                                                        embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                    await private_channel.send(embed=embedVar)
                                                if c_health <= 0:
                                                    if c_final_stand==True:
                                                        embedVar = discord.Embed(title=f"{c_card.upper()}'s LAST STAND", description=f"{c_card} FINDS RESOLVE", colour=0xe91e63)
                                                        embedVar.add_field(name=f"{c_card} resolved and continues to fight", value="All stats & stamina increased")
                                                        if tarm_barrier_active:
                                                            tarm_barrier_active=False
                                                            embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                        await private_channel.send(embed=embedVar)
                                                        c_health = int(.75 * (c_attack + c_defense))
                                                        c_attack = c_attack + (.50 * c_attack)
                                                        c_defense = c_defense + (.50 * c_defense)
                                                        c_used_resolve = True
                                                        c_used_focus = True
                                                        c_final_stand = False
                                                        t_stamina = t_stamina - int(dmg['STAMINA_USED'])
                                                        turn_total = turn_total + 1
                                                        turn = turn_selector
                                                    else:
                                                        c_health = 0
                                                        t_stamina = t_stamina - int(dmg['STAMINA_USED'])
                                                        turn_total = turn_total + 1
                                                else:
                                                    t_stamina = t_stamina - int(dmg['STAMINA_USED'])
                                                    turn_total = turn_total + 1
                                                    turn = turn_selector
                                        else:
                                            await private_channel.send(m.NOT_ENOUGH_STAMINA)
                                            turn = 1
                                    else:
                                        if dmg['CAN_USE_MOVE']:
                                            t_pet_used = False
                                            if dmg['ENHANCE']:
                                                enh_type = dmg['ENHANCED_TYPE']
                                                if enh_type == 'ATK':
                                                    t_attack = round(t_attack + dmg['DMG'])
                                                elif enh_type == 'DEF':
                                                    t_defense = round(t_defense + dmg['DMG'])
                                                elif enh_type == 'STAM':
                                                    t_stamina = round(t_stamina + dmg['DMG'])
                                                elif enh_type == 'HLT':
                                                    t_health = round(t_health + dmg['DMG'])
                                                elif enh_type == 'LIFE':
                                                    t_health = round(t_health + dmg['DMG'])
                                                    o_health = round(o_health - dmg['DMG'])
                                                elif enh_type == 'DRAIN':
                                                    t_stamina = round(t_stamina + dmg['DMG'])
                                                    o_stamina = round(o_stamina - dmg['DMG'])
                                                elif enh_type == 'FLOG':
                                                    t_attack = round(t_attack + dmg['DMG'])
                                                    o_attack = round(o_attack - dmg['DMG'])
                                                elif enh_type == 'WITHER':
                                                    t_defense = round(t_defense + dmg['DMG'])
                                                    o_defense = round(o_defense - dmg['DMG'])
                                                elif enh_type == 'RAGE':
                                                    t_defense = round(t_defense - dmg['DMG'])
                                                    t_attack = round(t_attack + dmg['DMG'])
                                                elif enh_type == 'BRACE':
                                                    t_defense = round(t_defense + dmg['DMG'])
                                                    t_attack = round(t_attack - dmg['DMG'])
                                                elif enh_type == 'BZRK':
                                                    t_health = round(t_health - dmg['DMG'])
                                                    t_attack = round(t_attack + (.75 * dmg['DMG']))
                                                elif enh_type == 'CRYSTAL':
                                                    t_health = round(t_health - dmg['DMG'])
                                                    t_defense = round(t_defense + dmg['DMG'])
                                                elif enh_type == 'GROWTH':
                                                    t_max_health = round(t_max_health - dmg['DMG'])
                                                    t_defense = round(t_defense + (dmg['DMG'] * .5))
                                                    t_attack = round(t_attack + (dmg['DMG'] * .5))
                                                elif enh_type == 'STANCE':
                                                    tempattack = dmg['DMG']
                                                    t_attack = t_defense
                                                    t_defense = tempattack
                                                elif enh_type == 'CONFUSE':
                                                    tempattack = dmg['DMG']
                                                    o_attack = o_defense
                                                    o_defense = tempattack
                                                elif enh_type == 'BLINK':
                                                    t_stamina = round(t_stamina - dmg['DMG'])
                                                    o_stamina = round(o_stamina + dmg['DMG'] - 10)
                                                elif enh_type == 'SLOW':
                                                    tempstam = round(o_stamina + dmg['DMG'])
                                                    t_stamina = round(t_stamina - dmg['DMG'])
                                                    o_stamina = t_stamina
                                                    t_stamina = tempstam
                                                elif enh_type == 'HASTE':
                                                    tempstam = round(o_stamina - dmg['DMG'])
                                                    t_stamina = round(t_stamina + dmg['DMG'])
                                                    o_stamina = t_stamina
                                                    t_stamina = tempstam
                                                elif enh_type == 'SOULCHAIN':
                                                    t_stamina = round(dmg['DMG'])
                                                    o_stamina = o_stamina
                                                elif enh_type == 'GAMBLE':
                                                    if mode in D_modes:
                                                        t_health = round(dmg['DMG']) * 2
                                                        o_health = round(dmg['DMG'])
                                                    elif mode in B_modes:
                                                        t_health = round(dmg['DMG']) * 4
                                                        o_health = round(dmg['DMG'])
                                                    else:
                                                        t_health = round(dmg['DMG'])
                                                        o_health = round(dmg['DMG'])
                                                elif enh_type == 'FEAR':
                                                    t_max_health = round(t_max_health - dmg['DMG'])
                                                    o_defense = round(o_defense - (dmg['DMG'] * .5))
                                                    o_attack = round(o_attack - (dmg['DMG'] * .5))
                                                elif enh_type == 'WAVE':
                                                    o_health = round(o_health - dmg['DMG'])
                                                elif enh_type == 'BLAST':
                                                    o_health = round(o_health - dmg['DMG'])
                                                elif enh_type == 'CREATION':
                                                    t_max_health = round(t_max_health + dmg['DMG'])
                                                    t_health = round(t_health + dmg['DMG'])
                                                elif enh_type == 'DESTRUCTION':
                                                    o_max_health = round(o_max_health - dmg['DMG'])
                                                t_stamina = t_stamina - int(dmg['STAMINA_USED'])
                                                if mode not in AUTO_BATTLE_modes:
                                                    embedVar = discord.Embed(title=f"{dmg['MESSAGE']}",
                                                                             colour=embed_color_t)
                                                    await private_channel.send(embed=embedVar)
                                                turn_total = turn_total + 1
                                                turn = turn_selector
                                            elif dmg['DMG'] == 0:
                                                t_stamina = t_stamina - int(dmg['STAMINA_USED'])
                                                if mode not in AUTO_BATTLE_modes:
                                                    embedVar = discord.Embed(title=f"{dmg['MESSAGE']}", colour=embed_color_t)
                                                    if tarm_barrier_active:
                                                        tarm_barrier_active=False
                                                        embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                    await private_channel.send(embed=embedVar)
                                                turn_total = turn_total + 1
                                                turn = turn_selector
                                            else:
                                                if o_universe == "Naruto" and o_stamina < 10:
                                                    o_health = o_health
                                                    if mode not in AUTO_BATTLE_modes:
                                                        embedVar = discord.Embed(title=f"{o_card.upper()}: Substitution Jutsu", description=f"{t_card} strikes a log", colour=0xe91e63)
                                                        if tarm_barrier_active:
                                                            tarm_barrier_active=False
                                                            embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                        await private_channel.send(embed=embedVar)
                                                elif oarm_shield_active:
                                                    if oshield_value > 0:
                                                        oshield_value = oshield_value -dmg['DMG']
                                                        o_health = o_health 
                                                        if oshield_value <=0:
                                                            embedVar = discord.Embed(title=f"{o_card.upper()}'s' **Shield** Shattered!", description=f"{t_card} breaks the **Shield**!", colour=0xe91e63)
                                                            if tarm_barrier_active:
                                                                tarm_barrier_active=False
                                                                embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                            await button_ctx.send(embed=embedVar)
                                                            oarm_shield_active = False
                                                        else:
                                                            embedVar = discord.Embed(title=f"{o_card.upper()} Activates **Shield** 🌐", description=f"{t_card} strikes the **Shield** for **{dmg['DMG']} DMG!**\n **{oshield_value} Shield** Left!", colour=0xe91e63)
                                                            if tarm_barrier_active:
                                                                tarm_barrier_active=False
                                                                embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                            await button_ctx.send(embed=embedVar)

                                                elif oarm_barrier_active:
                                                    if obarrier_count >1:
                                                        o_health = o_health 
                                                        embedVar = discord.Embed(title=f"{o_card.upper()} Activates **Barrier** 💠", description=f"{t_card}'s attack **Nullified**!\n {obarrier_count - 1} **Barriers** remain!", colour=0xe91e63)
                                                        if tarm_barrier_active:
                                                            tarm_barrier_active=False
                                                            embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                        await button_ctx.send(embed=embedVar)
                                                        obarrier_count = obarrier_count - 1
                                                    elif obarrier_count==1:
                                                        embedVar = discord.Embed(title=f"{o_card.upper()}'s **Barrier** Broken!", description=f"{t_card} destroys the **Barrier**", colour=0xe91e63)
                                                        obarrier_count = obarrier_count - 1
                                                        if tarm_barrier_active:
                                                            tarm_barrier_active=False
                                                            embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                        await button_ctx.send(embed=embedVar)
                                                        oarm_barrier_active = False
                                                elif oarm_parry_active:
                                                    if oparry_count > 1:
                                                        oparry_damage = round(dmg['DMG'] / 2)
                                                        o_health = o_health - oparry_damage
                                                        t_health = t_health - oparry_damage
                                                        oparry_count = oparry_count - 1
                                                        embedVar = discord.Embed(title=f"{o_card.upper()} Activates **Parry** 🔄", description=f"{t_card} takes {oparry_damage}! DMG\n **{oparry_count} Parries** to go!!", colour=0xe91e63)
                                                        if tarm_barrier_active:
                                                            tarm_barrier_active=False
                                                            embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                        await button_ctx.send(embed=embedVar)
                                                        
                                                    elif oparry_count==1:
                                                        embedVar = discord.Embed(title=f"{o_card.upper()} **Parry** Penetrated!!", description=f"{t_card} breaks the **Parry**", colour=0xe91e63)
                                                        oparry_damage = round(dmg['DMG'] / 2)
                                                        o_health = o_health - oparry_damage
                                                        t_health = t_health - oparry_damage
                                                        oparry_count = oparry_count - 1
                                                        if tarm_barrier_active:
                                                            tarm_barrier_active=False
                                                            embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                        await button_ctx.send(embed=embedVar)
                                                        oarm_parry_active = False
                                                else:
                                                    o_health = o_health - int(dmg['DMG'])
                                                    if mode not in AUTO_BATTLE_modes:
                                                        embedVar = discord.Embed(title=f"{dmg['MESSAGE']}", colour=embed_color_t)
                                                        if tarm_barrier_active:
                                                            tarm_barrier_active=False
                                                            embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                        await private_channel.send(embed=embedVar)
                                                if o_health <= 0:
                                                    if o_final_stand == True:
                                                        if mode not in AUTO_BATTLE_modes:
                                                            embedVar = discord.Embed(title=f"{o_card.upper()}'s LAST STAND", description=f"{o_card} FINDS RESOLVE", colour=0xe91e63)
                                                            embedVar.add_field(name=f"{o_card} resolved and continues to fight", value="All stats & stamina increased")
                                                            if tarm_barrier_active:
                                                                tarm_barrier_active=False
                                                                embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                            await private_channel.send(embed=embedVar)
                                                        o_health = int(.75 * (o_attack + o_defense))
                                                        o_attack = o_attack + (.50 * o_attack)
                                                        o_defense = o_defense + (.50 * o_defense)
                                                        o_stamina = 100
                                                        o_used_resolve = True
                                                        o_final_stand = False
                                                        o_used_focus = True
                                                        t_stamina = t_stamina - int(dmg['STAMINA_USED'])
                                                        turn_total = turn_total + 1
                                                        turn = 0
                                                    else:
                                                        o_health = 0
                                                        t_stamina = t_stamina - int(dmg['STAMINA_USED'])
                                                        turn_total = turn_total + 1
                                                else:
                                                    t_stamina = t_stamina - int(dmg['STAMINA_USED'])
                                                    turn_total = turn_total + 1
                                                    turn = turn_selector
                                        else:
                                            if mode not in AUTO_BATTLE_modes:
                                                await private_channel.send(m.NOT_ENOUGH_STAMINA)
                                            turn = 1
                                else:
                                    if dmg['CAN_USE_MOVE']:
                                        t_pet_used = False
                                        if dmg['ENHANCE']:
                                            enh_type = dmg['ENHANCED_TYPE']
                                            if enh_type == 'ATK':
                                                t_attack = round(t_attack + dmg['DMG'])
                                            elif enh_type == 'DEF':
                                                t_defense = round(t_defense + dmg['DMG'])
                                            elif enh_type == 'STAM':
                                                t_stamina = round(t_stamina + dmg['DMG'])
                                            elif enh_type == 'HLT':
                                                t_health = round(t_health + dmg['DMG'])
                                            elif enh_type == 'LIFE':
                                                t_health = round(t_health + dmg['DMG'])
                                                o_health = round(o_health - dmg['DMG'])
                                            elif enh_type == 'DRAIN':
                                                t_stamina = round(t_stamina + dmg['DMG'])
                                                o_stamina = round(o_stamina - dmg['DMG'])
                                            elif enh_type == 'FLOG':
                                                t_attack = round(t_attack + dmg['DMG'])
                                                o_attack = round(o_attack - dmg['DMG'])
                                            elif enh_type == 'WITHER':
                                                t_defense = round(t_defense + dmg['DMG'])
                                                o_defense = round(o_defense - dmg['DMG'])
                                            elif enh_type == 'RAGE':
                                                t_defense = round(t_defense - dmg['DMG'])
                                                t_attack = round(t_attack + dmg['DMG'])
                                            elif enh_type == 'BRACE':
                                                t_defense = round(t_defense + dmg['DMG'])
                                                t_attack = round(t_attack - dmg['DMG'])
                                            elif enh_type == 'BZRK':
                                                t_health = round(t_health - dmg['DMG'])
                                                t_attack = round(t_attack + (.75 * dmg['DMG']))
                                            elif enh_type == 'CRYSTAL':
                                                t_health = round(t_health - dmg['DMG'])
                                                t_defense = round(t_defense + dmg['DMG'])
                                            elif enh_type == 'GROWTH':
                                                t_max_health = round(t_max_health - dmg['DMG'])
                                                t_defense = round(t_defense + (dmg['DMG'] * .5))
                                                t_attack = round(t_attack + (dmg['DMG'] * .5))
                                            elif enh_type == 'STANCE':
                                                tempattack = dmg['DMG']
                                                t_attack = t_defense
                                                t_defense = tempattack
                                            elif enh_type == 'CONFUSE':
                                                tempattack = dmg['DMG']
                                                o_attack = o_defense
                                                o_defense = tempattack
                                            elif enh_type == 'BLINK':
                                                t_stamina = round(t_stamina - dmg['DMG'])
                                                o_stamina = round(o_stamina + dmg['DMG'] - 10)
                                            elif enh_type == 'SLOW':
                                                tempstam = round(o_stamina + dmg['DMG'])
                                                t_stamina = round(t_stamina - dmg['DMG'])
                                                o_stamina = t_stamina
                                                t_stamina = tempstam
                                            elif enh_type == 'HASTE':
                                                tempstam = round(o_stamina - dmg['DMG'])
                                                t_stamina = round(t_stamina + dmg['DMG'])
                                                o_stamina = t_stamina
                                                t_stamina = tempstam
                                            elif enh_type == 'SOULCHAIN':
                                                t_stamina = round(dmg['DMG'])
                                                o_stamina = o_stamina
                                            elif enh_type == 'GAMBLE':
                                                if mode in D_modes:
                                                    t_health = round(dmg['DMG']) * 2
                                                    o_health = round(dmg['DMG'])
                                                elif mode in B_modes:
                                                    t_health = round(dmg['DMG']) * 4
                                                    o_health = round(dmg['DMG'])
                                                else:
                                                    t_health = round(dmg['DMG'])
                                                    o_health = round(dmg['DMG'])
                                            elif enh_type == 'FEAR':
                                                t_max_health = round(t_max_health - dmg['DMG'])
                                                o_defense = round(o_defense - (dmg['DMG'] * .5))
                                                o_attack = round(o_attack - (dmg['DMG'] * .5))
                                            elif enh_type == 'WAVE':
                                                o_health = round(o_health - dmg['DMG'])
                                            elif enh_type == 'BLAST':
                                                o_health = round(o_health - dmg['DMG'])
                                            elif enh_type == 'CREATION':
                                                t_max_health = round(t_max_health + dmg['DMG'])
                                                t_health = round(t_health + dmg['DMG'])
                                            elif enh_type == 'DESTRUCTION':
                                                o_max_health = round(o_max_health - dmg['DMG'])
                                            t_stamina = t_stamina - int(dmg['STAMINA_USED'])
                                            if mode not in AUTO_BATTLE_modes:
                                                embedVar = discord.Embed(title=f"{dmg['MESSAGE']}",
                                                                         colour=embed_color_t)
                                                await private_channel.send(embed=embedVar)
                                            turn_total = turn_total + 1
                                            turn = turn_selector
                                        elif dmg['DMG'] == 0:
                                            t_stamina = t_stamina - int(dmg['STAMINA_USED'])
                                            if mode not in AUTO_BATTLE_modes:
                                                embedVar = discord.Embed(title=f"{dmg['MESSAGE']}", colour=embed_color_t)
                                                if tarm_barrier_active:
                                                    tarm_barrier_active=False
                                                    embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                await private_channel.send(embed=embedVar)
                                            turn_total = turn_total + 1
                                            turn = turn_selector
                                        else:
                                            if o_universe == "Naruto" and o_stamina < 10:
                                                o_health = o_health
                                                if mode not in AUTO_BATTLE_modes:
                                                    embedVar = discord.Embed(title=f"{o_card.upper()}: Substitution Jutsu", description=f"{t_card} strikes a log", colour=0xe91e63)
                                                    if tarm_barrier_active:
                                                        tarm_barrier_active=False
                                                        embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                    await private_channel.send(embed=embedVar)
                                            elif oarm_shield_active:
                                                if oshield_value > 0:
                                                    oshield_value = oshield_value -dmg['DMG']
                                                    o_health = o_health 
                                                    if oshield_value <=0:
                                                        embedVar = discord.Embed(title=f"{o_card.upper()}'s' **Shield** Shattered!", description=f"{t_card} breaks the **Shield**!", colour=0xe91e63)
                                                        if tarm_barrier_active:
                                                            tarm_barrier_active=False
                                                            embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                        await private_channel.send(embed=embedVar)
                                                        oarm_shield_active = False
                                                    else:
                                                        embedVar = discord.Embed(title=f"{o_card.upper()} Activates **Shield** 🌐", description=f"{t_card} strikes the **Shield** for **{dmg['DMG']} DMG!**\n **{oshield_value} Shield** Left!", colour=0xe91e63)
                                                        if tarm_barrier_active:
                                                            tarm_barrier_active=False
                                                            embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                        await private_channel.send(embed=embedVar)

                                            elif oarm_barrier_active:
                                                if obarrier_count >1:
                                                    o_health = o_health 
                                                    embedVar = discord.Embed(title=f"{o_card.upper()} Activates **Barrier** 💠", description=f"{t_card}'s attack **Nullified**!\n {obarrier_count - 1} **Barriers** remain!", colour=0xe91e63)
                                                    if tarm_barrier_active:
                                                        tarm_barrier_active=False
                                                        embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                    await private_channel.send(embed=embedVar)
                                                    obarrier_count = obarrier_count - 1
                                                elif obarrier_count==1:
                                                    embedVar = discord.Embed(title=f"{o_card.upper()}'s **Barrier** Broken!", description=f"{t_card} destroys the **Barrier**", colour=0xe91e63)
                                                    obarrier_count = obarrier_count - 1
                                                    if tarm_barrier_active:
                                                        tarm_barrier_active=False
                                                        embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                    await private_channel.send(embed=embedVar)
                                                    oarm_barrier_active = False
                                            elif oarm_parry_active:
                                                if oparry_count > 1:
                                                    oparry_damage = round(dmg['DMG'] / 2)
                                                    o_health = o_health - oparry_damage
                                                    t_health = t_health - oparry_damage
                                                    oparry_count = oparry_count - 1
                                                    embedVar = discord.Embed(title=f"{o_card.upper()} Activates **Parry** 🔄", description=f"{t_card} takes {oparry_damage}! DMG\n **{oparry_count} Parries** to go!!", colour=0xe91e63)
                                                    if tarm_barrier_active:
                                                        tarm_barrier_active=False
                                                        embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                    await private_channel.send(embed=embedVar)
                                                    
                                                elif oparry_count==1:
                                                    embedVar = discord.Embed(title=f"{o_card.upper()} **Parry** Penetrated!!", description=f"{t_card} breaks the **Parry**", colour=0xe91e63)
                                                    oparry_damage = round(dmg['DMG'] / 2)
                                                    o_health = o_health - oparry_damage
                                                    t_health = t_health - oparry_damage
                                                    oparry_count = oparry_count - 1
                                                    if tarm_barrier_active:
                                                        tarm_barrier_active=False
                                                        embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                    await private_channel.send(embed=embedVar)
                                                    oarm_parry_active = False
                                            else:
                                                o_health = o_health - int(dmg['DMG'])
                                                if mode not in AUTO_BATTLE_modes:
                                                    embedVar = discord.Embed(title=f"{dmg['MESSAGE']}", colour=embed_color_t)
                                                    if tarm_barrier_active:
                                                        tarm_barrier_active=False
                                                        embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                    await private_channel.send(embed=embedVar)
                                            if o_health <= 0:
                                                if o_final_stand == True:
                                                    if mode not in AUTO_BATTLE_modes:
                                                        embedVar = discord.Embed(title=f"{o_card.upper()}'s LAST STAND", description=f"{o_card} FINDS RESOLVE", colour=0xe91e63)
                                                        embedVar.add_field(name=f"{o_card} resolved and continues to fight", value="All stats & stamina increased")
                                                        if tarm_barrier_active:
                                                            tarm_barrier_active=False
                                                            embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                        await private_channel.send(embed=embedVar)
                                                    o_health = int(.75 * (o_attack + o_defense))
                                                    o_attack = o_attack + (.50 * o_attack)
                                                    o_defense = o_defense + (.50 * o_defense)
                                                    o_stamina = 100
                                                    o_used_resolve = True
                                                    o_final_stand = False
                                                    o_used_focus = True
                                                    t_stamina = t_stamina - int(dmg['STAMINA_USED'])
                                                    turn_total = turn_total + 1
                                                    turn = 0
                                                else:
                                                    o_health = 0
                                                    t_stamina = t_stamina - int(dmg['STAMINA_USED'])
                                                    turn_total = turn_total + 1
                                            else:
                                                t_stamina = t_stamina - int(dmg['STAMINA_USED'])
                                                turn_total = turn_total + 1
                                                turn = turn_selector
                                    else:
                                        if mode in AUTO_BATTLE_modes:
                                            await private_channel.send(m.NOT_ENOUGH_STAMINA)
                                        turn = 1

                    elif mode in co_op_modes and turn != (0 or 1):
                        # Companion Turn Start
                        if turn == 2:
                            await asyncio.sleep(1)
                            if c_block_used == True:
                                c_defense = int(c_defense / 2)
                                c_block_used = False
                            if c_attack <= 25:
                                c_attack = 25
                            if c_defense <= 30:
                                c_defense = 30
                            if c_health >= c_max_health:
                                c_health = c_max_health
                            # Tutorial Instructions
                            if turn_total == 0 and botActive:
                                embedVar = discord.Embed(title=f"MATCH START",
                                                         description=f"`{c_card} Says:`\n{c_greeting_description}",
                                                         colour=0xe91e63)
                                await private_channel.send(embed=embedVar)

                            if c_health <= (c_max_health * .25):
                                embed_color_c = 0xe74c3c
                                if c_chainsaw == True:
                                    if c_atk_chainsaw == False:
                                        c_atk_chainsaw = True
                                        c_chainsaw = False
                                        c_defense = c_defense * 2
                                        c_attack = c_attack * 2
                                        embedVar = discord.Embed(title=f"{c_card.upper()}'s Devilization",
                                                                 description=f"**{c_card}** Doubles ATK and DEF",
                                                                 colour=0xe91e63)
                                        await private_channel.send(embed=embedVar)

                            elif c_health <= (c_max_health * .50):
                                embed_color_c = 0xe67e22
                                if c_chainsaw == True:
                                    if c_atk_chainsaw == False:
                                        c_atk_chainsaw = True
                                        c_chainsaw = False
                                        c_defense = c_defense * 2
                                        c_attack = c_attack * 2
                                        embedVar = discord.Embed(title=f"{c_card.upper()}'s Devilization",
                                                                 description=f"**{c_card}** Doubles ATK and DEF",
                                                                 colour=0xe91e63)
                                        await private_channel.send(embed=embedVar)
                            elif c_health <= (c_max_health * .75):
                                embed_color_c = 0xf1c40f

                            else:
                                embed_color_c = 0x2ecc71

                            if c_stamina < 10:
                                c_focus_count = c_focus_count + 1
                                # fortitude or luck is based on health
                                fortitude = 0.0
                                low = c_health - (c_health * .90)
                                high = c_health - (c_health * .80)
                                fortitude = random.randint(int(low), int(high))

                                c_stamina = c_focus
                                c_healthcalc = round(((c_focus * .40) + (fortitude * 1)) / 2)
                                c_attackcalc = round(.20 * ((c_focus * .15) + round(fortitude * 1)))
                                c_defensecalc = round(.20 * ((c_focus * .15) + round(fortitude * 1)))
                                # check if user is at max health and sets messages and focus health value
                                c_newhealth = 0
                                healmessage = ""
                                messagenumber = 0
                                if c_universe == "Crown Rift Madness":
                                    healmessage = "yet inner **Madness** drags on..."
                                    messagenumber = 3
                                else:
                                    if c_health <= c_max_health:
                                        c_newhealth = c_health + c_healthcalc
                                        if c_newhealth > c_max_health:
                                            healmessage = "the injuries dissapeared"
                                            messagenumber = 1
                                            c_health = c_max_health
                                        else:
                                            healmessage = "regained some vitality"
                                            messagenumber = 2
                                            c_health = c_newhealth
                                    else:
                                        healmessage = f"**{t_card}**'s blows don't appear to have any effect!"
                                        messagenumber = 0
                                if not c_used_resolve:
                                    c_attack = c_attack + c_attackcalc
                                    c_defense = c_defense + c_defensecalc
                                c_used_focus = True

                                embedVar = discord.Embed(title=f"{c_card.upper()} FOCUSED",
                                                         description=f"**{c_card} says**\n{c_focus_description}",
                                                         colour=0xe91e63)
                                embedVar.add_field(name=f"{c_card} focused and {healmessage}",
                                                   value="All stats & stamina increased")
                                await private_channel.send(embed=embedVar)
                                if not c_used_resolve and c_used_focus and c_universe == "Digimon":  # Digimon Universal Trait
                                    embedVar = discord.Embed(title=f"{c_card} STRENGTHENED RESOLVE :zap:",
                                                             description=f"**{c_card} says**\n{c_resolve_description}",
                                                             colour=0xe91e63)
                                    embedVar.add_field(name=f"Transformation: Digivolve", value="On Focus you Resolve.")
                                    await private_channel.send(embed=embedVar)
                                    # fortitude or luck is based on health
                                    fortitude = 0.0
                                    low = o_health - (o_health * .75)
                                    high = o_health - (o_health * .66)
                                    fortitude = random.randint(int(low), int(high))
                                    # Resolve Scaling
                                    c_resolve_health = round(fortitude + (.5 * c_resolve))
                                    c_resolve_attack = round((.30 * c_defense) * (c_resolve / (.50 * c_defense)))
                                    c_resolve_defense = round((.30 * c_defense) * (c_resolve / (.50 * c_defense)))

                                    c_stamina = c_stamina + c_resolve
                                    c_health = c_health + c_resolve_health
                                    c_attack = round(c_attack + c_resolve_attack)
                                    c_defense = round(c_defense - c_resolve_defense)
                                    c_used_resolve = True
                                    c_pet_used = False


                                elif c_universe == "League Of Legends":
                                    embedVar = discord.Embed(title=f"Turret Shot hits {t_card} for **30** Damage 💥",
                                                             colour=0xe91e63)
                                    await private_channel.send(embed=embedVar)
                                    t_health = round(t_health - 30)

                                elif c_universe == "Solo Leveling":
                                    embedVar = discord.Embed(
                                        title=f"Ruler's Authority... {t_card} loses **{30 + turn_total}** 🛡️ 🔻",
                                        colour=0xe91e63)
                                    await private_channel.send(embed=embedVar)
                                    t_defense = round(t_defense - (30 + turn_total))

                                elif c_universe == "Attack On Titan":
                                    embedVar = discord.Embed(title=f"Rally! **{c_card}** Increased Max Health ❤️",
                                                             colour=0xe91e63)
                                    await private_channel.send(embed=embedVar)
                                    c_max_health = round(c_max_health + 100)

                                elif c_universe == "Black Clover":
                                    embedVar = discord.Embed(title=f"Mana Zone! {c_card} Increased Stamina 🌀",
                                                             colour=0xe91e63)
                                    await private_channel.send(embed=embedVar)
                                    c_stamina = 100
                                    ccard_lvl_ap_buff = ccard_lvl_ap_buff + 30
                                elif c_universe == "Death Note":
                                    if turn_total >= 24:
                                        embedVar = discord.Embed(title=f"{t_card.upper()}'s' Scheduled Death 📓",
                                                                 description=f"**{c_card} says**\n**Delete**",
                                                                 colour=0xe91e63)
                                        embedVar.add_field(name=f"{t_card} had a heart attack and died",
                                                           value=f"Death....")
                                        await private_channel.send(embed=embedVar)
                                        t_health = 0

                                if t_universe == "One Punch Man":
                                    embedVar = discord.Embed(
                                        title=f"Hero Reinforcements! {t_card}  Increased Health & Max Health ❤️",
                                        colour=0xe91e63)
                                    await private_channel.send(embed=embedVar)
                                    t_health = round(t_health + 100)
                                    t_max_health = round(t_max_health + 100)

                                elif t_universe == "7ds":
                                    embedVar = discord.Embed(
                                        title=f"Increase Power Level! {t_card} Increased Stamina 🌀", colour=0xe91e63)
                                    await private_channel.send(embed=embedVar)
                                    t_stamina = t_stamina + 80

                                elif t_universe == "Souls":
                                    embedVar = discord.Embed(
                                        title=f"Combo Recognition! {t_card} Increased Attack by **{30 + turn_total}** 🔺 ",
                                        colour=0xe91e63)
                                    await private_channel.send(embed=embedVar)
                                    t_attack = round(t_attack + (30 + turn_total))

                                else:
                                    turn_total = turn_total + 1
                                    if c_universe != "Crown Rift Madness":
                                        turn = 3
                                    else:
                                        turn = 2
                                turn_total = turn_total + 1
                                if c_universe != "Crown Rift Madness":
                                    turn = 3
                                else:
                                    turn = 2
                            else:
                                if mode in ai_co_op_modes:
                                    # UNIVERSE CARD
                                    cap1 = list(c_1.values())[0] + ccard_lvl_ap_buff
                                    cap2 = list(c_2.values())[0] + ccard_lvl_ap_buff
                                    cap3 = list(c_3.values())[0] + ccard_lvl_ap_buff
                                    cenh1 = list(c_enhancer.values())[0]
                                    cenh_name = list(c_enhancer.values())[2]
                                    cpet_enh_name = list(cpet_move.values())[2]
                                    cpet_msg_on_resolve = ""
                                    companion_card = showcard(c, c_max_health, c_health, c_max_stamina, c_stamina,
                                                              c_used_resolve, ctitle, c_used_focus, c_attack, c_defense,
                                                              turn_total, cap1, cap2, cap3, cenh1, cenh_name, ccard_lvl, t_defense)
                                    await private_channel.send(file=companion_card)
                                    aiMove = 0

                                    if c_used_resolve and not c_pet_used:
                                        aiMove = 6
                                    elif t_stamina == 0:
                                        aiMove = 1
                                    elif c_health <= (.50 * c_max_health) and c_used_resolve == False and c_used_focus:
                                        aiMove = 5
                                    elif c_stamina >= 160 and (c_health >= t_health):
                                        if o_health <= t_health:
                                            if cmove_enhanced_text in Healer_Enhancer_Check:
                                                aiMove = 7
                                            else:
                                                aiMove = 3
                                        else:
                                            aiMove = 3
                                    elif c_stamina >= 160:
                                        aiMove = 3
                                    elif c_stamina >= 150 and (c_health >= t_health):
                                        aiMove = 1
                                    elif c_stamina >= 150:
                                        aiMove = 1
                                    elif c_stamina >= 140 and (c_health >= t_health):
                                        aiMove = 1
                                    elif c_stamina >= 140:
                                        aiMove = 3
                                    elif c_stamina >= 130 and (c_health >= t_health):
                                        aiMove = 1
                                    elif c_stamina >= 130:
                                        aiMove = 3
                                    elif c_stamina >= 120 and (c_health >= t_health):
                                        if o_health <= t_health:
                                            if cmove_enhanced_text in Healer_Enhancer_Check:
                                                aiMove = 7
                                            else:
                                                aiMove = 2
                                        else:
                                            aiMove = 2
                                    elif c_stamina >= 120:
                                        aiMove = 3
                                    elif c_stamina >= 110 and (c_health >= t_health):
                                        aiMove = 1
                                    elif c_stamina >= 110:
                                        aiMove = 2
                                    elif c_stamina >= 100 and (c_health >= t_health):
                                        if o_health <= t_health:
                                            if cmove_enhanced_text in Healer_Enhancer_Check:
                                                aiMove = 7
                                            else:
                                                aiMove = 8
                                        else:
                                            if cmove_enhanced_text in Healer_Enhancer_Check:
                                                aiMove = 7
                                            else:
                                                aiMove = 2
                                    elif c_stamina >= 100:
                                        if c_health >= o_health:
                                            aiMove = 8
                                        else:
                                            aiMove = 1
                                    elif c_stamina >= 90 and (c_health >= t_health):
                                        if o_health <= t_health:
                                            if c_health >= o_health:
                                                aiMove = 8
                                            else:
                                                if cmove_enhanced_text in Healer_Enhancer_Check:
                                                    aiMove = 7
                                                else:
                                                    aiMove = 2
                                        else:
                                            if c_health >= o_health:
                                                aiMove = 8
                                            else:
                                                aiMove = 1
                                    elif c_stamina >= 90:
                                        if c_health >= o_health:
                                            aiMove = 8
                                        else:
                                            if cmove_enhanced_text in Healer_Enhancer_Check or cmove_enhanced_text in Support_Enhancer_Check:
                                                aiMove = 7
                                            else:
                                                aiMove = 2
                                    elif c_stamina >= 80 and (c_health >= t_health):
                                        if o_health <= t_health:
                                            if cmove_enhanced_text in Healer_Enhancer_Check:
                                                aiMove = 7
                                            else:
                                                aiMove = 2
                                        else:
                                            aiMove = 1
                                    elif c_stamina >= 80:
                                        if o_health <= t_health:
                                            if cmove_enhanced_text in Healer_Enhancer_Check:
                                                aiMove = 7
                                            else:
                                                aiMove = 2
                                        else:
                                            aiMove = 3
                                    elif c_stamina >= 70 and (c_health >= t_health):
                                        if cmove_enhanced_text in Healer_Enhancer_Check:
                                            aiMove = 7
                                        else:
                                            aiMove = 2
                                    elif c_stamina >= 70:
                                        aiMove = 1
                                    elif c_stamina >= 60 and (c_health >= t_health):
                                        if c_used_resolve == False and c_used_focus:
                                            aiMove = 5
                                        elif c_used_focus == False:
                                            aiMove = 2
                                        else:
                                            aiMove = 1
                                    elif c_stamina >= 60:
                                        if c_used_resolve == False and c_used_focus:
                                            aiMove = 5
                                        elif c_used_focus == False:
                                            aiMove = 2
                                        else:
                                            aiMove = 1
                                    elif c_stamina >= 50 and (c_health >= t_health):
                                        if c_stamina >= o_stamina:
                                            if c_health >= o_health:
                                                aiMove = 8
                                            else:
                                                if cmove_enhanced_text in Healer_Enhancer_Check or cmove_enhanced_text in Support_Enhancer_Check:
                                                    aiMove = 7
                                                else:
                                                    aiMove = 2
                                        else:
                                            if c_health >= o_health:
                                                aiMove = 8
                                            else:
                                                aiMove = 1
                                    elif c_stamina >= 50:
                                        aiMove = 2
                                    elif c_stamina >= 40 and (c_health >= t_health):
                                        if o_health <= t_health:
                                            if cmove_enhanced_text in Healer_Enhancer_Check or cmove_enhanced_text in Support_Enhancer_Check:
                                                aiMove = 7
                                            else:
                                                aiMove = 2
                                        else:
                                            aiMove = 1
                                    elif c_stamina >= 40:
                                        aiMove = 2
                                    elif c_stamina >= 30 and (c_health >= t_health):
                                        if o_health <= t_health:
                                            if cmove_enhanced_text in Healer_Enhancer_Check or cmove_enhanced_text in Support_Enhancer_Check:
                                                aiMove = 7
                                            else:
                                                aiMove = 2
                                        else:
                                            aiMove = 4
                                    elif c_stamina >= 30:
                                        aiMove = 2
                                    elif c_stamina >= 20 and (c_health >= t_health):
                                        if c_health >= o_health:
                                            aiMove = 8
                                        else:
                                            aiMove = 1
                                    elif c_stamina >= 20:
                                        if c_health >= o_health:
                                            aiMove = 8
                                        else:
                                            if cmove_enhanced_text in Healer_Enhancer_Check or cmove_enhanced_text in Support_Enhancer_Check:
                                                aiMove = 7
                                            else:
                                                aiMove = 1
                                    elif c_stamina >= 10:
                                        aiMove = 1
                                    else:
                                        aiMove = 0

                                    # calculate data based on selected move
                                    if aiMove == 0:
                                        c_health = 0

                                        if private_channel.guild:
                                            await private_channel.send(f"{user2.mention} has fled the battle...")

                                            await discord.TextChannel.delete(private_channel, reason=None)
                                        else:

                                            await private_channel.send(f"You fled the battle...")
                                        return
                                    if aiMove == 1:

                                        dmg = damage_cal(c_universe, c_card, c_1, c_attack, c_defense, t_defense,
                                                         c_stamina, c_enhancer_used, c_health, t_health, t_stamina,
                                                         c_max_health, t_attack, c_special_move_description, turn_total,
                                                         ccard_lvl_ap_buff)
                                    elif aiMove == 2:

                                        dmg = damage_cal(c_universe, c_card, c_2, c_attack, c_defense, t_defense,
                                                         c_stamina, c_enhancer_used, c_health, t_health, t_stamina,
                                                         c_max_health, t_attack, c_special_move_description, turn_total,
                                                         ccard_lvl_ap_buff)
                                    elif aiMove == 3:

                                        dmg = damage_cal(c_universe, c_card, c_3, c_attack, c_defense, t_defense,
                                                         c_stamina, c_enhancer_used, c_health, t_health, t_stamina,
                                                         c_max_health, t_attack, c_special_move_description, turn_total,
                                                         ccard_lvl_ap_buff)
                                        if c_gif != "N/A":
                                            await private_channel.send(f"{c_gif}")
                                    elif aiMove == 4:
                                        c_enhancer_used = True

                                        dmg = damage_cal(c_universe, c_card, c_enhancer, c_attack, c_defense, t_defense,
                                                         c_stamina, c_enhancer_used, c_health, t_health, t_stamina,
                                                         c_max_health, t_attack, c_special_move_description, turn_total,
                                                         ccard_lvl_ap_buff)
                                        c_enhancer_used = False
                                    elif aiMove == 5:
                                        # Resolve Check and Calculation
                                        if not c_used_resolve and c_used_focus:
                                            if c_universe == "My Hero Academia":  # My Hero Trait
                                                # fortitude or luck is based on health
                                                fortitude = 0.0
                                                low = c_health - (c_health * .75)
                                                high = c_health - (c_health * .66)
                                                fortitude = random.randint(int(low), int(high))
                                                # Resolve Scaling
                                                c_resolve_health = round(fortitude + (.5 * c_resolve))
                                                c_resolve_attack = round(
                                                    (.30 * c_defense) * (c_resolve / (.50 * c_defense)))
                                                c_resolve_defense = round(
                                                    (.30 * c_defense) * (c_resolve / (.50 * c_defense)))
                                                ccard_lvl_ap_buff = ccard_lvl_ap_buff + 50

                                                c_stamina = c_stamina + c_resolve
                                                c_health = c_health + c_resolve_health
                                                c_attack = round(c_attack + c_resolve_attack)
                                                c_defense = round(c_defense - c_resolve_defense)
                                                c_used_resolve = True
                                                c_pet_used = False
                                                embedVar = discord.Embed(title=f"{c_card.upper()} PLUS ULTRAAA",
                                                                         description=f"**{c_card} says**\n{c_resolve_description}",
                                                                         colour=0xe91e63)
                                                embedVar.add_field(name=f"Transformation: Plus Ultra",
                                                                   value="You do not lose a turn after you Resolve.")
                                                await private_channel.send(embed=embedVar)

                                                turn_total = turn_total + 1
                                                turn = 2
                                            elif c_universe == "Attack On Titan":
                                                # fortitude or luck is based on health
                                                fortitude = 0.0
                                                low = c_health - (c_health * .75)
                                                high = c_health - (c_health * .66)
                                                fortitude = random.randint(int(low), int(high))
                                                # Resolve Scaling
                                                c_resolve_health = round(fortitude + (.5 * c_resolve))
                                                c_resolve_attack = round(
                                                    (.30 * c_defense) * (c_resolve / (.50 * c_defense)))
                                                c_resolve_defense = round(
                                                    (.30 * c_defense) * (c_resolve / (.50 * c_defense)))

                                                c_stamina = c_stamina + c_resolve
                                                c_health = c_health + c_resolve_health
                                                c_attack = round(c_attack + c_resolve_attack)
                                                c_defense = round(c_defense - c_resolve_defense)
                                                c_used_resolve = True
                                                c_pet_used = False
                                                health_boost = 100 * c_focus_count
                                                c_health = c_health + health_boost
                                                embedVar = discord.Embed(title=f"{c_card.upper()} Titan Mode",
                                                                         description=f"**{c_card} says**\n{c_resolve_description}",
                                                                         colour=0xe91e63)
                                                embedVar.add_field(name=f"Transformation Complete",
                                                                   value=f"Health increased by **{health_boost}**!")
                                                await private_channel.send(embed=embedVar)

                                                turn_total = turn_total + 1
                                                turn = 3

                                            elif c_universe == "Bleach":  # Bleach Trait
                                                # fortitude or luck is based on health
                                                fortitude = 0.0
                                                low = c_health - (c_health * .75)
                                                high = c_health - (c_health * .66)
                                                fortitude = random.randint(int(low), int(high))
                                                # Resolve Scaling
                                                c_resolve_health = round(fortitude + (.5 * c_resolve))
                                                c_resolve_attack = round(
                                                    (.30 * c_defense) * (c_resolve / (.50 * c_defense)))
                                                c_resolve_defense = round(
                                                    (.30 * c_defense) * (c_resolve / (.50 * c_defense)))

                                                c_stamina = c_stamina + c_resolve
                                                c_health = c_health + c_resolve_health
                                                c_attack = round((c_attack + (2 * c_resolve_attack)) * 2)
                                                c_defense = round(c_defense - c_resolve_defense)
                                                # if c_defense >= 120:
                                                # c_defense = 120
                                                c_used_resolve = True
                                                c_pet_used = False
                                                embedVar = discord.Embed(title=f"{c_card} Bankai! :zap:",
                                                                         description=f"**{c_card} says**\n{c_resolve_description}",
                                                                         colour=0xe91e63)
                                                embedVar.add_field(name=f"Transformation: Bankai",
                                                                   value="Gain double Attack on Resolve.")
                                                await private_channel.send(embed=embedVar)
                                                turn_total = turn_total + 1
                                                turn = 3
                                            elif c_universe == "God Of War":  # God Of War Trait
                                                # fortitude or luck is based on health
                                                fortitude = 0.0
                                                low = c_health - (c_health * .75)
                                                high = c_health - (c_health * .66)
                                                fortitude = random.randint(int(low), int(high))
                                                # Resolve Scaling
                                                c_resolve_health = round(fortitude + (.5 * o_resolve))
                                                c_resolve_attack = round(
                                                    (.30 * c_defense) * (c_resolve / (.50 * c_defense)))
                                                c_resolve_defense = round(
                                                    (.30 * c_defense) * (c_resolve / (.50 * c_defense)))

                                                c_stamina = c_stamina + c_resolve
                                                c_health = c_max_health
                                                c_attack = round(c_attack + c_resolve_attack)
                                                c_defense = round(c_defense - c_resolve_defense)
                                                c_used_resolve = True
                                                c_pet_used = False
                                                embedVar = discord.Embed(title=f"{c_card} ASCENDED :zap:",
                                                                         description=f"**{c_card} says**\n{c_resolve_description}",
                                                                         colour=0xe91e63)
                                                embedVar.add_field(name=f"Transformation: Ascension",
                                                                   value="On Resolve Refill Health.")
                                                await private_channel.send(embed=embedVar)
                                                turn_total = turn_total + 1
                                                turn = 3
                                            elif c_universe == "Fate":  # Fate Trait
                                                # fortitude or luck is based on health
                                                fortitude = 0.0
                                                low = c_health - (c_health * .75)
                                                high = c_health - (c_health * .66)
                                                fortitude = random.randint(int(low), int(high))
                                                # Resolve Scaling
                                                c_resolve_health = round(fortitude + (.5 * c_resolve))
                                                c_resolve_attack = round(
                                                    (.30 * c_defense) * (c_resolve / (.50 * c_defense)))
                                                c_resolve_defense = round(
                                                    (.30 * c_defense) * (c_resolve / (.50 * c_defense)))

                                                c_stamina = c_stamina + c_resolve
                                                c_health = c_health + c_resolve_health
                                                c_attack = round(c_attack + c_resolve_attack)
                                                c_defense = round(c_defense - c_resolve_defense)

                                                dmg = damage_cal(c_universe, c_card, c_3, c_attack, c_defense,
                                                                 t_defense, c_stamina, c_enhancer_used, c_health,
                                                                 t_health, t_stamina, c_max_health, t_attack,
                                                                 c_special_move_description, turn_total,
                                                                 ccard_lvl_ap_buff)
                                                t_health = t_health - dmg['DMG']
                                                embedVar = discord.Embed(
                                                    title=f"{c_card} COMMAND SEAL :zap:\n\n{dmg['MESSAGE']}",
                                                    description=f"**{c_card} says**\n{c_resolve_description}",
                                                    colour=0xe91e63)
                                                embedVar.add_field(name=f"Transformation: Command Seal",
                                                                   value="On Resolve, Strike with Ultimate, then Focus.")
                                                await private_channel.send(embed=embedVar)
                                                # c_stamina = 0
                                                c_used_resolve = True
                                                c_pet_used = False
                                                turn_total = turn_total + 1
                                                turn = 3
                                            elif c_universe == "Kanto Region" or c_universe == "Johto Region" or c_universe == "Hoenn Region" or c_universe == "Sinnoh Region" or c_universe == "Kalos Region" or c_universe == "Unova Region" or c_universe == "Alola Region" or c_universe == "Galar Region":  # Pokemon Resolves
                                                # fortitude or luck is based on health
                                                fortitude = 0.0
                                                low = c_health - (c_health * .75)
                                                high = c_health - (c_health * .66)
                                                fortitude = random.randint(int(low), int(high))
                                                # Resolve Scaling
                                                c_resolve_health = round(fortitude + (.5 * o_resolve))
                                                c_resolve_attack = round(
                                                    (.30 * c_defense) * (c_resolve / (.50 * c_defense)))
                                                c_resolve_defense = round(
                                                    (.30 * c_defense) * (c_resolve / (.50 * c_defense)))

                                                c_stamina = c_stamina + c_resolve
                                                c_health = c_health + c_resolve_health
                                                c_attack = round(c_attack + c_resolve_attack)
                                                c_defense = round(c_defense) * 2
                                                c_used_resolve = True
                                                c_pet_used = False
                                                embedVar = discord.Embed(title=f"{c_card} EVOLUTION :zap:",
                                                                         description=f"**{c_card} says**\n{c_resolve_description}",
                                                                         colour=0xe91e63)
                                                embedVar.add_field(name=f"Transformation: Evolution",
                                                                   value="When you Resolve you do not lose Defense.")
                                                await private_channel.send(embed=embedVar)
                                                turn_total = turn_total + 1
                                                turn = 3
                                            else:  # Standard Resolve
                                                # fortitude or luck is based on health
                                                fortitude = 0.0
                                                low = c_health - (c_health * .75)
                                                high = c_health - (c_health * .66)
                                                fortitude = random.randint(int(low), int(high))
                                                # Resolve Scaling
                                                c_resolve_health = round(fortitude + (.5 * c_resolve))
                                                c_resolve_attack = round(
                                                    (.30 * c_defense) * (c_resolve / (.50 * c_defense)))
                                                c_resolve_defense = round(
                                                    (.30 * c_defense) * (c_resolve / (.50 * c_defense)))

                                                c_stamina = c_stamina + c_resolve
                                                c_health = c_health + c_resolve_health
                                                c_attack = round(c_attack + c_resolve_attack)
                                                c_defense = round(c_defense - c_resolve_defense)
                                                c_used_resolve = True
                                                c_pet_used = False
                                                if c_universe == "League Of Legends":
                                                    t_health = t_health - (30 * (c_focus_count + t_focus_count))
                                                    embedVar = discord.Embed(title=f"{c_card.upper()} PENTA KILL!",
                                                                             description=f"**{c_card} says**\n{c_resolve_description}",
                                                                             colour=0xe91e63)
                                                    embedVar.add_field(name=f"Nexus Destroyed",
                                                                       value=f"**{c_card}** dealt **{(30 * (c_focus_count + t_focus_count))}** damage.")
                                                else:
                                                    embedVar = discord.Embed(
                                                        title=f"{c_card} STRENGTHENED RESOLVE :zap:",
                                                        description=f"**{c_card} says**\n{c_resolve_description}",
                                                        colour=0xe91e63)
                                                    embedVar.add_field(name=f"Transformation",
                                                                       value="All stats & stamina greatly increased")
                                                await private_channel.send(embed=embedVar)
                                                turn_total = turn_total + 1
                                                turn = 3
                                        else:
                                            emessage = m.CANNOT_USE_RESOLVE
                                            embedVar = discord.Embed(title=emessage, colour=0xe91e63)
                                            await private_channel.send(embed=embedVar)
                                    elif aiMove == 6:
                                        # Resolve Check and Calculation
                                        if c_used_resolve and c_used_focus and not c_pet_used:
                                            c_enhancer_used = True
                                            dmg = damage_cal(c_universe, c_card, cpet_move, c_attack, c_defense,
                                                             t_defense, c_stamina, c_enhancer_used, c_health, t_health,
                                                             t_stamina, c_max_health, t_attack,
                                                             c_special_move_description, turn_total, ccard_lvl_ap_buff)
                                            c_enhancer_used = False
                                            c_pet_used = True
                                            cpet_dmg = dmg['DMG']
                                            cpet_type = dmg['ENHANCED_TYPE']
                                            if dmg['CAN_USE_MOVE']:
                                                if cpet_type == 'ATK':
                                                    c_attack = round(c_attack + dmg['DMG'])
                                                elif cpet_type == 'DEF':
                                                    c_defense = round(c_defense + dmg['DMG'])
                                                elif cpet_type == 'STAM':
                                                    c_stamina = round(c_stamina + dmg['DMG'])
                                                elif cpet_type == 'HLT':
                                                    c_health = round(c_health + dmg['DMG'])
                                                elif cpet_type == 'LIFE':
                                                    c_health = round(c_health + dmg['DMG'])
                                                    t_health = round(t_health - dmg['DMG'])
                                                elif cpet_type == 'DRAIN':
                                                    c_stamina = round(c_stamina + dmg['DMG'])
                                                    t_stamina = round(t_stamina - dmg['DMG'])
                                                elif cpet_type == 'FLOG':
                                                    c_attack = round(c_attack + dmg['DMG'])
                                                    t_attack = round(t_attack - dmg['DMG'])
                                                elif cpet_type == 'WITHER':
                                                    c_defense = round(c_defense + dmg['DMG'])
                                                    t_defense = round(t_defense - dmg['DMG'])
                                                elif cpet_type == 'RAGE':
                                                    c_defense = round(c_defense - dmg['DMG'])
                                                    c_attack = round(c_attack + dmg['DMG'])
                                                elif cpet_type == 'BRACE':
                                                    c_defense = round(c_defense + dmg['DMG'])
                                                    c_attack = round(c_attack - dmg['DMG'])
                                                elif cpet_type == 'BZRK':
                                                    c_health = round(c_health - dmg['DMG'])
                                                    c_attack = round(c_attack + dmg['DMG'])
                                                elif cpet_type == 'CRYSTAL':
                                                    c_health = round(c_health - dmg['DMG'])
                                                    c_defense = round(c_defense + dmg['DMG'])
                                                elif cpet_type == 'GROWTH':
                                                    c_max_health = round(c_max_health - dmg['DMG'])
                                                    c_defense = round(c_defense + (dmg['DMG'] * .5))
                                                    c_attack = round(c_attack + (dmg['DMG'] * .5))
                                                elif cpet_type == 'STANCE':
                                                    tempattack = dmg['DMG']
                                                    c_attack = c_defense
                                                    c_defense = tempattack
                                                elif cpet_type == 'CONFUSE':
                                                    tempattack = dmg['DMG']
                                                    t_attack = t_defense
                                                    t_defense = tempattack
                                                elif cpet_type == 'BLINK':
                                                    c_stamina = round(c_stamina - dmg['DMG'])
                                                    t_stamina = round(t_stamina + dmg['DMG'] - 10)
                                                elif cpet_type == 'SLOW':
                                                    tempstam = round(t_stamina + dmg['DMG'])
                                                    c_stamina = round(c_stamina - dmg['DMG'])
                                                    t_stamina = c_stamina
                                                    c_stamina = tempstam
                                                elif cpet_type == 'HASTE':
                                                    tempstam = round(t_stamina - dmg['DMG'])
                                                    c_stamina = round(c_stamina + dmg['DMG'])
                                                    t_stamina = c_stamina
                                                    c_stamina = tempstam
                                                elif cpet_type == 'SOULCHAIN':
                                                    c_stamina = round(dmg['DMG'])
                                                    t_stamina = c_stamina
                                                elif cpet_type == 'GAMBLE':
                                                    c_health = round(dmg['DMG'])
                                                    t_health = c_health
                                                elif cpet_type == 'FEAR':
                                                    c_max_health = round(c_max_health - dmg['DMG'])
                                                    t_defense = round(t_defense - (dmg['DMG'] * .5))
                                                    t_attack = round(t_attack - (dmg['DMG'] * .5))
                                                elif cpet_type == 'WAVE':
                                                    t_health = round(t_health - dmg['DMG'])
                                                elif cpet_type == 'BLAST':
                                                    if dmg['DMG'] >= 100:
                                                        dmg['DMG'] = 100
                                                    t_health = round(t_health - dmg['DMG'])
                                                elif cpet_type == 'CREATION':
                                                    c_max_health = round(c_max_health + dmg['DMG'])
                                                    c_health = round(c_health + dmg['DMG'])
                                                elif cpet_type == 'DESTRUCTION':
                                                    t_max_health = round(t_max_health - dmg['DMG'])

                                                c_stamina = c_stamina - int(dmg['STAMINA_USED'])
                                                if c_universe == "Persona":
                                                    petdmg = damage_cal(c_universe, c_card, c_1, c_attack, c_defense,
                                                                        t_defense, c_stamina, c_enhancer_used, c_health,
                                                                        t_health, t_stamina, c_max_health, t_attack,
                                                                        c_special_move_description, turn_total,
                                                                        ccard_lvl_ap_buff)

                                                    t_health = t_health - petdmg['DMG']

                                                    embedVar = discord.Embed(
                                                        title=f"**PERSONA!**\n{cpet_name} was summoned from {c_card}'s soul dealing **{petdmg['DMG']}** damage!!",
                                                        colour=0xe91e63)
                                                    embedVar.add_field(name=f"{cpet_name} used **{cpetmove_text}**!",
                                                                       value=f"Enhanced **{cpet_type}**")

                                                    embedVar.set_thumbnail(url=cpet_image)
                                                    embedVar.set_image(url="attachment://image.png")
                                                    await private_channel.send(embed=embedVar)
                                                else:
                                                    embedVar = discord.Embed(
                                                        title=f"{c_card.upper()} Summoned :bird: {cpet_name}",
                                                        colour=0xe91e63)
                                                    embedVar.add_field(name=f"{cpet_name} used **{cpetmove_text}**!",
                                                                       value=f"Enhanced **{cpet_type}**")
                                                    embedVar.set_thumbnail(url=cpet_image)
                                                    embedVar.set_image(url="attachment://image.png")
                                                    await private_channel.send(embed=embedVar)
                                                turn = 2
                                            else:
                                                await private_channel.send(f"{cpet_name} needs a turn to rest...")
                                                turn = 2
                                        else:
                                            await private_channel.send(f"{cpet_name} needs a turn to rest...")
                                    elif aiMove == 7:
                                        c_enhancer_used = True
                                        dmg = damage_cal(c_universe, c_card, c_enhancer, c_attack, c_defense, o_defense,
                                                         c_stamina, c_enhancer_used, c_health, o_health, o_stamina,
                                                         c_max_health, o_attack, c_special_move_description, turn_total,
                                                         ccard_lvl_ap_buff)
                                        c_enhancer_used = False
                                        cdmg = dmg['DMG']
                                        cenh_type = dmg['ENHANCED_TYPE']
                                        if dmg['CAN_USE_MOVE']:
                                            if cenh_type == 'ATK':
                                                o_attack = round(o_attack + dmg['DMG'])
                                            elif cenh_type == 'DEF':
                                                o_defense = round(o_defense + dmg['DMG'])
                                            elif cenh_type == 'STAM':
                                                o_stamina = round(o_stamina + dmg['DMG'])
                                            elif cenh_type == 'HLT':
                                                o_health = round(o_health + dmg['DMG'])
                                            elif cenh_type == 'LIFE':
                                                o_health = round(o_health + dmg['DMG'])
                                                c_health = round(c_health - dmg['DMG'])
                                            elif cenh_type == 'DRAIN':
                                                o_stamina = round(o_stamina + dmg['DMG'])
                                                c_stamina = round(c_stamina - dmg['DMG'])
                                            elif cenh_type == 'FLOG':
                                                o_attack = round(o_attack + dmg['DMG'])
                                                t_attack = round(t_attack - dmg['DMG'])
                                            elif cenh_type == 'WITHER':
                                                o_defense = round(o_defense + dmg['DMG'])
                                                t_defense = round(t_defense - dmg['DMG'])
                                            elif cenh_type == 'RAGE':
                                                o_defense = round(o_defense - dmg['DMG'])
                                                o_attack = round(o_attack + dmg['DMG'])
                                            elif cenh_type == 'BRACE':
                                                o_defense = round(o_defense + dmg['DMG'])
                                                o_attack = round(o_attack - dmg['DMG'])
                                            elif cenh_type == 'BZRK':
                                                o_health = round(o_health - dmg['DMG'])
                                                o_attack = round(o_attack + dmg['DMG'])
                                            elif cenh_type == 'CRYSTAL':
                                                o_health = round(o_health - dmg['DMG'])
                                                o_defense = round(o_defense + dmg['DMG'])
                                            elif cenh_type == 'GROWTH':
                                                o_max_health = round(o_max_health - dmg['DMG'])
                                                o_defense = round(o_defense + (dmg['DMG'] * .5))
                                                o_attack = round(o_attack + (dmg['DMG'] * .5))
                                            elif cenh_type == 'STANCE':
                                                tempattack = dmg['DMG']
                                                o_attack = o_defense
                                                o_defense = tempattack
                                            elif cenh_type == 'CONFUSE':
                                                tempattack = dmg['DMG']
                                                c_attack = c_defense
                                                c_defense = tempattack
                                            elif cenh_type == 'BLINK':
                                                o_stamina = round(o_stamina - dmg['DMG'])
                                                c_stamina = round(c_stamina + dmg['DMG'] - 10)
                                            elif cenh_type == 'SLOW':
                                                tempstam = round(c_stamina + dmg['DMG'])
                                                o_stamina = round(o_stamina - dmg['DMG'])
                                                c_stamina = o_stamina
                                                o_stamina = tempstam
                                            elif cenh_type == 'HASTE':
                                                tempstam = round(c_stamina - dmg['DMG'])
                                                o_stamina = round(o_stamina + dmg['DMG'])
                                                c_stamina = o_stamina
                                                o_stamina = tempstam
                                            elif cenh_type == 'SOULCHAIN':
                                                o_stamina = round(dmg['DMG'])
                                                c_stamina = o_stamina
                                            elif cenh_type == 'GAMBLE':
                                                o_health = round(dmg['DMG'])
                                                c_health = o_health
                                            elif cenh_type == 'FEAR':
                                                o_max_health = round(o_max_health - dmg['DMG'])
                                                t_defense = round(t_defense - (dmg['DMG'] * .5))
                                                t_attack = round(t_attack - (dmg['DMG'] * .5))
                                            elif cenh_type == 'WAVE':
                                                t_health = round(t_health - dmg['DMG'])
                                            elif cenh_type == 'BLAST':
                                                t_health = round(t_health - dmg['DMG'])
                                            elif cenh_type == 'CREATION':
                                                o_max_health = round(o_max_health + dmg['DMG'])
                                                o_health = round(o_health + dmg['DMG'])
                                            elif enh_type == 'DESTRUCTION':
                                                t_max_health = round(t_max_health - dmg['DMG'])

                                            c_stamina = c_stamina - int(dmg['STAMINA_USED'])

                                            embedVar = discord.Embed(
                                                title=f"{c_card.upper()} ASSISTED {o_card.upper()}", colour=0xe91e63)
                                            embedVar.add_field(name=f"{c_card} used {cmove_enhanced_text}!",
                                                               value=f"Enhanced {cenh_type}")
                                            await private_channel.send(embed=embedVar)
                                            turn = 3
                                        else:
                                            await private_channel.send(m.NOT_ENOUGH_STAMINA)
                                            turn = 2
                                    elif aiMove == 8:
                                        if c_stamina >= 20:
                                            c_block_used = True
                                            c_stamina = c_stamina - 20
                                            c_defense = c_defense * 2
                                            embedVar = discord.Embed(
                                                title=f"{c_card} **Defended** 🛡️ {o_card.upper()}", colour=0xe91e63)

                                            await private_channel.send(embed=embedVar)
                                            turn = 3
                                        else:
                                            await private_channel.send(f"{c_card} is too tired to block...")
                                            turn = 2

                                    if aiMove != 5 and aiMove != 6 and aiMove != 7 and aiMove != 8:
                                        # If you have enough stamina for move, use it

                                        if dmg['CAN_USE_MOVE']:
                                            c_pet_used = False
                                            if dmg['ENHANCE']:
                                                enh_type = dmg['ENHANCED_TYPE']

                                                if enh_type == 'ATK':
                                                    c_attack = round(c_attack + dmg['DMG'])
                                                elif enh_type == 'DEF':
                                                    c_defense = round(c_defense + dmg['DMG'])
                                                elif enh_type == 'STAM':
                                                    c_stamina = round(c_stamina + dmg['DMG'])
                                                elif enh_type == 'HLT':
                                                    c_health = round(c_health + dmg['DMG'])
                                                elif enh_type == 'LIFE':
                                                    c_health = round(c_health + dmg['DMG'])
                                                    t_health = round(t_health - dmg['DMG'])
                                                elif enh_type == 'DRAIN':
                                                    c_stamina = round(c_stamina + dmg['DMG'])
                                                    t_stamina = round(t_stamina - dmg['DMG'])
                                                elif enh_type == 'FLOG':
                                                    c_attack = round(c_attack + dmg['DMG'])
                                                    t_attack = round(t_attack - dmg['DMG'])
                                                elif enh_type == 'WITHER':
                                                    c_defense = round(c_defense + dmg['DMG'])
                                                    t_defense = round(t_defense - dmg['DMG'])
                                                elif enh_type == 'RAGE':
                                                    c_defense = round(c_defense - dmg['DMG'])
                                                    c_attack = round(c_attack + dmg['DMG'])
                                                elif enh_type == 'BRACE':
                                                    c_defense = round(c_defense + dmg['DMG'])
                                                    c_attack = round(c_attack - dmg['DMG'])
                                                elif enh_type == 'BZRK':
                                                    c_health = round(c_health - dmg['DMG'])
                                                    c_attack = round(c_attack + dmg['DMG'])
                                                elif enh_type == 'CRYSTAL':
                                                    c_health = round(c_health - dmg['DMG'])
                                                    c_defense = round(c_defense + dmg['DMG'])
                                                elif enh_type == 'GROWTH':
                                                    c_max_health = round(c_max_health - dmg['DMG'])
                                                    c_defense = round(c_defense + (dmg['DMG'] * .5))
                                                    c_attack = round(c_attack + (dmg['DMG'] * .5))
                                                elif enh_type == 'STANCE':
                                                    tempattack = dmg['DMG']
                                                    c_attack = c_defense
                                                    c_defense = tempattack
                                                elif enh_type == 'CONFUSE':
                                                    tempattack = dmg['DMG']
                                                    t_attack = t_defense
                                                    t_defense = tempattack
                                                elif enh_type == 'BLINK':
                                                    c_stamina = round(c_stamina - dmg['DMG'])
                                                    t_stamina = round(t_stamina + dmg['DMG'] - 10)
                                                elif enh_type == 'SLOW':
                                                    tempstam = round(t_stamina + dmg['DMG'])
                                                    c_stamina = round(c_stamina - dmg['DMG'])
                                                    t_stamina = c_stamina
                                                    c_stamina = tempstam
                                                elif enh_type == 'HASTE':
                                                    tempstam = round(t_stamina - dmg['DMG'])
                                                    c_stamina = round(c_stamina + dmg['DMG'])
                                                    t_stamina = c_stamina
                                                    c_stamina = tempstam
                                                elif enh_type == 'SOULCHAIN':
                                                    c_stamina = round(dmg['DMG'])
                                                    t_stamina = c_stamina
                                                elif enh_type == 'GAMBLE':
                                                    if mode in D_modes:
                                                        t_health = round(dmg['DMG']) * 2
                                                        c_health = round(dmg['DMG'])
                                                    elif mode in B_modes:
                                                        t_health = round(dmg['DMG']) * 3
                                                        c_health = round(dmg['DMG'])
                                                    else:
                                                        t_health = round(dmg['DMG'])
                                                        c_health = round(dmg['DMG'])
                                                elif enh_type == 'FEAR':
                                                    c_max_health = round(c_max_health - dmg['DMG'])
                                                    t_defense = round(t_defense - (dmg['DMG'] * .5))
                                                    t_attack = round(t_attack - (dmg['DMG'] * .5))
                                                elif enh_type == 'WAVE':
                                                    t_health = round(t_health - dmg['DMG'])
                                                elif enh_type == 'BLAST':
                                                    t_health = round(t_health - dmg['DMG'])
                                                elif enh_type == 'CREATION':
                                                    c_max_health = round(c_max_health + dmg['DMG'])
                                                    c_health = round(c_health + dmg['DMG'])
                                                elif enh_type == 'DESTRUCTION':
                                                    t_max_health = round(t_max_health - dmg['DMG'])

                                                c_stamina = c_stamina - int(dmg['STAMINA_USED'])

                                                embedVar = discord.Embed(title=f"{dmg['MESSAGE']}",
                                                                         colour=embed_color_c)
                                                await private_channel.send(embed=embedVar)
                                                turn_total = turn_total + 1
                                                turn = 3
                                            elif dmg['DMG'] == 0:
                                                c_stamina = c_stamina - int(dmg['STAMINA_USED'])

                                                embedVar = discord.Embed(title=f"{dmg['MESSAGE']}", colour=embed_color_c)
                                                if carm_barrier_active:
                                                    carm_barrier_active=False
                                                    embedVar.add_field(name=f"{c_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                await private_channel.send(embed=embedVar)
                                                turn_total = turn_total + 1
                                                turn = 3
                                            else:
                                                if t_universe == "Naruto" and t_stamina < 10:
                                                    t_health = t_health 
                                                    embedVar = discord.Embed(title=f"{t_card.upper()}: Substitution Jutsu", description=f"{c_card} strikes a log", colour=0xe91e63)
                                                    if carm_barrier_active:
                                                        carm_barrier_active=False
                                                        embedVar.add_field(name=f"{c_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                    await private_channel.send(embed=embedVar)
                                                elif tarm_shield_active:
                                                    if tshield_value > 0:
                                                        tshield_value = tshield_value -dmg['DMG']
                                                        t_health = t_health 
                                                        if tshield_value <=0:
                                                            embedVar = discord.Embed(title=f"{t_card.upper()}'s' **Shield** Shattered!", description=f"{c_card} breaks the **Shield**!", colour=0xe91e63)
                                                            if carm_barrier_active:
                                                                carm_barrier_active=False
                                                                embedVar.add_field(name=f"{c_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                            await button_ctx.send(embed=embedVar)
                                                            tarm_shield_active = False
                                                        else:
                                                            embedVar = discord.Embed(title=f"{t_card.upper()} Activates **Shield** 🌐", description=f"{c_card} strikes the **Shield** for **{dmg['DMG']} DMG!**\n **{tshield_value} Shield** Left!", colour=0xe91e63)
                                                            if carm_barrier_active:
                                                                carm_barrier_active=False
                                                                embedVar.add_field(name=f"{c_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                            await button_ctx.send(embed=embedVar)

                                                elif tarm_barrier_active:
                                                    if tbarrier_count >1:
                                                        t_health = t_health 
                                                        embedVar = discord.Embed(title=f"{t_card.upper()} Activates **Barrier** 💠", description=f"{c_card}'s attack **Nullified**!\n **{tbarrier_count - 1} Barriers** remain!", colour=0xe91e63)
                                                        if carm_barrier_active:
                                                            carm_barrier_active=False
                                                            embedVar.add_field(name=f"{c_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                        await button_ctx.send(embed=embedVar)
                                                        tbarrier_count = tbarrier_count - 1
                                                    elif tbarrier_count==1:
                                                        embedVar = discord.Embed(title=f"{t_card.upper()}'s **Barrier** Broken!", description=f"{c_card} destroys the **Barrier**", colour=0xe91e63)
                                                        tbarrier_count = tbarrier_count - 1
                                                        if carm_barrier_active:
                                                            carm_barrier_active=False
                                                            embedVar.add_field(name=f"{c_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                        await button_ctx.send(embed=embedVar)
                                                        tarm_barrier_active = False
                                                elif tarm_parry_active:
                                                    if tparry_count > 1:
                                                        t_health = t_health
                                                        tparry_damage = round(dmg['DMG'] / 2)
                                                        t_health = t_health - tparry_damage
                                                        c_health = c_health - tparry_damage
                                                        tparry_count = tparry_count - 1
                                                        embedVar = discord.Embed(title=f"{t_card.upper()} Activates **Parry** 🔄", description=f"{c_card} takes {tparry_damage}! DMG\n **{tparry_count} Parries** to go!!", colour=0xe91e63)
                                                        if carm_barrier_active:
                                                            carm_barrier_active=False
                                                            embedVar.add_field(name=f"{c_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                        await button_ctx.send(embed=embedVar)
                                                        
                                                    elif tparry_count==1:
                                                        embedVar = discord.Embed(title=f"{t_card.upper()} **Parry** Penetrated!!", description=f"{c_card} breaks the **Parry**", colour=0xe91e63)
                                                        t_health = t_health
                                                        tparry_damage = round(dmg['DMG'] / 2)
                                                        t_health = t_health - tparry_damage
                                                        c_health = c_health - tparry_damage
                                                        tparry_count = tparry_count - 1
                                                        if carm_barrier_active:
                                                            carm_barrier_active=False
                                                            embedVar.add_field(name=f"{c_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                        await button_ctx.send(embed=embedVar)
                                                        tarm_parry_active = False
                                                else:
                                                    t_health = t_health - dmg['DMG']
                                                    embedVar = discord.Embed(title=f"{dmg['MESSAGE']}", colour=embed_color_o)
                                                    if carm_barrier_active:
                                                        carm_barrier_active=False
                                                        embedVar.add_field(name=f"{c_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                    await private_channel.send(embed=embedVar)
                                                if t_health <= 0:
                                                    if t_final_stand==True:
                                                        embedVar = discord.Embed(title=f"{t_card.upper()}'s LAST STAND", description=f"{t_card} FINDS RESOLVE", colour=0xe91e63)
                                                        embedVar.add_field(name=f"{t_card} resolved and continues to fight", value="All stats & stamina increased")
                                                        if carm_barrier_active:
                                                            carm_barrier_active=False
                                                            embedVar.add_field(name=f"{c_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                        await private_channel.send(embed=embedVar)
                                                        t_health = int(.75 * (t_attack + t_defense))
                                                        t_attack = t_attack + (.50 * t_attack)
                                                        t_defense = t_defense + (.50 * t_defense)
                                                        t_used_resolve = True
                                                        t_final_stand = False
                                                        t_used_focus = True
                                                        c_stamina = c_stamina - dmg['STAMINA_USED']
                                                        turn_total = turn_total + 1
                                                        turn = 1
                                                    else:
                                                        t_health = 0
                                                        c_stamina = c_stamina - dmg['STAMINA_USED']
                                                        turn_total = turn_total + 1
                                                else:
                                                    c_stamina = c_stamina - dmg['STAMINA_USED']
                                                    turn_total = turn_total + 1
                                                    turn = 3
                                        else:
                                            emessage = m.NOT_ENOUGH_STAMINA
                                            embedVar = discord.Embed(title=emessage,
                                                                     description=f"Use abilities to Increase `STAM` or enter `FOCUS STATE`!",
                                                                     colour=0xe91e63)
                                            await private_channel.send(embed=embedVar)
                                            turn = 2
                                else:
                                    cap1 = list(c_1.values())[0] + ccard_lvl_ap_buff
                                    cap2 = list(c_2.values())[0] + ccard_lvl_ap_buff
                                    cap3 = list(c_3.values())[0] + ccard_lvl_ap_buff
                                    cenh1 = list(c_enhancer.values())[0]
                                    cenh_name = list(c_enhancer.values())[2]
                                    cpet_enh_name = list(cpet_move.values())[2]
                                    cpet_msg_on_resolve = ""
                                    companion = showcard(c, c_max_health, c_health, c_max_stamina, c_stamina,
                                                         c_used_resolve, ctitle, c_used_focus, c_attack, c_defense,
                                                         turn_total, cap1, cap2, cap3, cenh1, cenh_name, ccard_lvl, t_defense)

                                    # await private_channel.send(file=companion)

                                    if c_used_focus and c_used_resolve:
                                        options = ["q", "Q", "0", "1", "2", "3", "4", "6", "7"]
                                    elif c_used_focus and not c_used_resolve:
                                        options = ["q", "Q", "0", "1", "2", "3", "4", "5", "7"]
                                    else:
                                        options = ["q", "Q", "0", "1", "2", "3", "4", "7"]

                                    battle_buttons = [
                                        manage_components.create_button(
                                            style=ButtonStyle.green,
                                            label=f"💥 10",
                                            custom_id="1"
                                        ),
                                        manage_components.create_button(
                                            style=ButtonStyle.green,
                                            label=f"☄️ 30",
                                            custom_id="2"
                                        ),
                                        manage_components.create_button(
                                            style=ButtonStyle.green,
                                            label=f"🏵️ 80",
                                            custom_id="3"
                                        ),
                                        manage_components.create_button(
                                            style=ButtonStyle.blue,
                                            label=f"🦠 20",
                                            custom_id="4"
                                        )
                                    ]

                                    util_buttons = [
                                        manage_components.create_button(
                                            style=ButtonStyle.grey,
                                            label="Block 20",
                                            custom_id="0"
                                        ),
                                        manage_components.create_button(
                                            style=ButtonStyle.grey,
                                            label="Quit | /ff",
                                            custom_id="q"
                                        ),
                                    ]

                                    coop_util_buttons = [
                                        manage_components.create_button(
                                            style=ButtonStyle.blue,
                                            label="Assist Companion 20",
                                            custom_id="7"
                                        )
                                    ]

                                    if c_used_focus and c_used_resolve and not c_pet_used:
                                        util_buttons.append(
                                            manage_components.create_button(
                                                style=ButtonStyle.green,
                                                label="🐦 15",
                                                custom_id="6"
                                            )
                                        )

                                    if c_used_focus and not c_used_resolve:
                                        util_buttons.append(
                                            manage_components.create_button(
                                                style=ButtonStyle.green,
                                                label="Resolve!",
                                                custom_id="5"
                                            )
                                        )

                                    battle_action_row = manage_components.create_actionrow(*battle_buttons)
                                    util_action_row = manage_components.create_actionrow(*util_buttons)
                                    coop_util_action_row = manage_components.create_actionrow(*coop_util_buttons)

                                    cap1 = list(c_1.values())[0] + ccard_lvl_ap_buff
                                    cap2 = list(c_2.values())[0] + ccard_lvl_ap_buff
                                    cap3 = list(c_3.values())[0] + ccard_lvl_ap_buff
                                    cenh1 = list(c_enhancer.values())[0]
                                    cenh_name = list(c_enhancer.values())[2]
                                    cpet_enh_name = list(cpet_move.values())[2]
                                    cpet_msg_on_resolve = ""
                                    carm_message = " "
                                    
                                    if c_used_resolve:
                                        cpet_msg_on_resolve = f"🐦 {enhancer_mapping[pet_enh_name]}"
                                    if tarm_barrier_active:
                                        carm_message = f"💠{tbarrier_count}"
                                    elif tarm_shield_active:
                                        carm_message = f"🌐{tshield_value}"
                                    elif tarm_parry_active:
                                        carm_message = f"🔄{tparry_count}"
                                    if carm_passive_type == "BARRIER":
                                        if carm_barrier_active:
                                            carm_passive_value = f"{cbarrier_count}"
                                        else:
                                            carm_passive_value = 0
                                    elif carm_passive_type == "SHIELD":
                                        if carm_shield_active:
                                            carm_passive_value = f"{cshield_value}"
                                        else:
                                            carm_passive_value = 0
                                    elif carm_passive_type == "PARRY":
                                        if carm_parry_active:
                                            carm_passive_value = f"{cparry_count}"
                                        else:
                                            carm_passive_value = 0
                                    embedVar = discord.Embed(title=f" Press your move below! _Turn_ {turn_total}", color=0xe74c3c)
                                    embedVar.set_author(name=f"🦾 {carm_name} - {carm_passive_type} {carm_passive_value} {enhancer_suffix_mapping[carm_passive_type]}\n{cpet_msg_on_resolve}")
                                    embedVar.set_thumbnail(url=cpet_image)
                                    embedVar.set_image(url="attachment://image.png")
                                    embedVar.set_footer(
                                        text=f"{t_card}: ❤️{t_health} 🌀{t_stamina} 🗡️{t_attack}/🛡️{t_defense} {carm_message}\n{o_card}: ❤️{o_health} 🌀{o_stamina} 🗡️{o_attack}/🛡️{o_defense}",
                                        icon_url="https://cdn.discordapp.com/emojis/789290881654980659.gif?v=1")
                                    await private_channel.send(embed=embedVar,
                                                               components=[battle_action_row, util_action_row,
                                                                           coop_util_action_row], file=companion)

                                    # Make sure user is responding with move
                                    def check(button_ctx):
                                        return button_ctx.author == user and button_ctx.custom_id in options

                                    try:
                                        button_ctx: ComponentContext = await manage_components.wait_for_component(
                                            self.bot,
                                            components=[battle_action_row, util_action_row, coop_util_action_row],
                                            timeout=45, check=check)

                                        # calculate data based on selected move
                                        if button_ctx.custom_id == "q" or button_ctx.custom_id == "Q":
                                            c_health = 0

                                            if private_channel.guild:
                                                await private_channel.send(f"{user2.mention} has fled the battle...")
                                                await discord.TextChannel.delete(private_channel, reason=None)
                                            else:
                                                await private_channel.send(f"You fled the battle...")
                                            return
                                        if button_ctx.custom_id == "1":

                                            dmg = damage_cal(c_universe, c_card, c_1, c_attack, c_defense, t_defense,
                                                             c_stamina, c_enhancer_used, c_health, t_health, t_stamina,
                                                             c_max_health, t_attack, c_special_move_description,
                                                             turn_total, ccard_lvl_ap_buff)
                                        elif button_ctx.custom_id == "2":

                                            dmg = damage_cal(c_universe, c_card, c_2, c_attack, c_defense, t_defense,
                                                             c_stamina, c_enhancer_used, c_health, t_health, t_stamina,
                                                             c_max_health, t_attack, c_special_move_description,
                                                             turn_total, ccard_lvl_ap_buff)
                                        elif button_ctx.custom_id == "3":

                                            dmg = damage_cal(c_universe, c_card, c_3, c_attack, c_defense, t_defense,
                                                             c_stamina, c_enhancer_used, c_health, t_health, t_stamina,
                                                             c_max_health, t_attack, c_special_move_description,
                                                             turn_total, ccard_lvl_ap_buff)
                                            if c_gif != "N/A":
                                                await private_channel.send(f"{c_gif}")
                                        elif button_ctx.custom_id == "4":
                                            c_enhancer_used = True

                                            dmg = damage_cal(c_universe, c_card, c_enhancer, c_attack, c_defense,
                                                             t_defense, c_stamina, c_enhancer_used, c_health, t_health,
                                                             t_stamina, c_max_health, t_attack,
                                                             c_special_move_description, turn_total, ccard_lvl_ap_buff)
                                            c_enhancer_used = False
                                        elif button_ctx.custom_id == "5":
                                            # Resolve Check and Calculation
                                            if not c_used_resolve and c_used_focus:
                                                if c_universe == "My Hero Academia":  # My Hero Trait
                                                    # fortitude or luck is based on health
                                                    fortitude = 0.0
                                                    low = c_health - (c_health * .75)
                                                    high = c_health - (c_health * .66)
                                                    fortitude = random.randint(int(low), int(high))
                                                    # Resolve Scaling
                                                    c_resolve_health = round(fortitude + (.5 * c_resolve))
                                                    c_resolve_attack = round(
                                                        (.30 * c_defense) * (c_resolve / (.50 * c_defense)))
                                                    c_resolve_defense = round(
                                                        (.30 * c_defense) * (c_resolve / (.50 * c_defense)))
                                                    ccard_lvl_ap_buff = ccard_lvl_ap_buff + 50

                                                    c_stamina = c_stamina + c_resolve
                                                    c_health = c_health + c_resolve_health
                                                    c_attack = round(c_attack + c_resolve_attack)
                                                    c_defense = round(c_defense - c_resolve_defense)
                                                    c_used_resolve = True
                                                    c_pet_used = False
                                                    embedVar = discord.Embed(title=f"{c_card.upper()} PLUS ULTRAAA",
                                                                             description=f"**{c_card} says**\n{c_resolve_description}",
                                                                             colour=0xe91e63)
                                                    embedVar.add_field(name=f"Transformation: Plus Ultra",
                                                                       value="You do not lose a turn after you Resolve.")
                                                    await button_ctx.send(embed=embedVar)

                                                    turn_total = turn_total + 1
                                                    turn = 2
                                                elif c_universe == "Attack On Titan":
                                                    # fortitude or luck is based on health
                                                    fortitude = 0.0
                                                    low = c_health - (c_health * .75)
                                                    high = c_health - (c_health * .66)
                                                    fortitude = random.randint(int(low), int(high))
                                                    # Resolve Scaling
                                                    c_resolve_health = round(fortitude + (.5 * c_resolve))
                                                    c_resolve_attack = round(
                                                        (.30 * c_defense) * (c_resolve / (.50 * c_defense)))
                                                    c_resolve_defense = round(
                                                        (.30 * c_defense) * (c_resolve / (.50 * c_defense)))

                                                    c_stamina = c_stamina + c_resolve
                                                    c_health = c_health + c_resolve_health
                                                    c_attack = round(c_attack + c_resolve_attack)
                                                    c_defense = round(c_defense - c_resolve_defense)
                                                    c_used_resolve = True
                                                    c_pet_used = False
                                                    health_boost = 100 * c_focus_count
                                                    c_health = c_health + health_boost
                                                    embedVar = discord.Embed(title=f"{c_card.upper()} Titan Mode",
                                                                             description=f"**{c_card} says**\n{c_resolve_description}",
                                                                             colour=0xe91e63)
                                                    embedVar.add_field(name=f"Transformation Complete",
                                                                       value=f"Health increased by **{health_boost}**!")
                                                    await button_ctx.send(embed=embedVar)

                                                    turn_total = turn_total + 1
                                                    turn = 3
                                                elif c_universe == "Bleach":  # Bleach Trait
                                                    # fortitude or luck is based on health
                                                    fortitude = 0.0
                                                    low = c_health - (c_health * .75)
                                                    high = c_health - (c_health * .66)
                                                    fortitude = random.randint(int(low), int(high))
                                                    # Resolve Scaling
                                                    c_resolve_health = round(fortitude + (.5 * c_resolve))
                                                    c_resolve_attack = round(
                                                        (.30 * c_defense) * (c_resolve / (.50 * c_defense)))
                                                    c_resolve_defense = round(
                                                        (.30 * c_defense) * (c_resolve / (.50 * c_defense)))

                                                    c_stamina = c_stamina + c_resolve
                                                    c_health = c_health + c_resolve_health
                                                    c_attack = round((c_attack + (2 * c_resolve_attack)) * 2)
                                                    c_defense = round(c_defense - c_resolve_defense)
                                                    # if c_defense >= 120:
                                                    # c_defense = 120
                                                    c_used_resolve = True
                                                    c_pet_used = False
                                                    embedVar = discord.Embed(
                                                        title=f"{c_card} STRENGTHENED RESOLVE :zap:",
                                                        description=f"**{c_card} says**\n{c_resolve_description}",
                                                        colour=0xe91e63)
                                                    embedVar.add_field(name=f"Transformation: Bankai",
                                                                       value="Gain double Attack on Resolve.")
                                                    await button_ctx.send(embed=embedVar)
                                                    turn_total = turn_total + 1
                                                    turn = 3
                                                elif c_universe == "God Of War":  # God Of War Trait
                                                    # fortitude or luck is based on health
                                                    fortitude = 0.0
                                                    low = c_health - (c_health * .75)
                                                    high = c_health - (c_health * .66)
                                                    fortitude = random.randint(int(low), int(high))
                                                    # Resolve Scaling
                                                    c_resolve_health = round(fortitude + (.5 * o_resolve))
                                                    c_resolve_attack = round(
                                                        (.30 * c_defense) * (c_resolve / (.50 * c_defense)))
                                                    c_resolve_defense = round(
                                                        (.30 * c_defense) * (c_resolve / (.50 * c_defense)))

                                                    c_stamina = c_stamina + c_resolve
                                                    c_health = c_max_health
                                                    c_attack = round(c_attack + c_resolve_attack)
                                                    c_defense = round(c_defense - c_resolve_defense)
                                                    c_used_resolve = True
                                                    c_pet_used = False
                                                    embedVar = discord.Embed(
                                                        title=f"{c_card} STRENGTHENED RESOLVE :zap:",
                                                        description=f"**{c_card} says**\n{c_resolve_description}",
                                                        colour=0xe91e63)
                                                    embedVar.add_field(name=f"Transformation: Ascension",
                                                                       value="On Resolve Refill Health.")
                                                    await button_ctx.send(embed=embedVar)
                                                    turn_total = turn_total + 1
                                                    turn = 3
                                                elif c_universe == "Fate":  # Fate Trait
                                                    # fortitude or luck is based on health
                                                    fortitude = 0.0
                                                    low = c_health - (c_health * .75)
                                                    high = c_health - (c_health * .66)
                                                    fortitude = random.randint(int(low), int(high))
                                                    # Resolve Scaling
                                                    c_resolve_health = round(fortitude + (.5 * c_resolve))
                                                    c_resolve_attack = round(
                                                        (.30 * c_defense) * (c_resolve / (.50 * c_defense)))
                                                    c_resolve_defense = round(
                                                        (.30 * c_defense) * (c_resolve / (.50 * c_defense)))

                                                    c_stamina = c_stamina + c_resolve
                                                    c_health = c_health + c_resolve_health
                                                    c_attack = round(c_attack + c_resolve_attack)
                                                    c_defense = round(c_defense - c_resolve_defense)

                                                    dmg = damage_cal(c_universe, c_card, c_3, c_attack, c_defense,
                                                                     t_defense, c_stamina, c_enhancer_used, c_health,
                                                                     t_health, t_stamina, c_max_health, t_attack,
                                                                     c_special_move_description, turn_total,
                                                                     ccard_lvl_ap_buff)
                                                    t_health = t_health - dmg['DMG']
                                                    embedVar = discord.Embed(
                                                        title=f"{c_card} STRENGTHENED RESOLVE :zap:\n\n{dmg['MESSAGE']}",
                                                        description=f"**{c_card} says**\n{c_resolve_description}",
                                                        colour=0xe91e63)
                                                    embedVar.add_field(name=f"Transformation: Command Seal",
                                                                       value="On Resolve, Strike with Ultimate, then Focus.")
                                                    await button_ctx.send(embed=embedVar)
                                                    # c_stamina = 0
                                                    c_used_resolve = True
                                                    c_pet_used = False
                                                    turn_total = turn_total + 1
                                                    turn = 3
                                                elif c_universe == "Kanto Region" or c_universe == "Johto Region" or c_universe == "Hoenn Region" or c_universe == "Sinnoh Region" or c_universe == "Kalos Region" or c_universe == "Unova Region" or c_universe == "Alola Region" or c_universe == "Galar Region":  # Pokemon Resolves
                                                    # fortitude or luck is based on health
                                                    fortitude = 0.0
                                                    low = c_health - (c_health * .75)
                                                    high = c_health - (c_health * .66)
                                                    fortitude = random.randint(int(low), int(high))
                                                    # Resolve Scaling
                                                    c_resolve_health = round(fortitude + (.5 * o_resolve))
                                                    c_resolve_attack = round(
                                                        (.30 * c_defense) * (c_resolve / (.50 * c_defense)))
                                                    c_resolve_defense = round(
                                                        (.30 * c_defense) * (c_resolve / (.50 * c_defense)))

                                                    c_stamina = c_stamina + c_resolve
                                                    c_health = c_health + c_resolve_health
                                                    c_attack = round(c_attack + c_resolve_attack)
                                                    c_defense = round(c_defense) * 2
                                                    c_used_resolve = True
                                                    c_pet_used = False
                                                    embedVar = discord.Embed(
                                                        title=f"{c_card} STRENGTHENED RESOLVE :zap:",
                                                        description=f"**{c_card} says**\n{c_resolve_description}",
                                                        colour=0xe91e63)
                                                    embedVar.add_field(name=f"Transformation: Evolution",
                                                                       value="When you Resolve your Defense doubles")
                                                    await button_ctx.send(embed=embedVar)
                                                    turn_total = turn_total + 1
                                                    turn = 3
                                                else:  # Standard Resolve
                                                    # fortitude or luck is based on health
                                                    fortitude = 0.0
                                                    low = c_health - (c_health * .75)
                                                    high = c_health - (c_health * .66)
                                                    fortitude = random.randint(int(low), int(high))
                                                    # Resolve Scaling
                                                    c_resolve_health = round(fortitude + (.5 * c_resolve))
                                                    c_resolve_attack = round(
                                                        (.30 * c_defense) * (c_resolve / (.50 * c_defense)))
                                                    c_resolve_defense = round(
                                                        (.30 * c_defense) * (c_resolve / (.50 * c_defense)))

                                                    c_stamina = c_stamina + c_resolve
                                                    c_health = c_health + c_resolve_health
                                                    c_attack = round(c_attack + c_resolve_attack)
                                                    c_defense = round(c_defense - c_resolve_defense)
                                                    c_used_resolve = True
                                                    c_pet_used = False
                                                    if c_universe == "League Of Legends":
                                                        t_health = t_health - (30 * (c_focus_count + t_focus_count))
                                                        embedVar = discord.Embed(title=f"{c_card.upper()} PENTA KILL!",
                                                                                 description=f"**{c_card} says**\n{c_resolve_description}",
                                                                                 colour=0xe91e63)
                                                        embedVar.add_field(name=f"Nexus Destroyed",
                                                                           value=f"**{c_card}** dealt **{(30 * (c_focus_count + t_focus_count))}** damage.")
                                                    else:
                                                        embedVar = discord.Embed(
                                                            title=f"{c_card} STRENGTHENED RESOLVE :zap:",
                                                            description=f"**{c_card} says**\n{c_resolve_description}",
                                                            colour=0xe91e63)
                                                        embedVar.add_field(name=f"Transformation",
                                                                           value="All stats & stamina greatly increased")
                                                    await button_ctx.send(embed=embedVar)
                                                    turn_total = turn_total + 1
                                                    turn = 3
                                            else:
                                                emessage = m.CANNOT_USE_RESOLVE
                                                embedVar = discord.Embed(title=emessage, colour=0xe91e63)
                                                await button_ctx.send(embed=embedVar)
                                        elif button_ctx.custom_id == "6":
                                            # Resolve Check and Calculation
                                            if c_used_resolve and c_used_focus and not c_pet_used:
                                                c_enhancer_used = True
                                                dmg = damage_cal(c_universe, c_card, cpet_move, c_attack, c_defense,
                                                                 t_defense, c_stamina, c_enhancer_used, c_health,
                                                                 t_health, t_stamina, c_max_health, t_attack,
                                                                 c_special_move_description, turn_total,
                                                                 ccard_lvl_ap_buff)
                                                c_enhancer_used = False
                                                c_pet_used = True
                                                cpet_dmg = dmg['DMG']
                                                cpet_type = dmg['ENHANCED_TYPE']
                                                if dmg['CAN_USE_MOVE']:
                                                    if cpet_type == 'ATK':
                                                        c_attack = round(c_attack + dmg['DMG'])
                                                    elif cpet_type == 'DEF':
                                                        c_defense = round(c_defense + dmg['DMG'])
                                                    elif cpet_type == 'STAM':
                                                        c_stamina = round(c_stamina + dmg['DMG'])
                                                    elif cpet_type == 'HLT':
                                                        c_health = round(c_health + dmg['DMG'])
                                                    elif cpet_type == 'LIFE':
                                                        c_health = round(c_health + dmg['DMG'])
                                                        t_health = round(t_health - dmg['DMG'])
                                                    elif cpet_type == 'DRAIN':
                                                        c_stamina = round(c_stamina + dmg['DMG'])
                                                        t_stamina = round(t_stamina - dmg['DMG'])
                                                    elif cpet_type == 'FLOG':
                                                        c_attack = round(c_attack + dmg['DMG'])
                                                        t_attack = round(t_attack - dmg['DMG'])
                                                    elif cpet_type == 'WITHER':
                                                        c_defense = round(c_defense + dmg['DMG'])
                                                        t_defense = round(t_defense - dmg['DMG'])
                                                    elif cpet_type == 'RAGE':
                                                        c_defense = round(c_defense - dmg['DMG'])
                                                        c_attack = round(c_attack + dmg['DMG'])
                                                    elif cpet_type == 'BRACE':
                                                        c_defense = round(c_defense + dmg['DMG'])
                                                        c_attack = round(c_attack - dmg['DMG'])
                                                    elif cpet_type == 'BZRK':
                                                        c_health = round(c_health - dmg['DMG'])
                                                        c_attack = round(c_attack + dmg['DMG'])
                                                    elif cpet_type == 'CRYSTAL':
                                                        c_health = round(c_health - dmg['DMG'])
                                                        c_defense = round(c_defense + dmg['DMG'])
                                                    elif cpet_type == 'GROWTH':
                                                        c_max_health = round(c_max_health - dmg['DMG'])
                                                        c_defense = round(c_defense + (dmg['DMG'] * .5))
                                                        c_attack = round(c_attack + (dmg['DMG'] * .5))
                                                    elif cpet_type == 'STANCE':
                                                        tempattack = dmg['DMG']
                                                        c_attack = c_defense
                                                        c_defense = tempattack
                                                    elif cpet_type == 'CONFUSE':
                                                        tempattack = dmg['DMG']
                                                        t_attack = t_defense
                                                        t_defense = tempattack
                                                    elif cpet_type == 'BLINK':
                                                        c_stamina = round(c_stamina - dmg['DMG'])
                                                        t_stamina = round(t_stamina + dmg['DMG'] - 10)
                                                    elif cpet_type == 'SLOW':
                                                        tempstam = round(t_stamina + dmg['DMG'])
                                                        c_stamina = round(c_stamina - dmg['DMG'])
                                                        t_stamina = c_stamina
                                                        c_stamina = tempstam
                                                    elif cpet_type == 'HASTE':
                                                        tempstam = round(t_stamina - dmg['DMG'])
                                                        c_stamina = round(c_stamina + dmg['DMG'])
                                                        t_stamina = c_stamina
                                                        c_stamina = tempstam
                                                    elif cpet_type == 'SOULCHAIN':
                                                        c_stamina = round(dmg['DMG'])
                                                        t_stamina = c_stamina
                                                    elif cpet_type == 'GAMBLE':
                                                        c_health = round(dmg['DMG'])
                                                        t_health = c_health
                                                    elif cpet_type == 'FEAR':
                                                        c_max_health = round(c_max_health - dmg['DMG'])
                                                        t_defense = round(t_defense - (dmg['DMG'] * .5))
                                                        t_attack = round(t_attack - (dmg['DMG'] * .5))
                                                    elif cpet_type == 'WAVE':
                                                        t_health = round(t_health - dmg['DMG'])
                                                    elif cpet_type == 'BLAST':
                                                        if dmg['DMG'] >= 100:
                                                            dmg['DMG'] = 100
                                                        t_health = round(t_health - dmg['DMG'])
                                                    elif cpet_type == 'CREATION':
                                                        c_max_health = round(c_max_health + dmg['DMG'])
                                                        c_health = round(c_health + dmg['DMG'])
                                                    elif cpet_type == 'DESTRUCTION':
                                                        t_max_health = round(t_max_health - dmg['DMG'])

                                                    c_stamina = c_stamina - int(dmg['STAMINA_USED'])
                                                    if c_universe == "Persona":
                                                        petdmg = damage_cal(c_universe, c_card, c_1, c_attack,
                                                                            c_defense, t_defense, c_stamina,
                                                                            c_enhancer_used, c_health, t_health,
                                                                            t_stamina, c_max_health, t_attack,
                                                                            c_special_move_description, turn_total,
                                                                            ccard_lvl_ap_buff)

                                                        t_health = t_health - petdmg['DMG']

                                                        embedVar = discord.Embed(
                                                            title=f"**PERSONA!**\n{cpet_name} was summoned from {c_card}'s soul dealing **{petdmg['DMG']}** damage!!",
                                                            colour=0xe91e63)
                                                        embedVar.add_field(
                                                            name=f"{cpet_name} used **{cpetmove_text}**!",
                                                            value=f"Enhanced **{cpet_type}**")

                                                        embedVar.set_thumbnail(url=cpet_image)
                                                        embedVar.set_image(url="attachment://image.png")
                                                        await button_ctx.send(embed=embedVar)
                                                    else:
                                                        embedVar = discord.Embed(
                                                            title=f"{c_card.upper()} Summoned :bird: {cpet_name}",
                                                            colour=0xe91e63)
                                                        embedVar.add_field(
                                                            name=f"{cpet_name} used **{cpetmove_text}**!",
                                                            value=f"Enhanced **{cpet_type}**")
                                                        embedVar.set_thumbnail(url=cpet_image)
                                                        embedVar.set_image(url="attachment://image.png")
                                                        await private_channel.send(embed=embedVar)
                                                    turn = 2
                                                else:
                                                    await button_ctx.send(f"{cpet_name} needs a turn to rest...")
                                                    turn = 2
                                            else:
                                                await button_ctx.send(f"{cpet_name} needs a turn to rest...")
                                        elif button_ctx.custom_id == "7":
                                            c_enhancer_used = True
                                            dmg = damage_cal(c_universe, c_card, c_enhancer, c_attack, c_defense,
                                                             o_defense, c_stamina, c_enhancer_used, c_health, o_health,
                                                             o_stamina, c_max_health, o_attack,
                                                             c_special_move_description, turn_total, ccard_lvl_ap_buff)
                                            c_enhancer_used = False
                                            cdmg = dmg['DMG']
                                            cenh_type = dmg['ENHANCED_TYPE']
                                            if dmg['CAN_USE_MOVE']:
                                                if cenh_type == 'ATK':
                                                    o_attack = round(o_attack + dmg['DMG'])
                                                elif cenh_type == 'DEF':
                                                    o_defense = round(o_defense + dmg['DMG'])
                                                elif cenh_type == 'STAM':
                                                    o_stamina = round(o_stamina + dmg['DMG'])
                                                elif cenh_type == 'HLT':
                                                    o_health = round(o_health + dmg['DMG'])
                                                elif cenh_type == 'LIFE':
                                                    o_health = round(o_health + dmg['DMG'])
                                                    c_health = round(c_health - dmg['DMG'])
                                                elif cenh_type == 'DRAIN':
                                                    o_stamina = round(o_stamina + dmg['DMG'])
                                                    c_stamina = round(c_stamina - dmg['DMG'])
                                                elif cenh_type == 'FLOG':
                                                    o_attack = round(o_attack + dmg['DMG'])
                                                    t_attack = round(t_attack - dmg['DMG'])
                                                elif cenh_type == 'WITHER':
                                                    o_defense = round(o_defense + dmg['DMG'])
                                                    t_defense = round(t_defense - dmg['DMG'])
                                                elif cenh_type == 'RAGE':
                                                    o_defense = round(o_defense - dmg['DMG'])
                                                    o_attack = round(o_attack + dmg['DMG'])
                                                elif cenh_type == 'BRACE':
                                                    o_defense = round(o_defense + dmg['DMG'])
                                                    o_attack = round(o_attack - dmg['DMG'])
                                                elif cenh_type == 'BZRK':
                                                    o_health = round(o_health - dmg['DMG'])
                                                    o_attack = round(o_attack + dmg['DMG'])
                                                elif cenh_type == 'CRYSTAL':
                                                    o_health = round(o_health - dmg['DMG'])
                                                    o_defense = round(o_defense + dmg['DMG'])
                                                elif cenh_type == 'GROWTH':
                                                    o_max_health = round(o_max_health - dmg['DMG'])
                                                    o_defense = round(o_defense + (dmg['DMG'] * .5))
                                                    o_attack = round(o_attack + (dmg['DMG'] * .5))
                                                elif cenh_type == 'STANCE':
                                                    tempattack = dmg['DMG']
                                                    o_attack = o_defense
                                                    o_defense = tempattack
                                                elif cenh_type == 'CONFUSE':
                                                    tempattack = dmg['DMG']
                                                    c_attack = c_defense
                                                    c_defense = tempattack
                                                elif cenh_type == 'BLINK':
                                                    o_stamina = round(o_stamina - dmg['DMG'])
                                                    c_stamina = round(c_stamina + dmg['DMG'] - 10)
                                                elif cenh_type == 'SLOW':
                                                    tempstam = round(c_stamina + dmg['DMG'])
                                                    o_stamina = round(o_stamina - dmg['DMG'])
                                                    c_stamina = o_stamina
                                                    o_stamina = tempstam
                                                elif cenh_type == 'HASTE':
                                                    tempstam = round(c_stamina - dmg['DMG'])
                                                    o_stamina = round(o_stamina + dmg['DMG'])
                                                    c_stamina = o_stamina
                                                    o_stamina = tempstam
                                                elif cenh_type == 'SOULCHAIN':
                                                    o_stamina = round(dmg['DMG'])
                                                    c_stamina = o_stamina
                                                elif cenh_type == 'GAMBLE':
                                                    o_health = round(dmg['DMG'])
                                                    c_health = o_health
                                                elif cenh_type == 'FEAR':
                                                    o_max_health = round(o_max_health - dmg['DMG'])
                                                    c_defense = round(c_defense - (dmg['DMG'] * .5))
                                                    c_attack = round(c_attack - (dmg['DMG'] * .5))
                                                elif cenh_type == 'WAVE':
                                                    t_health = round(t_health - dmg['DMG'])
                                                elif cenh_type == 'BLAST':
                                                    t_health = round(t_health - dmg['DMG'])
                                                elif cenh_type == 'CREATION':
                                                    o_max_health = round(o_max_health + dmg['DMG'])
                                                    o_health = round(o_health + dmg['DMG'])
                                                elif enh_type == 'DESTRUCTION':
                                                    t_max_health = round(t_max_health - dmg['DMG'])

                                                c_stamina = c_stamina - int(dmg['STAMINA_USED'])

                                                embedVar = discord.Embed(
                                                    title=f"{c_card.upper()} ASSISTED {o_card.upper()}",
                                                    colour=0xe91e63)
                                                embedVar.add_field(name=f"{c_card} used {cmove_enhanced_text}!",
                                                                   value=f"Enhanced {cenh_type}")
                                                await button_ctx.send(embed=embedVar)
                                                turn_total = turn_total + 1
                                                turn = 3
                                            else:
                                                await button_ctx.send(m.NOT_ENOUGH_STAMINA)
                                                turn = 2
                                        elif button_ctx.custom_id == "0":
                                            if c_stamina >= 20:
                                                c_block_used = True
                                                c_stamina = c_stamina - 20
                                                c_defense = c_defense * 2
                                                embedVar = discord.Embed(
                                                    title=f"{c_card} **Defended** 🛡️ {o_card.upper()}",
                                                    colour=0xe91e63)

                                                await button_ctx.send(embed=embedVar)
                                                turn_total = turn_total + 1
                                                turn = 3
                                            else:
                                                await button_ctx.send(f"{c_card} is too tired to block...")
                                                turn = 2

                                        if button_ctx.custom_id != "5" and button_ctx.custom_id != "6" and button_ctx.custom_id != "7" and button_ctx.custom_id != "0" and button_ctx.custom_id in options:
                                            # If you have enough stamina for move, use it

                                            if dmg['CAN_USE_MOVE']:
                                                c_pet_used = False
                                                if dmg['ENHANCE']:
                                                    enh_type = dmg['ENHANCED_TYPE']

                                                    if enh_type == 'ATK':
                                                        c_attack = round(c_attack + dmg['DMG'])
                                                    elif enh_type == 'DEF':
                                                        c_defense = round(c_defense + dmg['DMG'])
                                                    elif enh_type == 'STAM':
                                                        c_stamina = round(c_stamina + dmg['DMG'])
                                                    elif enh_type == 'HLT':
                                                        c_health = round(c_health + dmg['DMG'])
                                                    elif enh_type == 'LIFE':
                                                        c_health = round(c_health + dmg['DMG'])
                                                        t_health = round(t_health - dmg['DMG'])
                                                    elif enh_type == 'DRAIN':
                                                        c_stamina = round(c_stamina + dmg['DMG'])
                                                        t_stamina = round(t_stamina - dmg['DMG'])
                                                    elif enh_type == 'FLOG':
                                                        c_attack = round(c_attack + dmg['DMG'])
                                                        t_attack = round(t_attack - dmg['DMG'])
                                                    elif enh_type == 'WITHER':
                                                        c_defense = round(c_defense + dmg['DMG'])
                                                        t_defense = round(t_defense - dmg['DMG'])
                                                    elif enh_type == 'RAGE':
                                                        c_defense = round(c_defense - dmg['DMG'])
                                                        c_attack = round(c_attack + dmg['DMG'])
                                                    elif enh_type == 'BRACE':
                                                        c_defense = round(c_defense + dmg['DMG'])
                                                        c_attack = round(c_attack - dmg['DMG'])
                                                    elif enh_type == 'BZRK':
                                                        c_health = round(c_health - dmg['DMG'])
                                                        c_attack = round(c_attack + dmg['DMG'])
                                                    elif enh_type == 'CRYSTAL':
                                                        c_health = round(c_health - dmg['DMG'])
                                                        c_defense = round(c_defense + dmg['DMG'])
                                                    elif enh_type == 'GROWTH':
                                                        c_max_health = round(c_max_health - dmg['DMG'])
                                                        c_defense = round(c_defense + (dmg['DMG'] * .5))
                                                        c_attack = round(c_attack + (dmg['DMG'] * .5))
                                                    elif enh_type == 'STANCE':
                                                        tempattack = dmg['DMG']
                                                        c_attack = c_defense
                                                        c_defense = tempattack
                                                    elif enh_type == 'CONFUSE':
                                                        tempattack = dmg['DMG']
                                                        t_attack = t_defense
                                                        t_defense = tempattack
                                                    elif enh_type == 'BLINK':
                                                        c_stamina = round(c_stamina - dmg['DMG'])
                                                        t_stamina = round(t_stamina + dmg['DMG'] - 10)
                                                    elif enh_type == 'SLOW':
                                                        tempstam = round(t_stamina + dmg['DMG'])
                                                        c_stamina = round(c_stamina - dmg['DMG'])
                                                        t_stamina = c_stamina
                                                        c_stamina = tempstam
                                                    elif enh_type == 'HASTE':
                                                        tempstam = round(t_stamina - dmg['DMG'])
                                                        c_stamina = round(c_stamina + dmg['DMG'])
                                                        t_stamina = c_stamina
                                                        c_stamina = tempstam
                                                    elif enh_type == 'SOULCHAIN':
                                                        c_stamina = round(dmg['DMG'])
                                                        t_stamina = c_stamina
                                                    elif enh_type == 'GAMBLE':
                                                        if mode in D_modes:
                                                            t_health = round(dmg['DMG']) * 2
                                                            c_health = round(dmg['DMG'])
                                                        elif mode in B_modes:
                                                            t_health = round(dmg['DMG']) * 4
                                                            c_health = round(dmg['DMG'])
                                                        else:
                                                            t_health = round(dmg['DMG'])
                                                            c_health = round(dmg['DMG'])
                                                    elif enh_type == 'FEAR':
                                                        c_max_health = round(c_max_health - dmg['DMG'])
                                                        t_defense = round(t_defense - (dmg['DMG'] * .5))
                                                        t_attack = round(t_attack - (dmg['DMG'] * .5))
                                                    elif enh_type == 'WAVE':
                                                        t_health = round(t_health - dmg['DMG'])
                                                    elif enh_type == 'BLAST':
                                                        t_health = round(t_health - dmg['DMG'])
                                                    elif enh_type == 'CREATION':
                                                        c_max_health = round(c_max_health + dmg['DMG'])
                                                        c_health = round(c_health + dmg['DMG'])
                                                    elif enh_type == 'DESTRUCTION':
                                                        t_max_health = round(t_max_health - dmg['DMG'])

                                                    c_stamina = c_stamina - int(dmg['STAMINA_USED'])

                                                    embedVar = discord.Embed(title=f"{dmg['MESSAGE']}",
                                                                             colour=embed_color_c)
                                                    await button_ctx.send(embed=embedVar)
                                                    turn_total = turn_total + 1
                                                    turn = 3
                                                elif dmg['DMG'] == 0:
                                                    c_stamina = c_stamina - int(dmg['STAMINA_USED'])

                                                    embedVar = discord.Embed(title=f"{dmg['MESSAGE']}", colour=embed_color_c)
                                                    if carm_barrier_active:
                                                        carm_barrier_active=False
                                                        embedVar.add_field(name=f"{c_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                    await button_ctx.send(embed=embedVar)
                                                    turn_total = turn_total + 1
                                                    turn = 3
                                                else:
                                                    if t_universe == "Naruto" and t_stamina < 10:
                                                        t_health = t_health 
                                                        embedVar = discord.Embed(title=f"{t_card.upper()}: Substitution Jutsu", description=f"{c_card} strikes a log", colour=0xe91e63)
                                                        if carm_barrier_active:
                                                            carm_barrier_active=False
                                                            embedVar.add_field(name=f"{c_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                        await button_ctx.send(embed=embedVar)
                                                    elif tarm_shield_active:
                                                        if tshield_value > 0:
                                                            tshield_value = tshield_value -dmg['DMG']
                                                            t_health = t_health 
                                                            if tshield_value <=0:
                                                                embedVar = discord.Embed(title=f"{t_card.upper()}'s' **Shield** Shattered!", description=f"{c_card} breaks the **Shield**!", colour=0xe91e63)
                                                                if carm_barrier_active:
                                                                    carm_barrier_active=False
                                                                    embedVar.add_field(name=f"{c_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                await button_ctx.send(embed=embedVar)
                                                                tarm_shield_active = False
                                                            else:
                                                                embedVar = discord.Embed(title=f"{t_card.upper()} Activates **Shield** 🌐", description=f"{c_card} strikes the **Shield** for **{dmg['DMG']} DMG!**\n **{tshield_value} Shield** Left!", colour=0xe91e63)
                                                                if carm_barrier_active:
                                                                    carm_barrier_active=False
                                                                    embedVar.add_field(name=f"{c_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                await button_ctx.send(embed=embedVar)

                                                    elif tarm_barrier_active:
                                                        if tbarrier_count >1:
                                                            t_health = t_health 
                                                            embedVar = discord.Embed(title=f"{t_card.upper()} Activates **Barrier** 💠", description=f"{c_card}'s attack **Nullified**!\n **{tbarrier_count - 1} Barriers** remain!", colour=0xe91e63)
                                                            if carm_barrier_active:
                                                                carm_barrier_active=False
                                                                embedVar.add_field(name=f"{c_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                            await button_ctx.send(embed=embedVar)
                                                            tbarrier_count = tbarrier_count - 1
                                                        elif tbarrier_count==1:
                                                            embedVar = discord.Embed(title=f"{t_card.upper()}'s **Barrier** Broken!", description=f"{c_card} destroys the **Barrier**", colour=0xe91e63)
                                                            tbarrier_count = tbarrier_count - 1
                                                            if carm_barrier_active:
                                                                carm_barrier_active=False
                                                                embedVar.add_field(name=f"{c_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                            await button_ctx.send(embed=embedVar)
                                                            tarm_barrier_active = False
                                                    elif tarm_parry_active:
                                                        if tparry_count > 1:
                                                            t_health = t_health
                                                            tparry_damage = round(dmg['DMG'] / 2)
                                                            t_health = t_health - tparry_damage
                                                            c_health = c_health - tparry_damage
                                                            tparry_count = tparry_count - 1
                                                            embedVar = discord.Embed(title=f"{t_card.upper()} Activates **Parry** 🔄", description=f"{c_card} takes {tparry_damage}! DMG\n **{tparry_count} Parries** to go!!", colour=0xe91e63)
                                                            if carm_barrier_active:
                                                                carm_barrier_active=False
                                                                embedVar.add_field(name=f"{c_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                            await button_ctx.send(embed=embedVar)
                                                            
                                                        elif tparry_count==1:
                                                            embedVar = discord.Embed(title=f"{t_card.upper()} **Parry** Penetrated!!", description=f"{c_card} breaks the **Parry**", colour=0xe91e63)
                                                            t_health = t_health
                                                            tparry_damage = round(dmg['DMG'] / 2)
                                                            t_health = t_health - tparry_damage
                                                            c_health = c_health - tparry_damage
                                                            tparry_count = tparry_count - 1
                                                            if carm_barrier_active:
                                                                carm_barrier_active=False
                                                                embedVar.add_field(name=f"{c_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                            await button_ctx.send(embed=embedVar)
                                                            tarm_parry_active = False
                                                    else:
                                                        t_health = t_health - dmg['DMG']
                                                        embedVar = discord.Embed(title=f"{dmg['MESSAGE']}", colour=embed_color_o)
                                                        if carm_barrier_active:
                                                            carm_barrier_active=False
                                                            embedVar.add_field(name=f"{c_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                        await button_ctx.send(embed=embedVar)
                                                    if t_health <= 0:
                                                        if t_final_stand==True:
                                                            embedVar = discord.Embed(title=f"{t_card.upper()}'s LAST STAND", description=f"{t_card} FINDS RESOLVE", colour=0xe91e63)
                                                            embedVar.add_field(name=f"{t_card} resolved and continues to fight", value="All stats & stamina increased")
                                                            if carm_barrier_active:
                                                                carm_barrier_active=False
                                                                embedVar.add_field(name=f"{c_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                            await button_ctx.send(embed=embedVar)
                                                            t_health = int(.75 * (t_attack + t_defense))
                                                            t_attack = t_attack + (.50 * t_attack)
                                                            t_defense = t_defense + (.50 * t_defense)
                                                            t_used_resolve = True
                                                            t_used_focus = True
                                                            t_final_stand = False
                                                            c_stamina = c_stamina - dmg['STAMINA_USED']
                                                            turn_total = turn_total + 1
                                                            turn = 1
                                                        else:
                                                            t_health = 0
                                                            c_stamina = c_stamina - dmg['STAMINA_USED']
                                                            turn_total = turn_total + 1
                                                    else:
                                                        c_stamina = c_stamina - dmg['STAMINA_USED']
                                                        turn_total = turn_total + 1
                                                        turn = 3
                                            else:
                                                emessage = m.NOT_ENOUGH_STAMINA
                                                embedVar = discord.Embed(title=emessage,
                                                                         description=f"Use abilities to Increase `STAM` or enter `FOCUS STATE`!",
                                                                         colour=0xe91e63)
                                                await button_ctx.send(embed=embedVar)
                                                turn = 2
                                    except asyncio.TimeoutError:

                                        await private_channel.send(f"{ctx.author.mention} {m.STORY_ENDED}")
                                        if private_channel.guild:
                                            await discord.TextChannel.delete(private_channel, reason=None)
                                        return
                        # Opponent Turn Start
                        elif turn == 3:
                            await asyncio.sleep(1)
                            if t_attack <= 25:
                                t_attack = 25
                            if t_defense <= 30:
                                t_defense = 30
                            if t_health >= t_max_health:
                                t_health = t_max_health
                            # o_pet_used = True
                            if t_health <= (t_max_health * .25):
                                embed_color_t = 0xe74c3c
                                if t_chainsaw == True:
                                    if t_atk_chainsaw == False:
                                        t_atk_chainsaw = True
                                        t_chainsaw = False
                                        t_defense = t_defense * 2
                                        t_attack = t_attack * 2
                                        embedVar = discord.Embed(title=f"{t_card.upper()}'s Devilization",
                                                                 description=f"**{t_card}** Doubles Stats",
                                                                 colour=0xe91e63)
                                        await private_channel.send(embed=embedVar)

                            elif t_health <= (t_max_health * .50):
                                embed_color_t = 0xe67e22
                                if t_chainsaw == True:
                                    if t_atk_chainsaw == False:
                                        t_atk_chainsaw = True
                                        t_chainsaw = False
                                        t_defense = t_defense * 2
                                        t_attack = t_attack * 2
                                        embedVar = discord.Embed(title=f"{t_card.upper()}'s Devilization",
                                                                 description=f"**{t_card}** Doubles Stats",
                                                                 colour=0xe91e63)
                                        await private_channel.send(embed=embedVar)
                            elif t_health <= (t_max_health * .75):
                                embed_color_t = 0xf1c40f
                            else:
                                embed_color_t = 0x2ecc71

                            # Focus
                            if t_stamina < 10:
                                t_focus_count = t_focus_count + 1
                                if mode in B_modes:
                                    embedVar = discord.Embed(title=f"**{t_card}** Enters Focus State",
                                                             description=f"{t_powerup}", colour=0xe91e63)
                                    embedVar.add_field(name=f"A great aura starts to envelop **{t_card}** ",
                                                       value=f"{t_aura}")
                                    embedVar.set_footer(text=f"{t_card} Says: 'Now, are you ready for a real fight?'")
                                # o_pet_used = True
                                fortitude = 0.0
                                low = t_health - (t_health * .90)
                                high = t_health - (t_health * .80)
                                fortitude = random.randint(int(low), int(high))

                                t_stamina = t_focus
                                t_healthcalc = round(((t_focus * .40) + (fortitude * 1)) / 2)
                                t_attackcalc = round(.20 * ((t_focus * .15) + round(fortitude * 1)))
                                t_defensecalc = round(.20 * ((t_focus * .10) + round(fortitude * 1)))
                                t_newhealth = 0
                                healmessage = ""
                                messagenumber = 0
                                if t_universe == "Crown Rift Madness":
                                    healmessage = "yet inner **Madness** drags on..."
                                    messagenumber = 3
                                else:
                                    if t_health <= t_max_health:
                                        t_newhealth = t_health + t_healthcalc
                                        if t_newhealth > t_max_health:
                                            healmessage = f"recovered!"
                                            messagenumber = 1
                                            t_health = t_max_health
                                        else:
                                            healmessage = f"stopped the bleeding..."
                                            messagenumber = 2
                                            t_health = t_newhealth
                                    else:
                                        healmessage = f"hasn't been touched..."
                                        messagenumber = 0
                                if not t_used_resolve:
                                    t_attack = t_attack + t_attackcalc
                                    t_defense = t_defense + t_defensecalc
                                t_used_focus = True

                                if not t_used_resolve and t_used_focus and t_universe == "Digimon":  # Digimon Universal Trait
                                    # fortitude or luck is based on health
                                    fortitude = 0.0
                                    low = t_health - (t_health * .75)
                                    high = t_health - (t_health * .66)
                                    fortitude = random.randint(int(low), int(high))
                                    # Resolve Scaling
                                    t_resolve_health = round(fortitude + (.5 * t_resolve))
                                    t_resolve_attack = round((.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                    t_resolve_defense = round((.30 * t_defense) * (t_resolve / (.50 * t_defense)))

                                    t_stamina = t_stamina + t_resolve
                                    t_health = t_health + t_resolve_health
                                    t_attack = round(t_attack + t_resolve_attack)
                                    t_defense = round(t_defense - t_resolve_defense)
                                    t_used_resolve = True

                                    embedVar = discord.Embed(title=f"{t_card} STRENGTHENED RESOLVE :zap:",
                                                             description=f"**{t_card} says**\n{t_resolve_description}",
                                                             colour=0xe91e63)
                                    embedVar.add_field(name=f"Transformation: Digivolve", value="On Focus you Resolve.")
                                    await private_channel.send(embed=embedVar)

                                elif t_universe == "League Of Legends":
                                    embedVar = discord.Embed(title=f"Turret Shot hits {c_card} for **30** Damage 💥",
                                                             colour=0xe91e63)
                                    await private_channel.send(embed=embedVar)
                                    c_health = round(c_health - 30)

                                elif t_universe == "Solo Leveling":
                                    embedVar = discord.Embed(
                                        title=f"Ruler's Authority... {c_card} loses **{30 + turn_total}** 🛡️ 🔻",
                                        colour=0xe91e63)
                                    await private_channel.send(embed=embedVar)
                                    c_defense = round(c_defense - (30 + turn_total))

                                elif t_universe == "Attack On Titan":
                                    embedVar = discord.Embed(title=f"Rally! **{t_card}** Increased Max Health ❤️",
                                                             colour=0xe91e63)
                                    await private_channel.send(embed=embedVar)
                                    t_max_health = round(t_max_health + 100)

                                elif t_universe == "Black Clover":
                                    embedVar = discord.Embed(title=f"Mana Zone! {t_card} Increased Stamina 🌀",
                                                             colour=0xe91e63)
                                    await private_channel.send(embed=embedVar)
                                    t_stamina = 100
                                    tcard_lvl_ap_buff = tcard_lvl_ap_buff + 30

                                elif t_universe == "Death Note":
                                    if turn_total >= 24:
                                        embedVar = discord.Embed(title=f"{o_card.upper()}'s' Scheduled Death 📓",
                                                                 description=f"**{t_card} says**\n**Delete**",
                                                                 colour=0xe91e63)
                                        embedVar.add_field(name=f"{o_card} had a heart attack and died",
                                                           value=f"Death....")
                                        await private_channel.send(embed=embedVar)
                                        o_health = 0

                                if c_universe == "One Punch Man":
                                    embedVar = discord.Embed(
                                        title=f"Hero Reinforcements! {c_card}  Increased Health & Max Health ❤️",
                                        colour=0xe91e63)
                                    await private_channel.send(embed=embedVar)
                                    c_health = round(c_health + 100)
                                    c_max_health = round(c_max_health + 100)

                                elif c_universe == "7ds":
                                    embedVar = discord.Embed(
                                        title=f"Increase Power Level! {c_card} Increased Stamina 🌀", colour=0xe91e63)
                                    await private_channel.send(embed=embedVar)
                                    c_stamina = c_stamina + 60

                                elif c_universe == "Souls":
                                    embedVar = discord.Embed(
                                        title=f"Combo Recognition! {c_card} Increased Attack by **{30 + turn_total}** 🔺 ",
                                        colour=0xe91e63)
                                    await private_channel.send(embed=embedVar)
                                    c_attack = round(c_attack + (30 + turn_total))

                                else:
                                    turn_total = turn_total + 1
                                    if t_universe != "Crown Rift Madness":
                                        turn = 0
                                    else:
                                        turn = 3
                                turn_total = turn_total + 1
                                if t_universe != "Crown Rift Madness":
                                    turn = 0
                                else:
                                    turn = 3
                            else:
                                # UNIVERSE CARD
                                tap1 = list(t_1.values())[0] + tcard_lvl_ap_buff
                                tap2 = list(t_2.values())[0] + tcard_lvl_ap_buff
                                tap3 = list(t_3.values())[0] + tcard_lvl_ap_buff
                                tenh1 = list(t_enhancer.values())[0]
                                tenh_name = list(t_enhancer.values())[2]
                                tpet_enh_name = list(tpet_move.values())[2]
                                tpet_msg_on_resolve = ""
                                # UNIVERSE CARD
                                player_2_card = showcard(t, t_max_health, t_health, t_max_stamina, t_stamina,
                                                         t_used_resolve, ttitle, t_used_focus, t_attack, t_defense,
                                                         turn_total, tap1, tap2, tap3, tenh1, tenh_name, tcard_lvl, c_defense)
                                await private_channel.send(file=player_2_card)
                                aiMove = 0

                                if t_used_resolve and not t_pet_used:
                                    aiMove = 6
                                elif c_stamina < 10:
                                    aiMove = 1
                                elif t_stamina >= 160 and (t_health >= c_health):
                                    aiMove = 3
                                elif t_stamina >= 160:
                                    aiMove = 3
                                elif t_stamina >= 150 and (t_health >= c_health):
                                    aiMove = 1
                                elif t_stamina >= 150:
                                    aiMove = 1
                                elif t_stamina >= 140 and (t_health >= c_health):
                                    aiMove = 1
                                elif t_stamina >= 140:
                                    aiMove = 3
                                elif t_stamina >= 130 and (t_health >= c_health):
                                    aiMove = 1
                                elif t_stamina >= 130:
                                    aiMove = 3
                                elif t_stamina >= 120 and (t_health >= c_health):
                                    aiMove = 2
                                elif t_stamina >= 120:
                                    aiMove = 3
                                elif t_stamina >= 110 and (t_health >= c_health):
                                    aiMove = 1
                                elif t_stamina >= 110:
                                    aiMove = 2
                                elif t_stamina >= 100 and (t_health >= c_health):
                                    aiMove = 4
                                elif t_stamina >= 100:
                                    aiMove = 1
                                elif t_stamina >= 90 and (t_health >= c_health):
                                    aiMove = 3
                                elif t_stamina >= 90:
                                    aiMove = 4
                                elif t_stamina >= 80 and (t_health >= c_health):
                                    aiMove = 1
                                elif t_stamina >= 80:
                                    aiMove = 3
                                elif t_stamina >= 70 and (t_health >= c_health):
                                    aiMove = 4
                                elif t_stamina >= 70:
                                    aiMove = 1
                                elif t_stamina >= 60 and (t_health >= c_health):
                                    if t_used_resolve == False and t_used_focus:
                                        aiMove = 5
                                    elif t_used_focus == False:
                                        aiMove = 2
                                    else:
                                        aiMove = 1
                                elif t_stamina >= 60:
                                    if t_used_resolve == False and t_used_focus:
                                        aiMove = 5
                                    elif t_used_focus == False:
                                        aiMove = 2
                                    else:
                                        aiMove = 1
                                elif t_stamina >= 50 and (t_health >= c_health):
                                    if t_used_resolve == False and t_used_focus:
                                        aiMove = 5
                                    elif t_used_focus == False:
                                        aiMove = 2
                                    else:
                                        aiMove = 1
                                elif t_stamina >= 50:
                                    if t_used_resolve == False and t_used_focus:
                                        aiMove = 5
                                    elif t_used_focus == False:
                                        aiMove = 2
                                    else:
                                        aiMove = 1
                                elif t_stamina >= 40 and (t_health >= c_health):
                                    aiMove = 1
                                elif t_stamina >= 40:
                                    aiMove = 2
                                elif t_stamina >= 30 and (t_health >= c_health):
                                    aiMove = 4
                                elif t_stamina >= 30:
                                    aiMove = 2
                                elif t_stamina >= 20 and (t_health >= c_health):
                                    aiMove = 1
                                elif t_stamina >= 20:
                                    aiMove = 4
                                elif t_stamina >= 10:
                                    aiMove = 1
                                else:
                                    aiMove = 0

                                t_special_move_description = ""
                                if int(aiMove) == 0:
                                    t_health = 0
                                if int(aiMove) == 1:

                                    if o_defend_used == True:
                                        dmg = damage_cal(t_universe, t_card, t_1, t_attack, t_defense, o_defense,
                                                         t_stamina, t_enhancer_used, t_health, o_health, o_stamina,
                                                         t_max_health, o_attack, t_special_move_description, turn_total,
                                                         tcard_lvl_ap_buff)
                                    else:
                                        dmg = damage_cal(t_universe, t_card, t_1, t_attack, t_defense, c_defense,
                                                         t_stamina, t_enhancer_used, t_health, c_health, c_stamina,
                                                         t_max_health, c_attack, t_special_move_description, turn_total,
                                                         tcard_lvl_ap_buff)
                                elif int(aiMove) == 2:

                                    if o_defend_used == True:
                                        dmg = damage_cal(t_universe, t_card, t_2, t_attack, t_defense, o_defense,
                                                         t_stamina, t_enhancer_used, t_health, o_health, o_stamina,
                                                         t_max_health, o_attack, t_special_move_description, turn_total,
                                                         tcard_lvl_ap_buff)
                                    else:
                                        dmg = damage_cal(t_universe, t_card, t_2, t_attack, t_defense, c_defense,
                                                         t_stamina, t_enhancer_used, t_health, c_health, c_stamina,
                                                         t_max_health, c_attack, t_special_move_description, turn_total,
                                                         tcard_lvl_ap_buff)
                                elif int(aiMove) == 3:

                                    if o_defend_used == True:
                                        dmg = damage_cal(t_universe, t_card, t_3, t_attack, t_defense, o_defense,
                                                         t_stamina, t_enhancer_used, t_health, o_health, o_stamina,
                                                         t_max_health, o_attack, t_special_move_description, turn_total,
                                                         tcard_lvl_ap_buff)
                                    else:
                                        dmg = damage_cal(t_universe, t_card, t_3, t_attack, t_defense, c_defense,
                                                         t_stamina, t_enhancer_used, t_health, c_health, c_stamina,
                                                         t_max_health, c_attack, t_special_move_description, turn_total,
                                                         tcard_lvl_ap_buff)
                                    if t_gif != "N/A":
                                        await private_channel.send(f"{t_gif}")
                                elif int(aiMove) == 4:

                                    t_enhancer_used = True
                                    if o_defend_used == True:
                                        dmg = damage_cal(t_universe, t_card, t_enhancer, t_attack, t_defense, o_defense,
                                                         t_stamina, t_enhancer_used, t_health, o_health, o_stamina,
                                                         t_max_health, o_attack, t_special_move_description, turn_total,
                                                         tcard_lvl_ap_buff)
                                    else:
                                        dmg = damage_cal(t_universe, t_card, t_enhancer, t_attack, t_defense, c_defense,
                                                         t_stamina, t_enhancer_used, t_health, c_health, c_stamina,
                                                         t_max_health, c_attack, t_special_move_description, turn_total,
                                                         tcard_lvl_ap_buff)
                                    t_enhancer_used = False
                                elif int(aiMove) == 5:
                                    if not t_used_resolve and t_used_focus:
                                        if botActive and mode in B_modes:
                                            embedVar = discord.Embed(title=f"{t_card} Resolved!",
                                                                     description=f"{t_rmessage}", colour=0xe91e63)
                                            embedVar.set_footer(text=f"{o_card} this will not be easy...")
                                            await private_channel.send(embed=embedVar)
                                        if t_universe == "My Hero Academia":  # My hero TRait
                                            # fortitude or luck is based on health
                                            fortitude = 0.0
                                            low = t_health - (t_health * .75)
                                            high = t_health - (t_health * .66)
                                            fortitude = random.randint(int(low), int(high))
                                            # Resolve Scaling
                                            t_resolve_health = round(fortitude + (.5 * t_resolve))
                                            t_resolve_attack = round(
                                                (.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                            t_resolve_defense = round(
                                                (.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                            tcard_lvl_ap_buff = tcard_lvl_ap_buff + 50

                                            t_stamina = t_stamina + t_resolve
                                            t_health = t_health + t_resolve_health
                                            t_attack = round(t_attack + t_resolve_attack)
                                            t_defense = round(t_defense - t_resolve_defense)
                                            t_used_resolve = True
                                            t_pet_used = False

                                            embedVar = discord.Embed(title=f"{t_card.upper()} PLUS ULTRAAA",
                                                                     description=f"**{t_card} says**\n{t_resolve_description}",
                                                                     colour=0xe91e63)
                                            embedVar.add_field(name=f"Transformation: Plus Ultra",
                                                               value="You do not lose a turn after you Resolve.")
                                            await private_channel.send(embed=embedVar)
                                            turn_total = turn_total + 1
                                            turn = 3
                                        elif t_universe == "Attack On Titan":
                                            # fortitude or luck is based on health
                                            fortitude = 0.0
                                            low = t_health - (t_health * .75)
                                            high = t_health - (t_health * .66)
                                            fortitude = random.randint(int(low), int(high))
                                            # Resolve Scaling
                                            t_resolve_health = round(fortitude + (.5 * t_resolve))
                                            t_resolve_attack = round(
                                                (.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                            t_resolve_defense = round(
                                                (.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                            t_stamina = t_stamina + t_resolve
                                            t_health = t_health + t_resolve_health
                                            t_attack = round(t_attack + t_resolve_attack)
                                            t_defense = round(t_defense - t_resolve_defense)
                                            t_used_resolve = True
                                            t_pet_used = False
                                            health_boost = 100 * t_focus_count
                                            t_health = t_health + health_boost

                                            embedVar = discord.Embed(title=f"{t_card.upper()} Titan Mode",
                                                                     description=f"**{t_card} says**\n{t_resolve_description}",
                                                                     colour=0xe91e63)
                                            embedVar.add_field(name=f"Transformation Complete",
                                                               value=f"Health increased by **{health_boost}**!")
                                            await private_channel.send(embed=embedVar)
                                            turn_total = turn_total + 1
                                            turn = 0

                                        elif t_universe == "Bleach":  # Bleach Trait
                                            # fortitude or luck is based on health
                                            fortitude = 0.0
                                            low = t_health - (t_health * .75)
                                            high = t_health - (t_health * .66)
                                            fortitude = random.randint(int(low), int(high))
                                            # Resolve Scaling
                                            t_resolve_health = round(fortitude + (.5 * t_resolve))
                                            t_resolve_attack = round(
                                                (.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                            t_resolve_defense = round(
                                                (.30 * t_defense) * (t_resolve / (.50 * t_defense)))

                                            t_stamina = t_stamina + t_resolve
                                            t_health = t_health + t_resolve_health
                                            t_attack = round((t_attack + (2 * t_resolve_attack)) * 2)
                                            t_defense = round(t_defense - t_resolve_defense)
                                            # if t_defense >= 120:
                                            # t_defense = 120
                                            t_used_resolve = True
                                            t_pet_used = False

                                            embedVar = discord.Embed(title=f"{t_card} STRENGTHENED RESOLVE :zap:",
                                                                     description=f"**{t_card} says**\n{t_resolve_description}",
                                                                     colour=0xe91e63)
                                            embedVar.add_field(name=f"Transformation: Bankai",
                                                               value="Gain double Attack on Resolve.")
                                            await private_channel.send(embed=embedVar)
                                            turn_total = turn_total + 1
                                            turn = 0
                                        elif t_universe == "God Of War":  # God Of War Trait
                                            # fortitude or luck is based on health
                                            fortitude = 0.0
                                            low = t_health - (t_health * .75)
                                            high = t_health - (t_health * .66)
                                            fortitude = random.randint(int(low), int(high))
                                            # Resolve Scaling
                                            t_resolve_health = round(fortitude + (.5 * t_resolve))
                                            t_resolve_attack = round(
                                                (.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                            t_resolve_defense = round(
                                                (.30 * t_defense) * (t_resolve / (.50 * t_defense)))

                                            t_stamina = t_stamina + t_resolve
                                            t_health = t_max_health
                                            t_attack = round(t_attack + t_resolve_attack)
                                            t_defense = round(t_defense - t_resolve_defense)
                                            t_used_resolve = True
                                            t_pet_used = False

                                            embedVar = discord.Embed(title=f"{t_card} STRENGTHENED RESOLVE :zap:",
                                                                     description=f"**{t_card} says**\n{t_resolve_description}",
                                                                     colour=0xe91e63)
                                            embedVar.add_field(name=f"Transformation: Ascension",
                                                               value="On Resolve Refill Health.")
                                            await private_channel.send(embed=embedVar)
                                            turn_total = turn_total + 1
                                            turn = 0
                                        elif t_universe == "Fate":  # Fate Trait
                                            # fortitude or luck is based on health
                                            fortitude = 0.0
                                            low = t_health - (t_health * .75)
                                            high = t_health - (t_health * .66)
                                            fortitude = random.randint(int(low), int(high))
                                            # Resolve Scaling
                                            t_resolve_health = round(fortitude + (.5 * t_resolve))
                                            t_resolve_attack = round(
                                                (.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                            t_resolve_defense = round(
                                                (.30 * t_defense) * (t_resolve / (.50 * t_defense)))

                                            t_stamina = t_stamina + t_resolve
                                            t_health = t_health + t_resolve_health
                                            t_attack = round(t_attack + t_resolve_attack)
                                            t_defense = round(t_defense - t_resolve_defense)
                                            t_used_resolve = True

                                            embedVar = discord.Embed(title=f"{t_card} STRENGTHENED RESOLVE :zap:",
                                                                     description=f"**{t_card} says**\n{t_resolve_description}",
                                                                     colour=0xe91e63)
                                            embedVar.add_field(name=f"Transformation: Command Seal",
                                                               value="On Resolve, Strike with Ultimate, then Focus.")
                                            await private_channel.send(embed=embedVar)
                                            if o_defend_used == True:
                                                dmg = damage_cal(t_universe, t_card, t_3, t_attack, t_defense,
                                                                 o_defense, t_stamina, t_enhancer_used, t_health,
                                                                 o_health, o_stamina, t_max_health, o_attack,
                                                                 t_special_move_description, turn_total,
                                                                 tcard_lvl_ap_buff)
                                                o_health = o_health - int(dmg['DMG'])
                                            else:
                                                dmg = damage_cal(t_universe, t_card, t_3, t_attack, t_defense,
                                                                 c_defense, t_stamina, t_enhancer_used, t_health,
                                                                 c_health, c_stamina, t_max_health, c_attack,
                                                                 t_special_move_description, turn_total,
                                                                 tcard_lvl_ap_buff)
                                                c_health = c_health - int(dmg['DMG'])
                                            t_pet_used = False
                                            embedVar = discord.Embed(title=f"{dmg['MESSAGE']}", colour=embed_color_t)
                                            await private_channel.send(embed=embedVar)
                                            # t_stamina = 0
                                            turn_total = turn_total + 1
                                            turn = 0
                                        elif t_universe == "Kanto Region" or t_universe == "Johto Region" or t_universe == "Hoenn Region" or t_universe == "Sinnoh Region" or t_universe == "Kalos Region" or t_universe == "Unova Region" or t_universe == "Alola Region" or t_universe == "Galar Region":  # Pokemon Resolves
                                            # fortitude or luck is based on health
                                            fortitude = 0.0
                                            low = t_health - (t_health * .75)
                                            high = t_health - (t_health * .66)
                                            fortitude = random.randint(int(low), int(high))
                                            # Resolve Scaling
                                            t_resolve_health = round(fortitude + (.5 * t_resolve))
                                            t_resolve_attack = round(
                                                (.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                            t_resolve_defense = round(
                                                (.30 * t_defense) * (t_resolve / (.50 * t_defense)))

                                            t_stamina = t_stamina + t_resolve
                                            t_health = t_health + t_resolve_health
                                            t_attack = round(t_attack + t_resolve_attack)
                                            t_defense = round(t_defense) * 2
                                            t_used_resolve = True
                                            t_pet_used = False

                                            embedVar = discord.Embed(title=f"{t_card} STRENGTHENED RESOLVE :zap:",
                                                                     description=f"**{t_card} says**\n{t_resolve_description}",
                                                                     colour=0xe91e63)
                                            embedVar.add_field(name=f"Transformation: Evolution",
                                                               value="When you Resolve your Defense doubles")
                                            await private_channel.send(embed=embedVar)
                                            turn_total = turn_total + 1
                                            turn = 0
                                        else:
                                            # fortitude or luck is based on health
                                            fortitude = 0.0
                                            low = t_health - (t_health * .75)
                                            high = t_health - (t_health * .66)
                                            fortitude = random.randint(int(low), int(high))
                                            # Resolve Scaling
                                            t_resolve_health = round(fortitude + (.5 * t_resolve))
                                            t_resolve_attack = round(
                                                (.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                            t_resolve_defense = round(
                                                (.30 * t_defense) * (t_resolve / (.50 * t_defense)))

                                            t_stamina = t_stamina + t_resolve
                                            t_health = t_health + t_resolve_health
                                            t_attack = round(t_attack + t_resolve_attack)
                                            t_defense = round(t_defense - t_resolve_defense)
                                            t_used_resolve = True
                                            t_pet_used = False

                                            if t_universe == "League Of Legends":
                                                if o_block_used == True:
                                                    o_health = o_health - (30 * (o_focus_count + t_focus_count))
                                                    embedVar = discord.Embed(title=f"{t_card.upper()} PENTA KILL!",
                                                                             description=f"**{t_card} says**\n{t_resolve_description}",
                                                                             colour=0xe91e63)
                                                    embedVar.add_field(name=f"Nexus Destroyed",
                                                                       value=f"**{t_card}** dealt **{(30 * (o_focus_count + t_focus_count))}** damage.")
                                                else:
                                                    c_health = c_health - (30 * (c_focus_count + t_focus_count))
                                                    embedVar = discord.Embed(title=f"{t_card.upper()} PENTA KILL!",
                                                                             description=f"**{t_card} says**\n{t_resolve_description}",
                                                                             colour=0xe91e63)
                                                    embedVar.add_field(name=f"Nexus Destroyed",
                                                                       value=f"**{t_card}** dealt **{(30 * (c_focus_count + t_focus_count))}** damage.")
                                            else:
                                                embedVar = discord.Embed(title=f"{t_card} STRENGTHENED RESOLVE :zap:",
                                                                         description=f"**{t_card} says**\n{t_resolve_description}",
                                                                         colour=0xe91e63)
                                                embedVar.add_field(name=f"Transformation",
                                                                   value="All stats & stamina greatly increased")
                                            await private_channel.send(embed=embedVar)
                                            turn_total = turn_total + 1
                                            turn = 0
                                    else:
                                        await private_channel.send(m.CANNOT_USE_RESOLVE)
                                        turn = 3
                                elif int(aiMove) == 6:
                                    # Resolve Check and Calculation
                                    if t_used_resolve and t_used_focus and not t_pet_used:
                                        if o_defend_used == True:
                                            t_enhancer_used = True
                                            dmg = damage_cal(t_universe, t_card, tpet_move, t_attack, t_defense,
                                                             o_defense, t_stamina, t_enhancer_used, t_health, o_health,
                                                             o_stamina, t_max_health, o_attack,
                                                             t_special_move_description, turn_total, tcard_lvl_ap_buff)
                                            t_enhancer_used = False
                                            t_pet_used = True
                                            tpet_dmg = dmg['DMG']
                                            tpet_type = dmg['ENHANCED_TYPE']
                                            if dmg['CAN_USE_MOVE']:
                                                if tpet_type == 'ATK':
                                                    t_attack = round(t_attack + dmg['DMG'])
                                                elif tpet_type == 'DEF':
                                                    t_defense = round(t_defense + dmg['DMG'])
                                                elif tpet_type == 'STAM':
                                                    t_stamina = round(t_stamina + dmg['DMG'])
                                                elif tpet_type == 'HLT':
                                                    t_health = round(t_health + dmg['DMG'])
                                                elif tpet_type == 'LIFE':
                                                    t_health = round(t_health + dmg['DMG'])
                                                    o_health = round(o_health - dmg['DMG'])
                                                elif tpet_type == 'DRAIN':
                                                    t_stamina = round(t_stamina + dmg['DMG'])
                                                    o_stamina = round(o_stamina - dmg['DMG'])
                                                elif tpet_type == 'FLOG':
                                                    t_attack = round(t_attack + dmg['DMG'])
                                                    o_attack = round(o_attack - dmg['DMG'])
                                                elif tpet_type == 'WITHER':
                                                    t_defense = round(t_defense + dmg['DMG'])
                                                    o_defense = round(o_defense - dmg['DMG'])
                                                elif tpet_type == 'RAGE':
                                                    t_defense = round(t_defense - dmg['DMG'])
                                                    t_attack = round(t_attack + dmg['DMG'])
                                                elif tpet_type == 'BRACE':
                                                    t_defense = round(t_defense + dmg['DMG'])
                                                    t_attack = round(t_attack - dmg['DMG'])
                                                elif tpet_type == 'BZRK':
                                                    t_health = round(t_health - dmg['DMG'])
                                                    t_attack = round(t_attack + dmg['DMG'])
                                                elif tpet_type == 'CRYSTAL':
                                                    t_health = round(t_health - dmg['DMG'])
                                                    t_defense = round(t_defense + dmg['DMG'])
                                                elif tpet_type == 'GROWTH':
                                                    t_max_health = round(t_max_health - dmg['DMG'])
                                                    t_defense = round(t_defense + (dmg['DMG'] * .5))
                                                    t_attack = round(t_attack + (dmg['DMG'] * .5))
                                                elif tpet_type == 'STANCE':
                                                    tempattack = dmg['DMG']
                                                    t_attack = t_defense
                                                    t_defense = tempattack
                                                elif tpet_type == 'CONFUSE':
                                                    tempattack = dmg['DMG']
                                                    o_attack = o_defense
                                                    o_defense = tempattack
                                                elif tpet_type == 'BLINK':
                                                    t_stamina = round(t_stamina - dmg['DMG'])
                                                    o_stamina = round(o_stamina + dmg['DMG'] - 10)
                                                elif tpet_type == 'SLOW':
                                                    tempstam = round(o_stamina + dmg['DMG'])
                                                    t_stamina = round(t_stamina - dmg['DMG'])
                                                    o_stamina = t_stamina
                                                    t_stamina = tempstam
                                                elif tpet_type == 'HASTE':
                                                    tempstam = round(o_stamina - dmg['DMG'])
                                                    t_stamina = round(t_stamina + dmg['DMG'])
                                                    o_stamina = t_stamina
                                                    t_stamina = tempstam
                                                elif tpet_type == 'SOULCHAIN':
                                                    t_stamina = round(dmg['DMG'])
                                                    o_stamina = t_stamina
                                                elif tpet_type == 'GAMBLE':
                                                    t_health = round(dmg['DMG'])
                                                    o_health = t_health
                                                elif tpet_type == 'FEAR':
                                                    t_max_health = round(t_max_health - dmg['DMG'])
                                                    o_defense = round(o_defense - (dmg['DMG'] * .5))
                                                    o_attack = round(o_attack - (dmg['DMG'] * .5))
                                                elif tpet_type == 'WAVE':
                                                    o_health = round(o_health - dmg['DMG'])
                                                elif tpet_type == 'BLAST':
                                                    if dmg['DMG'] >= 100:
                                                        dmg['DMG'] = 100
                                                    o_health = round(o_health - dmg['DMG'])
                                                elif tpet_type == 'CREATION':
                                                    t_max_health = round(t_max_health + dmg['DMG'])
                                                    t_health = round(t_health + dmg['DMG'])
                                                elif tpet_type == 'DESTRUCTION':
                                                    o_max_health = round(o_max_health - dmg['DMG'])
                                                t_stamina = t_stamina - int(dmg['STAMINA_USED'])

                                                if t_universe == "Persona":
                                                    petdmg = damage_cal(t_universe, t_card, t_1, t_attack, t_defense,
                                                                        c_defense, t_stamina, t_enhancer_used, t_health,
                                                                        c_health, c_stamina, t_max_health, c_attack,
                                                                        t_special_move_description, turn_total,
                                                                        tcard_lvl_ap_buff)

                                                    o_health = o_health - petdmg['DMG']

                                                    embedVar = discord.Embed(
                                                        title=f"**PERSONA!**\n{tpet_name} was summoned from {t_card}'s soul dealing **{petdmg['DMG']}** damage!!",
                                                        colour=0xe91e63)
                                                    embedVar.add_field(name=f"{tpet_name} used **{tpetmove_text}**!",
                                                                       value=f"Enhanced **{tpet_type}**")

                                                    embedVar.set_thumbnail(url=tpet_image)
                                                    embedVar.set_image(url="attachment://image.png")
                                                    await button_ctx.send(embed=embedVar)
                                                else:
                                                    embedVar = discord.Embed(
                                                        title=f"{t_card.upper()} Summoned :bird: {tpet_name}",
                                                        colour=0xe91e63)
                                                    embedVar.add_field(name=f"{tpet_name} used **{tpetmove_text}**!",
                                                                       value=f"Enhanced **{tpet_type}**")
                                                    embedVar.set_thumbnail(url=tpet_image)
                                                    embedVar.set_image(url="attachment://image.png")
                                                    await private_channel.send(embed=embedVar)
                                                turn = 1
                                            else:
                                                await private_channel.send(f"{tpet_name} needs a turn to rest...")
                                                turn = 1
                                        else:
                                            t_enhancer_used = True
                                            dmg = damage_cal(t_universe, t_card, tpet_move, t_attack, t_defense,
                                                             c_defense, t_stamina, t_enhancer_used, t_health, c_health,
                                                             c_stamina, t_max_health, c_attack,
                                                             t_special_move_description, turn_total, tcard_lvl_ap_buff)
                                            t_enhancer_used = False
                                            t_pet_used = True
                                            tpet_dmg = dmg['DMG']
                                            tpet_type = dmg['ENHANCED_TYPE']
                                            if dmg['CAN_USE_MOVE']:
                                                if tpet_type == 'ATK':
                                                    t_attack = round(t_attack + dmg['DMG'])
                                                elif tpet_type == 'DEF':
                                                    t_defense = round(t_defense + dmg['DMG'])
                                                elif tpet_type == 'STAM':
                                                    t_stamina = round(t_stamina + dmg['DMG'])
                                                elif tpet_type == 'HLT':
                                                    t_health = round(t_health + dmg['DMG'])
                                                elif tpet_type == 'LIFE':
                                                    t_health = round(t_health + dmg['DMG'])
                                                    c_health = round(c_health - dmg['DMG'])
                                                elif tpet_type == 'DRAIN':
                                                    t_stamina = round(t_stamina + dmg['DMG'])
                                                    c_stamina = round(c_stamina - dmg['DMG'])
                                                elif tpet_type == 'FLOG':
                                                    t_attack = round(t_attack + dmg['DMG'])
                                                    c_attack = round(c_attack - dmg['DMG'])
                                                elif tpet_type == 'WITHER':
                                                    t_defense = round(t_defense + dmg['DMG'])
                                                    c_defense = round(c_defense - dmg['DMG'])
                                                elif tpet_type == 'RAGE':
                                                    t_defense = round(t_defense - dmg['DMG'])
                                                    t_attack = round(t_attack + dmg['DMG'])
                                                elif tpet_type == 'BRACE':
                                                    t_defense = round(t_defense + dmg['DMG'])
                                                    t_attack = round(t_attack - dmg['DMG'])
                                                elif tpet_type == 'BZRK':
                                                    t_health = round(t_health - dmg['DMG'])
                                                    t_attack = round(t_attack + dmg['DMG'])
                                                elif tpet_type == 'CRYSTAL':
                                                    t_health = round(t_health - dmg['DMG'])
                                                    t_defense = round(t_defense + dmg['DMG'])
                                                elif tpet_type == 'GROWTH':
                                                    t_max_health = round(t_max_health - dmg['DMG'])
                                                    t_defense = round(t_defense + (dmg['DMG'] * .5))
                                                    t_attack = round(t_attack + (dmg['DMG'] * .5))
                                                elif tpet_type == 'STANCE':
                                                    tempattack = dmg['DMG']
                                                    t_attack = t_defense
                                                    t_defense = tempattack
                                                elif tpet_type == 'CONFUSE':
                                                    tempattack = dmg['DMG']
                                                    c_attack = c_defense
                                                    c_defense = tempattack
                                                elif tpet_type == 'BLINK':
                                                    t_stamina = round(t_stamina - dmg['DMG'])
                                                    c_stamina = round(c_stamina + dmg['DMG'] - 10)
                                                elif tpet_type == 'SLOW':
                                                    tempstam = round(c_stamina + dmg['DMG'])
                                                    t_stamina = round(t_stamina - dmg['DMG'])
                                                    c_stamina = t_stamina
                                                    t_stamina = tempstam
                                                elif tpet_type == 'HASTE':
                                                    tempstam = round(c_stamina - dmg['DMG'])
                                                    t_stamina = round(t_stamina + dmg['DMG'])
                                                    c_stamina = t_stamina
                                                    t_stamina = tempstam
                                                elif tpet_type == 'SOULCHAIN':
                                                    t_stamina = round(dmg['DMG'])
                                                    c_stamina = t_stamina
                                                elif tpet_type == 'GAMBLE':
                                                    t_health = round(dmg['DMG'])
                                                    c_health = t_health
                                                elif tpet_type == 'FEAR':
                                                    t_max_health = round(t_max_health - dmg['DMG'])
                                                    c_attack = round(c_attack - ((dmg['DMG'] * .5)))
                                                    c_defense = round(c_defense - ((dmg['DMG'] * .5)))
                                                elif tpet_type == 'WAVE':
                                                    c_health = round(c_health - dmg['DMG'])
                                                elif tpet_type == 'BLAST':
                                                    if dmg['DMG'] >= 100:
                                                        dmg['DMG'] = 100
                                                    c_health = round(c_health - dmg['DMG'])
                                                elif tpet_type == 'CREATION':
                                                    t_max_health = round(t_max_health + dmg['DMG'])
                                                    t_health = round(t_health + dmg['DMG'])
                                                elif tpet_type == 'DESTRUCTION':
                                                    c_max_health = round(c_max_health - dmg['DMG'])
                                                t_stamina = t_stamina - int(dmg['STAMINA_USED'])

                                                if t_universe == "Persona":
                                                    petdmg = damage_cal(t_universe, t_card, t_1, t_attack, t_defense,
                                                                        c_defense, t_stamina, t_enhancer_used, t_health,
                                                                        c_health, c_stamina, t_max_health, c_attack,
                                                                        t_special_move_description, turn_total,
                                                                        tcard_lvl_ap_buff)

                                                    c_health = c_health - petdmg['DMG']

                                                    embedVar = discord.Embed(
                                                        title=f"**PERSONA!**\n{tpet_name} was summoned from {t_card}'s soul dealing **{petdmg['DMG']}** damage!!",
                                                        colour=0xe91e63)
                                                    embedVar.add_field(name=f"{tpet_name} used **{tpetmove_text}**!",
                                                                       value=f"Enhanced **{tpet_type}**")

                                                    embedVar.set_thumbnail(url=tpet_image)
                                                    embedVar.set_image(url="attachment://image.png")
                                                    await button_ctx.send(embed=embedVar)
                                                else:
                                                    embedVar = discord.Embed(
                                                        title=f"{t_card.upper()} Summoned :bird: {tpet_name}",
                                                        colour=0xe91e63)
                                                    embedVar.add_field(name=f"{tpet_name} used **{tpetmove_text}**!",
                                                                       value=f"Enhanced **{tpet_type}**")
                                                    embedVar.set_thumbnail(url=tpet_image)
                                                    embedVar.set_image(url="attachment://image.png")
                                                    await private_channel.send(embed=embedVar)
                                                turn = 1
                                            else:
                                                await private_channel.send(f"{tpet_name} needs a turn to rest...")
                                                turn = 1

                                if int(aiMove) != 5 and int(aiMove) != 6:
                                    # If you have enough stamina for move, use it
                                    # check if o is blocking

                                    if o_defend_used == True:
                                        if dmg['CAN_USE_MOVE']:
                                            t_pet_used = False
                                            if dmg['ENHANCE']:
                                                enh_type = dmg['ENHANCED_TYPE']
                                                if enh_type == 'ATK':
                                                    t_attack = round(t_attack + dmg['DMG'])
                                                elif enh_type == 'DEF':
                                                    t_defense = round(t_defense + dmg['DMG'])
                                                elif enh_type == 'STAM':
                                                    t_stamina = round(t_stamina + dmg['DMG'])
                                                elif enh_type == 'HLT':
                                                    t_health = round(t_health + dmg['DMG'])
                                                elif enh_type == 'LIFE':
                                                    t_health = round(t_health + dmg['DMG'])
                                                    o_health = round(o_health - dmg['DMG'])
                                                elif enh_type == 'DRAIN':
                                                    t_stamina = round(t_stamina + dmg['DMG'])
                                                    o_stamina = round(o_stamina - dmg['DMG'])
                                                elif enh_type == 'FLOG':
                                                    t_attack = round(t_attack + dmg['DMG'])
                                                    o_attack = round(o_attack - dmg['DMG'])
                                                elif enh_type == 'WITHER':
                                                    t_defense = round(t_defense + dmg['DMG'])
                                                    o_defense = round(o_defense - dmg['DMG'])
                                                elif enh_type == 'RAGE':
                                                    t_defense = round(t_defense - dmg['DMG'])
                                                    t_attack = round(t_attack + dmg['DMG'])
                                                elif enh_type == 'BRACE':
                                                    t_defense = round(t_defense + dmg['DMG'])
                                                    t_attack = round(t_attack - dmg['DMG'])
                                                elif enh_type == 'BZRK':
                                                    t_health = round(t_health - dmg['DMG'])
                                                    t_attack = round(t_attack + (.75 * dmg['DMG']))
                                                elif enh_type == 'CRYSTAL':
                                                    t_health = round(t_health - dmg['DMG'])
                                                    t_defense = round(t_defense + dmg['DMG'])
                                                elif enh_type == 'GROWTH':
                                                    t_max_health = round(t_max_health - dmg['DMG'])
                                                    t_defense = round(t_defense + (dmg['DMG'] * .5))
                                                    t_attack = round(t_attack + (dmg['DMG'] * .5))
                                                elif enh_type == 'STANCE':
                                                    tempattack = dmg['DMG']
                                                    t_attack = t_defense
                                                    t_defense = tempattack
                                                elif enh_type == 'CONFUSE':
                                                    tempattack = dmg['DMG']
                                                    o_attack = o_defense
                                                    o_defense = tempattack
                                                elif enh_type == 'BLINK':
                                                    t_stamina = round(t_stamina - dmg['DMG'])
                                                    o_stamina = round(o_stamina + dmg['DMG'] - 10)
                                                elif enh_type == 'SLOW':
                                                    tempstam = round(o_stamina + dmg['DMG'])
                                                    t_stamina = round(t_stamina - dmg['DMG'])
                                                    o_stamina = t_stamina
                                                    t_stamina = tempstam
                                                elif enh_type == 'HASTE':
                                                    tempstam = round(o_stamina - dmg['DMG'])
                                                    t_stamina = round(t_stamina + dmg['DMG'])
                                                    o_stamina = t_stamina
                                                    t_stamina = tempstam
                                                elif enh_type == 'SOULCHAIN':
                                                    t_stamina = round(dmg['DMG'])
                                                    o_stamina = o_stamina
                                                elif enh_type == 'GAMBLE':
                                                    if mode in D_modes:
                                                        t_health = round(dmg['DMG']) * 3
                                                        o_health = round(dmg['DMG'])
                                                    elif mode in B_modes:
                                                        t_health = round(dmg['DMG']) * 4
                                                        o_health = round(dmg['DMG'])
                                                    else:
                                                        t_health = round(dmg['DMG']) * 2
                                                        o_health = round(dmg['DMG'])
                                                elif enh_type == 'FEAR':
                                                    t_max_health = round(t_max_health - dmg['DMG'])
                                                    o_defense = round(o_defense - (dmg['DMG'] * .5))
                                                    o_attack = round(o_attack - (dmg['DMG'] * .5))
                                                elif enh_type == 'WAVE':
                                                    o_health = round(o_health - dmg['DMG'])
                                                elif enh_type == 'BLAST':
                                                    o_health = round(o_health - dmg['DMG'])
                                                elif enh_type == 'CREATION':
                                                    t_max_health = round(t_max_health + dmg['DMG'])
                                                    t_health = round(t_health + dmg['DMG'])
                                                elif enh_type == 'DESTRUCTION':
                                                    o_max_health = round(o_max_health - dmg['DMG'])
                                                t_stamina = t_stamina - int(dmg['STAMINA_USED'])
                                                embedVar = discord.Embed(title=f"{dmg['MESSAGE']}",
                                                                         colour=embed_color_t)
                                                await private_channel.send(embed=embedVar)
                                                turn_total = turn_total + 1
                                                turn = 0
                                            elif dmg['DMG'] == 0:
                                                t_stamina = t_stamina - int(dmg['STAMINA_USED'])
                                                embedVar = discord.Embed(title=f"{dmg['MESSAGE']}", colour=embed_color_t)
                                                if tarm_barrier_active:
                                                    tarm_barrier_active=False
                                                    embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                await private_channel.send(embed=embedVar)
                                                turn_total = turn_total + 1
                                                turn = 0
                                            else:
                                                if o_universe == "Naruto" and o_stamina < 10:
                                                    o_health = o_health 
                                                    embedVar = discord.Embed(title=f"{o_card.upper()}: Substitution Jutsu", description=f"{t_card} strikes a log", colour=0xe91e63)
                                                    if tarm_barrier_active:
                                                        tarm_barrier_active=False
                                                        embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                    await private_channel.send(embed=embedVar)
                                                elif oarm_shield_active:
                                                    if oshield_value > 0:
                                                        oshield_value = oshield_value -dmg['DMG']
                                                        o_health = o_health 
                                                        if oshield_value <=0:
                                                            embedVar = discord.Embed(title=f"{o_card.upper()}'s' **Shield** Shattered!", description=f"{t_card} breaks the **Shield**!", colour=0xe91e63)
                                                            if tarm_barrier_active:
                                                                tarm_barrier_active=False
                                                                embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                            await button_ctx.send(embed=embedVar)
                                                            oarm_shield_active = False
                                                        else:
                                                            embedVar = discord.Embed(title=f"{o_card.upper()} Activates **Shield** 🌐", description=f"{t_card} strikes the **Shield** for **{dmg['DMG']} DMG!**\n **{oshield_value} Shield** Left!", colour=0xe91e63)
                                                            if tarm_barrier_active:
                                                                tarm_barrier_active=False
                                                                embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                            await button_ctx.send(embed=embedVar)

                                                elif oarm_barrier_active:
                                                    if obarrier_count >1:
                                                        o_health = o_health 
                                                        embedVar = discord.Embed(title=f"{o_card.upper()} Activates **Barrier** 💠", description=f"{t_card}'s attack **Nullified**!\n {obarrier_count - 1} **Barriers** remain!", colour=0xe91e63)
                                                        if tarm_barrier_active:
                                                            tarm_barrier_active=False
                                                            embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                        await button_ctx.send(embed=embedVar)
                                                        obarrier_count = obarrier_count - 1
                                                    elif obarrier_count==1:
                                                        embedVar = discord.Embed(title=f"{o_card.upper()}'s **Barrier** Broken!", description=f"{t_card} destroys the **Barrier**", colour=0xe91e63)
                                                        obarrier_count = obarrier_count - 1
                                                        if tarm_barrier_active:
                                                            tarm_barrier_active=False
                                                            embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                        await button_ctx.send(embed=embedVar)
                                                        oarm_barrier_active = False
                                                elif oarm_parry_active:
                                                    if oparry_count > 1:
                                                        oparry_damage = round(dmg['DMG'] / 2)
                                                        o_health = o_health - oparry_damage
                                                        t_health = t_health - oparry_damage
                                                        oparry_count = oparry_count - 1
                                                        embedVar = discord.Embed(title=f"{o_card.upper()} Activates **Parry** 🔄", description=f"{t_card} takes {oparry_damage}! DMG\n **{oparry_count} Parries** to go!!", colour=0xe91e63)
                                                        if tarm_barrier_active:
                                                            tarm_barrier_active=False
                                                            embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                        await button_ctx.send(embed=embedVar)
                                                        
                                                    elif oparry_count==1:
                                                        embedVar = discord.Embed(title=f"{o_card.upper()} **Parry** Penetrated!!", description=f"{t_card} breaks the **Parry**", colour=0xe91e63)
                                                        oparry_damage = round(dmg['DMG'] / 2)
                                                        o_health = o_health - oparry_damage
                                                        t_health = t_health - oparry_damage
                                                        oparry_count = oparry_count - 1
                                                        if tarm_barrier_active:
                                                            tarm_barrier_active=False
                                                            embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                        await button_ctx.send(embed=embedVar)
                                                        oarm_parry_active = False
                                                else:
                                                    o_health = o_health - int(dmg['DMG'])
                                                    embedVar = discord.Embed(title=f"{dmg['MESSAGE']}", colour=embed_color_t)
                                                    if tarm_barrier_active:
                                                        tarm_barrier_active=False
                                                        embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                    await private_channel.send(embed=embedVar)
                                                if o_health <= 0:
                                                    if o_final_stand==True:
                                                        embedVar = discord.Embed(title=f"{o_card.upper()}'s LAST STAND", description=f"{o_card} FINDS RESOLVE", colour=0xe91e63)
                                                        embedVar.add_field(name=f"{o_card} resolved and continues to fight", value="All stats & stamina increased")
                                                        if tarm_barrier_active:
                                                            tarm_barrier_active=False
                                                            embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                        await private_channel.send(embed=embedVar)
                                                        o_health = int(.75 * (o_attack + o_defense))
                                                        o_attack = o_attack + (.50 * o_attack)
                                                        o_defense = o_defense + (.50 * o_defense)
                                                        o_stamina = 100
                                                        o_used_resolve = True
                                                        o_final_stand = False
                                                        o_used_focus = True
                                                        t_stamina = t_stamina - int(dmg['STAMINA_USED'])
                                                        turn_total = turn_total + 1
                                                        turn = 0
                                                    else:
                                                        o_health = 0
                                                        t_stamina = t_stamina - int(dmg['STAMINA_USED'])
                                                        turn_total = turn_total + 1
                                                else:
                                                    t_stamina = t_stamina - int(dmg['STAMINA_USED'])
                                                    turn_total = turn_total + 1
                                                    turn = 0
                                        else:
                                            await private_channel.send(m.NOT_ENOUGH_STAMINA)
                                            turn = 3
                                    else:
                                        if dmg['CAN_USE_MOVE']:
                                            t_pet_used = False
                                            if dmg['ENHANCE']:
                                                enh_type = dmg['ENHANCED_TYPE']
                                                if enh_type == 'ATK':
                                                    t_attack = round(t_attack + dmg['DMG'])
                                                elif enh_type == 'DEF':
                                                    t_defense = round(t_defense + dmg['DMG'])
                                                elif enh_type == 'STAM':
                                                    t_stamina = round(t_stamina + dmg['DMG'])
                                                elif enh_type == 'HLT':
                                                    t_health = round(t_health + dmg['DMG'])
                                                elif enh_type == 'LIFE':
                                                    t_health = round(t_health + dmg['DMG'])
                                                    c_health = round(c_health - dmg['DMG'])
                                                elif enh_type == 'DRAIN':
                                                    t_stamina = round(t_stamina + dmg['DMG'])
                                                    c_stamina = round(c_stamina - dmg['DMG'])
                                                elif enh_type == 'FLOG':
                                                    t_attack = round(t_attack + dmg['DMG'])
                                                    c_attack = round(c_attack - dmg['DMG'])
                                                elif enh_type == 'WITHER':
                                                    t_defense = round(t_defense + dmg['DMG'])
                                                    c_defense = round(t_defense - dmg['DMG'])
                                                elif enh_type == 'RAGE':
                                                    t_defense = round(t_defense - dmg['DMG'])
                                                    t_attack = round(t_attack + dmg['DMG'])
                                                elif enh_type == 'BRACE':
                                                    t_defense = round(t_defense + dmg['DMG'])
                                                    t_attack = round(t_attack - dmg['DMG'])
                                                elif enh_type == 'BZRK':
                                                    t_health = round(t_health - dmg['DMG'])
                                                    t_attack = round(t_attack + (.75 * dmg['DMG']))
                                                elif enh_type == 'CRYSTAL':
                                                    t_health = round(t_health - dmg['DMG'])
                                                    t_defense = round(t_defense + dmg['DMG'])
                                                elif enh_type == 'GROWTH':
                                                    t_max_health = round(t_max_health - dmg['DMG'])
                                                    t_defense = round(t_defense + (dmg['DMG'] * .5))
                                                    t_attack = round(t_attack + (dmg['DMG'] * .5))
                                                elif enh_type == 'STANCE':
                                                    tempattack = dmg['DMG']
                                                    t_attack = t_defense
                                                    t_defense = tempattack
                                                elif enh_type == 'CONFUSE':
                                                    tempattack = dmg['DMG']
                                                    c_attack = c_defense
                                                    c_defense = tempattack
                                                elif enh_type == 'BLINK':
                                                    t_stamina = round(t_stamina - dmg['DMG'])
                                                    c_stamina = round(c_stamina + dmg['DMG'] - 10)
                                                elif enh_type == 'SLOW':
                                                    tempstam = round(c_stamina + dmg['DMG'])
                                                    t_stamina = round(t_stamina - dmg['DMG'])
                                                    c_stamina = t_stamina
                                                    t_stamina = tempstam
                                                elif enh_type == 'HASTE':
                                                    tempstam = round(c_stamina - dmg['DMG'])
                                                    t_stamina = round(t_stamina + dmg['DMG'])
                                                    c_stamina = t_stamina
                                                    t_stamina = tempstam
                                                elif enh_type == 'SOULCHAIN':
                                                    t_stamina = round(dmg['DMG'])
                                                    c_stamina = t_stamina
                                                elif enh_type == 'GAMBLE':
                                                    if mode in D_modes:
                                                        t_health = round(dmg['DMG']) * 3
                                                        c_health = round(dmg['DMG'])
                                                    elif mode in B_modes:
                                                        t_health = round(dmg['DMG']) * 4
                                                        c_health = round(dmg['DMG'])
                                                    else:
                                                        t_health = round(dmg['DMG']) * 2
                                                        c_health = round(dmg['DMG'])
                                                elif enh_type == 'FEAR':
                                                    t_max_health = round(t_max_health - dmg['DMG'])
                                                    c_attack = round(c_attack - ((dmg['DMG'] * .5)))
                                                    c_defense = round(c_defense - ((dmg['DMG'] * .5)))
                                                elif enh_type == 'WAVE':
                                                    c_health = round(c_health - dmg['DMG'])
                                                elif enh_type == 'BLAST':
                                                    c_health = round(c_health - dmg['DMG'])
                                                elif enh_type == 'CREATION':
                                                    t_max_health = round(t_max_health + dmg['DMG'])
                                                    t_health = round(t_health + dmg['DMG'])
                                                elif enh_type == 'DESTRUCTION':
                                                    c_max_health = round(c_max_health - dmg['DMG'])
                                                t_stamina = t_stamina - int(dmg['STAMINA_USED'])
                                                embedVar = discord.Embed(title=f"{dmg['MESSAGE']}",
                                                                         colour=embed_color_t)
                                                await private_channel.send(embed=embedVar)
                                                turn_total = turn_total + 1
                                                turn = 0
                                            elif dmg['DMG'] == 0:
                                                t_stamina = t_stamina - int(dmg['STAMINA_USED'])
                                                embedVar = discord.Embed(title=f"{dmg['MESSAGE']}", colour=embed_color_t)
                                                if tarm_barrier_active:
                                                    tarm_barrier_active=False
                                                    embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                await private_channel.send(embed=embedVar)
                                                turn_total = turn_total + 1
                                                turn = 0
                                            else:
                                                if c_universe == "Naruto" and c_stamina < 10:
                                                    c_health = c_health 
                                                    embedVar = discord.Embed(title=f"{c_card.upper()}: Substitution Jutsu", description=f"{t_card} strikes a log", colour=0xe91e63)
                                                    if tarm_barrier_active:
                                                        tarm_barrier_active=False
                                                        embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                    await private_channel.send(embed=embedVar)
                                                elif carm_shield_active:
                                                    if cshield_value > 0:
                                                        cshield_value = cshield_value -dmg['DMG']
                                                        c_health = c_health 
                                                        if cshield_value <=0:
                                                            embedVar = discord.Embed(title=f"{c_card.upper()}'s' **Shield** Shattered!", description=f"{t_card} breaks the **Shield**!", colour=0xe91e63)
                                                            if tarm_barrier_active:
                                                                tarm_barrier_active=False
                                                                embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                            await button_ctx.send(embed=embedVar)
                                                            carm_shield_active = False
                                                        else:
                                                            embedVar = discord.Embed(title=f"{c_card.upper()} Activates **Shield** 🌐", description=f"{t_card} strikes the **Shield** for **{dmg['DMG']} DMG!**\n **{cshield_value} Shield** Left!", colour=0xe91e63)
                                                            if tarm_barrier_active:
                                                                tarm_barrier_active=False
                                                                embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                            await button_ctx.send(embed=embedVar)

                                                elif carm_barrier_active:
                                                    if cbarrier_count >1:
                                                        c_health = c_health 
                                                        embedVar = discord.Embed(title=f"{c_card.upper()} Activates **Barrier** 💠", description=f"{t_card}'s attack **Nullified**!\n **{obarrier_count - 1} Barriers** remain!", colour=0xe91e63)
                                                        if tarm_barrier_active:
                                                            tarm_barrier_active=False
                                                            embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                        await button_ctx.send(embed=embedVar)
                                                        cbarrier_count = cbarrier_count - 1
                                                    elif cbarrier_count==1:
                                                        embedVar = discord.Embed(title=f"{c_card.upper()}'s **Barrier** Broken!", description=f"{t_card} destroys the **Barrier**", colour=0xe91e63)
                                                        cbarrier_count = cbarrier_count - 1
                                                        if tarm_barrier_active:
                                                            tarm_barrier_active=False
                                                            embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                        await button_ctx.send(embed=embedVar)
                                                        carm_barrier_active = False
                                                elif carm_parry_active:
                                                    if cparry_count > 1:
                                                        c_health = c_health
                                                        cparry_damage = round(dmg['DMG'] / 2)
                                                        c_health = c_health - cparry_damage
                                                        t_health = t_health - cparry_damage
                                                        cparry_count = cparry_count - 1
                                                        embedVar = discord.Embed(title=f"{c_card.upper()} Activates **Parry** 🔄", description=f"{t_card} takes {cparry_damage}! DMG\n **{cparry_count} Parries** to go!!", colour=0xe91e63)
                                                        if tarm_barrier_active:
                                                            tarm_barrier_active=False
                                                            embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!**")
                                                        await button_ctx.send(embed=embedVar)
                                                        
                                                    elif cparry_count==1:
                                                        embedVar = discord.Embed(title=f"{c_card.upper()} **Parry** Penetrated!!", description=f"{t_card} breaks the **Parry**", colour=0xe91e63)
                                                        c_health = c_health
                                                        cparry_damage = round(dmg['DMG'] / 2)
                                                        c_health = c_health - cparry_damage
                                                        t_health = t_health - cparry_damage
                                                        cparry_count = cparry_count - 1
                                                        if tarm_barrier_active:
                                                            tarm_barrier_active=False
                                                            embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                        await button_ctx.send(embed=embedVar)
                                                        carm_parry_active = False
                                                else:
                                                    c_health = c_health - int(dmg['DMG'])
                                                    embedVar = discord.Embed(title=f"{dmg['MESSAGE']}", colour=embed_color_t)
                                                    if tarm_barrier_active:
                                                        tarm_barrier_active=False
                                                        embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                    await private_channel.send(embed=embedVar)
                                                if c_health <= 0:
                                                    if c_final_stand==True:
                                                        embedVar = discord.Embed(title=f"{c_card.upper()}'s LAST STAND", description=f"{c_card} FINDS RESOLVE", colour=0xe91e63)
                                                        embedVar.add_field(name=f"{c_card} resolved and continues to fight", value="All stats & stamina increased")
                                                        if tarm_barrier_active:
                                                            tarm_barrier_active=False
                                                            embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                        await private_channel.send(embed=embedVar)
                                                        c_health = int(.75 * (c_attack + c_defense))
                                                        c_attack = c_attack + (.50 * c_attack)
                                                        c_defense = c_defense + (.50 * c_defense)
                                                        c_used_resolve = True
                                                        c_used_focus = True
                                                        c_final_stand = False
                                                        t_stamina = t_stamina - int(dmg['STAMINA_USED'])
                                                        turn_total = turn_total + 1
                                                        turn = 2
                                                    else:
                                                        c_health = 0
                                                        t_stamina = t_stamina - int(dmg['STAMINA_USED'])
                                                        turn_total = turn_total + 1
                                                else:
                                                    t_stamina = t_stamina - int(dmg['STAMINA_USED'])
                                                    turn_total = turn_total + 1
                                                    turn = 0
                                        else:
                                            await private_channel.send(m.NOT_ENOUGH_STAMINA)
                                            turn = 3

                # End the match
            if (((o_health <= 0 or c_health <= 0) and mode in co_op_modes) or (
                    o_max_health <= 0 or c_max_health <= 0) and mode in co_op_modes) or (
                    (o_health <= 0 or o_max_health <= 0) and mode not in co_op_modes):

                if mode in PVP_MODES:
                    try:
                        # await ctx.send(f":zap: {user2.mention} you win the match!")
                        uid = t_DID
                        tuser = await self.bot.fetch_user(uid)
                        ouser = await self.bot.fetch_user(uid)
                        wintime = time.asctime()
                        h_playtime = int(wintime[11:13])
                        m_playtime = int(wintime[14:16])
                        s_playtime = int(wintime[17:19])
                        gameClock = getTime(int(h_gametime), int(m_gametime), int(s_gametime), h_playtime, m_playtime,
                                            s_playtime)
                        match = await savematch(str(tuser), str(t_card), str(t_card_path), str(ttitle['TITLE']),
                                                str(tarm['ARM']), "N/A", "PVP", o['EXCLUSIVE'])
                        ouid = sowner['DID']
                        sownerctx = await self.bot.fetch_user(ouid)
                        # response = await score(sownerctx, tuser)
                        await curse(30, str(ctx.author))
                        await bless(80, tuser)
                        if tguild:
                            await bless(15, str(tuser))
                            await blessteam(25, cteam)
                            await teamwin(cteam)
                            await blessguild(60, tguild)
                            if oguild:
                                await curse(7, str(tuser))
                                await curseteam(15, oteam)
                                await teamloss(oteam)
                                await curseguild(30, oguild)

                        embedVar = discord.Embed(title=f":zap: VICTORY\n**{t_card}** ",
                                                 description=f"Match concluded in {turn_total} turns\n**{t_card} says**\n`{t_win_description}`",
                                                 colour=0x1abc9c)
                        embedVar.set_author(name=f"{o_card} says:\n{o_lose_description}")
                        if int(gameClock[0]) == 0 and int(gameClock[1]) == 0:
                            embedVar.set_footer(text=f"Battle Time: {gameClock[2]} Seconds.")
                        elif int(gameClock[0]) == 0:
                            embedVar.set_footer(text=f"Battle Time: {gameClock[1]} Minutes and {gameClock[2]} Seconds.")
                        else:
                            embedVar.set_footer(
                                text=f"Battle Time: {gameClock[0]} Hours {gameClock[1]} Minutes and {gameClock[2]} Seconds.")
                        embedVar.add_field(name="Focus Count",
                                           value=f"**{o_card}**: {o_focus_count}\n**{t_card}**: {t_focus_count}")
                        if o_focus_count >= t_focus_count:
                            embedVar.add_field(name="Most Focused", value=f"**{o_card}**")
                        else:
                            embedVar.add_field(name="Most Focused", value=f"**{t_card}**")
                        await ctx.send(embed=embedVar)
                        continued = False
                        return
                    except Exception as ex:
                        trace = []
                        tb = ex.__traceback__
                        while tb is not None:
                            trace.append({
                                "filename": tb.tb_frame.f_code.co_filename,
                                "name": tb.tb_frame.f_code.co_name,
                                "lineno": tb.tb_lineno
                            })
                            tb = tb.tb_next
                        print(str({
                            'type': type(ex).__name__,
                            'message': str(ex),
                            'trace': trace
                        }))
                else:
                    # await private_channel.send(f":zap: {user2.mention} you win the match!")
                    wintime = time.asctime()
                    h_playtime = int(wintime[11:13])
                    m_playtime = int(wintime[14:16])
                    s_playtime = int(wintime[17:19])
                    gameClock = getTime(int(h_gametime), int(m_gametime), int(s_gametime), h_playtime, m_playtime,
                                        s_playtime)
                    if o_user['RIFT'] == 1:
                        response = db.updateUserNoFilter({'DISNAME': str(o_user['DISNAME'])}, {'$set': {'RIFT': 0}})

                    if randomized_battle:
                        embedVar = discord.Embed(title=f":zap: **{t_card}** wins the match!",
                                                 description=f"The game lasted {turn_total} rounds.\n**{t_card} says**\n`{t_win_description}`",
                                                 colour=0x1abc9c)
                        embedVar.set_author(name=f"{o_card}")
                        if int(gameClock[0]) == 0 and int(gameClock[1]) == 0:
                            embedVar.set_footer(text=f"Battle Time: {gameClock[2]} Seconds.")
                        elif int(gameClock[0]) == 0:
                            embedVar.set_footer(text=f"Battle Time: {gameClock[1]} Minutes and {gameClock[2]} Seconds.")
                        else:
                            embedVar.set_footer(
                                text=f"Battle Time: {gameClock[0]} Hours {gameClock[1]} Minutes and {gameClock[2]} Seconds.")

                        await ctx.send(embed=embedVar)
                        await discord.TextChannel.delete(private_channel, reason=None)
                        return
                    # BOSS LOSS
                    if mode in B_modes:
                        embedVar = discord.Embed(title=f":zap: **{t_card}** Wins...",
                                                 description=f"Match concluded in {turn_total} turns!\n{t_wins}",
                                                 colour=0x1abc9c)
                        embedVar.set_author(name=f"{o_card} says:\n{o_lose_description}",
                                            icon_url="https://res.cloudinary.com/dkcmq8o15/image/upload/v1620236432/PCG%20LOGOS%20AND%20RESOURCES/PCGBot_1.png")
                        if int(gameClock[0]) == 0 and int(gameClock[1]) == 0:
                            embedVar.set_footer(text=f"Battle Time: {gameClock[2]} Seconds.")
                        elif int(gameClock[0]) == 0:
                            embedVar.set_footer(text=f"Battle Time: {gameClock[1]} Minutes and {gameClock[2]} Seconds.")
                        else:
                            embedVar.set_footer(
                                text=f"Battle Time: {gameClock[0]} Hours {gameClock[1]} Minutes and {gameClock[2]} Seconds.")

                        embedVar = discord.Embed(title=f"PLAY AGAIN",
                                                 description=f"{t_card} was too powerful level up your character and try again...",
                                                 colour=0xe74c3c)
                        embedVar.set_author(name=f"You Lost...")
                        embedVar.add_field(name="Tips!",
                                           value="Equiping stronger **TITLES** and **ARMS** will make you character tougher in a fight!")
                        embedVar.set_footer(
                            text="The /shop is full of strong CARDS, TITLES and ARMS try different combinations! ")
                        await ctx.send(embed=embedVar)
                        await discord.TextChannel.delete(private_channel, reason=None)

                    # Play Again Buttons
                    play_again_buttons = [
                        manage_components.create_button(
                            style=ButtonStyle.blue,
                            label="Yes",
                            custom_id="Yes"
                        ),
                        manage_components.create_button(
                            style=ButtonStyle.red,
                            label="No",
                            custom_id="No"
                        )
                    ]
                    play_again_buttons_action_row = manage_components.create_actionrow(*play_again_buttons)
                    embedVar = discord.Embed(title=f":zap: **{t_card}** wins the match!\n\nWill you play again?",
                                             description=f"The game lasted {turn_total} rounds.\n**{t_card} says**\n`{t_win_description}`",
                                             colour=0x1abc9c)
                    if int(gameClock[0]) == 0 and int(gameClock[1]) == 0:
                        embedVar.set_footer(text=f"Battle Time: {gameClock[2]} Seconds.")
                    elif int(gameClock[0]) == 0:
                        embedVar.set_footer(text=f"Battle Time: {gameClock[1]} Minutes and {gameClock[2]} Seconds.")
                    else:
                        embedVar.set_footer(
                            text=f"Battle Time: {gameClock[0]} Hours {gameClock[1]} Minutes and {gameClock[2]} Seconds.")
                    await private_channel.send(embed=embedVar, components=[play_again_buttons_action_row])

                    if mode not in co_op_modes and mode != "Abyss":
                        play_again_selector = ctx.author
                    elif mode in co_op_modes and mode not in ai_co_op_modes:
                        play_again_selector = user2

                    def check(button_ctx):
                        return button_ctx.author == play_again_selector

                    try:
                        button_ctx: ComponentContext = await manage_components.wait_for_component(self.bot, components=[
                            play_again_buttons_action_row], timeout=120, check=check)

                        if button_ctx.custom_id == "No":
                            await discord.TextChannel.delete(private_channel, reason=None)
                            return

                        if button_ctx.custom_id == "Yes":
                            currentopponent = 0
                            continued = True
                    except asyncio.TimeoutError:
                        continued = False
                        await discord.TextChannel.delete(private_channel, reason=None)

            elif t_health <= 0 or t_max_health <= 0:
                if mode in PVP_MODES:

                    try:
                        uid = o_DID
                        ouser = await self.bot.fetch_user(uid)
                        tuser = await self.bot.fetch_user(uid)
                        wintime = time.asctime()
                        h_playtime = int(wintime[11:13])
                        m_playtime = int(wintime[14:16])
                        s_playtime = int(wintime[17:19])
                        gameClock = getTime(int(h_gametime), int(m_gametime), int(s_gametime), h_playtime, m_playtime,
                                            s_playtime)
                        ouid = sowner['DID']
                        sownerctx = await self.bot.fetch_user(ouid)
                        # response = await score(sownerctx, ouser)
                        await bless(8, str(ctx.author))
                        await curse(3, str(tuser))
                        if oguild:
                            await bless(15, str(ctx.author))
                            await blessteam(25, oteam)
                            await teamwin(oteam)
                            await blessguild(60, oguild)
                            if tguild:
                                await curse(7, str(tuser))
                                await curseteam(15, tteam)
                                await teamloss(tteam)
                                await curseguild(30, tguild)
                        match = await savematch(str(ouser), str(o_card), str(o_card_path), str(otitle['TITLE']),
                                                str(oarm['ARM']), "N/A", "PVP", o['EXCLUSIVE'])
                        embedVar = discord.Embed(title=f":zap: VICTORY\n**{o_card} says**\n{o_win_description}",
                                                 description=f"The match lasted {turn_total} turns", colour=0xe91e63)
                        embedVar.set_author(name=f"{t_card} says\n{t_lose_description}")
                        if int(gameClock[0]) == 0 and int(gameClock[1]) == 0:
                            embedVar.set_footer(text=f"Battle Time: {gameClock[2]} Seconds.")
                        elif int(gameClock[0]) == 0:
                            embedVar.set_footer(text=f"Battle Time: {gameClock[1]} Minutes and {gameClock[2]} Seconds.")
                        else:
                            embedVar.set_footer(
                                text=f"Battle Time: {gameClock[0]} Hours {gameClock[1]} Minutes and {gameClock[2]} Seconds.")
                        embedVar.add_field(name="Focus Count",
                                           value=f"**{o_card}**: {o_focus_count}\n**{t_card}**: {t_focus_count}")
                        if o_focus_count >= t_focus_count:
                            embedVar.add_field(name="Most Focused", value=f"**{o_card}**")
                        else:
                            embedVar.add_field(name="Most Focused", value=f"**{t_card}**")
                        await ctx.send(embed=embedVar)
                        continued = False
                        return
                    except Exception as ex:
                        trace = []
                        tb = ex.__traceback__
                        while tb is not None:
                            trace.append({
                                "filename": tb.tb_frame.f_code.co_filename,
                                "name": tb.tb_frame.f_code.co_name,
                                "lineno": tb.tb_lineno
                            })
                            tb = tb.tb_next
                        print(str({
                            'type': type(ex).__name__,
                            'message': str(ex),
                            'trace': trace
                        }))

                else:
                    tale_or_dungeon_only = ""
                    if mode in U_modes:
                        tale_or_dungeon_only = "Tales"
                    if mode in D_modes:
                        tale_or_dungeon_only = "Dungeon"

                    if randomized_battle:
                        bounty = abyss_scaling
                        drop_response = await specific_drops(str(o_user['DISNAME']), t_card, t_universe)
                        await bless(bounty, str(o_user['DISNAME']))
                        embedVar = discord.Embed(
                            title=f"VICTORY\n:coin: {bounty} Bounty Received!\n**{o_card} says**\n{o_win_description}",
                            description=f"The game lasted {turn_total} rounds.\n\n{drop_response}", colour=0xe91e63)
                        embedVar.set_author(name=f"{t_card} lost!")
                        await ctx.send(embed=embedVar)
                        await discord.TextChannel.delete(private_channel, reason=None)
                        return

                    if mode in B_modes:
                        uid = o_DID
                        ouser = await self.bot.fetch_user(uid)
                        wintime = time.asctime()
                        h_playtime = int(wintime[11:13])
                        m_playtime = int(wintime[14:16])
                        s_playtime = int(wintime[17:19])
                        gameClock = getTime(int(h_gametime), int(m_gametime), int(s_gametime), h_playtime, m_playtime,
                                            s_playtime)
                        drop_response = await bossdrops(ctx.author, t_universe)
                        match = await savematch(str(ouser), str(o_card), str(o_card_path), str(otitle['TITLE']),
                                                str(oarm['ARM']), "N/A", "Boss", o['EXCLUSIVE'])
                        if mode == "CBoss":
                            cmatch = await savematch(str(user2), str(c_card), str(c_card_path), str(ctitle['TITLE']),
                                                     str(carm['ARM']), "N/A", "Boss", c['EXCLUSIVE'])
                            cfambank = await blessfamily(15000, cfam)
                            cteambank = await blessteam(15000, cteam)
                            cpetlogger = await petlevel(cpet_name, user2)
                            ccardlogger = await cardlevel(c_card, user2, c_universe, selected_universe, "Dungeon")
                            await bless(50, str(user2))
                            embedVar = discord.Embed(
                                title=f":zap: **{o_card}** and **{c_card}**defeated the {t_universe} Boss {t_card}!",
                                description=f"Match concluded in {turn_total} turns!\n\n{drop_response} + :coin: 15,000!\n\n{c_user['NAME']} got :coin: 10,000!\n{t_concede}",
                                colour=0xe91e63)
                        else:
                            embedVar = discord.Embed(
                                title=f":zap: **{o_card}** defeated the {t_universe} Boss {t_card}!",
                                description=f"Match concluded in {turn_total} turns!\n\n{drop_response} + :coin: 25,000!",
                                colour=0xe91e63)

                        await bless(25000, str(ctx.author))
                        ofambank = await blessfamily(15000, ofam)
                        oteambank = await blessteam(15000, oteam)
                        petlogger = await petlevel(opet_name, ouser)
                        cardlogger = await cardlevel(o_card, ouser, o_universe, selected_universe, "Dungeon")

                        if crestsearch:
                            await blessguild(25000, oguild['GNAME'])
                            await movecrest(selected_universe, oguild['GNAME'])
                            embedVar.add_field(name=f"{selected_universe} CREST CLAIMED!",
                                               value=f"{oguild['GNAME']} earned the {selected_universe} **Crest**")
                        embedVar.set_author(name=f"{t_card} lost",
                                            icon_url="https://res.cloudinary.com/dkcmq8o15/image/upload/v1620236432/PCG%20LOGOS%20AND%20RESOURCES/PCGBot_1.png")
                        if int(gameClock[0]) == 0 and int(gameClock[1]) == 0:
                            embedVar.set_footer(text=f"Battle Time: {gameClock[2]} Seconds.")
                        elif int(gameClock[0]) == 0:
                            embedVar.set_footer(text=f"Battle Time: {gameClock[1]} Minutes and {gameClock[2]} Seconds.")
                        else:
                            embedVar.set_footer(
                                text=f"Battle Time: {gameClock[0]} Hours {gameClock[1]} Minutes and {gameClock[2]} Seconds.")
                        await ctx.send(embed=embedVar)

                        embedVar = discord.Embed(title=f"BOSS DEFEATED",
                                                 description=f"Boss Victories are added to your player profile! Defeat {t_card} again to earn exotic loot!",
                                                 colour=0xe91e63)
                        embedVar.set_author(name=f"Congratulations You Defeated {t_card}!")
                        embedVar.add_field(name="Tips!", value=f"Run /lookup to view your Boss Souls")
                        embedVar.set_footer(
                            text="Bosses have a chance to drop :coin:, ARMS, TITLES, and even BOSS CARDS:eyes:")
                        await ctx.send(embed=embedVar)

                        if t_card not in sowner['BOSS_WINS']:
                            await bless(40000, str(ctx.author))
                            if mode == "CBoss":
                                await bless(40000, str(user2))
                            query = {'DISNAME': sowner['DISNAME']}
                            new_query = {'$addToSet': {'BOSS_WINS': t_card}}
                            resp = db.updateUserNoFilter(query, new_query)

                        await discord.TextChannel.delete(private_channel, reason=None)

                    elif mode not in B_modes:
                        uid = o_DID
                        ouser = await self.bot.fetch_user(uid)
                        wintime = time.asctime()
                        h_playtime = int(wintime[11:13])
                        m_playtime = int(wintime[14:16])
                        s_playtime = int(wintime[17:19])
                        gameClock = getTime(int(h_gametime), int(m_gametime), int(s_gametime), h_playtime, m_playtime,
                                            s_playtime)
                        if mode in D_modes:
                            teambank = await blessteam(100, oteam)
                        else:
                            teambank = await blessteam(50, oteam)
                        if o_user['RIFT'] == 1:
                            response = db.updateUserNoFilter({'DISNAME': str(o_user['DISNAME'])}, {'$set': {'RIFT': 0}})

                        if mode in D_modes:
                            drop_response = await dungeondrops(ctx.author, selected_universe, currentopponent)
                        elif mode in U_modes:
                            drop_response = await drops(ctx.author, selected_universe, currentopponent)
                        if mode in D_modes:
                            ofambank = await blessfamily(100, ofam)
                        else:
                            ofambank = await blessfamily(50, ofam)
                        match = await savematch(str(ouser), str(o_card), str(o_card_path), str(otitle['TITLE']),
                                                str(oarm['ARM']), str(selected_universe), tale_or_dungeon_only,
                                                o['EXCLUSIVE'])
                        questlogger = await quest(ouser, t_card, tale_or_dungeon_only)
                        destinylogger = await destiny(ouser, t_card, tale_or_dungeon_only)
                        petlogger = await petlevel(opet_name, ouser)
                        cardlogger = await cardlevel(o_card, ouser, o_universe, selected_universe, tale_or_dungeon_only)
                        if questlogger:
                            await private_channel.send(questlogger)
                        if destinylogger:
                            await private_channel.send(destinylogger)

                        if currentopponent != (total_legends):
                            embedVar = discord.Embed(title=f"VICTORY\n**{o_card} says**\n{o_win_description}",
                                                     description=f"The game lasted {turn_total} rounds.\n\n{drop_response}",
                                                     colour=0xe91e63)
                            if mode in D_modes:
                                if crestsearch:
                                    await blessguild(1000, oguild['GNAME'])
                                    embedVar.add_field(name=f"{selected_universe} CREST SEARCH!",
                                                       value=f"{oguild['GNAME']} earned 1,000 :coin:")
                            embedVar.set_author(name=f"{t_card} lost!")
                            await private_channel.send(embed=embedVar)

                            currentopponent = currentopponent + 1
                            continued = True

                        if currentopponent == (total_legends):
                            if mode in D_modes:
                                embedVar = discord.Embed(title=f"DUNGEON CONQUERED",
                                                         description=f"Universe {selected_universe} has been conquered\n\n{drop_response}",
                                                         colour=0xe91e63)
                                embedVar.set_author(name=f"New Universes have been unlocked to explore!")
                                if crestsearch:
                                    await blessguild(25000, oguild['GNAME'])
                                    await movecrest(selected_universe, oguild['GNAME'])
                                    embedVar.add_field(name=f"{selected_universe} CREST CLAIMED!",
                                                       value=f"{oguild['GNAME']} earned the {selected_universe} **Crest**")
                                embedVar.add_field(name="Additional Reward",
                                                   value=f"You earned additional rewards in your vault! Take a look.")
                                embedVar.set_footer(text="The /shop has been updated with new CARDS, TITLES and ARMS!")
                                upload_query = {'DISNAME': str(ctx.author)}
                                new_upload_query = {'$addToSet': {'DUNGEONS': selected_universe}}
                                r = db.updateUserNoFilter(upload_query, new_upload_query)
                                if selected_universe in completed_universes:
                                    await bless(5000, ctx.author)
                                    # await bless(125, user2)
                                    await ctx.send(embed=embedVar)
                                    await ctx.send(
                                        f"You were awarded :coin: 5,000 for completing the {selected_universe} Dungeon again!")
                                else:
                                    await bless(15000, ctx.author)
                                    await ctx.send(embed=embedVar)
                                    await ctx.send(
                                        f"You were awarded :coin: 15,000 for completing the {selected_universe} Dungeon! ")
                                continued = False
                                await discord.TextChannel.delete(private_channel, reason=None)
                            elif mode in U_modes:
                                embedVar = discord.Embed(title=f"UNIVERSE CONQUERED",
                                                         description=f"Universe {selected_universe} has been conquered\n\n{drop_response}",
                                                         colour=0xe91e63)
                                embedVar.set_author(name=f"New Universes have been unlocked to explore!")
                                embedVar.add_field(name="Additional Reward",
                                                   value=f"You earned additional rewards in your vault! Take a look.")
                                embedVar.set_footer(text="The /shop has been updated with new CARDS, TITLES and ARMS!")
                                upload_query = {'DISNAME': str(ctx.author)}
                                new_upload_query = {'$addToSet': {'CROWN_TALES': selected_universe}}
                                r = db.updateUserNoFilter(upload_query, new_upload_query)
                                if selected_universe in completed_universes:
                                    await bless(1000, ctx.author)
                                    await ctx.send(embed=embedVar)
                                    await ctx.send(
                                        f"You were awarded :coin: 1,000 for completing the {selected_universe} Tale again!")
                                else:
                                    await bless(5000, ctx.author)
                                    await ctx.send(embed=embedVar)
                                    await ctx.send(
                                        f"You were awarded :coin: 5,000 for completing the {selected_universe} Tale! ")
                                continued = False
                                await discord.TextChannel.delete(private_channel, reason=None)

    except Exception as ex:
        trace = []
        tb = ex.__traceback__
        while tb is not None:
            trace.append({
                "filename": tb.tb_frame.f_code.co_filename,
                "name": tb.tb_frame.f_code.co_name,
                "lineno": tb.tb_lineno
            })
            tb = tb.tb_next
        print(str({
            'PLAYER': str(ctx.author),
            'type': type(ex).__name__,
            'message': str(ex),
            'trace': trace
        }))
        return


async def save_spot(self, ctx, universe, mode, currentopponent):
    user = {"DISNAME": str(ctx.author)}
    query = {"$addToSet": {"SAVE_SPOT": {"UNIVERSE": str(universe['TITLE']), "MODE": str(mode), "CURRENTOPPONENT": currentopponent}}}
    response = db.updateUserNoFilter(user, query)
    return


def update_arm_durability(self, vault, arm):
    try:
        for a in vault['ARMS']:
            if a['ARM'] == str(arm['ARM']):
                current_durability = a['DUR']
                if current_durability == 1:
                    query = {'OWNER': str(vault['OWNER'])}
                    update_query = {'$pull': {'ARMS': {'ARM': str(arm['ARM'])}}}
                    resp = db.updateVaultNoFilter(query, update_query)

                    user_query = {'DISNAME': str(vault['OWNER'])}
                    user_update_query = {'$set': {'ARM': 'Stock'}}
                    user_resp = db.updateUserNoFilter(user_query, user_update_query)
                    return {"MESSAGE": f"**{arm['ARM']}** has broken after losing all ⚒️ durability. Your arm will be **Stock** after your next match."}
                else:
                    query = {'OWNER': str(vault['OWNER'])}
                    update_query = {'$inc': {'ARMS.$[type].' + 'DUR': -1}}
                    filter_query = [{'type.' + "ARM": str(arm['ARM'])}]
                    resp = db.updateVault(query, update_query, filter_query)
                    return {"MESSAGE": False}
        return {"MESSAGE": False}
    except Exception as ex:
        trace = []
        tb = ex.__traceback__
        while tb is not None:
            trace.append({
                "filename": tb.tb_frame.f_code.co_filename,
                "name": tb.tb_frame.f_code.co_name,
                "lineno": tb.tb_lineno
            })
            tb = tb.tb_next
        print(str({
            'type': type(ex).__name__,
            'message': str(ex),
            'trace': trace
        }))
        return
        

def update_save_spot(self, ctx, saved_spots, selected_universe, modes):
    currentopponent = 0
    if saved_spots:
        for save in saved_spots:
            if save['UNIVERSE'] == selected_universe and save['MODE'] in modes:
                currentopponent = save['CURRENTOPPONENT']
                query = {'DISNAME': str(ctx.author)}
                update_query = {'$pull': {'SAVE_SPOT': {"UNIVERSE": selected_universe}}}
                resp = db.updateUserNoFilter(query, update_query)
    return currentopponent


def health_and_stamina_bars(health, stamina, max_health, max_stamina, resolved):
    health_response = ""
    stamina_response = ""

    if health >= max_health:
        health_response = f"❤️❤️❤️❤️❤️"
    if health >= (max_health * .80) and health < max_health:
        health_response = f"❤️❤️❤️❤️💔"
    if health >= (max_health * .60) and health < (max_health * .80):
        health_response = f"❤️❤️❤️💔💔"
    if health >= (max_health * .40) and health < (max_health * .60):
        health_response = f"❤️❤️💔💔💔"
    if health >= (max_health * .20) and health < (max_health * .40):
        health_response = f"❤️💔💔💔💔"
    if health >= 0 and health <= (max_health * .20):
        health_response = f"💔💔💔💔💔"
    if resolved:
        if stamina >= max_stamina:
            stamina_response = f"⚡⚡⚡⚡⚡"
        if stamina >= (max_stamina * .80) and stamina < max_stamina:
            stamina_response = f"⚡⚡⚡⚡💫"
        if stamina >= (max_stamina * .60) and stamina < (max_stamina * .80):
            stamina_response = f"⚡⚡⚡💫💫"
        if stamina >= (max_stamina * .40) and stamina < (max_stamina * .60):
            stamina_response = f"⚡⚡💫💫💫"
        if stamina >= (max_stamina * .10) and stamina < (max_stamina * .40):
            stamina_response = f"⚡💫💫💫💫"
        if stamina >= 0 and stamina <= (max_stamina * .10):
            stamina_response = f"💫💫💫💫💫"
    else:
        if stamina >= max_stamina:
            stamina_response = f"🌀🌀🌀🌀🌀"
        if stamina >= (max_stamina * .80) and stamina < max_stamina:
            stamina_response = f"🌀🌀🌀🌀⚫"
        if stamina >= (max_stamina * .60) and stamina < (max_stamina * .80):
            stamina_response = f"🌀🌀🌀⚫⚫"
        if stamina >= (max_stamina * .40) and stamina < (max_stamina * .60):
            stamina_response = f"🌀🌀⚫⚫⚫"
        if stamina >= (max_stamina * .10) and stamina < (max_stamina * .40):
            stamina_response = f"🌀⚫⚫⚫⚫"
        if stamina >= 0 and stamina <= (max_stamina * .10):
            stamina_response = f"⚫⚫⚫⚫⚫"

    return {"HEALTH": health_response, "STAMINA": stamina_response}


def existing_channel_check(self, ctx):
    try:
        text_channel_list = []
        channel_exists = False
        name_check = str(ctx.author).split("#", 1)[0]
        for guild in self.bot.guilds:
            for channel in guild.text_channels:
                text_channel_list.append(channel.name)
        for text_channel in text_channel_list:

            if text_channel.startswith(name_check.lower()):
                channel_exists = True

        if channel_exists:
            return True
        else:
            return False
    except Exception as ex:
        trace = []
        tb = ex.__traceback__
        while tb is not None:
            trace.append({
                "filename": tb.tb_frame.f_code.co_filename,
                "name": tb.tb_frame.f_code.co_name,
                "lineno": tb.tb_lineno
            })
            tb = tb.tb_next
        print(str({
            'type': type(ex).__name__,
            'message': str(ex),
            'trace': trace
        }))
        return


def getTime(hgame, mgame, sgame, hnow, mnow, snow):
    hoursPassed = hnow - hgame
    minutesPassed = mnow - mgame
    secondsPassed = snow - sgame
    if hoursPassed > 0:
        minutesPassed = mnow
        if minutesPassed > 0:
            secondsPassed = snow
        else:
            secondsPassed = snow - sgame
    else:
        minutesPassed = mnow - mgame
        if minutesPassed > 0:
            secondsPassed = snow
        else:
            secondsPassed = snow - sgame
    gameTime = str(hoursPassed) + str(minutesPassed) + str(secondsPassed)
    return gameTime


async def bless(amount, user):
    blessAmount = amount
    posBlessAmount = 0 + abs(int(blessAmount))
    query = {'DISNAME': str(user)}
    vaultOwner = db.queryUser(query)
    if vaultOwner:
        vault = db.queryVault({'OWNER': vaultOwner['DISNAME']})
        update_query = {"$inc": {'BALANCE': posBlessAmount}}
        db.updateVaultNoFilter(vault, update_query)
    else:
        print("cant find vault")


async def blessteam(amount, team):
    blessAmount = amount
    posBlessAmount = 0 + abs(int(blessAmount))
    query = {'TNAME': str(team)}
    team_data = db.queryTeam(query)
    if team_data:
        guild_mult = 1.0
        if team_data['GUILD'] != 'PCG':
            guild_query = {'GNAME': str(team_data['GUILD'])}
            guild_info = db.queryGuildAlt(guild_query)
            guild_hall = guild_info['HALL']
            hall_query = {'HALL': str(guild_hall)}
            hall_info = db.queryHall(hall_query)
            guild_mult = hall_info['SPLIT']
            blessAmount = amount * guild_mult
            posBlessAmount = 0 + abs(int(blessAmount))
        update_query = {"$inc": {'BANK': posBlessAmount}}
        db.updateTeam(query, update_query)


async def blessfamily(amount, family):
    blessAmount = amount
    posBlessAmount = 0 + abs(int(blessAmount))
    query = {'HEAD': str(family)}
    family_data = db.queryFamily(query)
    if family_data:
        house = family_data['HOUSE']
        house_data = db.queryHouse({'HOUSE': house})
        multiplier = house_data['MULT']
        posBlessAmount = posBlessAmount * multiplier
        update_query = {"$inc": {'BANK': posBlessAmount}}
        db.updateFamily(query, update_query)


async def blessguild(amount, guild):
    try:
        blessAmount = amount
        posBlessAmount = 0 + abs(int(blessAmount))
        query = {'GNAME': str(guild)}
        guild_data = db.queryGuildAlt(query)
        if guild_data:
            hall = guild_data['HALL']
            hall_data = db.queryHall({'HALL': hall})
            multiplier = hall_data['MULT']
            posBlessAmount = posBlessAmount * multiplier
            update_query = {"$inc": {'BANK': int(posBlessAmount)}}
            db.updateGuildAlt(query, update_query)
        else:
            print("Cannot find guild")
    except Exception as ex:
        trace = []
        tb = ex.__traceback__
        while tb is not None:
            trace.append({
                "filename": tb.tb_frame.f_code.co_filename,
                "name": tb.tb_frame.f_code.co_name,
                "lineno": tb.tb_lineno
            })
            tb = tb.tb_next
        print(str({
            'type': type(ex).__name__,
            'message': str(ex),
            'trace': trace
        }))


async def curse(amount, user):
    curseAmount = amount
    negCurseAmount = 0 - abs(int(curseAmount))
    query = {'DISNAME': str(user)}
    vaultOwner = db.queryUser(query)
    if vaultOwner:
        vault = db.queryVault({'OWNER': vaultOwner['DISNAME']})
        update_query = {"$inc": {'BALANCE': int(negCurseAmount)}}
        db.updateVaultNoFilter(vault, update_query)
    else:
        print("cant find vault")


async def curseteam(amount, team):
    curseAmount = amount
    negCurseAmount = 0 - abs(int(curseAmount))
    query = {'TNAME': str(team)}
    team_data = db.queryTeam(query)
    if team_data:
        update_query = {"$inc": {'BANK': int(negCurseAmount)}}
        db.updateTeam(query, update_query)
    else:
        print("cant find team")


async def curseguild(amount, guild):
    curseAmount = amount
    negCurseAmount = 0 - abs(int(curseAmount))
    query = {'GNAME': str(guild)}
    guild_data = db.queryGuildAlt(query)
    if guild_data:
        update_query = {"$inc": {'BANK': int(negCurseAmount)}}
        db.updateGuildAlt(query, update_query)
    else:
        print("cant find guild")


async def teamwin(team):
    query = {'TNAME': str(team)}
    team_data = db.queryTeam(query)
    if team_data:
        update_query = {"$inc": {'SCRIM_WINS': 1}}
        db.updateTeam(query, update_query)
    else:
        print("Cannot find Team")


async def teamloss(team):
    query = {'TNAME': str(team)}
    team_data = db.queryTeam(query)
    if team_data:
        update_query = {"$inc": {'SCRIM_LOSSES': 1}}
        db.updateTeam(query, update_query)
    else:
        print("Cannot find Team")


async def movecrest(universe, guild):
    guild_name = guild
    universe_name = universe
    guild_query = {'GNAME': guild_name}
    guild_info = db.queryGuildAlt(guild_query)
    if guild_info:
        alt_query = {'FOUNDER': guild_info['FOUNDER']}
        crest_list = guild_info['CREST']
        pull_query = {'$pull': {'CREST': universe_name}}
        pull = db.updateManyGuild(pull_query)
        update_query = {'$push': {'CREST': universe_name}}
        update = db.updateGuild(alt_query, update_query)
        universe_guild = db.updateUniverse({'TITLE': universe_name}, {'$set': {'GUILD': guild_name}})
    else:
        print("Guild not found: Crest")


async def drops(player, universe, matchcount):
    all_available_drop_cards = db.queryDropCards(universe)
    all_available_drop_titles = db.queryDropTitles(universe)
    all_available_drop_arms = db.queryDropArms(universe)
    all_available_drop_pets = db.queryDropPets(universe)
    vault_query = {'OWNER': str(player)}
    vault = db.queryVault(vault_query)
    owned_arms = []
    for arm in vault['ARMS']:
        owned_arms.append(arm['ARM'])

    user_query = {'DISNAME': str(player)}
    user = db.queryUser(user_query)
    rebirth = user['REBIRTH']
    owned_destinies = []
    for destiny in vault['DESTINY']:
        owned_destinies.append(destiny['NAME'])

    cards = []
    titles = []
    arms = []
    pets = []

    if all_available_drop_cards:
        for card in all_available_drop_cards:
            cards.append(card['NAME'])
        c = len(cards) - 1
        rand_card = random.randint(0, c)

    if all_available_drop_titles:
        for title in all_available_drop_titles:
            titles.append(title['TITLE'])
        t = len(titles) - 1
        rand_title = random.randint(0, t)

    if all_available_drop_arms:
        for arm in all_available_drop_arms:
            arms.append(arm['ARM'])
        a = len(arms) - 1
        rand_arm = random.randint(0, a)

    if all_available_drop_pets:
        for pet in all_available_drop_pets:
            pets.append(pet['PET'])
        p = len(pets) - 1
        rand_pet = random.randint(0, p)    
    
    gold_drop = 150  # 150
    rift_rate = 175  # 175
    title_drop = 190  # 190
    arm_drop = 195  # 195
    pet_drop = 198  # 198
    card_drop = 200  # 200
    drop_rate = random.randint((0 + (rebirth * rebirth) * (1 + rebirth)), 200)
    durability = random.randint(1, 45)

    try:
        if drop_rate <= gold_drop:
            bless_amount = (25 + (5 * matchcount)) * (1 + rebirth)
            await bless(bless_amount, player)
            return f"You earned :coin: **{bless_amount}**!"
        elif drop_rate <= rift_rate and drop_rate > gold_drop:
            response = db.updateUserNoFilter(user_query, {'$set': {'RIFT': 1}})
            bless_amount = (40 + (5 * matchcount)) * (1 + rebirth)
            await bless(bless_amount, player)
            return f"A RIFT HAS OPENED! You have earned :coin: **{bless_amount}**!"
        elif drop_rate <= title_drop and drop_rate > gold_drop:
            if all_available_drop_titles:
                if len(vault['TITLES']) >= 150:
                    await bless(150, player)
                    return f"You're maxed out on Titles! You earned :coin: 300 instead!"
                response = db.updateVaultNoFilter(vault_query, {'$addToSet': {'TITLES': str(titles[rand_title])}})
                return f"You earned _Title:_ **{titles[rand_title]}**!"
            else:
                await bless(150, player)
                return f"You earned :coin: **150**!"
        elif drop_rate <= arm_drop and drop_rate > title_drop:
            if all_available_drop_arms:
                if len(vault['ARMS']) >= 150:
                    await bless(150, player)
                    return f"You're maxed out on Arms! You earned :coin: 300 instead!"
                if str(arms[rand_arm]) in owned_arms:
                    await bless(150, player)
                    return f"You already own **{arms[rand_arm]}**! You earn :coin: **150**."
                else:
                    response = db.updateVaultNoFilter(vault_query, {'$addToSet': {'ARMS': {'ARM': str(arms[rand_arm]), 'DUR': durability}}})
                    return f"You earned _Arm:_ **{arms[rand_arm]}** with ⚒️**{str(durability)}**!"
            else:
                await bless(150, player)
                return f"You earned :coin: **150**!"
        elif drop_rate <= pet_drop and drop_rate > arm_drop:
            if all_available_drop_pets:
                if len(vault['PETS']) >= 150:
                    await bless(150, player)
                    return f"You're maxed out on Pets! You earned :coin: 300 instead!"

                pet_owned = False
                for p in vault['PETS']:
                    if p['NAME'] == pets[rand_pet]:
                        pet_owned = True

                if pet_owned:

                    await bless(150, player)
                    return f"You own _Pet:_ **{pets[rand_pet]}**! Received extra + :coin: 150!"
                else:

                    selected_pet = db.queryPet({'PET': pets[rand_pet]})
                    pet_ability_name = list(selected_pet['ABILITIES'][0].keys())[0]
                    pet_ability_power = list(selected_pet['ABILITIES'][0].values())[0]
                    pet_ability_type = list(selected_pet['ABILITIES'][0].values())[1]

                    response = db.updateVaultNoFilter(vault_query, {'$addToSet': {
                        'PETS': {'NAME': selected_pet['PET'], 'LVL': 0, 'EXP': 0, pet_ability_name: int(pet_ability_power),
                                'TYPE': pet_ability_type, 'BOND': 0, 'BONDEXP': 0, 'PATH': selected_pet['PATH']}}})
                    await bless(50, player)
                    return f"You earned _Pet:_ **{pets[rand_pet]}** + :coin: 50!"
            else:
                await bless(150, player)
                return f"You earned :coin: **150**!"
        elif drop_rate <= card_drop and drop_rate > pet_drop:
            if all_available_drop_cards:
                if len(vault['CARDS']) >= 150:
                    await bless(150, player)
                    return f"You're maxed out on Cards! You earned :coin: 300 instead!"

                # Check if already owned
                card_owned = False
                for c in vault['CARD_LEVELS']:
                    if c['CARD'] == str(cards[rand_card]):
                        card_owned = True

                if card_owned:
                    await cardlevel(cards[rand_card], player, universe, universe, "Tales")
                    response = db.updateVaultNoFilter(vault_query, {'$addToSet': {'CARDS': str(cards[rand_card])}})
                    message = ""
                    await bless(150, player)
                    return f"You earned EXP for _Card:_ **{cards[rand_card]}** + :coin: 150!\n{message}"
                else:

                    card_data = db.queryCard({'NAME': str(cards[rand_card])})
                    uni = db.queryUniverse({'TITLE': card_data['UNIVERSE']})
                    tier = uni['TIER']
                    update_query = {'$addToSet': {
                        'CARD_LEVELS': {'CARD': str(cards[rand_card]), 'LVL': 0, 'TIER': int(tier), 'EXP': 0, 'HLT': 0,
                                        'ATK': 0, 'DEF': 0, 'AP': 0}}}
                    response = db.updateVaultNoFilter(vault_query, {'$addToSet': {'CARDS': str(cards[rand_card])}})
                    r = db.updateVaultNoFilter(vault_query, update_query)
                    message = ""
                    for destiny in d.destiny:
                        if cards[rand_card] in destiny["USE_CARDS"] and destiny['NAME'] not in owned_destinies:
                            db.updateVaultNoFilter(vault_query, {'$addToSet': {'DESTINY': destiny}})
                            message = f"**DESTINY AWAITS!**\n**{destiny['NAME']}** has been added to your vault."

                    await bless(50, player)
                    return f"You earned _Card:_ **{cards[rand_card]}** + :coin: 50!\n{message}"
            else:
                await bless(250, player)
                return f"You earned :coin: **250**!"
    except Exception as ex:
        trace = []
        tb = ex.__traceback__
        while tb is not None:
            trace.append({
                "filename": tb.tb_frame.f_code.co_filename,
                "name": tb.tb_frame.f_code.co_name,
                "lineno": tb.tb_lineno
            })
            tb = tb.tb_next
        print(str({
            'type': type(ex).__name__,
            'message': str(ex),
            'trace': trace
        }))
        await ctx.send(
            "There's an issue with the Drops. Please use /ff to close this channel and start anew. Alert support.")
        return


async def specific_drops(player, card, universe):
    vault_query = {'OWNER': str(player)}
    vault = db.queryVault(vault_query)
    user_query = {'DISNAME': str(player)}
    user = db.queryUser(user_query)
    rebirth = user['REBIRTH']
    owned_destinies = []
    for destiny in vault['DESTINY']:
        owned_destinies.append(destiny['NAME'])

    try:
        if len(vault['CARDS']) >= 150:
            await bless(150, player)
            return f"You're maxed out on Cards! You earned :coin: 500 instead!"
        # Check if already owned
        card_owned = False
        for c in vault['CARD_LEVELS']:
            if c['CARD'] == str(card):
                card_owned = True

        if card_owned:
            await cardlevel(card, player, universe, universe, "Tales")
            message = ""
            await bless(150, player)
            return f"You earned EXP for _Card:_ **{card}** + :coin: 150 in addition to the card bounty!!"
        else:
            card_data = db.queryCard({'NAME': str(card)})
            uni = db.queryUniverse({'TITLE': card_data['UNIVERSE']})
            tier = uni['TIER']
            update_query = {'$addToSet': {
                'CARD_LEVELS': {'CARD': str(card), 'LVL': 0, 'TIER': int(tier), 'EXP': 0, 'HLT': 0, 'ATK': 0, 'DEF': 0,
                                'AP': 0}}}
            response = db.updateVaultNoFilter(vault_query, {'$addToSet': {'CARDS': str(card)}})
            r = db.updateVaultNoFilter(vault_query, update_query)
            message = ""
            for destiny in d.destiny:
                if card in destiny["USE_CARDS"] and destiny['NAME'] not in owned_destinies:
                    db.updateVaultNoFilter(vault_query, {'$addToSet': {'DESTINY': destiny}})
                    message = f"**DESTINY AWAITS!**\n**{destiny['NAME']}** has been added to your vault."

            await bless(50, player)
            return f"You earned _Card:_ **{card}**!\n{message}"
    except Exception as ex:
        trace = []
        tb = ex.__traceback__
        while tb is not None:
            trace.append({
                "filename": tb.tb_frame.f_code.co_filename,
                "name": tb.tb_frame.f_code.co_name,
                "lineno": tb.tb_lineno
            })
            tb = tb.tb_next
        print(str({
            'type': type(ex).__name__,
            'message': str(ex),
            'trace': trace
        }))
        await ctx.send(
            "There's an issue with the Drops. Please use /ff to close this channel and start anew. Alert support.")
        return


async def dungeondrops(player, universe, matchcount):
    all_available_drop_cards = db.queryExclusiveDropCards(universe)
    all_available_drop_titles = db.queryExclusiveDropTitles(universe)
    all_available_drop_arms = db.queryExclusiveDropArms(universe)
    all_available_drop_pets = db.queryExclusiveDropPets(universe)
    vault_query = {'OWNER': str(player)}
    vault = db.queryVault(vault_query)
    owned_arms = []
    for arm in vault['ARMS']:
        owned_arms.append(arm['ARM'])

    user_query = {'DISNAME': str(player)}
    user = db.queryUser(user_query)
    rebirth = user['REBIRTH']
    owned_destinies = []
    for destiny in vault['DESTINY']:
        owned_destinies.append(destiny['NAME'])

    cards = []
    titles = []
    arms = []
    pets = []

    for card in all_available_drop_cards:
        cards.append(card['NAME'])

    for title in all_available_drop_titles:
        titles.append(title['TITLE'])

    for arm in all_available_drop_arms:
        arms.append(arm['ARM'])

    for pet in all_available_drop_pets:
        pets.append(pet['PET'])

    c = len(cards) - 1
    t = len(titles) - 1
    a = len(arms) - 1
    p = len(pets) - 1

    rand_card = random.randint(0, c)
    rand_title = random.randint(0, t)
    rand_arm = random.randint(0, a)
    rand_pet = random.randint(0, p)

    gold_drop = 300  #
    rift_rate = 350  #
    title_drop = 380  #
    arm_drop = 390  #
    pet_drop = 396  #
    card_drop = 400  #
    drop_rate = random.randint((0 + (rebirth * rebirth) * (1 + rebirth)), 400)
    durability = random.randint(10, 75)

    try:
        if drop_rate <= gold_drop:
            bless_amount = (150 + (5 * matchcount)) * (1 + rebirth)
            await bless(bless_amount, player)
            return f"You earned :coin: **{bless_amount}**!"
        elif drop_rate <= rift_rate and drop_rate > gold_drop:
            response = db.updateUserNoFilter(user_query, {'$set': {'RIFT': 1}})
            bless_amount = (150 + (5 * matchcount)) * (1 + rebirth)
            await bless(bless_amount, player)
            return f"A RIFT HAS OPENED! You have earned :coin: **{bless_amount}**!"
        elif drop_rate <= title_drop and drop_rate > gold_drop:
            if len(vault['TITLES']) >= 150:
                await bless(1500, player)
                return f"You're maxed out on Titles! You earned :coin: 1500 instead!"
            response = db.updateVaultNoFilter(vault_query, {'$addToSet': {'TITLES': str(titles[rand_title])}})
            return f"You earned _Title:_ **{titles[rand_title]}**!"
        elif drop_rate <= arm_drop and drop_rate > title_drop:
            if len(vault['ARMS']) >= 150:
                await bless(1500, player)
                return f"You're maxed out on Arms! You earned :coin: 1500 instead!"
            if str(arms[rand_arm]) in owned_arms:
                await bless(1250, player)
                return f"You already own **{arms[rand_arm]}**! You earn :coin: **1250**."
            else:
                response = db.updateVaultNoFilter(vault_query, {'$addToSet': {'ARMS': {'ARM': str(arms[rand_arm]), 'DUR': durability}}})
                return f"You earned _Arm:_ **{arms[rand_arm]}** with ⚒️**{str(durability)}**!"
        elif drop_rate <= pet_drop and drop_rate > arm_drop:
            if len(vault['PETS']) >= 150:
                await bless(3000, player)
                return f"You're maxed out on Pets! You earned :coin: 3000 instead!"
            pet_owned = False
            for p in vault['PETS']:
                if p['NAME'] == pets[rand_pet]:
                    pet_owned = True

            if pet_owned:
                await bless(1800, player)
                return f"You own _Pet:_ **{pets[rand_pet]}**! Received extra + :coin: 1800!"
            else:
                selected_pet = db.queryPet({'PET': pets[rand_pet]})
                pet_ability_name = list(selected_pet['ABILITIES'][0].keys())[0]
                pet_ability_power = list(selected_pet['ABILITIES'][0].values())[0]
                pet_ability_type = list(selected_pet['ABILITIES'][0].values())[1]

                response = db.updateVaultNoFilter(vault_query, {'$addToSet': {
                    'PETS': {'NAME': selected_pet['PET'], 'LVL': 0, 'EXP': 0, pet_ability_name: int(pet_ability_power),
                             'TYPE': pet_ability_type, 'BOND': 0, 'BONDEXP': 0, 'PATH': selected_pet['PATH']}}})
                await bless(100, player)
                return f"You earned _Pet:_ **{pets[rand_pet]}** + :coin: 100!"
        elif drop_rate <= card_drop and drop_rate > pet_drop:
            if len(vault['CARDS']) >= 150:
                await bless(5000, player)
                return f"You're maxed out on Cards! You earned :coin: 5000 instead!"
            card_owned = False
            for c in vault['CARD_LEVELS']:
                if c['CARD'] == cards[rand_card]:
                    card_owned = True

            if card_owned:
                await cardlevel(cards[rand_card], player, universe, universe, "Dungeon")
                response = db.updateVaultNoFilter(vault_query, {'$addToSet': {'CARDS': str(cards[rand_card])}})
                message = ""
                await bless(2500, player)
                return f"You earned {exp_gain} EXP for _Card:_ **{cards[rand_card]}** + :coin: 2500!\n{message}"
            else:
                card_data = db.queryCard({'NAME': str(cards[rand_card])})
                uni = db.queryUniverse({'TITLE': card_data['UNIVERSE']})
                tier = uni['TIER']
                update_query = {'$addToSet': {
                    'CARD_LEVELS': {'CARD': str(cards[rand_card]), 'LVL': 0, 'TIER': int(tier), 'EXP': 0, 'HLT': 0,
                                    'ATK': 0, 'DEF': 0, 'AP': 0}}}
                response = db.updateVaultNoFilter(vault_query, {'$addToSet': {'CARDS': str(cards[rand_card])}})
                r = db.updateVaultNoFilter(vault_query, update_query)
                message = ""
                for destiny in d.destiny:
                    if cards[rand_card] in destiny["USE_CARDS"] and destiny['NAME'] not in owned_destinies:
                        db.updateVaultNoFilter(vault_query, {'$addToSet': {'DESTINY': destiny}})
                        message = f"**DESTINY AWAITS!**\n**{destiny['NAME']}** has been added to your vault."

                await bless(2000, player)
                return f"You earned _Card:_ **{cards[rand_card]}** + :coin: 2000!\n{message}"
    except Exception as ex:
        trace = []
        tb = ex.__traceback__
        while tb is not None:
            trace.append({
                "filename": tb.tb_frame.f_code.co_filename,
                "name": tb.tb_frame.f_code.co_name,
                "lineno": tb.tb_lineno
            })
            tb = tb.tb_next
        print(str({
            'type': type(ex).__name__,
            'message': str(ex),
            'trace': trace
        }))
        await ctx.send(
            "There's an issue with Dungeon Drops. Please use /ff to close this channel and start anew. Alert support.")
        return


async def bossdrops(player, universe):
    all_available_drop_cards = db.queryExclusiveDropCards(universe)
    all_available_drop_titles = db.queryExclusiveDropTitles(universe)
    all_available_drop_arms = db.queryExclusiveDropArms(universe)
    all_available_drop_pets = db.queryExclusiveDropPets(universe)
    boss = db.queryBoss({'UNIVERSE': universe})
    vault_query = {'OWNER': str(player)}
    vault = db.queryVault(vault_query)
    owned_arms = []
    for arm in vault['ARMS']:
        owned_arms.append(arm['ARM'])

    user_query = {'DISNAME': str(player)}
    user = db.queryUser(user_query)
    rebirth = user['REBIRTH']

    cards = []
    titles = []
    arms = []
    pets = []
    boss_title = boss['TITLE']
    boss_arm = boss['ARM']
    boss_pet = boss['PET']
    boss_card = boss['CARD']

    for card in all_available_drop_cards:
        cards.append(card['NAME'])

    for title in all_available_drop_titles:
        titles.append(title['TITLE'])

    for arm in all_available_drop_arms:
        arms.append(arm['ARM'])

    for pet in all_available_drop_pets:
        pets.append(pet['PET'])

    c = len(cards) - 1
    t = len(titles) - 1
    a = len(arms) - 1
    p = len(pets) - 1

    rand_card = random.randint(0, c)
    rand_title = random.randint(0, t)
    rand_arm = random.randint(0, a)
    rand_pet = random.randint(0, p)

    gold_drop = 339  #
    title_drop = 340  #
    arm_drop = 370  #
    pet_drop = 390  #
    card_drop = 400  #
    boss_title_drop = 450  #
    boss_arm_drop = 480  #
    boss_pet_drop = 495  #
    boss_card_drop = 500  #

    drop_rate = random.randint((0 + (rebirth * rebirth) * (1 + rebirth)), 500)
    durability = random.randint(25, 120)

    try:
        if drop_rate <= gold_drop:
            bless_amount = 5000 * (1 + rebirth)
            await bless(bless_amount, player)
            return f"You earned :coin: 5000!"
        elif drop_rate <= title_drop and drop_rate > gold_drop:
            if len(vault['TITLES']) >= 150:
                await bless(8000, player)
                return f"You're maxed out on Titles! You earned :coin: **8000** instead!"
            response = db.updateVaultNoFilter(vault_query, {'$addToSet': {'TITLES': str(titles[rand_title])}})
            return f"You earned {titles[rand_title]}!"
        elif drop_rate <= arm_drop and drop_rate > title_drop:
            if len(vault['ARMS']) >= 150:
                await bless(8000, player)
                return f"You're maxed out on Arms! You earned :coin: 8000 instead!"
            if str(arms[rand_arm]) in owned_arms:
                await bless(8000, player)
                return f"You already own **{arms[rand_arm]}**! You earn :coin: **8000**."
            else:
                response = db.updateVaultNoFilter(vault_query, {'$addToSet': {'ARMS': {'ARM': str(arms[rand_arm]), 'DUR': durability}}})
                return f"You earned _Arm:_ **{arms[rand_arm]}** with ⚒️**{str(durability)}**!"
        elif drop_rate <= pet_drop and drop_rate > arm_drop:
            if len(vault['PETS']) >= 150:
                await bless(8000, player)
                return f"You're maxed out on Pets! You earned :coin: 8000 instead!"
            selected_pet = db.queryPet({'PET': pets[rand_pet]})
            pet_ability_name = list(selected_pet['ABILITIES'][0].keys())[0]
            pet_ability_power = list(selected_pet['ABILITIES'][0].values())[0]
            pet_ability_type = list(selected_pet['ABILITIES'][0].values())[1]

            response = db.updateVaultNoFilter(vault_query, {'$addToSet': {
                'PETS': {'NAME': selected_pet['PET'], 'LVL': 0, 'EXP': 0, pet_ability_name: int(pet_ability_power),
                         'TYPE': pet_ability_type, 'BOND': 0, 'BONDEXP': 0, 'PATH': selected_pet['PATH']}}})
            await bless(80, player)
            return f"You earned {pets[rand_pet]} + :coin: 80!"
        elif drop_rate <= card_drop and drop_rate > pet_drop:
            if len(vault['CARDS']) >= 150:
                await bless(8000, player)
                return f"You're maxed out on Cards! You earned :coin: 8000 instead!"
                response = db.updateVaultNoFilter(vault_query, {'$addToSet': {'CARDS': str(cards[rand_card])}})
                await bless(50, player)
                return f"You earned {cards[rand_card]} + :coin: 50!"
        elif drop_rate <= boss_title_drop and drop_rate > card_drop:
            if len(vault['TITLES']) >= 150:
                await bless(10000, player)
                return f"You're maxed out on Titles! You earned :coin: **10,000** instead!"
            response = db.updateVaultNoFilter(vault_query, {'$addToSet': {'TITLES': str(boss_title)}})
            return f"You earned the Exclusive Boss Title: {boss_title}!"
        elif drop_rate <= boss_arm_drop and drop_rate > boss_title_drop:
            if len(vault['ARMS']) >= 150:
                await bless(10000, player)
                return f"You're maxed out on Arms! You earned :coin: **10,000** instead!"
            if str(boss_arm) in owned_arms:
                await bless(20000, player)
                return f"You already own **{arms[rand_arm]}**! You earn :coin: **20,000**."
            else:
                response = db.updateVaultNoFilter(vault_query, {'$addToSet': {'ARMS': {'ARM': str(boss_arm), 'DUR': durability}}})
                return f"You earned the Exclusive Boss Arm: **{str(boss_arm)}** with ⚒️**{str(durability)}**!"

        elif drop_rate <= boss_pet_drop and drop_rate > boss_arm_drop:
            if len(vault['PETS']) >= 150:
                await bless(10000, player)
                return f"You're maxed out on Pets! You earned :coin: **10,000** instead!"
            selected_pet = db.queryPet({'PET': boss['PET']})
            pet_ability_name = list(selected_pet['ABILITIES'][0].keys())[0]
            pet_ability_power = list(selected_pet['ABILITIES'][0].values())[0]
            pet_ability_type = list(selected_pet['ABILITIES'][0].values())[1]

            response = db.updateVaultNoFilter(vault_query, {'$addToSet': {
                'PETS': {'NAME': selected_pet['PET'], 'LVL': 0, 'EXP': 0, pet_ability_name: int(pet_ability_power),
                         'TYPE': pet_ability_type, 'BOND': 0, 'BONDEXP': 0, 'PATH': selected_pet['PATH']}}})
            await bless(10000, player)
            return f"You earned the Exclusive Boss Pet:  {boss['PET']} + :coin: **10,000**!"
        elif drop_rate <= boss_card_drop and drop_rate > boss_pet_drop:
            if len(vault['CARDS']) >= 150:
                await bless(10000, player)
                return f"You're maxed out on Cards! You earned :coin: **10,000** instead!"
            card_owned = False
            for c in vault['CARD_LEVELS']:
                if c['CARD'] == str(boss_card):
                    card_owned = True

            if card_owned:
                await cardlevel(str(boss_card), player, universe, universe, "Dungeon")
                message = ""
                await bless(200, player)
            else:
                card_data = db.queryCard({'NAME': str(boss_card)})
                uni = db.queryUniverse({'TITLE': card_data['UNIVERSE']})
                tier = uni['TIER']
                update_query = {'$addToSet': {
                    'CARD_LEVELS': {'CARD': str(boss_card), 'LVL': 0, 'TIER': int(tier), 'EXP': 0, 'HLT': 0, 'ATK': 0,
                                    'DEF': 0, 'AP': 0}}}
                response = db.updateVaultNoFilter(vault_query, {'$addToSet': {'CARDS': str(boss_card)}})
                r = db.updateVaultNoFilter(vault_query, update_query)

                response = db.updateVaultNoFilter(vault_query, {'$addToSet': {'CARDS': str(boss_card)}})
                await bless(8000, player)
    except Exception as ex:
        trace = []
        tb = ex.__traceback__
        while tb is not None:
            trace.append({
                "filename": tb.tb_frame.f_code.co_filename,
                "name": tb.tb_frame.f_code.co_name,
                "lineno": tb.tb_lineno
            })
            tb = tb.tb_next
        print(str({
            'type': type(ex).__name__,
            'message': str(ex),
            'trace': trace
        }))
        await ctx.send(
            "There's an issue with Boss Drops. Please use /ff to close this channel and start anew. Alert support.")
        return


enhancer_mapping = {'ATK': 'Increase Attack %',
'DEF': 'Increase Defense %',
'STAM': 'Increase Stamina',
'HLT': 'Heal yourself or companion',
'LIFE': 'Steal Health from Opponent',
'DRAIN': 'Drain Stamina from Opponent',
'FLOG': 'Steal Attack from Opponent',
'WITHER': 'Steal Defense from Opponent',
'RAGE': 'Lose Defense, Increase Attack',
'BRACE': 'Lose Attack, Increase Defense',
'BZRK': 'Lose Health, Increase Attack',
'CRYSTAL': 'Lose Health, Increase Defense',
'GROWTH': 'Lose Health, Increase Attack & Defense',
'STANCE': 'Swap your Attack & Defense, Increase Attack',
'CONFUSE': 'Swap Opponent Attack & Defense, Decrease Opponent Defense',
'BLINK': 'Decrease your  Stamina, Increase Target Stamina',
'SLOW': 'Decrease Opponent Stamina, Swap Stamina with Opponent',
'HASTE': ' Increase your Stamina, Swap Stamina with Opponent',
'FEAR': 'Decrease your Health, Decrease Opponent Attack and Defense',
'SOULCHAIN': 'You and Your Opponent Stamina Link',
'GAMBLE': 'You and Your Opponent Health Link',
'WAVE': 'Deal Damage, Decreases over time',
'CREATION': 'Heals you, Decreases over time',
'BLAST': 'Deals Damage, Increases over time',
'DESTRUCTION': 'Decreases Opponent Max Health, Increases over time',
'BASIC': 'Increase Basic Attack AP',
'SPECIAL': 'Increase Special Attack AP',
'ULTIMATE': 'Increase Ultimate Attack AP',
'ULTIMAX': 'Increase All AP Values',
'MANA': 'Increase Enchancer AP',
'SHIELD': 'Blocks Incoming DMG, until broken',
'BARRIER': 'Nullifies Incoming Attacks, until broken',
'PARRY': 'Returns Half Damage, until broken'
}
enhancer_suffix_mapping = {'ATK': '%',
'DEF': '%',
'STAM': ' Flat',
'HLT': '%',
'LIFE': '%',
'DRAIN': ' Flat',
'FLOG': '%',
'WITHER': '%',
'RAGE': '%',
'BRACE': '%',
'BZRK': '%',
'CRYSTAL': '%',
'GROWTH': '%',
'STANCE': ' Flat',
'CONFUSE': ' Flat',
'BLINK': ' Flat',
'SLOW': ' Flat',
'HASTE': ' Flat',
'FEAR': '%',
'SOULCHAIN': ' Flat',
'GAMBLE': ' Flat',
'WAVE': ' Flat',
'CREATION': ' Flat',
'BLAST': ' Flat',
'DESTRUCTION': ' Flat',
'BASIC': ' Flat',
'SPECIAL': ' Flat',
'ULTIMATE': ' Flat',
'ULTIMAX': ' Flat',
'MANA': ' %',
'SHIELD': ' DMG 🌐',
'BARRIER': ' Blocks 💠',
'PARRY': ' Counters 🔄'
}

crown_rift_universe_mappings = {'Crown Rift Awakening': 3, 'Crown Rift Slayers': 2, 'Crown Rift Madness': 5}
Healer_Enhancer_Check = ['HLT', 'LIFE']
# DPS_Enhancer_Check = ['FLOG', 'WITHER', 'LIFE', ]
Gamble_Enhancer_Check = ['GAMBLE', 'SOULCHAIN']
Support_Enhancer_Check = ['DEF', 'ATK', 'WITHER', 'FLOG']
Sacrifice_Enhancer_Check = ['BZRK', 'CRYSTAL', 'GROWTH', 'FEAR']
Stamina_Enhancer_Check = ['STAM', 'DRAIN']
Control_Enhancer_Check = ['SOULCHAIN']
Damage_Enhancer_Check = ['DESTRUCTION', 'BLAST']
Turn_Enhancer_Check = ['WAVE', 'CREATION']
Crest_dict = {'Unbound': ':ideograph_advantage:',
              'My Hero Academia': ':sparkle:',
              'League Of Legends': ':u6307:',
              'Kanto Region': ':chart:',
              'Naruto': ':u7121:',
              'Bleach': ':u6709:',
              'God Of War': ':u7533:',
              'Chainsawman': ':accept:',
              'One Punch Man': ':u55b6:',
              'Johto Region': ':u6708:',
              'Black Clover': ':ophiuchus:',
              'Demon Slayer': ':aries:',
              'Attack On Titan': ':taurus:',
              '7ds': ':capricorn:',
              'Hoenn Region': ':leo:',
              'Digimon': ':cancer:',
              'Fate': ':u6e80:',
              'Solo Leveling': ':u5408:',
              'Souls': ':sos:',
              'Dragon Ball Z': ':u5272:',
              'Sinnoh Region': ':u7981:',
              'Death Note': ':white_flower:',
              'Crown Rift Awakening': ':u7a7a:',
              'Crown Rift Slayers': ':sa:',
              'Crown Rift Madness': ':m:',
              'Persona': ':o:'}
take_chances_messages = ['You lost immediately.', 'You got smoked!', 'You fainted before the fight even started.',
                         'That... was just sad. You got dropped with ease.', 'Too bad, so sad. You took the L.',
                         'Annnd another L. You lost.', 'Annnnnnnnnnnd another L! You lost.',
                         'How many Ls you gonna take today?', 'That was worse than the last time. You got dropped.']