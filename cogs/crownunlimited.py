from operator import floordiv
from discord import guild, message
import time
from re import T
import discord
from discord.ext import commands
import bot as main
import crown_utilities
import db
import classes as data
import destiny as d
import messages as m
import numpy as np
import help_commands as h
# Converters
from discord import User
from discord import Member
import DiscordUtils
from PIL import Image, ImageFont, ImageDraw
import requests
import random
from collections import ChainMap
now = time.asctime()
import base64
from io import BytesIO
import io
import asyncio
import textwrap
from discord import Embed
from discord_slash import cog_ext, SlashContext
from discord_slash.utils import manage_components
from discord_slash.model import ButtonStyle
from discord_slash.utils.manage_commands import create_option, create_choice
from dinteractions_Paginator import Paginator
import typing
from pilmoji import Pilmoji
import destiny as d


class CrownUnlimited(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self._cd = commands.CooldownMapping.from_cooldown(1, 3000, commands.BucketType.member)  # Change accordingly. Currently every 8 minutes (3600 seconds == 60 minutes)
        self._lvl_cd = commands.CooldownMapping.from_cooldown(1, 600, commands.BucketType.member)
    co_op_modes = ['CTales', 'DTales', 'CDungeon', 'DDungeon']
    ai_co_op_modes = ['DTales', 'DDungeon']
    U_modes = ['ATales', 'Tales', 'CTales', 'DTales']
    D_modes = ['CDungeon', 'DDungeon', 'Dungeon', 'ADungeon']
    solo_modes = ['ATales', 'Tales', 'Dungeon', 'Boss']
    opponent_pet_modes = ['Dungeon', 'DDungeon', 'CDungeon']
    max_items = 150

    @commands.Cog.listener()
    async def on_ready(self):
        print('Anime 🆚+ Cog is ready!')

    async def cog_check(self, ctx):
        return await main.validate_user(ctx)

    async def companion(user):
        user_data = db.queryUser({'DID': str(user.id)})
        companion = user_data['DISNAME']
        return companion

    def get_ratelimit(self, message: discord.Message) -> typing.Optional[int]:
        """Returns the ratelimit left"""
        bucket = self._cd.get_bucket(message)
        return bucket.update_rate_limit()

    def get_lvl_ratelimit(self, message: discord.Message) -> typing.Optional[int]:
        """Returns the level ratelimit left"""
        bucket = self._lvl_cd.get_bucket(message)
        return bucket.update_rate_limit()

    @commands.Cog.listener()
    async def on_message(self, message):
        if message.author == main.bot.user:
            return
        level_ratelimit = self.get_lvl_ratelimit(message)
        ratelimit = self.get_ratelimit(message)

        if level_ratelimit is None:
            try:
                player_that_leveled = db.queryUser({'DID': str(message.author.id)})
                if player_that_leveled:
                    card_that_leveled = db.queryCard({'NAME': player_that_leveled['CARD']})
                    uni = card_that_leveled['UNIVERSE']
                    nam = card_that_leveled['NAME']
                    mode = "Tales"
                    await crown_utilities.cardlevel(nam, str(message.author.id), mode, uni)
                else:
                    return
            except Exception as e:
                print(f"{str(message.author)} Error in on_message: {e}")

        if ratelimit is None:
            if isinstance(message.channel, discord.channel.DMChannel):
                return

            g = message.author.guild
            channel_list = message.author.guild.text_channels
            channel_names = []
            for channel in channel_list:
                channel_names.append(channel.name)

            server_channel_response = db.queryServer({'GNAME': str(g)})
            server_channel = ""
            if server_channel_response:
                server_channel = str(server_channel_response['EXP_CHANNEL'])
            
            if "explore-encounters" in channel_names:
                server_channel = "explore-encounters"
            
            if not server_channel:
                return

            # Pull Character Information
            player = db.queryUser({'DID': str(message.author.id)})

            if player['DIFFICULTY'] == "EASY":
                return

            if player['LEVEL'] < 26:
                return
                # await message.channel.send(f"🔓 Unlock the Explore Mode by completing Floor 35 of the 🌑 Abyss! Use **Abyss** in /solo to enter the abyss.")
                # return

            if not player:
                return
            if player['EXPLORE'] is False:
                return

            all_universes = db.queryExploreUniverses()
            available_universes = []
            for uni in all_universes:
                if uni['HAS_CROWN_TALES'] and uni['HAS_DUNGEON']:
                    available_universes.append(uni)

            u = len(available_universes) - 1
            rand_universe = random.randint(1, u)
            universetitle = available_universes[rand_universe]['TITLE']
            universe = available_universes[rand_universe]

            # Select Card at Random
            all_available_drop_cards = db.querySpecificDropCards(universetitle)
            cards = []
            for card in all_available_drop_cards:
                cards.append(card)

            c = len(cards) - 1
            rand_card = random.randint(0, c)
            selected_mode = ""
            approach_message = ""
            mode_selector_randomizer = random.randint(0, 100)
            if mode_selector_randomizer <= 10 or cards[rand_card]['EXCLUSIVE']:
                selected_mode = "Dungeon"
                approach_message = ":fire: An Empowered "
                icon = "https://cdn.discordapp.com/emojis/744887136125190204.gif?v=1"
            else:
                selected_mode = "Tales"
                approach_message = ":crown: "
                icon = "https://cdn.discordapp.com/emojis/788000259996516373.gif?v=1"

            random_battle_buttons = [
                manage_components.create_button(
                    style=ButtonStyle.blue,
                    label="Start Explore Battle",
                    custom_id="exploreYes"
                ),
            ]
            random_battle_buttons_action_row = manage_components.create_actionrow(*random_battle_buttons)

            # Lose / Bounty
            bounty = random.randint(1, 80000)

            if bounty >= 150000:
                bounty_icon = ":money_with_wings:"
            elif bounty >= 100000:
                bounty_icon = ":moneybag:"
            elif bounty >= 50000 or bounty <= 49999:
                bounty_icon = ":dollar:"

            bounty_message = f"{bounty_icon} {'{:,}'.format(bounty)}"
            battle_message = "Defeat the card to earn it, and it's bounty!"
            if selected_mode == "Dungeon":
                bounty = bounty * 2
                battle_message = "Defeat the card to earn it, and 2x it's bounty!!"

            # Send Message
            embedVar = discord.Embed(title=f"**{approach_message}{cards[rand_card]['NAME']}** has a bounty!",
                                     description=textwrap.dedent(f"""\
            **Bounty** **{bounty_message}**
            {battle_message}
            """), colour=0xf1c40f)
            card_lvl = 0

            if selected_mode == "Tales":
                cardtitle = {'TITLE': 'Universe Title'}
                card_lvl = 30
                card_lvl_attack_buff = 15
                card_lvl_defense_buff = 15
                card_lvl_ap_buff = 10
                card_lvl_hlt_buff = 25
            else:
                cardtitle = {'TITLE': 'Dungeon Title'}
                card_lvl = 300
                card_lvl_attack_buff = 150
                card_lvl_defense_buff = 150
                card_lvl_ap_buff = 100
                card_lvl_hlt_buff = 375
            
        
            o_card = cards[rand_card]['NAME']
            o_card_path=cards[rand_card]['PATH']
            o_max_health = cards[rand_card]['HLT'] + card_lvl_hlt_buff
            o_health = cards[rand_card]['HLT'] + card_lvl_hlt_buff
            o_stamina = cards[rand_card]['STAM']
            o_max_stamina = cards[rand_card]['STAM']
            o_moveset = cards[rand_card]['MOVESET']
            o_attack = cards[rand_card]['ATK'] + card_lvl_attack_buff
            o_defense = cards[rand_card]['DEF'] + card_lvl_defense_buff
            o_type = cards[rand_card]['TYPE']
            o_passive = cards[rand_card]['PASS'][0]
            o_speed = cards[rand_card]['SPD']
            o_show = cards[rand_card]['UNIVERSE']
            o_collection = cards[rand_card]['COLLECTION']
            o_destiny = cards[rand_card]['HAS_COLLECTION']
            affinity_message = crown_utilities.set_affinities(cards[rand_card])
            
            o_1 = o_moveset[0]
            o_2 = o_moveset[1]
            o_3 = o_moveset[2]
            o_enhancer = o_moveset[3]
   
            # Move 1
            move1 = list(o_1.keys())[0]
            move1ap = list(o_1.values())[0] + card_lvl_ap_buff
            move1_stamina = list(o_1.values())[1]
            
            # Move 2
            move2 = list(o_2.keys())[0]
            move2ap = list(o_2.values())[0] + card_lvl_ap_buff
            move2_stamina = list(o_2.values())[1]

            # Move 3
            move3 = list(o_3.keys())[0]
            move3ap = list(o_3.values())[0] + card_lvl_ap_buff
            move3_stamina = list(o_3.values())[1]

            # Move Enhancer
            move4 = list(o_enhancer.keys())[0]
            move4ap = list(o_enhancer.values())[0]
            move4_stamina = list(o_enhancer.values())[1]
            move4enh = list(o_enhancer.values())[2]
            resolved = False
            focused = False
            turn = 0
            card_file = showcard(cards[rand_card], "none", o_max_health, o_health, o_max_stamina, o_stamina, resolved, cardtitle, focused, o_attack, o_defense, turn, move1ap, move2ap, move3ap, move4ap, move4enh, card_lvl, None)

            embedVar.set_image(url="attachment://image.png")
            embedVar.set_thumbnail(url=message.author.avatar_url)

            setchannel = discord.utils.get(channel_list, name=server_channel)
            await setchannel.send(f"{message.author.mention}") 
            msg = await setchannel.send(embed=embedVar, file=card_file, components=[random_battle_buttons_action_row])     

            def check(button_ctx):
                return button_ctx.author == message.author

            try:
                button_ctx: ComponentContext = await manage_components.wait_for_component(self.bot, components=[
                    random_battle_buttons_action_row], timeout=100, check=check)

                if button_ctx.custom_id == "exploreYes":
                    await button_ctx.defer(ignore=True)
                    await enemy_approached(self, message, setchannel, player, selected_mode, universe,
                                           cards[rand_card]['NAME'], bounty)
                    await msg.edit(components=[])

            except Exception as ex:
                # trace = []
                # tb = ex.__traceback__
                # while tb is not None:
                #     trace.append({
                #         "filename": tb.tb_frame.f_code.co_filename,
                #         "name": tb.tb_frame.f_code.co_name,
                #         "lineno": tb.tb_lineno
                #     })
                #     tb = tb.tb_next
                # print(str({
                #     'type': type(ex).__name__,
                #     'message': str(ex),
                #     'trace': trace
                # }))
                await msg.edit(components=[])

                # print("Explore Exception. Likely nothing, but yea.")
                # await message.channel.send("Something ain't right, my guy.Check with support.")
                # print("")
    @cog_ext.cog_slash(description="Toggle Explore Mode On/Off", guild_ids=main.guild_ids)
    @commands.cooldown(1, 15, commands.BucketType.user)
    async def explore(self, ctx: SlashContext):
        try:
            player = db.queryUser({"DID": str(ctx.author.id)})
            if player['LEVEL'] < 25:             
                await ctx.send(f"🔓 Unlock the Explore Mode by completing Floor 25 of the 🌑 Abyss! Use **Abyss** in /solo to enter the abyss.")
                return
            if not player["EXPLORE"]:
                await ctx.send(f"Entering Explorer Mode :milky_way: ")
                db.updateUserNoFilter({'DID': str(ctx.author.id)}, {'$set': {'EXPLORE': True}})
                return
            if player["EXPLORE"]:
                await ctx.send(f"Exiting Explorer Mode :rotating_light: ")
                db.updateUserNoFilter({'DID': str(ctx.author.id)}, {'$set': {'EXPLORE': False}})
                return
        except Exception as ex:
            trace = []
            tb = ex.__traceback__
            while tb is not None:
                trace.append({
                    "filename": tb.tb_frame.f_code.co_filename,
                    "name": tb.tb_frame.f_code.co_name,
                    "lineno": tb.tb_lineno
                })
                tb = tb.tb_next
            print(str({
                'type': type(ex).__name__,
                'message': str(ex),
                'trace': trace
            }))


    @cog_ext.cog_slash(description="Set Explore Channel", guild_ids=main.guild_ids)
    async def setexplorechannel(self, ctx: SlashContext):
        if ctx.author.guild_permissions.administrator:
            guild = ctx.guild
            server_channel = ctx.channel
            server_query = {'GNAME': str(guild), 'EXP_CHANNEL': str(server_channel)}
            try:
                response = db.queryServer({'GNAME': str(guild)})
                if response:
                    update_channel = db.updateServer({'GNAME': str(guild)}, {'$set': {'EXP_CHANNEL': str(server_channel)}})
                    await ctx.send(f"Explore Channel updated to **{server_channel}**")
                    return
                else:
                    update_channel = db.createServer(data.newServer(server_query))
                    await ctx.send("Explore Channel set.")
                    return
            except Exception as ex:
                trace = []
                tb = ex.__traceback__
                while tb is not None:
                    trace.append({
                        "filename": tb.tb_frame.f_code.co_filename,
                        "name": tb.tb_frame.f_code.co_name,
                        "lineno": tb.tb_lineno
                    })
                    tb = tb.tb_next
                print(str({
                    'type': type(ex).__name__,
                    'message': str(ex),
                    'trace': trace
                }))
        else:
            await ctx.send("Admin command only.")
            return


    @cog_ext.cog_slash(description="Create Default Server Explore Channel", guild_ids=main.guild_ids)
    async def createexplorechannel(self, ctx: SlashContext):
        guild = ctx.guild
        categoryname = "Explore"
        channelname = "explore-encounters"
        try:
            if ctx.author.guild_permissions.administrator == True:
                category = discord.utils.get(guild.categories, name=categoryname)
                if category is None: #If there's no category matching with the `name`
                    category = await guild.create_category_channel(categoryname)
                    setchannel = await guild.create_text_channel(channelname, category=category)
                    await ctx.send(f"New **Explore** Category and **{channelname}** Channel Created!")
                    await setchannel.send("**Explore Channel Set**")
                    return setchannel

                else: #Else if it found the categoty
                    setchannel = discord.utils.get(guild.text_channels, name=channelname)
                    if channel is None:
                        setchannel = await guild.create_text_channel(channelname, category=category)
                        await ctx.send(f"New Explore Channel is **{channelname}**")
                        await setchannel.send("**Explore Channel Set**")
                    else:
                        await ctx.send(f"Explore Channel Already Exist **{channelname}**")
                        await setchannel.send(f"{ctx.author.mention} Explore Here")            
                
            # else:
            #     print("Not Admin")
        except Exception as ex:
            trace = []
            tb = ex.__traceback__
            while tb is not None:
                trace.append({
                    "filename": tb.tb_frame.f_code.co_filename,
                    "name": tb.tb_frame.f_code.co_name,
                    "lineno": tb.tb_lineno
                })
                tb = tb.tb_next
            print(str({
                'type': type(ex).__name__,
                'message': str(ex),
                'trace': trace
            }))
    

    @cog_ext.cog_slash(description="Duo pve to earn cards, accessories, gold, gems, and more with your AI companion",
                       options=[
                           create_option(
                               name="deck",
                               description="AI Preset (this is from your preset list)",
                               option_type=3,
                               required=True,
                               choices=[
                                   create_choice(
                                       name="Preset 1",
                                       value="1"
                                   ),
                                   create_choice(
                                       name="Preset 2",
                                       value="2"
                                   ),
                                   create_choice(
                                       name="Preset 3",
                                       value="3"
                                   )
                               ]
                           ),
                           create_option(
                               name="mode",
                               description="Difficulty Level",
                               option_type=3,
                               required=True,
                               choices=[
                                   create_choice(
                                       name="⚔️ Duo Tales (Normal)",
                                       value="DTales"
                                   ),
                                   create_choice(
                                       name="🔥 Duo Dungeon (Hard)",
                                       value="DDungeon"
                                   )
                               ]
                           )
                       ]
        , guild_ids=main.guild_ids)
    async def duo(self, ctx: SlashContext, deck: int, mode: str):
        a_registered_player = await crown_utilities.player_check(ctx)
        if not a_registered_player:
            return

        U_modes = ['ATales', 'Tales', 'CTales', 'DTales']
        D_modes = ['CDungeon', 'DDungeon', 'Dungeon', 'ADungeon']
        B_MODES = ['Boss', 'CBoss']
        try:
            # await ctx.defer()
            deck = int(deck)
            if deck != 1 and deck != 2 and deck != 3:
                await ctx.send("Not a valid Deck Option")
                return
            deckNumber = deck - 1
            sowner = db.queryUser({'DID': str(ctx.author.id)})
            oteam = sowner['TEAM']
            ofam = sowner['FAMILY']
            cowner = sowner
            cteam = oteam
            cfam = ofam
            if sowner['DIFFICULTY'] != "EASY":
                if sowner['LEVEL'] < 8:
                    await ctx.send(f"🔓 Unlock **Duo** by completing **Floor 7** of the 🌑 **Abyss**! Use **Abyss** in /solo to enter the abyss.")
                    return
            
            if sowner['DIFFICULTY'] == "EASY" and mode in D_modes or mode in B_MODES:
                await ctx.send("Dungeons and Boss fights unavailable on Easy Mode! Use /difficulty to change your difficulty setting.")
                return


            if mode in D_modes and sowner['LEVEL'] < 41:
                await ctx.send("🔓 Unlock **Duo Dungeons** by completing **Floor 40** of the 🌑 **Abyss**! Use **Abyss** in /solo to enter the abyss.")
                return



            universe_selection = await select_universe(self, ctx, sowner, oteam, ofam, mode, None)
            if not universe_selection:
                return
            selected_universe = universe_selection['SELECTED_UNIVERSE']
            universe = universe_selection['UNIVERSE_DATA']
            crestlist = universe_selection['CREST_LIST']
            crestsearch = universe_selection['CREST_SEARCH']
            currentopponent =  universe_selection['CURRENTOPPONENT']

            if mode in D_modes:
                completed_universes = universe_selection['COMPLETED_DUNGEONS']
            else:
                completed_universes = universe_selection['COMPLETED_TALES']
            if crestsearch:
                oguild = universe_selection['OGUILD']
            else:
                oguild = "PCG"

            await battle_commands(self, ctx, mode, universe, selected_universe, completed_universes, oguild, crestlist,
                                  crestsearch, sowner, oteam, ofam, currentopponent, cowner, cteam, cfam, deckNumber,
                                  None, None, None, None)
        except Exception as ex:
            trace = []
            tb = ex.__traceback__
            while tb is not None:
                trace.append({
                    "filename": tb.tb_frame.f_code.co_filename,
                    "name": tb.tb_frame.f_code.co_name,
                    "lineno": tb.tb_lineno
                })
                tb = tb.tb_next
            print(str({
                'type': type(ex).__name__,
                'message': str(ex),
                'trace': trace
            }))
            return


    @cog_ext.cog_slash(description="Co-op pve to earn cards, accessories, gold, gems, and more with friends",
                       options=[
                           create_option(
                               name="user",
                               description="player you want to co-op with",
                               option_type=6,
                               required=True
                           ),
                           create_option(
                               name="mode",
                               description="Difficulty Level",
                               option_type=3,
                               required=True,
                               choices=[
                                   create_choice(
                                       name="⚔️ Co-Op Tales (Normal)",
                                       value="CTales"
                                   ),
                                   create_choice(
                                       name="🔥 Co-Op Dungeon (Hard)",
                                       value="CDungeon"
                                   ),
                                   create_choice(
                                       name="👹 Co-Op Boss Enounter (Extreme)",
                                       value="CBoss"
                                   ),
                               ]
                           )
                       ]
        , guild_ids=main.guild_ids)
    async def coop(self, ctx: SlashContext, user: User, mode: str):
        a_registered_player = await crown_utilities.player_check(ctx)
        if not a_registered_player:
            return

        U_modes = ['ATales', 'Tales', 'CTales', 'DTales']
        D_modes = ['CDungeon', 'DDungeon', 'Dungeon', 'ADungeon']
        B_MODES = ['Boss', 'CBoss']
        try:
            U_modes = ['ATales', 'Tales', 'CTales', 'DTales']
            D_modes = ['CDungeon', 'DDungeon', 'Dungeon', 'ADungeon']
            B_MODES = ['Boss', 'CBoss']

            sowner = db.queryUser({'DID': str(ctx.author.id)})


            companion = db.queryUser({'DID': str(user.id)})
            # if sowner['DIFFICULTY'] != "EASY":
                # if sowner['LEVEL'] < 4:
                #     await ctx.send(f"🔓 Unlock **Co-op** by completing **Floor 3** of the 🌑 **Abyss**! Use **Abyss** in /solo to enter the abyss.")
                #     return
                
                # elif companion['LEVEL'] < 4:
                #     await ctx.send(f"🔓 {user.mention} Has not unlocked **Co-op**! Complete **Floor 3** of the 🌑 **Abyss**! Use **Abyss** in /solo to enter the abyss.")
                #     return

            if sowner['DIFFICULTY'] == "EASY" and mode in D_modes or mode in B_MODES:
                await ctx.send("Dungeons and Boss fights unavailable on Easy Mode! Use /difficulty to change your difficulty setting.")
                return


            if mode in D_modes and sowner['LEVEL'] < 41:
                await ctx.send("🔓 Unlock **Dungeons** by completing **Floor 40** of the 🌑 **Abyss**! Use **Abyss** in /solo to enter the abyss.")
                return

            if mode in B_MODES and sowner['LEVEL'] < 61:
                await ctx.send("🔓 Unlock **Boss Fights** by completing **Floor 60** of the 🌑 **Abyss**! Use **Abyss** in /solo to enter the abyss.")
                return
            
            if mode in D_modes and companion['LEVEL'] < 41:
                await ctx.send(f"🔓 {user.mention} Has not unlocked **Dungeons**! Complete **Floor 40** of the 🌑 **Abyss**! Use **Abyss** in /solo to enter the abyss.")
                return

            if mode in B_MODES and companion['LEVEL'] < 61:
                await ctx.send(f"🔓 {user.mention} Has not unlocked **Boss Fights**! Complete **Floor 60** of the 🌑 **Abyss**! Use **Abyss** in /solo to enter the abyss.")
                return

            oteam = sowner['TEAM']
            cteam = companion['TEAM']
            ofam = sowner['FAMILY']
            cfam = companion['FAMILY']

            universe_selection = await select_universe(self, ctx, sowner, oteam, ofam, mode, user)
            if not universe_selection:
                return
            selected_universe = universe_selection['SELECTED_UNIVERSE']
            universe = universe_selection['UNIVERSE_DATA']
            crestlist = universe_selection['CREST_LIST']
            crestsearch = universe_selection['CREST_SEARCH']
            currentopponent =  universe_selection['CURRENTOPPONENT']

            if mode in B_MODES:
                bossname = universe_selection['BOSS_NAME']
                oguild = universe_selection['OGUILD']
            else:
                if mode in D_modes:
                    completed_universes = universe_selection['COMPLETED_DUNGEONS']
                else:
                    completed_universes = universe_selection['COMPLETED_TALES']
                if crestsearch:
                    oguild = universe_selection['OGUILD']
                else:
                    oguild = "PCG"
            
            await battle_commands(self, ctx, mode, universe, selected_universe, None, oguild, crestlist, crestsearch,
                             sowner, oteam, ofam, currentopponent, companion, cteam, cfam, None, user, None, None, None)
        except Exception as ex:
            trace = []
            tb = ex.__traceback__
            while tb is not None:
                trace.append({
                    "filename": tb.tb_frame.f_code.co_filename,
                    "name": tb.tb_frame.f_code.co_name,
                    "lineno": tb.tb_lineno
                })
                tb = tb.tb_next
            print(str({
                'type': type(ex).__name__,
                'message': str(ex),
                'trace': trace
            }))
            return


    @cog_ext.cog_slash(description="Operate Arena", guild_ids=main.guild_ids)
    async def checkarena(self, ctx, owner: User):
        a_registered_player = await crown_utilities.player_check(ctx)
        if not a_registered_player:
            return

        try:
            arena = db.queryArena({"OWNER": str(owner), "ACTIVE": True})
            if arena:
                owner = arena['OWNER']
                private_channel = ctx
                opponent_entered = False
                singles = arena['SINGLES']
                guild_war = arena['GUILD_WAR']
                subbed = arena['SUBBED_PLAYER']
                active = arena['ACTIVE']
                ready = arena['READY']
                is_full = arena['IS_FULL']
                winner = arena['WINNER']
                loser = arena['LOSER']
                guild1 = arena['GUILD1']
                guild2 = arena['GUILD2']
                description_tip = ""
                guild1_team_members = []
                guild1_ready_player = arena['GUILD1_MEMBERS'][0]['NAME']
                for member in arena['GUILD1_MEMBERS']:
                    guild1_team_members.append(f'**{member["NAME"]}:** ❌ {str(member["STRIKES"])}')
                guild2_team_members = []
                guild2_team = arena['GUILD2_MEMBERS']
                for member in arena['GUILD2_MEMBERS']:
                    guild2_team_members.append(f'**{member["NAME"]}:** ❌ {str(member["STRIKES"])}')
                g1_mems = "\n".join(guild1_team_members)
                g2_mems = "\n".join(guild2_team_members)
                g1_count = len(guild1_team_members)
                g2_count = len(guild2_team_members)
                warning = ""
                vs = f"**{str(g1_count)}** vs **{str(g2_count)}**"
                if guild_war and g1_count != g2_count:
                    warning = "\n**Warning!** You must have equal members to begin."
                elif guild_war and g1_count == g2_count:
                    warning = f"\n**{str(g1_count)}** vs **{str(g2_count)}**"
                buttons = []
                embed_list = []
                if singles:
                    description_tip = "*1v1 best out of 3 Arena*"
                else:
                    description_tip = f"*Open Arena!*"
                
                if guild_war:
                    description_tip = f"*Guild War*{warning}"

                if guild2_team_members:
                    opponent_entered = True



                embedVar = discord.Embed(title= f"{str(owner)}", description=textwrap.dedent(f"""
                🎭 {description_tip}
                
                {g1_mems}
                """), colour=0x7289da)
                embed_list.append(embedVar)


                if opponent_entered:
                    guild2_ready_player = arena['GUILD2_MEMBERS'][0]['NAME']
                    guild2_owner = guild2_team[0]['NAME']
                    embedVar2 = discord.Embed(title= f"{guild2_owner}", description=textwrap.dedent(f"""
                    🎭 {description_tip}
                    
                    {g2_mems}
                    """), colour=0x7289da)
                    embed_list.append(embedVar2)
                
                ### Button Layouts ###
                if singles and not opponent_entered:
                    buttons = [
                        manage_components.create_button(style=3, label="Join Arena", custom_id="join_arena_singles"),
                        manage_components.create_button(style=3, label="Delete Arena", custom_id="delete_arena_singles"),
                    ]
                if singles and opponent_entered:
                    buttons = [
                        manage_components.create_button(style=3, label="Start Arena Match", custom_id="start_singles"),
                        manage_components.create_button(style=3, label="Delete Arena", custom_id="delete_arena_singles"),
                    ]
                    

                custom_action_row = manage_components.create_actionrow(*buttons)

                async def custom_function(self, button_ctx):
                    if button_ctx.author == ctx.author:
                        player = str(button_ctx.origin_message.embeds[0].title)
                        if button_ctx.custom_id == "join_arena_singles":
                            owns_arena_already = db.queryArena({"OWNER": str(ctx.author), "ACTIVE": True})
                            if owns_arena_already:
                                await button_ctx.send("You already have an open arena.")
                                self.stop = True
                                return
                            else:
                                accept_buttons = [
                                    manage_components.create_button(
                                        style=ButtonStyle.green,
                                        label="Yes",
                                        custom_id="yes"
                                    ),
                                    manage_components.create_button(
                                        style=ButtonStyle.blue,
                                        label="No",
                                        custom_id="no"
                                    )
                                ]
                                accept_buttons_action_row = manage_components.create_actionrow(*accept_buttons)
                                await button_ctx.send(f"Can {ctx.author.mention} join your arena?", components=[accept_buttons_action_row])

                                def check(button_ctx):
                                    return str(button_ctx.author) == str(owner)

                                try:
                                    button_ctx: ComponentContext = await manage_components.wait_for_component(self.bot, components=[accept_buttons_action_row], timeout=120, check=check)
                                    if button_ctx.custom_id == "no":
                                        await button_ctx.send("Player not joined. ")
                                        self.stop = True
                                    if button_ctx.custom_id == "yes":
                                        query = {'OWNER': str(owner), "ACTIVE": True}
                                        update_query = {
                                            '$push': {"GUILD2_MEMBERS": {"NAME": str(ctx.author), "POSITION": 1, "STRIKES": 0}},
                                            '$set': {"IS_FULL": True, "READY": True}
                                            }
                                        res = db.updateArenaNoFilter(query, update_query)
                                        await button_ctx.send("You have been added successfully to the Arena.")
                                        self.stop = True        
                                except Exception as ex:
                                    trace = []
                                    tb = ex.__traceback__
                                    while tb is not None:
                                        trace.append({
                                            "filename": tb.tb_frame.f_code.co_filename,
                                            "name": tb.tb_frame.f_code.co_name,
                                            "lineno": tb.tb_lineno
                                        })
                                        tb = tb.tb_next
                                    print(str({
                                        'PLAYER': str(ctx.author),
                                        'type': type(ex).__name__,
                                        'message': str(ex),
                                        'trace': trace
                                    }))
                                    guild = self.bot.get_guild(main.guild_id)
                                    channel = guild.get_channel(main.guild_channel)
                                    await channel.send(f"'PLAYER': **{str(ctx.author)}**, 'GUILD': **{str(ctx.author.guild)}**, TYPE: {type(ex).__name__}, MESSAGE: {str(ex)}, TRACE: {trace}")

                        elif button_ctx.custom_id == "start_singles":
                            try:
                                if str(button_ctx.author) != str(owner):
                                    await button_ctx.send("Arena Owner must start the match.")
                                    self.stop = True
                                    return
                                mode = "PVP"
                                sowner = db.queryUser({'DISNAME': str(guild1_ready_player)})
                                opponent = db.queryUser({'DISNAME': str(guild2_ready_player)})
                                oteam = sowner['TEAM']
                                tteam = opponent['TEAM']
                                oteam_info = db.queryTeam({'TEAM_NAME':str(oteam)})
                                tteam_info = db.queryTeam({'TEAM_NAME':str(tteam)})
                                if oteam_info:
                                    oguild = oteam_info['GUILD']
                                else:
                                    oguild ="PCG"
                                if tteam_info:
                                    tguild = tteam_info['GUILD']
                                else:
                                    tguild ="PCG"

                                o = db.queryCard({'NAME': sowner['CARD']})
                                otitle = db.queryTitle({'TITLE': sowner['TITLE']})

                                t = db.queryCard({'NAME': opponent['CARD']})
                                ttitle = db.queryTitle({'TITLE': opponent['TITLE']})
                                await button_ctx.send("Arena match starting!")                    
                                await battle_commands(self, ctx, mode, None, None, None, oguild, None, None, sowner,
                                                    oteam, None, opponent, tteam, tguild, None, None, None, True, owner, "SINGLES")
                            except Exception as ex:
                                trace = []
                                tb = ex.__traceback__
                                while tb is not None:
                                    trace.append({
                                        "filename": tb.tb_frame.f_code.co_filename,
                                        "name": tb.tb_frame.f_code.co_name,
                                        "lineno": tb.tb_lineno
                                    })
                                    tb = tb.tb_next
                                print(str({
                                    'PLAYER': str(ctx.author),
                                    'type': type(ex).__name__,
                                    'message': str(ex),
                                    'trace': trace
                                }))
                                guild = self.bot.get_guild(main.guild_id)
                                channel = guild.get_channel(main.guild_channel)
                                await channel.send(f"'PLAYER': **{str(ctx.author)}**, 'GUILD': **{str(ctx.author.guild)}**,  TYPE: {type(ex).__name__}, MESSAGE: {str(ex)}, TRACE: {trace}")

                                return
                        elif button_ctx.custom_id == "delete_arena_singles":
                            if str(button_ctx.author) != str(owner):
                                await button_ctx.send("Arena Owner only command.")
                                self.stop = True
                                return

                            accept_buttons = [
                                manage_components.create_button(
                                    style=ButtonStyle.green,
                                    label="Yes",
                                    custom_id="yes"
                                ),
                                manage_components.create_button(
                                    style=ButtonStyle.blue,
                                    label="No",
                                    custom_id="no"
                                )
                            ]
                            accept_buttons_action_row = manage_components.create_actionrow(*accept_buttons)
                            await button_ctx.send(f"Are you sure you want to delete your Arena?", components=[accept_buttons_action_row])

                            def check(button_ctx):
                                return str(button_ctx.author) == str(owner)

                            try:
                                button_ctx: ComponentContext = await manage_components.wait_for_component(self.bot, components=[accept_buttons_action_row], timeout=120, check=check)
                                if button_ctx.custom_id == "no":
                                    await button_ctx.send("Aborted.")
                                    self.stop = True
                                if button_ctx.custom_id == "yes":
                                    query = {'OWNER': str(owner)}
                                    update_query = {
                                        '$set': {"ACTIVE": False}
                                        }
                                    res = db.updateArenaNoFilter(query, update_query)
                                    await button_ctx.send("You have been added successfully cancelled your Arena.")
                                    self.stop = True        
                            except Exception as ex:
                                trace = []
                                tb = ex.__traceback__
                                while tb is not None:
                                    trace.append({
                                        "filename": tb.tb_frame.f_code.co_filename,
                                        "name": tb.tb_frame.f_code.co_name,
                                        "lineno": tb.tb_lineno
                                    })
                                    tb = tb.tb_next
                                print(str({
                                    'PLAYER': str(ctx.author),
                                    'type': type(ex).__name__,
                                    'message': str(ex),
                                    'trace': trace
                                }))
                                guild = self.bot.get_guild(main.guild_id)
                                channel = guild.get_channel(main.guild_channel)
                                await channel.send(f"'PLAYER': **{str(ctx.author)}**, 'GUILD': **{str(ctx.author.guild)}**,  TYPE: {type(ex).__name__}, MESSAGE: {str(ex)}, TRACE: {trace}")

                        
                    
                    else:
                        await ctx.send("This is not your Arena Menu.")


                await Paginator(bot=self.bot, useQuitButton=True, disableAfterTimeout=True, ctx=ctx, pages=embed_list, timeout=60, customActionRow=[
                    custom_action_row,
                    custom_function,
                ]).run()  
            else:
                await ctx.send("No arena available.")
        except Exception as ex:
            trace = []
            tb = ex.__traceback__
            while tb is not None:
                trace.append({
                    "filename": tb.tb_frame.f_code.co_filename,
                    "name": tb.tb_frame.f_code.co_name,
                    "lineno": tb.tb_lineno
                })
                tb = tb.tb_next
            print(str({
                'PLAYER': str(ctx.author),
                'type': type(ex).__name__,
                'message': str(ex),
                'trace': trace
            }))
            guild = self.bot.get_guild(main.guild_id)
            channel = guild.get_channel(main.guild_channel)
            await channel.send(f"'PLAYER': **{str(ctx.author)}**, 'GUILD': **{str(ctx.author.guild)}**,  TYPE: {type(ex).__name__}, MESSAGE: {str(ex)}, TRACE: {trace}")

            return


    @cog_ext.cog_slash(description="Arena Battle!",
                    options=[
                        create_option(
                            name="mode",
                            description="Arena Mode",
                            option_type=3,
                            required=True,
                            choices=[
                                create_choice(
                                    name="1v1",
                                    value="SINGLES"
                                ),
                                create_choice(
                                    name="Team Battle",
                                    value="TEAMS"
                                ),
                                create_choice(
                                    name="Guild War",
                                    value="GUILD_WAR"
                                ),
                            ]
                        )
                    ]
        , guild_ids=main.guild_ids)
    async def arena(self, ctx: SlashContext, mode: str):
        a_registered_player = await crown_utilities.player_check(ctx)
        if not a_registered_player:
            return

        try:
            player = db.queryUser({"DID": str(ctx.author.id)})
            if player['DIFFICULTY'] == "EASY":
                await ctx.send("PVP is unavailable on Easy Mode! Use /difficulty to change your difficulty setting.")
                return

            if player['LEVEL'] < 7:
                await ctx.send(f"🔓 Unlock **PVP** by completing **Floor 6** of the 🌑 **Abyss**! Use **Abyss** in /solo to enter the abyss.")
                return

            association = player['GUILD']
            guild = player['TEAM']
            has_arena_open = db.queryArena({"OWNER": str(ctx.author), "ACTIVE": True})

            if has_arena_open:
                await ctx.send("You already have an open arena.")
                return

            if mode == "TEAMS":
                await ctx.send("Team Open Arena is currently unavailable. Please check back later.")
                return
            
            if mode == "GUILD_WAR":
                await ctx.send("Guild War is currently unavailable. Please check back later.")
                return

            if mode == "SINGLES":
                query = {
                    "OWNER": str(ctx.author),
                    "SINGLES": True, 
                    "ACTIVE": True, 
                    "GUILD1": "N/A",
                    "GUILD2": "N/A",
                    "GUILD1_MEMBERS": [{"NAME": str(ctx.author), "POSITION": 1, "STRIKES": 0}],
                    "GUILD2_MEMBERS": []
                    }
                response = db.createArena(data.newArena(query))
                await ctx.send("**1v1 Arena** has been opened.")
                
            elif mode == "GUILD_WAR":
                query = {
                    "OWNER": str(ctx.author),
                    "GUILD_WAR": True, 
                    "ACTIVE": True, 
                    "GUILD1": str(guild),
                    "GUILD2": "N/A",
                    "GUILD1_MEMBERS": [{"NAME": str(ctx.author), "POSITION": 1, "STRIKES": 0}],
                    "GUILD2_MEMBERS": []
                    }
                response = db.createArena(data.newArena(query))
                await ctx.send("**Guild War Arena** has been opened.")
                
            else:
                query = {
                    "OWNER": str(ctx.author),
                    "ACTIVE": True, 
                    "GUILD1": "N/A",
                    "GUILD2": "N/A",
                    "GUILD1_MEMBERS": [{"NAME": str(ctx.author), "POSITION": 1, "STRIKES": 0}],
                    "GUILD2_MEMBERS": []
                    }
                response = db.createArena(data.newArena(query))  
                await ctx.send("**Open Arena** has been opened.")

            return             
        except Exception as ex:
            trace = []
            tb = ex.__traceback__
            while tb is not None:
                trace.append({
                    "filename": tb.tb_frame.f_code.co_filename,
                    "name": tb.tb_frame.f_code.co_name,
                    "lineno": tb.tb_lineno
                })
                tb = tb.tb_next
            print(str({
                'PLAYER': str(ctx.author),
                'type': type(ex).__name__,
                'message': str(ex),
                'trace': trace
            }))
            guild = self.bot.get_guild(main.guild_id)
            channel = guild.get_channel(main.guild_channel)
            await channel.send(f"'PLAYER': **{str(ctx.author)}**, 'GUILD': **{str(ctx.author.guild)}**,  TYPE: {type(ex).__name__}, MESSAGE: {str(ex)}, TRACE: {trace}")
            return


    @cog_ext.cog_slash(description="pve to earn cards, accessories, gold, gems, and more as a solo player",
                    options=[
                        create_option(
                            name="mode",
                            description="abyss: climb ladder, tales: normal pve mode, dungeon: hard pve run, and boss: extreme encounters",
                            option_type=3,
                            required=True,
                            choices=[
                                create_choice(
                                    name="🆘 The Tutorial",
                                    value="Tutorial"
                                ),
                                create_choice(
                                    name="🌑 The Abyss!",
                                    value="Abyss"
                                ),
                                create_choice(
                                    name="⚔️ Tales & Scenario Battles!",
                                    value="Tales"
                                ),
                                create_choice(
                                    name="🔥 Dungeon Run!",
                                    value="Dungeon"
                                ),
                                create_choice(
                                    name="👹 Boss Encounter!",
                                    value="Boss"
                                ),
                            ]
                        )
                    ]
        , guild_ids=main.guild_ids)
    async def solo(self, ctx: SlashContext, mode: str):
        a_registered_player = await crown_utilities.player_check(ctx)
        if not a_registered_player:
            return
        if mode == "Abyss":
            await abyss(self, ctx)
            return
        if mode == "Tutorial":
            await tutorial(self, ctx)
            return
        
        U_modes = ['ATales', 'Tales', 'CTales', 'DTales', 'tales']
        D_modes = ['CDungeon', 'DDungeon', 'Dungeon', 'ADungeon', 'dungeon']
        B_MODES = ['Boss', 'CBoss', 'boss']
        try:
            # await ctx.defer()

            sowner = db.queryUser({'DID': str(ctx.author.id)})
            if sowner['DIFFICULTY'] != "EASY":
                if sowner['LEVEL'] < 3:
                    await ctx.send("🔓 Unlock **Tales** by completing **Floor 2** of the 🌑 **Abyss**! Use **Abyss** in /solo to enter the abyss.")
                    return
            if sowner['DIFFICULTY'] == "EASY" and (mode in D_modes or mode in B_MODES):
                await ctx.send("Dungeons and Boss fights unavailable on Easy Mode! Use /difficulty to change your difficulty setting.")
                return
               
            if mode in D_modes and sowner['LEVEL'] < 41:
                await ctx.send("🔓 Unlock **Dungeons** by completing **Floor 40** of the 🌑 **Abyss**! Use **Abyss** in /solo to enter the abyss.")
                return

            if mode in B_MODES and sowner['LEVEL'] < 61:
                await ctx.send("🔓 Unlock **Boss Fights** by completing **Floor 60** of the 🌑 **Abyss**! Use **Abyss** in /solo to enter the abyss.")
                return


            oteam = sowner['TEAM']
            ofam = sowner['FAMILY']

            universe_selection = await select_universe(self, ctx, sowner, oteam, ofam, mode, None)
            if universe_selection == None:
                return
            selected_universe = universe_selection['SELECTED_UNIVERSE']
            universe = universe_selection['UNIVERSE_DATA']
            crestlist = universe_selection['CREST_LIST']
            crestsearch = universe_selection['CREST_SEARCH']
            currentopponent =  universe_selection['CURRENTOPPONENT']

            if mode in B_MODES:
                bossname = universe_selection['BOSS_NAME']
                oguild = universe_selection['OGUILD']
                if sowner['BOSS_FOUGHT']:
                    await ctx.send("You have already defeated a boss today! Check back tomorrow.")
                    return
            else:
                if mode in D_modes:
                    completed_universes = universe_selection['COMPLETED_DUNGEONS']
                else:
                    completed_universes = universe_selection['COMPLETED_TALES']
                if crestsearch:
                    oguild = universe_selection['OGUILD']
                else:
                    oguild = "PCG"

            if mode in B_MODES:
                await battle_commands(self, ctx, mode, universe, selected_universe, None, oguild, crestlist,
                                    crestsearch, sowner, oteam, ofam, None, None, None, None, None, None, None, None, None)
            else:
                await battle_commands(self, ctx, mode, universe, selected_universe, completed_universes, oguild,
                                    crestlist, crestsearch, sowner, oteam, ofam, currentopponent, None, None, None,
                                    None, None, None, None, None)
        except Exception as ex:
            trace = []
            tb = ex.__traceback__
            while tb is not None:
                trace.append({
                    "filename": tb.tb_frame.f_code.co_filename,
                    "name": tb.tb_frame.f_code.co_name,
                    "lineno": tb.tb_lineno
                })
                tb = tb.tb_next
            print(str({
                'type': type(ex).__name__,
                'message': str(ex),
                'trace': trace
            }))
            guild = self.bot.get_guild(main.guild_id)
            channel = guild.get_channel(main.guild_channel)
            await channel.send(f"'PLAYER': **{str(ctx.author)}**, 'GUILD': **{str(ctx.author.guild)}**,  TYPE: {type(ex).__name__}, MESSAGE: {str(ex)}, TRACE: {trace}")
            return


    @cog_ext.cog_slash(description="pvp battle against a friend or rival", guild_ids=main.guild_ids)
    async def pvp(self, ctx: SlashContext, opponent: User):
        try:
            await ctx.defer()
            player = opponent
            a_registered_player = await crown_utilities.player_check(ctx)
            if not a_registered_player:
                return

            if ctx.author.id == player.id:
                await ctx.send("You cannot PVP against yourself.", hidden=True)
                return
            await ctx.send("🆚 Building PVP Match...", delete_after=10)
            private_channel = ctx
            starttime = time.asctime()
            h_gametime = starttime[11:13]
            m_gametime = starttime[14:16]
            s_gametime = starttime[17:19]

            # Tutorial Code
            tutorialbot = '837538366509154407'
            legendbot = '845672426113466395'
            opponent = db.queryUser({'DID': str(player.id)})
            oppDID = opponent['DID']
            tutorial = False
            if oppDID == tutorialbot or oppDID == legendbot:
                tutorial = True
            mode = "PVP"

            # Get Session Owner Disname for scoring
            sowner = db.queryUser({'DID': str(ctx.author.id)})
            if sowner['DIFFICULTY'] == "EASY":
                await ctx.send("PVP is unavailable on Easy Mode! Use /difficulty to change your difficulty setting.")
                return

            opponent = db.queryUser({'DID': str(player.id)})

            if sowner['LEVEL'] < 7:
                await ctx.send(f"🔓 Unlock **PVP** by completing **Floor 6** of the 🌑 Abyss! Use **Abyss** in /solo to enter the abyss.")
                return
            if opponent['LEVEL'] < 7:
                await ctx.send(f"🔓 {player.mention} Has not unlocked **PVP**! Complete **Floor 6** of the 🌑 Abyss! Use **Abyss** in /solo to enter the abyss.")
                return

            oteam = sowner['TEAM']
            tteam = opponent['TEAM']
            oteam_info = db.queryTeam({'TEAM_NAME':str(oteam)})
            tteam_info = db.queryTeam({'TEAM_NAME':str(tteam)})
            if oteam_info:
                oguild = oteam_info['GUILD']
            else:
                oguild ="PCG"
            if tteam_info:
                tguild = tteam_info['GUILD']
            else:
                tguild ="PCG"

            o = db.queryCard({'NAME': sowner['CARD']})
            otitle = db.queryTitle({'TITLE': sowner['TITLE']})

            t = db.queryCard({'NAME': opponent['CARD']})
            ttitle = db.queryTitle({'TITLE': opponent['TITLE']})

            # universe = "Naruto"
            # selected_universe = {"TITLE": "Naruto"}
            if private_channel:
                await battle_commands(self, ctx, mode, None, None, None, oguild, None, None, sowner, oteam, None, opponent, tteam, tguild, None, None, None, None, None, None)
            else:
                await ctx.send("Failed to start battle!")
        except Exception as ex:
            trace = []
            tb = ex.__traceback__
            while tb is not None:
                trace.append({
                    "filename": tb.tb_frame.f_code.co_filename,
                    "name": tb.tb_frame.f_code.co_name,
                    "lineno": tb.tb_lineno
                })
                tb = tb.tb_next
            print(str({
                'PLAYER': str(ctx.author),
                'type': type(ex).__name__,
                'message': str(ex),
                'trace': trace
            }))
            guild = self.bot.get_guild(main.guild_id)
            channel = guild.get_channel(main.guild_channel)
            await channel.send(f"'PLAYER': **{str(ctx.author)}**, 'GUILD': **{str(ctx.author.guild)}**,  TYPE: {type(ex).__name__}, MESSAGE: {str(ex)}, TRACE: {trace}")
            return


    @cog_ext.cog_slash(description="Start an Association Raid", guild_ids=main.guild_ids)
    async def raid(self, ctx: SlashContext, guild: str):
        a_registered_player = await crown_utilities.player_check(ctx)
        if not a_registered_player:
            return

        try:
            guildname = guild
            private_channel = ctx
            if isinstance(private_channel.channel, discord.channel.DMChannel):
                await private_channel.send(m.SERVER_FUNCTION_ONLY)
                return
            starttime = time.asctime()
            h_gametime = starttime[11:13]
            m_gametime = starttime[14:16]
            s_gametime = starttime[17:19]

            # Get Session Owner Disname for scoring
            sowner = db.queryUser({'DID': str(ctx.author.id)})
            if sowner['DIFFICULTY'] == "EASY":
                await ctx.send("Raiding is unavailable on Easy Mode! Use /difficulty to change your difficulty setting.")
                return

            oteam = sowner['TEAM']
            oteam_info = db.queryTeam({'TEAM_NAME': oteam.lower()})
            oguild_name = "PCG"
            shield_test_active = False
            shield_training_active = False
            if oteam_info:
                oguild_name = oteam_info['GUILD']
                oguild = db.queryGuildAlt({'GNAME': oguild_name})
            player_guild = sowner['GUILD']

            if oguild_name == "PCG":
                await ctx.send(m.NO_GUILD, delete_after=5)
                return
            if oguild['SHIELD'] == sowner['DISNAME']:
                shield_training_active = True
            elif player_guild == guildname:
                shield_test_active = True
                

            guild_query = {'GNAME': guildname}
            guild_info = db.queryGuildAlt(guild_query)
            guild_shield = ""

            if not guild_info:
                await ctx.send(m.GUILD_DOESNT_EXIST, delete_after=5)
                return
            guild_shield = guild_info['SHIELD']
            shield_id = guild_info['SDID']
            guild_hall = guild_info['HALL']
            hall_info = db.queryHall({'HALL': str(guild_hall)})
            hall_def = hall_info['DEFENSE']
            t_user = db.queryUser({'DID': shield_id})
            tteam_name = t_user['TEAM']
            tteam_info = db.queryTeam({'TEAM_NAME': tteam_name.lower()})
            tteam = tteam_info['TEAM_NAME']
            tguild = tteam_info['GUILD']
            tteam_info = db.queryTeam({'TEAM_NAME': tteam.lower()})
            if tteam_info:
                tguild = tteam_info['GUILD']
            tarm = db.queryArm({'ARM': t_user['ARM']})
            ttitle = db.queryTitle({'TITLE': t_user['TITLE']})
            
            mode = "RAID"

            # Guild Fees
            title_match_active = False
            fee = hall_info['FEE']
            if oguild_name == tguild:
                title_match_active = True

            o = db.queryCard({'NAME': sowner['CARD']})
            otitle = db.queryTitle({'TITLE': sowner['TITLE']})

            t = db.queryCard({'NAME': t_user['CARD']})
            ttitle = db.queryTitle({'TITLE': t_user['TITLE']})
            
            if private_channel:
                await battle_commands(self, ctx, mode, hall_info, title_match_active, shield_test_active, oguild, shield_training_active, None, sowner, oteam, None, t_user,tteam, tguild, None, None, None, None, None, None)
            else:
                await ctx.send("Failed to start raid battle!")
        except Exception as ex:
            trace = []
            tb = ex.__traceback__
            while tb is not None:
                trace.append({
                    "filename": tb.tb_frame.f_code.co_filename,
                    "name": tb.tb_frame.f_code.co_name,
                    "lineno": tb.tb_lineno
                })
                tb = tb.tb_next
            print(str({
                'PLAYER': str(ctx.author),
                'type': type(ex).__name__,
                'message': str(ex),
                'trace': trace
            }))
            guild = self.bot.get_guild(main.guild_id)
            channel = guild.get_channel(main.guild_channel)
            await channel.send(f"'PLAYER': **{str(ctx.author)}**, 'GUILD': **{str(ctx.author.guild)}**,  TYPE: {type(ex).__name__}, MESSAGE: {str(ex)}, TRACE: {trace}")
            return


    # @cog_ext.cog_slash(description="view all cards, titles, arms, or more that an universe has to offer",
    #                    options=[
    #                        create_option(
    #                            name="universe_name",
    #                            description="name of the universe to view stuff from",
    #                            option_type=3,
    #                            required=True
    #                        ),
    #                        create_option(
    #                            name="selection",
    #                            description="view all cards, titles, arms, summons, or destiny lines",
    #                            option_type=3,
    #                            required=True,
    #                            choices=[
    #                             create_choice(
    #                                 name="🎴 View All Cards",
    #                                 value="cards",
    #                             ),
    #                             create_choice(
    #                                 name="🎗️ View All Titles",
    #                                 value="titles",
    #                             ),
    #                             create_choice(
    #                                 name="🦾 View All Arms",
    #                                 value="arms",
    #                             ),
    #                             create_choice(
    #                                 name="🧬 View All Summons",
    #                                 value="summons",
    #                             ),
    #                             create_choice(
    #                                 name="✨ View All Destiny Lines",
    #                                 value="destinies",
    #                             )
    #                            ]
    #                        )
    #                    ]
    #     , guild_ids=main.guild_ids)
    # async def viewall(self, ctx, selection, universe_name):
    #     if selection == "cards":
    #         await cardlist(self, ctx, universe_name)
    #     if selection == "titles":
    #         await titlelist(self, ctx, universe_name)
    #     if selection == "arms":
    #         await armlist(self, ctx, universe_name)
    #     if selection == "summons":
    #         await summonlist(self, ctx, universe_name)
    #     if selection == "destinies":
    #         await destinylist(self, ctx, universe_name)


    @cog_ext.cog_slash(description="View all available Universes and their cards, summons, destinies, and accessories", guild_ids=main.guild_ids)
    async def universes(self, ctx: SlashContext):
        a_registered_player = await crown_utilities.player_check(ctx)
        if not a_registered_player:
            return

        try:
            universe_data = db.queryAllUniverse()
            # user = db.queryUser({'DID': str(ctx.author.id)})
            universe_embed_list = []
            for uni in universe_data:
                available = ""
                if len(uni['CROWN_TALES']) > 2:
                    available = f"{Crest_dict[uni['TITLE']]}"
                    
                    tales_list = ", ".join(uni['CROWN_TALES'])

                    embedVar = discord.Embed(title= f"{uni['TITLE']}", description=textwrap.dedent(f"""
                    {Crest_dict[uni['TITLE']]} **Number of Fights**: :crossed_swords: **{len(uni['CROWN_TALES'])}**
                    🎗️ **Universe Title**: {uni['UTITLE']}
                    🦾 **Universe Arm**: {uni['UARM']}
                    🧬 **Universe Summon**: {uni['UPET']}

                    :crossed_swords: **Tales Order**: {tales_list}
                    """))
                    embedVar.set_image(url=uni['PATH'])
                    universe_embed_list.append(embedVar)

            buttons = [
                manage_components.create_button(style=3, label="🎴 Cards", custom_id="cards"),
                manage_components.create_button(style=1, label="🎗️ Titles", custom_id="titles"),
                manage_components.create_button(style=1, label="🦾 Arms", custom_id="arms"),
                manage_components.create_button(style=1, label="🧬 Summons", custom_id="summons"),
                manage_components.create_button(style=2, label="✨ Destinies", custom_id="destinies")
            ]
            custom_action_row = manage_components.create_actionrow(*buttons)

            async def custom_function(self, button_ctx):
                universe_name = str(button_ctx.origin_message.embeds[0].title)
                await button_ctx.defer(ignore=True)
                if button_ctx.author == ctx.author:
                    if button_ctx.custom_id == "cards":
                        await cardlist(self, ctx, universe_name)
                        self.stop = True
                    if button_ctx.custom_id == "titles":
                        await titlelist(self, ctx, universe_name)
                        self.stop = True
                    if button_ctx.custom_id == "arms":
                        await armlist(self, ctx, universe_name)
                        self.stop = True
                    if button_ctx.custom_id == "summons":
                        await summonlist(self, ctx, universe_name)
                        self.stop = True
                    if button_ctx.custom_id == "destinies":
                        await destinylist(self, ctx, universe_name)
                        self.stop = True
                else:
                    await ctx.send("This is not your command.")


            await Paginator(bot=self.bot, ctx=ctx, useQuitButton=True, deleteAfterTimeout=True, pages=universe_embed_list, customActionRow=[
                custom_action_row,
                custom_function,
            ]).run()


        except Exception as ex:
            trace = []
            tb = ex.__traceback__
            while tb is not None:
                trace.append({
                    "filename": tb.tb_frame.f_code.co_filename,
                    "name": tb.tb_frame.f_code.co_name,
                    "lineno": tb.tb_lineno
                })
                tb = tb.tb_next
            print(str({
                'type': type(ex).__name__,
                'message': str(ex),
                'trace': trace
            }))


    @cog_ext.cog_slash(description="View all Homes for purchase", guild_ids=main.guild_ids)
    async def houses(self, ctx: SlashContext):
        a_registered_player = await crown_utilities.player_check(ctx)
        if not a_registered_player:
            return


        house_data = db.queryAllHouses()
        user = db.queryUser({'DID': str(ctx.author.id)})

        house_list = []
        for homes in house_data:
            house_list.append(
                f":house: | {homes['HOUSE']}\n:coin: | **COST: **{'{:,}'.format(homes['PRICE'])}\n:part_alternation_mark: | **MULT: **{homes['MULT']}x\n_______________")

        total_houses = len(house_list)
        while len(house_list) % 10 != 0:
            house_list.append("")

        # Check if divisible by 10, then start to split evenly
        if len(house_list) % 10 == 0:
            first_digit = int(str(len(house_list))[:1])
            houses_broken_up = np.array_split(house_list, first_digit)

        # If it's not an array greater than 10, show paginationless embed
        if len(house_list) < 10:
            embedVar = discord.Embed(title=f"House List", description="\n".join(house_list), colour=0x7289da)
            embedVar.set_footer(text=f"{total_houses} Total Houses\n/viewhouse - View House Details")
            await ctx.send(embed=embedVar)

        embed_list = []
        for i in range(0, len(houses_broken_up)):
            globals()['embedVar%s' % i] = discord.Embed(title=f":house: House List",
                                                        description="\n".join(houses_broken_up[i]), colour=0x7289da)
            globals()['embedVar%s' % i].set_footer(text=f"{total_houses} Total Houses\n/viewhouse - View House Details")
            embed_list.append(globals()['embedVar%s' % i])

        paginator = DiscordUtils.Pagination.CustomEmbedPaginator(ctx, remove_reactions=True)
        paginator.add_reaction('⏮️', "first")
        paginator.add_reaction('⬅️', "back")
        paginator.add_reaction('🔐', "lock")
        paginator.add_reaction('➡️', "next")
        paginator.add_reaction('⏭️', "last")
        embeds = embed_list
        await paginator.run(embeds)


    @cog_ext.cog_slash(description="View all Halls for purchase", guild_ids=main.guild_ids)
    async def halls(self, ctx: SlashContext):
        a_registered_player = await crown_utilities.player_check(ctx)
        if not a_registered_player:
            return


        hall_data = db.queryAllHalls()
        user = db.queryUser({'DID': str(ctx.author.id)})

        hall_list = []
        for homes in hall_data:
            hall_list.append(
                f":flags: | {homes['HALL']}\n🛡️ | **DEF: **{homes['DEFENSE']}\n:coin: | **COST: **{'{:,}'.format(homes['PRICE'])}\n:part_alternation_mark: | **MULT: **{homes['MULT']}x\n:moneybag: | **SPLIT: **{'{:,}'.format(homes['SPLIT'])}x\n:yen: | **FEE: **{'{:,}'.format(homes['FEE'])}\n_______________")

        total_halls = len(hall_list)
        while len(hall_list) % 10 != 0:
            hall_list.append("")

        # Check if divisible by 10, then start to split evenly
        if len(hall_list) % 10 == 0:
            first_digit = int(str(len(hall_list))[:1])
            halls_broken_up = np.array_split(hall_list, first_digit)

        # If it's not an array greater than 10, show paginationless embed
        if len(hall_list) < 10:
            embedVar = discord.Embed(title=f"Hall List", description="\n".join(hall_list), colour=0x7289da)
            embedVar.set_footer(text=f"{total_halls} Total Halls\n/viewhall - View Hall Details")
            await ctx.send(embed=embedVar)

        embed_list = []
        for i in range(0, len(halls_broken_up)):
            globals()['embedVar%s' % i] = discord.Embed(title=f":flags: Hall List",
                                                        description="\n".join(halls_broken_up[i]), colour=0x7289da)
            globals()['embedVar%s' % i].set_footer(text=f"{total_halls} Total Halls\n/viewhall - View Hall Details")
            embed_list.append(globals()['embedVar%s' % i])

        paginator = DiscordUtils.Pagination.CustomEmbedPaginator(ctx, remove_reactions=True)
        paginator.add_reaction('⏮️', "first")
        paginator.add_reaction('⬅️', "back")
        paginator.add_reaction('🔐', "lock")
        paginator.add_reaction('➡️', "next")
        paginator.add_reaction('⏭️', "last")
        embeds = embed_list
        await paginator.run(embeds)

    # @cog_ext.cog_slash(description="Quit and Close your private channel", guild_ids=main.guild_ids)
    # async def forcequit(self, ctx: SlashContext):
    #     private_channel = ctx
    #     ov = private_channel.channel.overwrites
    #     validator = False
    #     for o in ov:
    #         if str(ctx.author) == str(o):
    #             validator = True
    #     if private_channel.guild and validator:
    #         await discord.TextChannel.delete(private_channel.channel, reason=None)



async def tutorial(self, ctx: SlashContext):
    try:
        await ctx.defer()
        a_registered_player = await crown_utilities.player_check(ctx)
        if not a_registered_player:
            return


        await ctx.send("🆚 Building Tutorial Match...", delete_after=10)
        private_channel = ctx
        starttime = time.asctime()
        h_gametime = starttime[11:13]
        m_gametime = starttime[14:16]
        s_gametime = starttime[17:19]

        # Tutorial Code
        tutorialbot = '837538366509154407'
        legendbot = '845672426113466395'
        tutorial_user = await self.bot.fetch_user(tutorialbot)
        opponent = db.queryUser({'DISNAME': str(tutorial_user)})
        oppDID = opponent['DID']
        tutorial = False
        if oppDID == tutorialbot or oppDID == legendbot:
            tutorial = True
        mode = "PVP"

        # Get Session Owner Disname for scoring
        sowner = db.queryUser({'DID': str(ctx.author.id)})
        opponent = db.queryUser({'DISNAME': str(tutorial_user)})
        oteam = sowner['TEAM']
        tteam = opponent['TEAM']
        oteam_info = db.queryTeam({'TEAM_NAME':str(oteam)})
        tteam_info = db.queryTeam({'TEAM_NAME':str(tteam)})
        if oteam_info:
            oguild = oteam_info['GUILD']
        else:
            oguild ="PCG"
        if tteam_info:
            tguild = tteam_info['GUILD']
        else:
            tguild ="PCG"

        o = db.queryCard({'NAME': sowner['CARD']})
        otitle = db.queryTitle({'TITLE': sowner['TITLE']})

        t = db.queryCard({'NAME': opponent['CARD']})
        ttitle = db.queryTitle({'TITLE': opponent['TITLE']})

        # universe = "Naruto"
        # selected_universe = {"TITLE": "Naruto"}
        if private_channel:
            await battle_commands(self, ctx, mode, None, None, None, oguild, None, None, sowner, oteam, None, opponent, tteam, tguild, None, None, None, None, None, "Tutorial")
        else:
            await ctx.send("Failed to start battle!")
    except Exception as ex:
        trace = []
        tb = ex.__traceback__
        while tb is not None:
            trace.append({
                "filename": tb.tb_frame.f_code.co_filename,
                "name": tb.tb_frame.f_code.co_name,
                "lineno": tb.tb_lineno
            })
            tb = tb.tb_next
        print(str({
            'PLAYER': str(ctx.author),
            'type': type(ex).__name__,
            'message': str(ex),
            'trace': trace
        }))
        guild = self.bot.get_guild(main.guild_id)
        channel = guild.get_channel(main.guild_channel)
        await channel.send(f"'PLAYER': **{str(ctx.author)}**, 'GUILD': **{str(ctx.author.guild)}**,  TYPE: {type(ex).__name__}, MESSAGE: {str(ex)}, TRACE: {trace}")
        return


async def score(owner, user: User):
    session_query = {"OWNER": str(owner), "AVAILABLE": True, "KINGSGAMBIT": False}
    session_data = db.querySession(session_query)
    teams = [x for x in session_data['TEAMS']]
    winning_team = {}
    for x in teams:
        if str(user) in x['TEAM']:
            winning_team = x
    new_score = winning_team['SCORE'] + 1
    update_query = {'$set': {'TEAMS.$.SCORE': new_score}}
    query = {"_id": session_data["_id"], "TEAMS.TEAM": str(user)}
    response = db.updateSession(session_query, query, update_query)
    reciever = db.queryUser({'DISNAME': str(user)})
    name = reciever['DISNAME']
    message = ":one: You Scored, Don't Let Up :one:"

    if response:
        message = ":one:"
    else:
        message = "Score not added. Please, try again. "

    return message


async def quest(player, opponent, mode):
    user_data = db.queryVault({'DID': str(player.id)})
    quest_data = {}
    try:
        if user_data['QUESTS']:
            for quest in user_data['QUESTS']:
                if opponent == quest['OPPONENT']:
                    quest_data = quest

            if quest_data == {}:
                return
            completion = quest_data['GOAL'] - (quest_data['WINS'] + 1)
            reward = int(quest_data['REWARD'])

            if str(mode) == "Dungeon" and completion >= 0:
                message = "Quest progressed!"
                if completion == 0:
                    await crown_utilities.bless(reward, player.id)
                    message = f"Quest Completed! :coin:{reward} has been added to your balance."

                    # server_query = {'GNAME': str(player.guild)}
                    # update_server_query = {
                    #     '$inc': {'SERVER_BALANCE': 10000}
                    # }
                    # updated_server = db.updateServer(server_query, update_server_query)

                query = {'DID': str(player.id)}
                update_query = {'$inc': {'QUESTS.$[type].' + "WINS": 2}}
                filter_query = [{'type.' + "OPPONENT": opponent}]
                resp = db.updateVault(query, update_query, filter_query)
                return message

            elif str(mode) == "Tales" and completion >= 0:
                message = "Quest progressed!"
                if completion == 0:
                    await crown_utilities.bless(reward, player.id)
                    message = f"Quest Completed! :coin:{reward} has been added to your balance."
                    # server_query = {'GNAME': str(player.guild)}
                    # update_server_query = {
                    #     '$inc': {'SERVER_BALANCE': 5000}
                    # }
                    # updated_server = db.updateServer(server_query, update_server_query)

                query = {'DID': str(player.id)}
                update_query = {'$inc': {'QUESTS.$[type].' + "WINS": 1}}
                filter_query = [{'type.' + "OPPONENT": opponent}]
                resp = db.updateVault(query, update_query, filter_query)

                return message
            else:
                return False
        else:
            return False
    except Exception as ex:
        trace = []
        tb = ex.__traceback__
        while tb is not None:
            trace.append({
                "filename": tb.tb_frame.f_code.co_filename,
                "name": tb.tb_frame.f_code.co_name,
                "lineno": tb.tb_lineno
            })
            tb = tb.tb_next
        print(str({
            'type': type(ex).__name__,
            'message': str(ex),
            'trace': trace
        }))
        return


async def destiny(player, opponent, mode):
    vault = db.queryVault({'DID': str(player.id)})
    user = db.queryUser({"DID": str(player.id)})
    vault_query = {'DID': str(player.id)}
    card_info = db.queryCard({"NAME": str(user['CARD'])})
    skin_for = card_info['SKIN_FOR']
    
    hand_limit = 25
    storage_allowed_amount = user['STORAGE_TYPE'] * 15
    storage_amount = len(vault['STORAGE'])
    hand_length = len(vault['CARDS'])
    list1 = vault['CARDS']
    list2 = vault['STORAGE']
    current_cards = list1.extend(list2)

    if hand_length >= hand_limit and storage_amount >= storage_allowed_amount:
        message = f"Your storage is full. You are unable to complete the destinies until you have available storage for rewarded destiny cards."
        return message



    owned_destinies = []
    for destiny in vault['DESTINY']:
        owned_destinies.append(destiny['NAME'])

    owned_card_levels_list = []
    for c in vault['CARD_LEVELS']:
        owned_card_levels_list.append(c['CARD'])
    message = ""
    completion = 1
    try:
        if vault['DESTINY']:
            # TALES
            for destiny in vault['DESTINY']:
                if (user['CARD'] in destiny['USE_CARDS'] or skin_for in destiny['USE_CARDS']) and opponent == destiny['DEFEAT'] and mode == "Tales":
                    if destiny['WINS'] < destiny['REQUIRED']:
                        message = f"Secured a win toward **{destiny['NAME']}**. Keep it up!"
                        completion = destiny['REQUIRED'] - (destiny['WINS'] + 1)

                    if completion == 0:
                        try:
                            if destiny['EARN'] not in owned_card_levels_list:
                                # Add the CARD_LEVELS for Destiny Card
                                update_query = {'$addToSet': {
                                    'CARD_LEVELS': {'CARD': str(destiny['EARN']), 'LVL': 0, 'TIER': 0, 'EXP': 0,
                                                    'HLT': 0, 'ATK': 0, 'DEF': 0, 'AP': 0}}}
                                db.updateVaultNoFilter(vault_query, update_query)
                                #
                        except Exception as ex:
                            print(f"Error in Completing Destiny: {ex}")

                        if len(list1) >= 25 and storage_amount < storage_allowed_amount:
                            response = db.updateVaultNoFilter(vault_query, {'$addToSet': {'STORAGE': str(destiny['EARN'])}})
                            message = f"**{destiny['NAME']}** completed! **{destiny['EARN']}** has been added to your storage!"
                        else:
                            response = db.updateVaultNoFilter(vault_query, {'$addToSet': {'CARDS': str(destiny['EARN'])}})
                            message = f"**{destiny['NAME']}** completed! **{destiny['EARN']}** has been added to your vault!"
                        query = {'DID': str(player.id)}
                        update_query = {'$pull': {'DESTINY': {'NAME': destiny['NAME']}}}
                        resp = db.updateVaultNoFilter(query, update_query)

                        for dest in d.destiny:
                            if destiny['EARN'] in dest["USE_CARDS"] and dest['NAME'] not in owned_destinies:
                                db.updateVaultNoFilter(vault_query, {'$addToSet': {'DESTINY': dest}})
                                message = f"**DESTINY AWAITS!**\n**New Destinies** have been added to your vault."
                        await player.send(message)
                        return message

                    query = {'DID': str(player.id)}
                    update_query = {'$inc': {'DESTINY.$[type].' + "WINS": 1}}
                    filter_query = [{'type.' + "DEFEAT": opponent, 'type.' + 'USE_CARDS':user['CARD']}]
                    if user['CARD'] not in destiny['USE_CARDS']:
                        filter_query = [{'type.' + "DEFEAT": opponent, 'type.' + 'USE_CARDS':skin_for}]
                    resp = db.updateVault(query, update_query, filter_query)
                    await player.send(message)
                    return message

            # Dungeon
            for destiny in vault['DESTINY']:
                if user['CARD'] in destiny['USE_CARDS'] and opponent == destiny['DEFEAT'] and mode == "Dungeon":
                    message = f"Secured a win toward **{destiny['NAME']}**. Keep it up!"
                    completion = destiny['REQUIRED'] - (destiny['WINS'] + 3)

                    if completion <= 0:
                        try:
                            if destiny['EARN'] not in owned_card_levels_list:
                                # Add the CARD_LEVELS for Destiny Card
                                update_query = {'$addToSet': {
                                    'CARD_LEVELS': {'CARD': str(destiny['EARN']), 'LVL': 0, 'TIER': 0, 'EXP': 0,
                                                    'HLT': 0, 'ATK': 0, 'DEF': 0, 'AP': 0}}}
                                db.updateVaultNoFilter(vault_query, update_query)
                                #
                        except Exception as ex:
                            print(f"Error in Completing Destiny: {ex}")

                        if len(list1) >= 25 and storage_amount < storage_allowed_amount:
                            response = db.updateVaultNoFilter(vault_query, {'$addToSet': {'STORAGE': str(destiny['EARN'])}})
                            message = f"**{destiny['NAME']}** completed! **{destiny['EARN']}** has been added to your storage!"
                        else:
                            response = db.updateVaultNoFilter(vault_query, {'$addToSet': {'CARDS': str(destiny['EARN'])}})
                            message = f"**{destiny['NAME']}** completed! **{destiny['EARN']}** has been added to your vault!"
                        query = {'DID': str(player.id)}
                        update_query = {'$pull': {'DESTINY': {'NAME': destiny['NAME']}}}
                        resp = db.updateVaultNoFilter(query, update_query)

                        for dest in d.destiny:
                            if destiny['EARN'] in dest["USE_CARDS"] and dest['NAME'] not in owned_destinies:
                                db.updateVaultNoFilter(vault_query, {'$addToSet': {'DESTINY': dest}})
                                message = f"**DESTINY AWAITS!**\n**New Destinies** have been added to your vault."
                        await player.send(message)
                        return message

                    query = {'DID': str(player.id)}
                    update_query = {'$inc': {'DESTINY.$[type].' + "WINS": 3}}
                    filter_query = [{'type.' + "DEFEAT": opponent}]
                    resp = db.updateVault(query, update_query, filter_query)
                    await player.send(message)
                    return message
        
        else:
            return False
    except Exception as ex:
        trace = []
        tb = ex.__traceback__
        while tb is not None:
            trace.append({
                "filename": tb.tb_frame.f_code.co_filename,
                "name": tb.tb_frame.f_code.co_name,
                "lineno": tb.tb_lineno
            })
            tb = tb.tb_next
        print(str({
            'type': type(ex).__name__,
            'message': str(ex),
            'trace': trace
        }))
        await player.send(
            "There's an issue with your Destiny. Alert support.")
        return


async def summonlevel(pet, player):
    vault = db.queryVault({'DID': str(player.id)})
    petinfo = {}
    try:
        for x in vault['PETS']:
            if x['NAME'] == str(pet):
                petinfo = x

        lvl = petinfo['LVL']  # To Level Up -(lvl * 10 = xp required)
        lvl_req = lvl * 10
        exp = petinfo['EXP']
        petmove_text = list(petinfo.keys())[3]  # Name of the ability
        petmove_ap = list(petinfo.values())[3]  # Ability Power
        petmove_type = petinfo['TYPE']
        bond = petinfo['BOND']
        bondexp = petinfo['BONDEXP']
        bond_req = ((petmove_ap * 5) * (bond + 1))

        if lvl < 10:
            # Non Level Up Code
            if exp < (lvl_req - 1):
                query = {'DID': str(player.id)}
                update_query = {'$inc': {'PETS.$[type].' + "EXP": 1}}
                filter_query = [{'type.' + "NAME": str(pet)}]
                response = db.updateVault(query, update_query, filter_query)

            # Level Up Code
            if exp >= (lvl_req - 1):
                query = {'DID': str(player.id)}
                update_query = {'$set': {'PETS.$[type].' + "EXP": 0}, '$inc': {'PETS.$[type].' + "LVL": 1}}
                filter_query = [{'type.' + "NAME": str(pet)}]
                response = db.updateVault(query, update_query, filter_query)

        if bond < 3:
            # Non Bond Level Up Code
            if bondexp < (bond_req - 1):
                query = {'DID': str(player.id)}
                update_query = {'$inc': {'PETS.$[type].' + "BONDEXP": 1}}
                filter_query = [{'type.' + "NAME": str(pet)}]
                response = db.updateVault(query, update_query, filter_query)

            # Bond Level Up Code
            if bondexp >= (bond_req - 1):
                query = {'DID': str(player.id)}
                update_query = {'$set': {'PETS.$[type].' + "BONDEXP": 0}, '$inc': {'PETS.$[type].' + "BOND": 1}}
                filter_query = [{'type.' + "NAME": str(pet)}]
                response = db.updateVault(query, update_query, filter_query)
    except Exception as ex:
        trace = []
        tb = ex.__traceback__
        while tb is not None:
            trace.append({
                "filename": tb.tb_frame.f_code.co_filename,
                "name": tb.tb_frame.f_code.co_name,
                "lineno": tb.tb_lineno
            })
            tb = tb.tb_next
        print(str({
            'type': type(ex).__name__,
            'message': str(ex),
            'trace': trace
        }))
        await ctx.send(
            "There's an issue with leveling your Summon. Alert support.")
        return

async def savematch(player, card, path, title, arm, universe, universe_type, exclusive):
    matchquery = {'PLAYER': player, 'CARD': card, 'PATH': path, 'TITLE': title, 'ARM': arm, 'UNIVERSE': universe,
                  'UNIVERSE_TYPE': universe_type, 'EXCLUSIVE': exclusive}
    save_match = db.createMatch(data.newMatch(matchquery))


def starting_position(o, t):
    if o > t:
        return True
    else:
        return False


def damage_cal(opponent_affinity, move_type, move_element, universe, card, ability, attack, defense, op_defense, stamina, enhancer, health, op_health, op_stamina,
               maxhealth, op_attack, special_description, turn, ap_buff, other):
    if op_defense <= 0:
        op_defense = 25
    if attack <= 0:
        attack = 25
    if defense <= 0:
        defense = 25
    if op_attack <= 0:
        op_attack = 25
    if other == None:
        move = list(ability.keys())[0]
        ap = list(ability.values())[0] + ap_buff
        move_stamina = list(ability.values())[1]
        can_use_move_flag = True
    else:
        move = list(ability.keys())[0]
        ap = list(ability.values())[0] + ap_buff
        move_stamina = list(other.values())[1]
        can_use_move_flag = True
    enh = ""
    if enhancer:
        enh = list(ability.values())[2]

    # Do I have enough stamina to use this move?
    if stamina >= move_stamina or move_stamina==15:
        can_use_move_flag = True
    else:
        can_use_move_flag = False

    atk = attack
    defense = defense
    stam = stamina
    hlt = health
    lifesteal = 0
    drain = 0
    growth = 0
    flog = 0
    wither = 0
    brace = 0
    rage = 0
    bzrk = 0
    crystal = 0
    stance = 0
    confuse = 0
    blink = 0
    slow = 0
    haste = 0
    soulchain = 0
    gamble = 0
    fear = 0
    wave = 0
    creation = 0
    blast = 0
    destruction = 0

    enh_type = ""
    if enhancer:
        ap = ap - ap_buff
        if enh == 'ATK':
            enh_type = "ATK"
            atk = round((ap / 100) * attack)
        elif enh == 'DEF':
            enh_type = "DEF"
            defense = round((ap / 100) * defense)
        elif enh == 'STAM':
            enh_type = "STAM"
            stam = ap
        elif enh == 'HLT':
            enh_type = 'HLT'
            hlt = round(ap + (.16 * health))
        elif enh == 'LIFE':
            enh_type = 'LIFE'
            lifesteal = round(ap + (.09 * op_health))
        elif enh == 'DRAIN':
            enh_type = 'DRAIN'
            drain = ap
        elif enh == 'FLOG':
            enh_type = "FLOG"
            flog = round((ap / 100) * op_attack)
        elif enh == 'WITHER':
            enh_type = "WITHER"
            wither = round((ap / 100) * op_defense)
        elif enh == 'RAGE':
            enh_type = "RAGE"
            rage = round((ap / 100) * defense)
        elif enh == 'BRACE':
            enh_type = "BRACE"
            brace = round((ap / 100) * attack)
        elif enh == 'BZRK':
            enh_type = "BZRK"
            bzrk = round((ap / 100) * health)
        elif enh == 'CRYSTAL':
            enh_type = "CRYSTAL"
            crystal = round((ap / 100) * health)
        elif enh == 'GROWTH':
            enh_type = "GROWTH"
            growth = (ap / 100 * maxhealth)
        elif enh == 'STANCE':
            enh_type = "STANCE"
            stance = attack + ap
        elif enh == 'CONFUSE':
            enh_type = "CONFUSE"
            confuse = op_attack - ap
        elif enh == 'BLINK':
            enh_type = "BLINK"
            blink = ap

        elif enh == 'SLOW':
            enh_type = "SLOW"
            slow = ap
        elif enh == 'HASTE':
            enh_type = "HASTE"
            haste = ap
        elif enh == 'FEAR':
            enh_type = "FEAR"
            fear = (ap / 100 * maxhealth)
        elif enh == 'SOULCHAIN':
            enh_type = "SOULCHAIN"
            soulchain = ap
        elif enh == 'GAMBLE':
            enh_type = "GAMBLE"
            gamble = ap
        elif enh == 'WAVE':
            enh_type = "WAVE"
            wave = ap
        elif enh == 'CREATION':
            enh_type = "CREATION"
            creation = ap
        elif enh == 'BLAST':
            enh_type = "BLAST"
            blast = ap
        elif enh == 'DESTRUCTION':
            enh_type = "DESTRUCTION"
            destruction = ap

    # handle different staments for lifesteal and drain
    if enhancer:
        enhanced = 0
        if enh_type == "ATK":
            enhanced = atk
        elif enh_type == "DEF":
            enhanced = defense
        elif enh_type == "STAM":
            enhanced = stam
        elif enh_type == "HLT":
            newhealth = hlt + health
            if health >= maxhealth:
                enhanced = 0
            elif newhealth >= maxhealth:
                enhanced = maxhealth - health
            else:
                enhanced = hlt
        elif enh_type == 'LIFE':
            newhealth = lifesteal + health
            if health >= maxhealth:
                enhanced = 0
            elif newhealth >= maxhealth:
                enhanced = maxhealth - health
            else:
                enhanced = lifesteal
        elif enh_type == 'DRAIN':
            enhanced = drain
        elif enh_type == "FLOG":
            enhanced = flog
        elif enh_type == "WITHER":
            enhanced = wither
        elif enh_type == "RAGE":
            enhanced = rage
        elif enh_type == 'BRACE':
            enhanced = brace
        elif enh_type == 'BZRK':
            enhanced = bzrk
        elif enh_type == "CRYSTAL":
            enhanced = crystal
        elif enh_type == "GROWTH":
            enhanced = growth
        elif enh_type == "STANCE":
            enhanced = stance
        elif enh_type == 'CONFUSE':
            enhanced = confuse
        elif enh_type == 'BLINK':
            enhanced = blink
        elif enh_type == "SLOW":
            enhanced = slow
        elif enh_type == "HASTE":
            enhanced = haste
        elif enh_type == "FEAR":
            enhanced = fear
        elif enh_type == 'SOULCHAIN':
            enhanced = soulchain
        elif enh_type == 'GAMBLE':
            enhanced = gamble
        elif enh_type == 'WAVE':
            if turn == 0:
                enhanced = ap
            else:
                rand = round(random.randint(2, 50))
                n = ap
                if turn % 10 == 0:
                    n = ap * .75
                elif n <= 0:
                    n = 30
                elif turn == rand:
                    n = ap * 2
                else:
                    n = ap / turn
                enhanced = n
        elif enh_type == 'BLAST':
            if turn == 0:
                enhanced = ap
            else:
                enhanced = round(ap * turn)
                if enhanced >= 350:
                    enhanced = 350
        elif enh_type == 'CREATION':
            if turn == 0:
                enhanced = ap
            else:
                rand = round(random.randint(2, 50))
                n = ap
                if turn % 10 == 0:
                    n = ap * .75
                elif n <= 0:
                    n = 30
                elif turn == rand:
                    n = ap * 2
                else:
                    n = ap / turn
                enhanced = n
        elif enh_type == 'DESTRUCTION':
            if turn == 0:
                enhanced = ap
            else:
                enhanced = round(ap * turn)
                if enhanced >= 300:
                    enhanced = 300
            if enhanced > op_health:
                message = f'Opponent has been reduced.'
                enhanced = op_health - 1
        if move_stamina == 15: #If move is a pet move
            move_stamina = 0
            if enh_type == 'ATK':
                message = f'{move} used! Increasing Attack by {enhanced}'
            elif enh_type == 'DEF':
                message = f'{move} used! Increasing Defense by {enhanced}'
            elif enh_type == 'STAM':
                message = f'{move} used! Increasing Stamina by {enhanced}'
            elif enh_type == 'LIFE':
                if enhanced == 0:
                    message = f'{move} used! Stealing {enhanced} Health... *Your Health is full!*'
                else:
                    message = f'{move} used! Stealing {enhanced} Health'
            elif enh_type == 'DRAIN':
                message = f'{move} used! Draining {enhanced} Stamina'
            elif enh_type == 'FLOG':
                message = f'{move} used! Stealing {enhanced} Attack'
            elif enh_type == 'WITHER':
                message = f'{move} used! Stealing {enhanced} Defense'
            elif enh_type == 'RAGE':
                message = f'{move} used! Sacrificing {enhanced} Defense, Increasing Attack by {enhanced}'
            elif enh_type == 'BRACE':
                message = f'{move} used! Sacrificing {enhanced} Attack, Increasing Defense by {enhanced}'
            elif enh_type == 'BZRK':
                message = f'{move} used! Sacrificing {enhanced} Health, Increasing Attack by {enhanced}'
            elif enh_type == 'CRYSTAL':
                message = f'{move} used! Sacrifices {enhanced} Health, Increasing Defense by {enhanced}'
            elif enh_type == 'WAVE' or enh_type == 'BLAST':
                if enh_type == 'BLAST' and enhanced > 100:
                    enhanced =100
                message = f'{move} used! Dealing {round(enhanced)} {enh_type} Damage!'
            elif enh_type == 'CREATION':
                message = f'{move} used! Healing and Increasing Max Health by {round(enhanced)}'
            elif enh_type == 'DESTRUCTION':
                if enhanced > 100:
                    enhanced =100
                message = f'{move} used! Destroying {round(enhanced)} Max Health'
            elif enh_type == 'GROWTH':
                message = f'{move} used! Sacrificing {round(enhanced)} Max Health to Increase Attack and Defense by {round(enhanced * .5)}'
            elif enh_type == 'STANCE':
                message = f'{move} used! Swapping Attack and Defense, Increasing Defense to {enhanced}'
            elif enh_type == 'CONFUSE':
                message = f'{move} used! Swapping Opponent Attack and Defense, Decreasing Defense to {enhanced}'
            elif enh_type == 'HLT':
                if enhanced == 0:
                    message = f'{move} used! Healing for {enhanced} Health... *Your Health is full!*'
                else:
                    message = f'{move} used! Healing for {enhanced}!'
            elif enh_type == 'FEAR':
                message = f'{move} used! Sacrificing {round(enhanced)} Max Health to Decrease Opponent Attack and Defense by {round(enhanced * .5)}'
            elif enh_type == 'SOULCHAIN':
                message = f'{move} used! Synchronizing Stamina to {enhanced}'
            elif enh_type == 'GAMBLE':
                message = f'{move} used! Synchronizing Health to {enhanced}'
            else:
                message = f'{move} used! inflicts {enh_type}'
        else: #If not a pet move
            if enh_type == 'ATK':
                message = f'{move} used! Increasing **Attack** by **{enhanced}**'
            elif enh_type == 'DEF':
                message = f'{move} used! Increasing **Defense** by **{enhanced}**'
            elif enh_type == 'STAM':
                message = f'{move} used! Increasing **Stamina** by **{enhanced}**'
            elif enh_type == 'LIFE':
                if enhanced == 0:
                    message = f'{move} used! Stealing **{enhanced} Health**  *Your Health is full!*'
                else:
                    message = f'{move} used! Stealing **{enhanced} Health**'
            elif enh_type == 'DRAIN':
                message = f'{move} used! Draining **{enhanced} Stamina**'
            elif enh_type == 'FLOG':
                message = f'{move} used! Stealing **{enhanced} Attack**'
            elif enh_type == 'WITHER':
                message = f'{move} used! Stealing **{enhanced} Defense**'
            elif enh_type == 'RAGE':
                message = f'{move} used! Sacrificing **{enhanced} Defense**, Increasing **Attack** by **{enhanced}**'
            elif enh_type == 'BRACE':
                message = f'{move} used! Sacrificing **{enhanced} Attack**, Increasing **Defense** by **{enhanced}**'
            elif enh_type == 'BZRK':
                message = f'{move} used! Sacrificing **{enhanced} Health**, Increasing **Attack** by **{enhanced}**'
            elif enh_type == 'CRYSTAL':
                message = f'{move} used! Sacrifices **{enhanced} Health**, Increasing **Defense** by **{enhanced}**'
            elif enh_type == 'WAVE' or enh_type == 'BLAST':
                message = f'{move} used! Dealing **{round(enhanced)} {enh_type}** Damage!'
            elif enh_type == 'CREATION':
                message = f'{move} used! **Healing and Increasing Max Health** by **{round(enhanced)}**'
            elif enh_type == 'DESTRUCTION':
                message = f'{move} used! Destroying **{round(enhanced)} Max Health**'
            elif enh_type == 'GROWTH':
                message = f'{move} used! Sacrificing **{round(enhanced)} Max Health** to Increase **Attack and Defense** by **{round(enhanced * .5)}**'
            elif enh_type == 'STANCE':
                message = f'{move} used! Swapping **Attack and Defense**, Increasing **Defense** to **{enhanced}**'
            elif enh_type == 'CONFUSE':
                message = f'{move} used! Swapping **Opponent Attack and Defense**, Decreasing **Defense** to **{enhanced}**'
            elif enh_type == 'HLT':
                message = f'{move} used! **Healing** for **{enhanced}**!'
            elif enh_type == 'FEAR':
                message = f'{move} used! Sacrificing **{round(enhanced)} Max Health** to Decrease **Opponent Attack and Defense** by **{round(enhanced * .5)}**'
            elif enh_type == 'SOULCHAIN':
                message = f'{move} used! **Synchronizing Stamina** to **{enhanced}**'
            elif enh_type == 'GAMBLE':
                message = f'{move} used! **Synchronizing Health** to **{enhanced}**'
            else:
                message = f'{move} used! **Inflicts {enh_type}**'

        response = {"DMG": enhanced, "MESSAGE": message, "STAMINA_USED": move_stamina,
                    "CAN_USE_MOVE": can_use_move_flag, "ENHANCED_TYPE": enh_type, "ENHANCE": True}
        return response

    else:
        # Calculate Damage

        # dmg = ((int(ap) + int(atk)) / (op_defense + 2) * (.20 * int(ap)))
        try:
            defensepower = op_defense - atk
            if defensepower <= 0:
                defensepower = 1

            attackpower = (atk - op_defense) + ap
            if attackpower<=0:
                attackpower =ap

            abilitypower = round(attackpower / defensepower)
            if abilitypower <= 0:
                abilitypower = 25

            dmg = abilitypower
            if dmg > (ap * 1.2):  # If DMG > ap -> Dmg = ap * 1.2
                dmg = ap * 1.2
            elif dmg < (ap / 2):  # If you dmg is less than you base AP you do / of AP Damage
                dmg = ap / 2

            # print(f'{turn} : {card}')
            # print("DEF:" , defensepower, "Closer to 1 is stronger op def")
            # print("ATK:" ,attackpower, "Higher is better")
            # print("AP:" , abilitypower)
            # print("DMG:", dmg)

            # fortitude = round((maxhealth - health))
            # print("FORT:" , fortitude)
            # print("********")
            # attackpower = round((int(atk) * int(ap)) / op_defense) #5.09
            # print(attackpower)
            # modifier = random.randint(6,11)
            # dmg = round((fortitude * attackpower))

            # dmg = ((attackpower * (100 * (100 / defensepower))) * .001) + int(ap)
            does_repel = False
            does_absorb = False
            is_wind_element = False
            ranged_attack = False
            low = dmg - (dmg * .10)
            high = dmg + (dmg * .10)

            move_emoji = crown_utilities.set_emoji(move_element)
            if move_element == "WIND":
                is_wind_element = True
            if move_element == "RANGED" and stamina >= 80:
                ranged_attack = True

            true_dmg = (round(random.randint(int(low), int(high)))) + 25

            message = ""            

            miss_hit = 2  # Miss
            low_hit = 6  # Lower Damage
            med_hit = 13  # Medium Damage
            standard_hit = 19  # Standard Damage
            high_hit = 20  # Crit Hit
            hit_roll = round(random.randint(1, 21))
            # print(f"HIT ROLL: {str(hit_roll)}")
            if move_element == "SPIRIT" and hit_roll > 3:
                hit_roll = hit_roll + 3


            if ranged_attack:
                true_dmg = round(true_dmg * 1.5)

            if hit_roll < miss_hit:
                # if universe == 'Crown Rift Slayers':
                #     true_dmg = round(true_dmg * 2)
                #     message = f'🩸{move_emoji} Feint Attack! {move} Critically Hits for **{true_dmg}**!! :boom: '
                if is_wind_element:
                    true_dmg = round(true_dmg)
                    message = f'🌪️ Wind Attack! {move} hits for **{true_dmg}**!'       
                else:
                    true_dmg = 0
                    message = f'{move_emoji} {move} misses! :dash:'
            elif hit_roll <= low_hit and hit_roll > miss_hit:
                true_dmg = round(true_dmg * .70)
                message = f'{move_emoji} {move} used! Chips for **{true_dmg}**! :anger:'
            elif hit_roll <= med_hit and hit_roll > low_hit:
                true_dmg = round(true_dmg * .85)
                message = f'{move_emoji} {move} used! Connects for **{true_dmg}**! :bangbang:'
            elif hit_roll <= standard_hit and hit_roll > med_hit:
                true_dmg = round(true_dmg)
                message = f'{move_emoji} {move} used! Hits for **{true_dmg}**! :anger_right:'
            elif hit_roll >= 20:
                if universe == 'Crown Rift Awakening':
                    true_dmg = round(true_dmg * 4)
                    message = f"🩸{move_emoji} Blood Awakeking! {move} Mortally Wounds for **{true_dmg}**!! :boom: "
                else:
                    true_dmg = round(true_dmg * 2)
                    message = f"{move_emoji} {move} used! Critically Hits for **{true_dmg}**!! :boom: "

            # if move_stamina == 80:
            #     # message = f"{special_description}\n" + message
            #     message = message
            if opponent_affinity[move_type] == "WEAKNESS" and not (hit_roll <= miss_hit):
                true_dmg = round(true_dmg * 1.3)
                message = f"Opponent is weak to **{move_emoji} {move_element.lower()}**! Strong hit for **{true_dmg}**!"
            if opponent_affinity[move_type] == "RESISTANT" and not (hit_roll <= miss_hit):
                true_dmg = round(true_dmg * .50)
                message = f"Opponent is resistant to **{move_emoji} {move_element.lower()}**.. Weak hit for **{true_dmg}**!"

            if opponent_affinity[move_type] == "IMMUNE" and not (hit_roll <= miss_hit):
                true_dmg = 0
                message = f"Opponent is immune to **{move_emoji} {move_element.lower()}**.. **0** dmg dealt!"

            if opponent_affinity[move_type] == "REPELS" and not (hit_roll <= miss_hit):
                message = f"Opponent repels **{move_emoji} {move_element.lower()}** for **{true_dmg}** dmg!"
                does_repel = True
            if opponent_affinity[move_type] == "ABSORBS" and not (hit_roll <= miss_hit):
                message = f"Opponent absorbs **{move_emoji} {move_element.lower()}** for **{true_dmg}** dmg!"
                does_absorb = True

            response = {"DMG": true_dmg, "MESSAGE": message, "STAMINA_USED": move_stamina,
                        "CAN_USE_MOVE": can_use_move_flag, "ENHANCE": False, "REPEL": does_repel, "ABSORB": does_absorb, "ELEMENT": move_element}
            return response

        except Exception as ex:
            trace = []
            tb = ex.__traceback__
            while tb is not None:
                trace.append({
                    "filename": tb.tb_frame.f_code.co_filename,
                    "name": tb.tb_frame.f_code.co_name,
                    "lineno": tb.tb_lineno
                })
                tb = tb.tb_next
            print(str({
                'type': type(ex).__name__,
                'message': str(ex),
                'trace': trace
            }))

def abyss_level_up_message(did, floor, card, title, arm):
    try:
        message = ""
        drop_message = []
        maxed_out_messages = []
        new_unlock = False
        vault_query = {'DID': did}
        vault = db.altQueryVault(vault_query)
        arm = db.queryArm({'ARM':str(arm)})
        arm_arm = arm['ARM']
        floor_val = int(floor)
        coin_drop = round(100000 + (floor_val * 10000))

        card_drop = card
        title_drop = title
        arm_drop = arm
        # Determine first to beat floor 100
        if floor == 100:
            all_users = db.queryAllUsers()
            first = True
            for user in all_users:
                if user['LEVEL'] == 101:
                    first = False
            if first:
                winner = {
                    'PLAYER': vault['OWNER'],
                    'DID': vault['DID'],
                    'CARD': card,
                    'TITLE': title,
                    'ARM': arm
                }
                rr = db.createGods(data.newGods(winner))

        
        if floor in abyss_floor_reward_list:
            current_titles = vault['TITLES']
            if len(current_titles) >=25:
                drop_message.append("You have max amount of Titles. You did not receive the **Floor Title**.")
            elif title in current_titles:
                maxed_out_messages.append(f"You already own {title_drop} so you did not receive it.")
            else:
                db.updateVaultNoFilter(vault_query,{'$addToSet':{'TITLES': str(title_drop)}}) 
                drop_message.append(f"🎗️ **{title_drop}**")

            current_arms = []
            for arm in vault['ARMS']:
                current_arms.append(arm['ARM'])
            if len(current_arms) >=25:
                maxed_out_messages.append("You have max amount of Arms. You did not receive the **Floor Arm**.")
            elif arm_arm in current_arms:
                maxed_out_messages.append(f"You already own {arm_drop['ARM']} so you did not receive it.")
            else:
                db.updateVaultNoFilter(vault_query,{'$addToSet':{'ARMS': {'ARM': str(arm_drop['ARM']), 'DUR': 25}}})
                drop_message.append(f"🦾 **{arm_drop['ARM']}**")

            current_cards = vault['CARDS']
            if len(current_cards) >= 25:
                maxed_out_messages.append("You have max amount of Cards. You did not earn receive **Floor Card**.")
            elif card in current_cards:
                maxed_out_messages.append(f"You already own {card_drop} so you did not receive it.")
            else:
                db.updateVaultNoFilter(vault_query,{'$addToSet': {'CARDS': str(card_drop)}})
                drop_message.append(f"🎴 **{card_drop}**")

            
            owned_card_levels_list = []
            for c in vault['CARD_LEVELS']:
                owned_card_levels_list.append(c['CARD'])

            owned_destinies = []
            for destiny in vault['DESTINY']:
                owned_destinies.append(destiny['NAME'])
            
            if card not in owned_card_levels_list:
                update_query = {'$addToSet': {'CARD_LEVELS': {'CARD': str(card), 'LVL': 0, 'TIER': 0, 'EXP': 0, 'HLT': 0, 'ATK': 0, 'DEF': 0, 'AP': 0}}}
                r = db.updateVaultNoFilter(vault_query, update_query)

            counter = 2
            for destiny in d.destiny:
                if card in destiny["USE_CARDS"] and destiny['NAME'] not in owned_destinies:
                    counter = counter - 1
                    db.updateVaultNoFilter(vault_query, {'$addToSet': {'DESTINY': destiny}})
                    if counter >=1:
                        drop_message.append(f"**DESTINY AWAITS!**")
        else:
            drop_message.append(f":coin: **{'{:,}'.format(coin_drop)}** has been added to your vault!")

        if floor == 0:
            message = "🎊 Congratulations! 🎊 You unlocked **Shop!**. Use the **/shop** command to purchase Cards, Titles and Arms!"
            new_unlock = True
        
        if floor == 2:
            message = "🎊 Congratulations! 🎊 You unlocked **Tales!**. Use the **/tales** command to battle through Universes to earn Cards, Titles, Arms, Summons, and Money!"
            new_unlock = True

        if floor == 8:
            message = "🎊 Congratulations! 🎊 You unlocked **Crafting!**. Use the **/craft** command to craft Universe Items such as Universe Souls, or even Destiny Line Wins toward Destiny Cards!"
            new_unlock = True

        if floor == 3:
            message = "🎊 Congratulations! 🎊 You unlocked **Guilds**. You're now able to create and join Guilds! Use /help to learn more about Guild and Family commands!"
            new_unlock = True

        if floor == 9:
            message = "🎊 Congratulations! 🎊 You unlocked **Guilds, and Families!**. You're now able to create Guilds and Families! Use /help to learn more about Guild and Family commands!"
            new_unlock = True
            
        if floor == 10:
            message = "🎊 Congratulations! 🎊 You unlocked **Trading and Blacksmith**. Use the **/trade** command to Trade Cards, Titles and Arms with other players!\nUse the **/blacksmith** command to purchase Level Ups, Arm Durability Increases and more!"
            new_unlock = True

        if floor == 6:
            message = "🎊 Congratulations! 🎊 You unlocked **PVP**. \nUse the /**battle** command to PVP against other players!"
            new_unlock = True

        if floor == 20:
            message = "🎊 Congratulations! 🎊 You unlocked **Gifting**. Use the **/gift** command to gift players money!"
            new_unlock = True
        
        if floor == 3:
            message = "🎊 Congratulations! 🎊 You unlocked **Co-Op**. Use the **/coop** to traverse Tales with other players!"
            new_unlock = True
            
        if floor == 9:
            message = "🎊 Congratulations! 🎊 You unlocked **Associations**. Use the **/oath** to create an association with another Guild Owner!"
            new_unlock = True

        if floor == 25:
            message = "🎊 Congratulations! 🎊 You unlocked **Explore Mode**. Explore Mode allows for Cards to spawn randomly with Bounties! If you defeat the Card you will earn that Card + it's Bounty! Happy Hunting!"
            new_unlock = True

        if floor == 40:
            message = "🎊 Congratulations! 🎊 You unlocked **Dungeons**. Use the **/tales** command and select Dungeons to battle through the Hard Mode of Universes to earn super rare Cards, Titles, and Arms!"
            new_unlock = True
            
        if floor == 7:
            message = "🎊 Congratulations! 🎊 You unlocked **Duo**. Use the **/duo** command and select a Difficulty and a Preset to bring into Tales with you!"
            new_unlock = True

        if floor == 60:
            message = "🎊 Congratulations! 🎊 You unlocked **Bosses**. Use the **/tales** command and select Boss to battle Universe Bosses too earn ultra rare Cards, Titles, and Arms!"
            new_unlock = True
            
        if floor == 100:
            message = "🎊 Congratulations! 🎊 You unlocked **Soul Exchange**. Use the **/exchange** command and Exchange any boss souls for cards from their respective universe! This will Reset your Abyss Level!"
            new_unlock = True


        return {"MESSAGE": message, "NEW_UNLOCK": new_unlock, "DROP_MESSAGE": drop_message}
    except Exception as ex:
        trace = []
        tb = ex.__traceback__
        while tb is not None:
            trace.append({
                "filename": tb.tb_frame.f_code.co_filename,
                "name": tb.tb_frame.f_code.co_name,
                "lineno": tb.tb_lineno
            })
            tb = tb.tb_next
        print(str({
            'type': type(ex).__name__,
            'message': str(ex),
            'trace': trace
        }))
        return         

# DONT REMOVE THIS
cache = dict()

def get_card(url, cardname, cardtype):
    try:
        # save_path = f"image_cache/{str(cardtype)}/{str(cardname)}.png"
        # # print(save_path)
        
        # if url not in cache:
        #     # print("Not in Cache")
        #     cache[url] = save_path
        #     im = Image.open(requests.get(url, stream=True).raw)
        #     im.save(f"{save_path}", "PNG")
        #     # print(f"NO : {cardname}")
        #     return im

        # else:
        #     # print("In Cache")
        #     im = Image.open(cache[url])
        #     # print(f"YES : {cardname}")
        #     return im
        im = Image.open(requests.get(url, stream=True).raw)
        return im
           
    except Exception as ex:
        trace = []
        tb = ex.__traceback__
        while tb is not None:
            trace.append({
                "filename": tb.tb_frame.f_code.co_filename,
                "name": tb.tb_frame.f_code.co_name,
                "lineno": tb.tb_lineno
            })
            tb = tb.tb_next
        print(str({
            'type': type(ex).__name__,
            'message': str(ex),
            'trace': trace
        }))
        return         
          
    except Exception as ex:
        trace = []
        tb = ex.__traceback__
        while tb is not None:
            trace.append({
                "filename": tb.tb_frame.f_code.co_filename,
                "name": tb.tb_frame.f_code.co_name,
                "lineno": tb.tb_lineno
            })
            tb = tb.tb_next
        print(str({
            'type': type(ex).__name__,
            'message': str(ex),
            'trace': trace
        }))
        return

def showcard(d, arm, max_health, health, max_stamina, stamina, resolved, title, focused, attack, defense, turn_total, ap1,
             ap2, ap3, enh1, enhname, lvl, op_defense):
    # Card Name can be 16 Characters before going off Card
    # Lower Card Name Font once after 16 characters
    try:
        
        if health <= 0:
            im = get_card(d['PATH'], d['NAME'], "base")
            im.save("text.png")
            return discord.File("text.png")
        else:
            if resolved:
                im = get_card(d['RPATH'], d['RNAME'], "resolve")
            elif focused:
                if d["FPATH"]:
                    im = get_card(d['FPATH'], d['NAME'], "focus")
                else:
                    im = get_card(d['PATH'], d['NAME'], "base")
            else:
                im = get_card(d['PATH'], d['NAME'], "base")

            draw = ImageDraw.Draw(im)

            # Font Size Adjustments
            # Name not go over Card
            card_tier = d['TIER']
            name_font_size = 62
            title_font_size = 35
            basic_font_size = 30
            super_font_size = 30
            ultimate_font_size = 30
            enhancer_font_size = 30
            if len(list(d['NAME'])) >= 15 and not resolved:
                name_font_size = 45
            if len(list(d['RNAME'])) >= 15 and resolved:
                name_font_size = 45
            if len(list(d['NAME'])) >= 18 and not resolved:
                name_font_size = 36
            if len(list(d['RNAME'])) >= 18 and resolved:
                name_font_size = 36
            
            
            title_len = int(len(list(title['TITLE'])))
            title_message = f"{title['TITLE']}"
            if 'ABILITIES' in title:
                title_passive = title['ABILITIES'][0]
                title_passive_type = list(title_passive.keys())[0]
                title_passive_value = list(title_passive.values())[0]
                title_message = f"{title_passive_type.title()} {title_passive_value}"

            # Card Passive
            passive = d['PASS'][0]
            card_passive_type = list(passive.values())[1]
            card_message = f"{card_passive_type.title()} {card_tier * .5}"


            if title_len >= 18:
                title_font_size = 10
            if title_len >= 20:
                title_font_size = 10
            if title_len >= 25:
                title_font_size = 10
                
            #Moveset Emojis
                
            engagement_basic = 0
            engagement_special = 0
            engagement_ultimate = 0
            ebasic = '💢'
            especial = '💢'
            eultimate = '💢'
            if op_defense is None:
                ebasic = ' '
                especial = ' '
                eultimate = ' '
            else:
                defensepower = op_defense - attack
                if defensepower <=0:
                    defensepower = 1
                basic = ((attack + ap1) / defensepower)
                if basic > (ap1 * 1.2):
                    engagement_basic = 2
                    ebasic = '‼️'
                elif basic < (ap1 / 2):
                    engagement_basic = 1
                    ebasic = '❕'
            
                    
                special = ((attack + ap2) / defensepower)
                if special > (ap2 * 1.2):
                    engagement_special = 2
                    especial = '‼️'
                elif special < (ap2 / 2):
                    engagement_special = 1
                    especial = '❕'
        
                ultimate = ((attack + ap3) / defensepower)
                if ultimate > (ap3 * 1.2):
                    engagement_ultimate = 2
                    eultimate = '‼️'
                elif ultimate < (ap3 / 2):
                    engagement_ultimate = 1
                    eultimate = '❕'
                
            
            # Moveset Start
            moveset = d['MOVESET']
            
            if d['UNIVERSE'] == "Souls" and resolved:
                move3 = moveset[2]
                move2 = moveset[2]
                move1 = moveset[1]
            else:
                move3 = moveset[2]
                move2 = moveset[1]
                move1 = moveset[0]

            if arm != "none":
                arm_passive = arm['ABILITIES'][0]
                arm_name = arm['ARM']
                arm_price = arm['PRICE']
                arm_element = arm['ELEMENT']
                arm_passive_type = list(arm_passive.keys())[0]
                arm_passive_value = list(arm_passive.values())[0]
                arm_message = f"{arm_passive_type.title()} {arm_passive_value}"
                if arm_passive_type == 'BASIC':
                    move1 = {arm_name: arm_passive_value, "STAM": 10, "ELEMENT": arm_element}
                    arm_message = "Ability"
                elif arm_passive_type == 'SPECIAL':
                    move2 = {arm_name: arm_passive_value, "STAM": 30, "ELEMENT": arm_element}
                    arm_message = "Ability"
                elif arm_passive_type == 'ULTIMATE':
                    move3 = {arm_name: arm_passive_value, "STAM": 80, "ELEMENT": arm_element}
                    arm_message = "Ability"

                
            
            basic_attack_emoji = crown_utilities.set_emoji(list(move1.values())[2])
            super_attack_emoji = crown_utilities.set_emoji(list(move2.values())[2])
            ultimate_attack_emoji = crown_utilities.set_emoji(list(move3.values())[2])

            move1_ap = round(ap1)
            move2_ap = round(ap2)
            move3_ap = round(ap3)
            if arm != "none":
                if arm_passive_type == 'BASIC':
                    move1_ap = round(arm_passive_value)
                if arm_passive_type == 'SPECIAL':
                    move2_ap = round(arm_passive_value)
                if arm_passive_type == 'ULTIMATE':
                    move3_ap = round(arm_passive_value)

                

            move1_text = f"{basic_attack_emoji} {list(move1.keys())[0]}: {move1_ap} {ebasic}"
            move2_text = f"{super_attack_emoji} {list(move2.keys())[0]}: {move2_ap} {especial}"
            move3_text = f"{ultimate_attack_emoji} {list(move3.keys())[0]}: {move3_ap} {eultimate}"
            

            move_enhanced = moveset[3]
            move_enhanced_ap = enh1
            move_enhanced_name = enhname
            turn_crit = False
            if enhname in Turn_Enhancer_Check:
                if turn_total == 0:
                    move_enhanced_ap = round(enh1)
                    turn_crit = True
                elif turn_total % 10 == 0:
                    move_enhanced_ap = round(enh1 * .75)
                    turn_crit = True
                elif turn_total >= 1:
                    move_enhanced_ap = round(enh1 / turn_total)
                else:
                    move_enhanced_ap = enh1
            elif enhname in Damage_Enhancer_Check:
                if turn_total > 0:
                    move_enhanced_ap = round(enh1 * turn_total)
                    if move_enhanced_ap >= 350:
                        if move_enhanced_name == "BLAST":
                            move_enhanced_ap = 350
                        else:
                            move_enhanced_ap = 300
                        turn_crit = True
                else:
                    move_enhanced_ap = enh1
            
            if not turn_crit:
                move_enhanced_text = f"🦠 {list(move_enhanced.keys())[0]}: {move_enhanced_name} {move_enhanced_ap}{enhancer_suffix_mapping[enhname]}"
            elif enhname in Damage_Enhancer_Check and move_enhanced_ap == 350:
                move_enhanced_text = f"🎇 {list(move_enhanced.keys())[0]}: {move_enhanced_name} {move_enhanced_ap}{enhancer_suffix_mapping[enhname]}"
            elif enhname in Turn_Enhancer_Check and (turn_total % 10 == 0 or turn_total == 0):
                move_enhanced_text = f"🎇 {list(move_enhanced.keys())[0]}: {move_enhanced_name} {move_enhanced_ap}{enhancer_suffix_mapping[enhname]}"

            #Moveset Length
            
            basic_length = int(len(move1_text))
            super_length = int(len(move2_text))
            ultimate_length = int(len(move3_text))
            enhancer_length = int(len(move_enhanced_text))
            
            
            if basic_length >= 53:
                basic_font_size = 27
            if basic_length >= 60:
                basic_font_size = 25
            if basic_length >= 65:
                basic_font_size = 23
                
            if super_length >= 53:
                super_font_size = 27
            if super_length >= 60:
                super_font_size = 25
            if super_length >= 65:
                super_font_size = 23
                
            if ultimate_length >= 53:
                ultimate_font_size = 27
            if ultimate_length >= 60:
                ultimate_font_size = 25
            if ultimate_length >= 65:
                ultimate_font_size = 23
                
            if enhancer_length >= 53:
                enhancer_font_size = 27
            if enhancer_length >= 60:
                enhancer_font_size = 25
            if enhancer_length >= 65:
                enhancer_font_size = 23
                
            

            header = ImageFont.truetype("YesevaOne-Regular.ttf", name_font_size)
            title_font = ImageFont.truetype("YesevaOne-Regular.ttf", title_font_size)
            passive_font = ImageFont.truetype("YesevaOne-Regular.ttf", 35)
            s = ImageFont.truetype("Roboto-Bold.ttf", 22)
            h = ImageFont.truetype("YesevaOne-Regular.ttf", 37)
            m = ImageFont.truetype("Roboto-Bold.ttf", 25)
            r = ImageFont.truetype("Freedom-10eM.ttf", 40)
            lvl_font = ImageFont.truetype("Neuton-Bold.ttf", 68)
            health_and_stamina_font = ImageFont.truetype("Neuton-Light.ttf", 41)
            attack_and_shield_font = ImageFont.truetype("Neuton-Bold.ttf", 48)
            moveset_font_1 = ImageFont.truetype("antonio.regular.ttf", basic_font_size)
            moveset_font_2 = ImageFont.truetype("antonio.regular.ttf", super_font_size)
            moveset_font_3 = ImageFont.truetype("antonio.regular.ttf", ultimate_font_size)
            moveset_font_4 = ImageFont.truetype("antonio.regular.ttf", enhancer_font_size)
            rhs = ImageFont.truetype("destructobeambb_bold.ttf", 35)
            stats = ImageFont.truetype("Freedom-10eM.ttf", 30)
            card_details_font_size = ImageFont.truetype("destructobeambb_bold.ttf", 25)
            card_levels = ImageFont.truetype("destructobeambb_bold.ttf", 40)
            

            if health == max_health:
                health_bar = f"{round(max_health)}"
            else:
                health_bar = f"{round(health)}/{round(max_health)}"

            # Character & Title Name
            if not resolved:
                draw.text((600, 65), d['NAME'], (255, 255, 255), font=header, stroke_width=1, stroke_fill=(0, 0, 0),
                          align="left")
            if resolved:
                if d['RNAME'] != "":
                    draw.text((600, 65), d['RNAME'], (255, 255, 255), font=header, stroke_width=1, stroke_fill=(0, 0, 0),
                            align="left")
                else:
                    draw.text((600, 65), d['NAME'], (255, 255, 255), font=header, stroke_width=1, stroke_fill=(0, 0, 0),
                            align="left")

            # draw.text((602, 150), title['TITLE'], (255, 255, 255), font=h, stroke_width=1, stroke_fill=(0, 0, 0),
            #           align="left")

            # Level
            lvl_sizing = (89, 70)
            if int(lvl) > 9:
                lvl_sizing = (75, 70)
            if int(lvl) > 99:
                lvl_sizing = (55, 70)
            draw.text(lvl_sizing, f"{lvl}", (255, 255, 255), font=lvl_font, stroke_width=1, stroke_fill=(0, 0, 0),
                      align="center")

            # Health & Stamina
            rift_universes = ['Crown Rift Awakening']
            if d['UNIVERSE'] in rift_universes:
                draw.text((730, 417), health_bar, (0, 0, 0), font=health_and_stamina_font, align="left")
                draw.text((730, 457), f"{stamina}", (0, 0, 0), font=health_and_stamina_font, align="left")
            else:
                draw.text((730, 417), health_bar, (255, 255, 255), font=health_and_stamina_font, stroke_width=1,
                        stroke_fill=(0, 0, 0), align="left")
                draw.text((730, 457), f"{stamina}", (255, 255, 255), font=health_and_stamina_font, stroke_width=1,
                        stroke_fill=(0, 0, 0), align="left")

            # Attack & Shield (Defense)
            a_sizing = (89, 515)
            d_sizing = (1062, 515)
            if int(attack) > 99:
                a_sizing = (78, 515)
            if int(defense) > 99:
                d_sizing = (1048, 515)
            if int(attack) > 999:
                a_sizing = (70, 515)
            if int(defense) > 999:
                d_sizing = (1040, 515)


            draw.text(a_sizing, f"{round(attack)}", (255, 255, 255), font=attack_and_shield_font, stroke_width=1,
                      stroke_fill=(0, 0, 0), align="center")
            draw.text(d_sizing, f"{round(defense)}", (255, 255, 255), font=attack_and_shield_font, stroke_width=1,
                      stroke_fill=(0, 0, 0), align="center")

            
            
            # attack_stat = f"🗡️{round(attack)}"
            # defense_stat = f"🛡️{round(defense)}"
            if 'ABILITIES' in title:
                title_suffix = enhancer_suffix_mapping[title_passive_type]
                title_message_on_card = f"🎗️ {title_message}{title_suffix}  🦾 {arm_message}"
            else:
                title_message_on_card = f"🎗️ None 🦾 None"
            card_suffix = enhancer_suffix_mapping[card_passive_type]
            speed = d['SPD']
            with Pilmoji(im) as pilmoji:
                pilmoji.text((602, 138), f"{title_message_on_card}", (255, 255, 255), font=title_font, stroke_width=1, stroke_fill=(0, 0, 0),
                      align="left")
                pilmoji.text((602, 180), f"🩸 {card_message}{card_suffix} 🏃 {speed}", (255, 255, 255), font=passive_font, stroke_width=1, stroke_fill=(0, 0, 0),
                      align="left")
                pilmoji.text((600, 250), move1_text.strip(), (255, 255, 255), font=moveset_font_1, stroke_width=2,
                             stroke_fill=(0, 0, 0))
                pilmoji.text((600, 290), move2_text.strip(), (255, 255, 255), font=moveset_font_2, stroke_width=2,
                             stroke_fill=(0, 0, 0))
                pilmoji.text((600, 330), move3_text.strip(), (255, 255, 255), font=moveset_font_3, stroke_width=2,
                             stroke_fill=(0, 0, 0))
                pilmoji.text((600, 370), move_enhanced_text.strip(), (255, 255, 255), font=moveset_font_4, stroke_width=2,
                             stroke_fill=(0, 0, 0))

                # pilmoji.text((40, 545), "🗡️", (255, 255, 255), font=moveset_font, stroke_width=2,
                #              stroke_fill=(0, 0, 0))
                # pilmoji.text((1000, 545), "🛡️", (255, 255, 255), font=moveset_font, stroke_width=2,
                #              stroke_fill=(0, 0, 0))
            # Moveset End

            with BytesIO() as image_binary:
                im.save(image_binary, "PNG")
                image_binary.seek(0)
                # await ctx.send(file=discord.File(fp=image_binary,filename="image.png"))
                file = discord.File(fp=image_binary,filename="image.png")
                return file

    except Exception as ex:
        trace = []
        tb = ex.__traceback__
        while tb is not None:
            trace.append({
                "filename": tb.tb_frame.f_code.co_filename,
                "name": tb.tb_frame.f_code.co_name,
                "lineno": tb.tb_lineno
            })
            tb = tb.tb_next
        print(str({
            'type': type(ex).__name__,
            'message': str(ex),
            'trace': trace
        }))
        return


       
   


def showsummon(url, summon, message, lvl, bond):
    # Card Name can be 16 Characters before going off Card
    # Lower Card Name Font once after 16 characters
    try:
        im = Image.open(requests.get(url, stream=True).raw)

        draw = ImageDraw.Draw(im)

        # Font Size Adjustments
        # Name not go over Card
        name_font_size = 80
        if len(list(summon)) >= 10:
            name_font_size = 45
        if len(list(summon)) >= 14:
            name_font_size = 36
        

        header = ImageFont.truetype("YesevaOne-Regular.ttf", name_font_size)
        s = ImageFont.truetype("Roboto-Bold.ttf", 22)
        h = ImageFont.truetype("YesevaOne-Regular.ttf", 37)
        m = ImageFont.truetype("Roboto-Bold.ttf", 25)
        r = ImageFont.truetype("Freedom-10eM.ttf", 40)
        lvl_font = ImageFont.truetype("Neuton-Bold.ttf", 68)
        health_and_stamina_font = ImageFont.truetype("Neuton-Light.ttf", 41)
        attack_and_shield_font = ImageFont.truetype("Neuton-Bold.ttf", 48)
        moveset_font = ImageFont.truetype("antonio.regular.ttf", 40)
        rhs = ImageFont.truetype("destructobeambb_bold.ttf", 35)
        stats = ImageFont.truetype("Freedom-10eM.ttf", 30)
        card_details_font_size = ImageFont.truetype("destructobeambb_bold.ttf", 25)
        card_levels = ImageFont.truetype("destructobeambb_bold.ttf", 40)

        # Pet Name
        draw.text((600, 160), summon, (255, 255, 255), font=header, stroke_width=1, stroke_fill=(0, 0, 0),
                    align="left")

        # Level
        lvl_sizing = (89, 70)
        if int(lvl) > 9:
            lvl_sizing = (75, 70)
 
        draw.text(lvl_sizing, f"{lvl}", (255, 255, 255), font=lvl_font, stroke_width=1, stroke_fill=(0, 0, 0),
                    align="center")
        draw.text((1096, 65), f"{bond}", (255, 255, 255), font=lvl_font, stroke_width=1, stroke_fill=(0, 0, 0),
                    align="center")

        lines = textwrap.wrap(message, width=28)
        y_text = 330
        for line in lines:
            font=moveset_font
            width, height = font.getsize(line)
            with Pilmoji(im) as pilmoji:
                pilmoji.text(((1730 - width) / 2, y_text), line, (255, 255, 255), font=font, stroke_width=2, stroke_fill=(0, 0, 0))
            y_text += height


        with BytesIO() as image_binary:
            im.save(image_binary, "PNG")
            image_binary.seek(0)
            # await ctx.send(file=discord.File(fp=image_binary,filename="image.png"))
            file = discord.File(fp=image_binary,filename="pet.png")
            return file

    except Exception as ex:
        trace = []
        tb = ex.__traceback__
        while tb is not None:
            trace.append({
                "filename": tb.tb_frame.f_code.co_filename,
                "name": tb.tb_frame.f_code.co_name,
                "lineno": tb.tb_lineno
            })
            tb = tb.tb_next
        print(str({
            'type': type(ex).__name__,
            'message': str(ex),
            'trace': trace
        }))
        return



def cardback(d, max_health, health, max_stamina, stamina, resolved, arm, focused, attack, defense, turn_total, passive_name,
             traitmessage, lvl, price_message, card_icon, passive_type, passive_num, active_pet, pet_ability_power, card_exp):
    # Card Name can be 16 Characters before going off Card
    # Lower Card Name Font once after 16 characters
    try:
        if health <= 0:
            im = get_card(d['PATH'], d['NAME'], "base")
            im.save("text.png")
            return discord.File("text.png")
        else:
            if resolved:
                im = get_card(d['RPATH'], d['RNAME'], "resolve")
            elif focused:
                if d["FPATH"]:
                    im = get_card(d['FPATH'], d['NAME'], "focus")
                else:
                    im = get_card(d['PATH'], d['NAME'], "base")
            else:
                im = get_card(d['PATH'], d['NAME'], "base")

            draw = ImageDraw.Draw(im)

            # Font Size Adjustments
            # Name not go over Card
            name_font_size = 62
            if len(list(d['NAME'])) >= 16 and not resolved:
                name_font_size = 45
            if len(list(d['RNAME'])) >= 16 and resolved:
                name_font_size = 45

            header = ImageFont.truetype("YesevaOne-Regular.ttf", name_font_size)
            s = ImageFont.truetype("Roboto-Bold.ttf", 22)
            h = ImageFont.truetype("YesevaOne-Regular.ttf", 37)
            m = ImageFont.truetype("Roboto-Bold.ttf", 25)
            r = ImageFont.truetype("Freedom-10eM.ttf", 40)
            lvl_font = ImageFont.truetype("Neuton-Bold.ttf", 68)
            health_and_stamina_font = ImageFont.truetype("Neuton-Light.ttf", 41)
            attack_and_shield_font = ImageFont.truetype("Neuton-Bold.ttf", 48)
            moveset_font = ImageFont.truetype("antonio.regular.ttf", 30)
            rhs = ImageFont.truetype("destructobeambb_bold.ttf", 35)
            stats = ImageFont.truetype("Freedom-10eM.ttf", 30)
            card_details_font_size = ImageFont.truetype("destructobeambb_bold.ttf", 25)
            card_levels = ImageFont.truetype("destructobeambb_bold.ttf", 40)

            if health == max_health:
                health_bar = f"{max_health}"
            else:
                health_bar = f"{health}/{max_health}"

            # Level
            lvl_sizing = (89, 70)
            if int(lvl) > 9:
                lvl_sizing = (75, 70)
            if int(lvl) > 99:
                lvl_sizing = (55, 70)
            draw.text(lvl_sizing, f"{lvl}", (255, 255, 255), font=lvl_font, stroke_width=1, stroke_fill=(0, 0, 0),
                      align="center")

            # Health & Stamina
            draw.text((730, 417), health_bar, (255, 255, 255), font=health_and_stamina_font, stroke_width=1,
                      stroke_fill=(0, 0, 0), align="left")
            draw.text((730, 457), f"{stamina}", (255, 255, 255), font=health_and_stamina_font, stroke_width=1,
                      stroke_fill=(0, 0, 0), align="left")

            # Attack & Shield (Defense)
            a_sizing = (89, 515)
            d_sizing = (1062, 515)
            if int(attack) > 99:
                a_sizing = (78, 515)
            if int(defense) > 99:
                d_sizing = (1048, 515)

            draw.text(a_sizing, f"{round(attack)}", (255, 255, 255), font=attack_and_shield_font, stroke_width=1,
                      stroke_fill=(0, 0, 0), align="center")
            draw.text(d_sizing, f"{round(defense)}", (255, 255, 255), font=attack_and_shield_font, stroke_width=1,
                      stroke_fill=(0, 0, 0), align="center")
            
            back_name = ""
            durability = ""
            pet_info = ""
            if price_message:
                back_name = f"{card_icon} {price_message}"
                pet_info = ""
            else:
                back_name = d['NAME']
                pet_info = f"🧬 {active_pet['NAME']}: {active_pet['TYPE']} {pet_ability_power}{enhancer_suffix_mapping[active_pet['TYPE']]}"

            
            # Level Message
            lvl_msg = ""
            if lvl == 500:
                lvl_msg = f"🔱 Max Level"
            else:
                lvl_msg = f"🔱 EXP Until Next Level: {150 - card_exp}"

            with Pilmoji(im) as pilmoji:
                pilmoji.text((600, 80), back_name, (255, 255, 255), font=header, stroke_width=1, stroke_fill=(0, 0, 0),
                          align="left")
                
                pilmoji.text((602, 150), f"🦾 {arm['ARM']}", (255, 255, 255), font=h, stroke_width=1, stroke_fill=(0, 0, 0),
                      align="left")
                pilmoji.text((600, 250), f"🩸 {passive_name}: {passive_type} by {passive_num}{enhancer_suffix_mapping[passive_type]}".strip(), (255, 255, 255), font=moveset_font, stroke_width=2,
                             stroke_fill=(0, 0, 0))
                pilmoji.text((600, 290), f"♾️ {traitmessage}".strip(), (255, 255, 255), font=moveset_font, stroke_width=2,
                             stroke_fill=(0, 0, 0))

                pilmoji.text((600, 330), f"{pet_info}".strip(), (255, 255, 255), font=moveset_font, stroke_width=2,stroke_fill=(0, 0, 0))
                
                pilmoji.text((600, 370), lvl_msg.strip(), (255, 255, 255), font=moveset_font, stroke_width=2,
                             stroke_fill=(0, 0, 0))



            with BytesIO() as image_binary:
                im.save(image_binary, "PNG")
                image_binary.seek(0)
                # await ctx.send(file=discord.File(fp=image_binary,filename="image.png"))
                file = discord.File(fp=image_binary,filename="backimage.png")
                return file
    except Exception as ex:
        trace = []
        tb = ex.__traceback__
        while tb is not None:
            trace.append({
                "filename": tb.tb_frame.f_code.co_filename,
                "name": tb.tb_frame.f_code.co_name,
                "lineno": tb.tb_lineno
            })
            tb = tb.tb_next
        print(str({
            'type': type(ex).__name__,
            'message': str(ex),
            'trace': trace
        }))
        return


def setup(bot):
    bot.add_cog(CrownUnlimited(bot))



async def abyss(self, ctx: SlashContext):
    await ctx.defer()
    a_registered_player = await crown_utilities.player_check(ctx)
    if not a_registered_player:
        return


    private_channel = ctx
    mode = "ABYSS"
    if isinstance(private_channel.channel, discord.channel.DMChannel):
        await private_channel.send(m.SERVER_FUNCTION_ONLY)
        return

    try:
        sowner = db.queryUser({'DID': str(ctx.author.id)})
        if sowner['DIFFICULTY'] == "EASY":
            await ctx.send("The Abyss is unavailable on Easy Mode! Use /difficulty to change your difficulty setting.")
            return

        vault = db.altQueryVault({'DID': str(ctx.author.id)})
        maxed_out_messages = []
        bad_message = ""
                
        oteam = sowner['TEAM']
        ofam = sowner['FAMILY']
        oguild = "PCG"

        checks = db.queryCard({'NAME': sowner['CARD']})
        abyss = db.queryAbyss({'FLOOR': sowner['LEVEL']})

        if not abyss:
            await ctx.send("The **Abyss** has shifted. More floors will be available soon.")
            return


        if abyss['FLOOR'] in abyss_floor_reward_list:
            current_titles = vault['TITLES']
            if len(current_titles) >=25:
                maxed_out_messages.append("You have max amount of Titles. You won't be able to earn the **Floor Title**.")

            current_arms = []
            for arm in vault['ARMS']:
                current_arms.append(arm['ARM'])
                if len(current_arms) >=25:
                    maxed_out_messages.append("You have max amount of Arms. You won't be able to earn the **Floor Arm**.")

            current_cards = vault['CARDS']
            if len(current_cards) >= 25:
                maxed_out_messages.append("You have max amount of Cards. You won't be able to earn the **Floor Card**.")

            if maxed_out_messages:
                bad_message = "\n".join(maxed_out_messages)

        enemies = abyss['ENEMIES']
        level = int(abyss['SPECIAL_BUFF'])
        floor = abyss['FLOOR']
        card_to_earn = enemies[-1] 
        title = abyss['TITLE']
        arm = abyss['ARM']
        abyss_pet = abyss['PET']
        banned_cards = abyss['BANNED_CARDS']
        banned_titles = abyss['BANNED_TITLES']
        banned_arms = abyss['BANNED_ARMS']
        banned_universes = abyss['BANNED_UNIVERSES']
        banned_pets = abyss['BANNED_PETS']
        banned_card_tiers = abyss['BANNED_TIERS']

        # Convert tiers into strings from ints
        tier_conversion = [str(tier) for tier in banned_card_tiers]
        
        abyss_buttons = [
            manage_components.create_button(
                style=ButtonStyle.blue,
                label="Begin",
                custom_id="Yes"
            ),
            manage_components.create_button(
                style=ButtonStyle.red,
                label="Quit",
                custom_id="No"
            )
        ]

        abyss_buttons_action_row = manage_components.create_actionrow(*abyss_buttons)

        if abyss['FLOOR'] in abyss_floor_reward_list:
            unlockable_message = f"⭐ Drops on this Floor\nUnlockable Card: **{card_to_earn}**\nUnlockable Title: **{title}**\nUnlockable Arm: **{arm}**\n"
        else:
            unlockable_message = ""

        embedVar = discord.Embed(title=f":new_moon: Abyss Floor {floor}  ⚔️{len(enemies)}", description=textwrap.dedent(f"""
        {unlockable_message}
        {bad_message}
        """))
        embedVar.set_footer(text="Each floor must be completed all the way through to advance to the next floor.")
        if banned_cards:
            embedVar.add_field(name=":flower_playing_cards: Banned Cards", value="\n".join(banned_cards),
                            inline=True)
        if banned_titles:
            embedVar.add_field(name=":reminder_ribbon: Banned Titles", value="\n".join(banned_titles), inline=True)         
        if banned_arms:
            embedVar.add_field(name="🦾 Banned Arms", value="\n".join(banned_arms), inline=True)           
        if banned_pets:
            embedVar.add_field(name="🧬 Banned Summons", value="\n".join(banned_pets))
        if banned_universes:
            embedVar.add_field(name=":ringed_planet: Banned Universes", value="\n".join(banned_universes),
                            inline=True)
        if banned_card_tiers:
            embedVar.add_field(name="🀄 Banned Card Tiers", value="\n".join(tier_conversion),
                            inline=True)

        msg = await private_channel.send(embed=embedVar, components=[abyss_buttons_action_row])

        def check(button_ctx):
            return button_ctx.author == ctx.author

        try:
            button_ctx: ComponentContext = await manage_components.wait_for_component(self.bot, components=[
                abyss_buttons_action_row, abyss_buttons], timeout=120, check=check)

            if button_ctx.custom_id == "Yes":
                await button_ctx.defer(ignore=True)
                await msg.edit(components=[])
                if sowner['CARD'] in banned_cards:
                    await private_channel.send(
                        f":x: **{sowner['CARD']}** is banned on floor {floor}. Use another card.")
                    return
                if sowner['TITLE'] in banned_titles:
                    await private_channel.send(
                        f":x: **{sowner['TITLE']}** is banned on floor {floor}. Use another title.")
                    return
                if sowner['ARM'] in banned_arms:
                    await private_channel.send(
                        f":x: **{sowner['ARM']}** is banned on floor {floor}. Use another arm.")
                    return
                if sowner['PET'] in banned_pets:
                    await private_channel.send(
                        f":x: **{sowner['PET']}** is banned on floor {floor}. Use another pet.")
                    return
                if checks['UNIVERSE'] in banned_universes:
                    await private_channel.send(
                        f":x: **{checks['UNIVERSE']}** cards are banned on floor {floor}. Use another card.")
                    return
                
                if str(checks['TIER']) in tier_conversion:
                    await private_channel.send(
                        f":x: Tier **{str(checks['TIER'])}** cards are banned on floor {floor}. Use another card.")
                    return
                await battle_commands(self, ctx, mode, abyss, None, None, oguild, None, None, sowner, oteam, ofam, 0, None, None, None, level, None, None, None, None)
                
            elif button_ctx.custom_id == "No":
                await button_ctx.send("Leaving the Abyss...")
                await msg.edit(components=[])
                return
            else:
                await button_ctx.send("Leaving the Abyss...")
                await msg.edit(components=[])
                return
        except Exception as ex:
            trace = []
            tb = ex.__traceback__
            while tb is not None:
                trace.append({
                    "filename": tb.tb_frame.f_code.co_filename,
                    "name": tb.tb_frame.f_code.co_name,
                    "lineno": tb.tb_lineno
                })
                tb = tb.tb_next
            print(str({
                'type': type(ex).__name__,
                'message': str(ex),
                'trace': trace
            }))
            guild = self.bot.get_guild(main.guild_id)
            channel = guild.get_channel(main.guild_channel)
            await channel.send(f"'PLAYER': **{str(ctx.author)}**, 'GUILD': **{str(ctx.author.guild)}**,  TYPE: {type(ex).__name__}, MESSAGE: {str(ex)}, TRACE: {trace}")
            return
    except Exception as ex:
        trace = []
        tb = ex.__traceback__
        while tb is not None:
            trace.append({
                "filename": tb.tb_frame.f_code.co_filename,
                "name": tb.tb_frame.f_code.co_name,
                "lineno": tb.tb_lineno
            })
            tb = tb.tb_next
        print(str({
            'type': type(ex).__name__,
            'message': str(ex),
            'trace': trace
        }))
        guild = self.bot.get_guild(main.guild_id)
        channel = guild.get_channel(main.guild_channel)
        await channel.send(f"'PLAYER': **{str(ctx.author)}**, TYPE: {type(ex).__name__}, MESSAGE: {str(ex)}, TRACE: {trace}")
        return


async def scenario(self, ctx: SlashContext, universe: str):
    a_registered_player = await crown_utilities.player_check(ctx)
    if not a_registered_player:
        return

    mode = "SCENARIO"
    try:
        scenarios = db.queryAllScenariosByUniverse(universe)
        sowner = db.queryUser({'DID': str(ctx.author.id)})
        oteam = sowner['TEAM']
        ofam = sowner['FAMILY']
        oguild = "PCG"

        difficulty = sowner['DIFFICULTY']
        easy = 'EASY'
        normal = 'NORMAL'
        hard = 'HARD'

        embed_list = []

        for scenario in scenarios:
            if scenario['AVAILABLE']:
                title = scenario['TITLE']
                enemies = scenario['ENEMIES']
                number_of_fights = len(enemies)
                enemy_level = scenario['ENEMY_LEVEL']
                universe = scenario['UNIVERSE']
                scenario_image = scenario['IMAGE']
                reward_list = []
                if difficulty == easy:
                    rewards = scenario['EASY_DROPS']
                if difficulty == normal:
                    rewards = scenario['NORMAL_DROPS']
                if difficulty == hard:
                    rewards = scenario['HARD_DROPS']

                for reward in rewards:
                    arm = db.queryArm({"ARM": reward})
                    arm_name = arm['ARM']
                    element_emoji = crown_utilities.set_emoji(arm['ELEMENT'])
                    arm_passive = arm['ABILITIES'][0]
                    arm_passive_type = list(arm_passive.keys())[0]
                    arm_passive_value = list(arm_passive.values())[0]
                    reward_list.append(f"{element_emoji} {arm_passive_type.title()} **{arm_name}** Attack: **{arm_passive_value}** dmg")
    
                reward_message = "\n".join(reward_list)
                embedVar = discord.Embed(title= f"{title}", description=textwrap.dedent(f"""
                📽️ **{universe} Scenario Battle!**
                🔱 **Enemy Level:** {enemy_level}
                :crossed_swords: {str(number_of_fights)}
                """), 
                colour=0x7289da)
                embedVar.add_field(name="__**Potential Rewards**__", value=f"{reward_message}")
                embedVar.set_image(url=scenario_image)
                # embedVar.set_footer(text=f"")
                embed_list.append(embedVar)

        if not embed_list:
            await ctx.send(f"There are currently no Scenario battles available in **{universe}**.")

        buttons = [
            manage_components.create_button(style=3, label="Start This Scenario Battle!", custom_id="start"),
        ]
        custom_action_row = manage_components.create_actionrow(*buttons)


        async def custom_function(self, button_ctx):
            if button_ctx.author == ctx.author:
                selected_scenario = str(button_ctx.origin_message.embeds[0].title)
                if button_ctx.custom_id == "start":
                    await button_ctx.defer(ignore=True)
                    scenario = db.queryScenario({'TITLE':selected_scenario})
                    level = scenario['ENEMY_LEVEL']
                    await battle_commands(self, ctx, mode, scenario, None, None, oguild, None, None, sowner, oteam, ofam, 0, None, None, None, level, None, None, None, None)
                    
                    self.stop = True
            else:
                await ctx.send("This is not your prompt! Shoo! Go Away!")


        await Paginator(bot=self.bot, ctx=ctx, useQuitButton=True, pages=embed_list, timeout=60, customActionRow=[
            custom_action_row,
            custom_function,
        ]).run()

    except Exception as ex:
        trace = []
        tb = ex.__traceback__
        while tb is not None:
            trace.append({
                "filename": tb.tb_frame.f_code.co_filename,
                "name": tb.tb_frame.f_code.co_name,
                "lineno": tb.tb_lineno
            })
            tb = tb.tb_next
        print(str({
            'type': type(ex).__name__,
            'message': str(ex),
            'trace': trace
        }))

async def cardlist(self, ctx: SlashContext, universe: str):
    a_registered_player = await crown_utilities.player_check(ctx)
    if not a_registered_player:
        return

    universe_data = db.queryUniverse({'TITLE': {"$regex": str(universe), "$options": "i"}})
    user = db.queryUser({'DID': str(ctx.author.id)})
    list_of_cards = db.queryAllCardsBasedOnUniverse({'UNIVERSE': {"$regex": str(universe), "$options": "i"}})
    cards = [x for x in list_of_cards]
    dungeon_card_details = []
    tales_card_details = []
    destiny_card_details = []
    for card in cards:
        available = ""
        is_skin = ""
        if card['AVAILABLE'] and card['EXCLUSIVE']:
            available = ":purple_circle:"
        elif card['AVAILABLE'] and not card['HAS_COLLECTION']:
            available = ":green_circle:"
        elif card['HAS_COLLECTION']:
            available = ":blue_circle:"
        else:
            available = "🟠"
        if card['IS_SKIN']:
            is_skin = ":white_circle:"
        if card['EXCLUSIVE'] and not card['HAS_COLLECTION']:
            dungeon_card_details.append(
                f"{is_skin}{available}  :mahjong: {card['TIER']} **{card['NAME']}**\n:heart: {card['HLT']} :dagger: {card['ATK']}  🛡️ {card['DEF']}\n")
        elif not card['HAS_COLLECTION']:
            tales_card_details.append(
                f"{is_skin}{available} :mahjong: {card['TIER']} **{card['NAME']}**\n:heart: {card['HLT']} :dagger: {card['ATK']}  🛡️ {card['DEF']}\n")
        elif card['HAS_COLLECTION']:
            destiny_card_details.append(
                f"{is_skin}{available} :mahjong: {card['TIER']} **{card['NAME']}**\n:heart: {card['HLT']} :dagger: {card['ATK']}  🛡️ {card['DEF']}\n")

    all_cards = []
    if tales_card_details:
        for t in tales_card_details:
            all_cards.append(t)

    if dungeon_card_details:
        for d in dungeon_card_details:
            all_cards.append(d)

    if destiny_card_details:
        for de in destiny_card_details:
            all_cards.append(de)

    total_cards = len(all_cards)

    # Adding to array until divisible by 10
    while len(all_cards) % 10 != 0:
        all_cards.append("")
    # Check if divisible by 10, then start to split evenly

    if len(all_cards) % 10 == 0:
        first_digit = int(str(len(all_cards))[:1])
        if len(all_cards) >= 89:
            if first_digit == 1:
                first_digit = 10
        # first_digit = 10
        cards_broken_up = np.array_split(all_cards, first_digit)

    # If it's not an array greater than 10, show paginationless embed
    if len(all_cards) < 10:
        embedVar = discord.Embed(title=f"{universe} Card List", description="\n".join(all_cards), colour=0x7289da)
        embedVar.set_footer(
            text=f"{total_cards} Total Cards\n🟢 Tale Drop\n🟣 Dungeon Drop\n🔵 Destiny Line\n🟠 Soul Exchange\n⚪ Skin")
        await ctx.send(embed=embedVar)

    embed_list = []
    for i in range(0, len(cards_broken_up)):
        globals()['embedVar%s' % i] = discord.Embed(
            title=f":flower_playing_cards: {universe_data['TITLE']} Card List",
            description="\n".join(cards_broken_up[i]), colour=0x7289da)
        globals()['embedVar%s' % i].set_footer(
            text=f"{total_cards} Total Cards\n🟢 Tale Drop\n🟣 Dungeon Drop\n🔵 Destiny Line\n🟠 Soul Exchange\n⚪ Skin")
        embed_list.append(globals()['embedVar%s' % i])

    paginator = DiscordUtils.Pagination.CustomEmbedPaginator(ctx, remove_reactions=True)
    paginator.add_reaction('⏮️', "first")
    paginator.add_reaction('⬅️', "back")
    paginator.add_reaction('🔐', "lock")
    paginator.add_reaction('➡️', "next")
    paginator.add_reaction('⏭️', "last")
    embeds = embed_list
    await paginator.run(embeds)


async def titlelist(self, ctx: SlashContext, universe: str):
    a_registered_player = await crown_utilities.player_check(ctx)
    if not a_registered_player:
        return


    universe_data = db.queryUniverse({'TITLE': {"$regex": universe, "$options": "i"}})
    user = db.queryUser({'DID': str(ctx.author.id)})
    list_of_titles = db.queryAllTitlesBasedOnUniverses({'UNIVERSE': {"$regex": str(universe), "$options": "i"}})
    titles = [x for x in list_of_titles]
    dungeon_titles_details = []
    tales_titles_details = []
    for title in titles:
        title_passive = title['ABILITIES'][0]
        title_passive_type = list(title_passive.keys())[0].title()
        title_passive_value = list(title_passive.values())[0]

        available = ""
        if title['AVAILABLE'] and title['EXCLUSIVE']:
            available = ":purple_circle:"
        elif title['AVAILABLE']:
            available = ":green_circle:"
        else:
            available = ":red_circle:"
        if title['EXCLUSIVE']:
            dungeon_titles_details.append(
                f"{available} :reminder_ribbon: **{title['TITLE']}**\n**{title_passive_type}:** {title_passive_value}\n")
        else:
            tales_titles_details.append(
                f"{available} :reminder_ribbon: **{title['TITLE']}**\n**{title_passive_type}:** {title_passive_value}\n")

    all_titles = []
    if tales_titles_details:
        for t in tales_titles_details:
            all_titles.append(t)

    if dungeon_titles_details:
        for d in dungeon_titles_details:
            all_titles.append(d)

    total_titles = len(all_titles)

    # Adding to array until divisible by 10
    while len(all_titles) % 10 != 0:
        all_titles.append("")
    # Check if divisible by 10, then start to split evenly
    if len(all_titles) % 10 == 0:
        first_digit = int(str(len(all_titles))[:1])
        if len(all_titles) >= 89:
            if first_digit == 1:
                first_digit = 10
        titles_broken_up = np.array_split(all_titles, first_digit)

    # If it's not an array greater than 10, show paginationless embed
    if len(all_titles) < 10:
        embedVar = discord.Embed(title=f"{universe} Title List", description="\n".join(all_titles), colour=0x7289da)
        # embedVar.set_thumbnail(url={universe_data['PATH']})
        embedVar.set_footer(text=f"{total_titles} Total Titles\n🟢 Tale Drop\n🟣 Dungeon Drop\n🔴 Boss Drop")
        await ctx.send(embed=embedVar)

    embed_list = []
    for i in range(0, len(titles_broken_up)):
        globals()['embedVar%s' % i] = discord.Embed(title=f":reminder_ribbon: {universe_data['TITLE']} Title List",
                                                    description="\n".join(titles_broken_up[i]), colour=0x7289da)
        # globals()['embedVar%s' % i].set_thumbnail(url={universe_data['PATH']})
        globals()['embedVar%s' % i].set_footer(
            text=f"{total_titles} Total Titles\n🟢 Tale Drop\n🟣 Dungeon Drop\n🔴 Boss Drop\n/viewtitle 'Title Name' - View Title Details")
        embed_list.append(globals()['embedVar%s' % i])

    paginator = DiscordUtils.Pagination.CustomEmbedPaginator(ctx, remove_reactions=True)
    paginator.add_reaction('⏮️', "first")
    paginator.add_reaction('⬅️', "back")
    paginator.add_reaction('🔐', "lock")
    paginator.add_reaction('➡️', "next")
    paginator.add_reaction('⏭️', "last")
    embeds = embed_list
    await paginator.run(embeds)


async def armlist(self, ctx: SlashContext, universe: str):
    a_registered_player = await crown_utilities.player_check(ctx)
    if not a_registered_player:
        return


    universe_data = db.queryUniverse({'TITLE': {"$regex": universe, "$options": "i"}})
    user = db.queryUser({'DID': str(ctx.author.id)})
    list_of_arms = db.queryAllArmsBasedOnUniverses({'UNIVERSE': {"$regex": str(universe), "$options": "i"}})
    arms = [x for x in list_of_arms]
    dungeon_arms_details = []
    tales_arms_details = []
    for arm in arms:
        arm_passive = arm['ABILITIES'][0]
        arm_passive_type = list(arm_passive.keys())[0].title()
        arm_passive_value = list(arm_passive.values())[0]

        arm_message = f"🦾 **{arm['ARM']}**\n**{arm_passive_type}:** {arm_passive_value}\n"

        element = arm['ELEMENT']
        element_available = ['BASIC', 'SPECIAL', 'ULTIMATE']
        if element and arm_passive_type.upper() in element_available:
            element_name = element
            element = crown_utilities.set_emoji(element)
            arm_message = f"🦾 **{arm['ARM']}**\n{element} **{arm_passive_type} {element_name.title()} Attack:** {arm_passive_value}\n"

        available = ""
        if arm['AVAILABLE'] and arm['EXCLUSIVE']:
            available = ":purple_circle:"
        elif arm['AVAILABLE']:
            available = ":green_circle:"
        else:
            available = ":red_circle:"

        
        if arm['EXCLUSIVE']:
            dungeon_arms_details.append(
                f"{available} {arm_message}")
        else:
            tales_arms_details.append(
                f"{available} {arm_message}")

    all_arms = []
    if tales_arms_details:
        for t in tales_arms_details:
            all_arms.append(t)

    if dungeon_arms_details:
        for d in dungeon_arms_details:
            all_arms.append(d)

    total_arms = len(all_arms)
    # Adding to array until divisible by 10
    while len(all_arms) % 10 != 0:
        all_arms.append("")
    # Check if divisible by 10, then start to split evenly
    if len(all_arms) % 10 == 0:
        first_digit = int(str(len(all_arms))[:1])
        if len(all_arms) >= 89:
            if first_digit == 1:
                first_digit = 10
        arms_broken_up = np.array_split(all_arms, first_digit)

    # If it's not an array greater than 10, show paginationless embed
    if len(all_arms) < 10:
        embedVar = discord.Embed(title=f"{universe} Arms List", description="\n".join(all_arms), colour=0x7289da)
        embedVar.set_footer(text=f"{total_arms} Total Arms\n🟢 Tale Drop\n🟣 Dungeon Drop\n🔴 Boss Drop")
        await ctx.send(embed=embedVar)

    embed_list = []
    for i in range(0, len(arms_broken_up)):
        globals()['embedVar%s' % i] = discord.Embed(title=f"🦾 {universe_data['TITLE']} Arms List",
                                                    description="\n".join(arms_broken_up[i]), colour=0x7289da)
        globals()['embedVar%s' % i].set_footer(
            text=f"{total_arms} Total Arms\n🟢 Tale Drop\n🟣 Dungeon Drop\n🔴 Boss Drop")
        embed_list.append(globals()['embedVar%s' % i])

    paginator = DiscordUtils.Pagination.CustomEmbedPaginator(ctx, remove_reactions=True)
    paginator.add_reaction('⏮️', "first")
    paginator.add_reaction('⬅️', "back")
    paginator.add_reaction('🔐', "lock")
    paginator.add_reaction('➡️', "next")
    paginator.add_reaction('⏭️', "last")
    embeds = embed_list
    await paginator.run(embeds)


async def destinylist(self, ctx: SlashContext, universe: str):
    a_registered_player = await crown_utilities.player_check(ctx)
    if not a_registered_player:
        return


    universe_data = db.queryUniverse({'TITLE': {"$regex": universe, "$options": "i"}})
    user = db.queryUser({'DID': str(ctx.author.id)})
    destinies = []
    for destiny in d.destiny:
        if destiny["UNIVERSE"].upper() == universe.upper():
            destinies.append(destiny)

    destiny_details = []
    for de in destinies:
        destiny_details.append(
            f":sparkles: **{de['NAME']}**\nDefeat {de['DEFEAT']} with {' '.join(de['USE_CARDS'])} {str(de['REQUIRED'])} times: Unlock **{de['EARN']}**\n")

    total_destinies = len(destiny_details)

    # Adding to array until divisible by 10
    while len(destiny_details) % 10 != 0:
        destiny_details.append("")
    # Check if divisible by 10, then start to split evenly

    if len(destiny_details) % 10 == 0:
        first_digit = int(str(len(destiny_details))[:1])
        if len(destiny_details) >= 89:
            if first_digit == 1:
                first_digit = 10
        destinies_broken_up = np.array_split(destiny_details, first_digit)

    # If it's not an array greater than 10, show paginationless embed
    if len(destiny_details) < 10:
        embedVar = discord.Embed(title=f"{universe} Destiny List", description="\n".join(destiny_details),
                                colour=0x7289da)
        globals()['embedVar%s' % i].set_footer(text=f"{total_destinies} Total Destiny Lines")
        await ctx.send(embed=embedVar)

    embed_list = []
    for i in range(0, len(destinies_broken_up)):
        globals()['embedVar%s' % i] = discord.Embed(title=f":rosette: {universe_data['TITLE']} Destiny List",
                                                    description="\n".join(destinies_broken_up[i]), colour=0x7289da)
        globals()['embedVar%s' % i].set_footer(text=f"{total_destinies} Total Destiny Lines")
        embed_list.append(globals()['embedVar%s' % i])

    paginator = DiscordUtils.Pagination.CustomEmbedPaginator(ctx, remove_reactions=True)
    paginator.add_reaction('⏮️', "first")
    paginator.add_reaction('⬅️', "back")
    paginator.add_reaction('🔐', "lock")
    paginator.add_reaction('➡️', "next")
    paginator.add_reaction('⏭️', "last")
    embeds = embed_list
    await paginator.run(embeds)


async def summonlist(self, ctx: SlashContext, universe: str):
    a_registered_player = await crown_utilities.player_check(ctx)
    if not a_registered_player:
        return


    universe_data = db.queryUniverse({'TITLE': {"$regex": universe, "$options": "i"}})
    user = db.queryUser({'DID': str(ctx.author.id)})
    list_of_pets = db.queryAllPetsBasedOnUniverses({'UNIVERSE': {"$regex": str(universe), "$options": "i"}})
    pets = [x for x in list_of_pets]
    dungeon_pets_details = []
    tales_pets_details = []
    for pet in pets:
        pet_ability = list(pet['ABILITIES'][0].keys())[0]
        pet_ability_power = list(pet['ABILITIES'][0].values())[0]
        pet_ability_type = list(pet['ABILITIES'][0].values())[1]
        available = ""
        if pet['AVAILABLE'] and pet['EXCLUSIVE']:
            available = ":purple_circle:"
        elif pet['AVAILABLE']:
            available = ":green_circle:"
        else:
            available = ":red_circle:"
        if pet['EXCLUSIVE']:
            dungeon_pets_details.append(
                f"{available} 🧬 **{pet['PET']}**\n**{pet_ability}:** {pet_ability_power}\n**Type:** {pet_ability_type}\n")
        else:
            tales_pets_details.append(
                f"{available} 🧬 **{pet['PET']}**\n**{pet_ability}:** {pet_ability_power}\n**Type:** {pet_ability_type}\n")

    all_pets = []
    if tales_pets_details:
        for t in tales_pets_details:
            all_pets.append(t)

    if dungeon_pets_details:
        for d in dungeon_pets_details:
            all_pets.append(d)

    total_pets = len(all_pets)

    # Adding to array until divisible by 10
    while len(all_pets) % 10 != 0:
        all_pets.append("")

    # Check if divisible by 10, then start to split evenly
    if len(all_pets) % 10 == 0:
        first_digit = int(str(len(all_pets))[:1])
        if len(all_pets) >= 89:
            if first_digit == 1:
                first_digit = 10
        pets_broken_up = np.array_split(all_pets, first_digit)

    # If it's not an array greater than 10, show paginationless embed
    if len(all_pets) < 10:
        embedVar = discord.Embed(title=f"{universe} Summon List", description="\n".join(all_pets), colour=0x7289da)
        embedVar.set_footer(text=f"{total_pets} Total Summons\n🟢 Tale Drop\n🟣 Dungeon Drop\n🔴 Boss Drop")
        await ctx.send(embed=embedVar)

    embed_list = []
    for i in range(0, len(pets_broken_up)):
        globals()['embedVar%s' % i] = discord.Embed(title=f"🧬 {universe_data['TITLE']} Summon List",
                                                    description="\n".join(pets_broken_up[i]), colour=0x7289da)
        globals()['embedVar%s' % i].set_footer(
            text=f"{total_pets} Total Summons\n🟢 Tale Drop\n🟣 Dungeon Drop\n🔴 Boss Drop")
        embed_list.append(globals()['embedVar%s' % i])

    paginator = DiscordUtils.Pagination.CustomEmbedPaginator(ctx, remove_reactions=True)
    paginator.add_reaction('⏮️', "first")
    paginator.add_reaction('⬅️', "back")
    paginator.add_reaction('🔐', "lock")
    paginator.add_reaction('➡️', "next")
    paginator.add_reaction('⏭️', "last")
    embeds = embed_list
    await paginator.run(embeds)




async def build_player_stats(self, randomized_battle, ctx, sowner: str, o: dict, otitle: dict, t: dict, ttitle: dict,
                             mode: str, universe: str, currentopponent: int, oteam: str, ofam: str, abyss_scaling: None,
                             companion: None, c: None, ctitle: None, cteam: None, cfam: None, activeDeck: None,
                             boss: None, player2: None, player2team: None, player2guild: None):
    co_op_modes = ['CTales', 'DTales', 'CDungeon', 'DDungeon']
    ai_co_op_modes = ['DTales', 'DDungeon']
    U_modes = ['ATales', 'Tales', 'CTales', 'DTales']
    D_modes = ['CDungeon', 'DDungeon', 'Dungeon', 'ADungeon']
    B_modes = ['Boss', 'CBoss']
    solo_modes = ['ATales', 'Tales', 'Dungeon', 'Boss']
    pvp_modes = ['PVP']
    opponent_pet_modes = ['Dungeon', 'DDungeon', 'CDungeon']
    raid_modes = ['RAID']
    health_debuff_from_difficulty = 0
    stat_debuff_from_difficulty = 0
    health_buff_from_difficulty = 0
    stat_buff_from_difficulty = 0
    ap_buff_from_difficulty = 0
    difficulty = sowner['DIFFICULTY']

    if difficulty == "EASY":
        health_debuff_from_difficulty = 400
        stat_debuff_from_difficulty = 150

    if difficulty == "HARD":
        health_buff_from_difficulty = 1500
        stat_buff_from_difficulty = 300
        ap_buff_from_difficulty = 100
        if mode in D_modes:
            health_buff_from_difficulty = 3000
            stat_buff_from_difficulty = 200
            ap_buff_from_difficulty = 180
        if mode in B_modes:
            health_buff_from_difficulty = 3000
            ap_buff_from_difficulty = 250
            stat_buff_from_difficulty = 0



    if mode not in pvp_modes and mode not in raid_modes:
        opponent_scaling = 15
        opponent_health_scaling = 0
        enemy_title = ""
        enemy_arm = ""
        currentopponent = 0
    t_user = ""
    if mode == "RAID":
        tguild = player2guild
        tteam = player2team
        hall = universe
        hall_def = hall['DEFENSE']
        fee = hall['FEE']

    if mode == "SCENARIO":
        opponent_scaling = 15
        opponent_health_scaling = 20
        scenario_universe_data = db.queryUniverse({'TITLE': universe['UNIVERSE']})

    if mode == "ABYSS":
        opponent_scaling = abyss_scaling
        opponent_health_scaling = 25
        enemy_arm = "ARM"
    if mode in B_modes:
        bossname = boss['CARD']
        boss = db.queryBoss({'NAME': str(bossname)})
        enemy_arm = boss['ARM']
        enemy_pet = boss['PET']
        t_user = boss
        opponent_scaling = 625
        opponent_health_scaling = 5325
        if companion:
            opponent_scaling = 750
            opponent_health_scaling = 9325
           
    if mode in U_modes:
        enemy_title = "UTITLE"
        enemy_arm = "UARM"
        opponent_scaling = 15
        opponent_health_scaling = 30
        if randomized_battle:
            currentopponent = 10
            opponent_scaling = 25
        if companion:
            opponent_scaling = 35
            opponent_health_scaling = 120
    if mode in D_modes:
        enemy_title = "DTITLE"
        enemy_arm = "DARM"
        opponent_scaling = 150
        opponent_health_scaling = 775
        if randomized_battle:
            currentopponent = 15
            opponent_scaling = 275
        if companion:
            opponent_scaling = 380
            opponent_health_scaling = 1075
           

    try:
        # Player 1 Data
        o_user = sowner
        operformance = o_user['PERFORMANCE']
        oarm = db.queryArm({'ARM': o_user['ARM']})
        oarm_universe = oarm['UNIVERSE']
        oarm_passive = oarm['ABILITIES'][0]
        oarm_name = oarm['ARM']
        oarm_price = oarm['PRICE']
        oarm_element = oarm['ELEMENT']

        vault = db.queryVault({'DID': str(o_user['DID']), 'PETS.NAME': o_user['PET']})
        
        balance = vault['BALANCE']
        if mode == "RAID":
            if fee >= balance:
                await ctx.send(f"{tguild} requires a payment of {fee} to battle the Shield.")
                return
        if difficulty != "EASY":
            update_durability_message = update_arm_durability(self, vault, oarm, oarm_universe, oarm_price, o)
            if update_durability_message['MESSAGE']:
                await ctx.author.send(f"{update_durability_message['MESSAGE']}")
        opet = {}
        for pet in vault['PETS']:
            if o_user['PET'] == pet['NAME']:
                opet = pet

        opet_passive_type = opet['TYPE']
        opet_name = opet['NAME']
        opet_image = opet['PATH']
        opet_exp = opet['EXP']
        opet_lvl = opet['LVL']
        opet_bond = opet['BOND']

        o_DID = o_user['DID']
        o_card = o['NAME']

        ocard_lvl = 0
        ocard_tier = 0
        ocard_exp = 0
        ocard_lvl_attack_buff = 0
        ocard_lvl_defense_buff = 0
        ocard_lvl_ap_buff = 0
        ocard_lvl_hlt_buff = 0
        auto_battle = False
        if mode not in pvp_modes:
            guild_buff = await crown_utilities.guild_buff_update_function(oteam.lower())
            if guild_buff:
                if guild_buff['Stat']:
                    ocard_lvl_attack_buff = 50
                    ocard_lvl_defense_buff = 50
                    ocard_lvl_ap_buff = 30
                    ocard_lvl_hlt_buff = 100
                    update_team_response = db.updateTeam(guild_buff['QUERY'], guild_buff['UPDATE_QUERY'])
                if guild_buff['Auto Battle']:
                    auto_battle = True
                    update_team_response = db.updateTeam(guild_buff['QUERY'], guild_buff['UPDATE_QUERY'])
           
        for x in vault['CARD_LEVELS']:
            if x['CARD'] == o_card:
                ocard_lvl = x['LVL']
                ocard_tier = x['TIER']
                ocard_exp = x['EXP']
                ocard_lvl_ap_buff = ocard_lvl_ap_buff + x['AP']
                ocard_lvl_attack_buff = ocard_lvl_attack_buff + x['ATK']
                ocard_lvl_defense_buff = ocard_lvl_defense_buff + x['DEF']
                ocard_lvl_hlt_buff = ocard_lvl_hlt_buff + x['HLT']

        o_gif = o['GIF']
        o_destiny = o['HAS_COLLECTION']
        o_card_path = o['PATH']
        o_rcard_path = o['RPATH']

        o_health = o['HLT'] + ocard_lvl_hlt_buff
        o_max_health = o['HLT'] + ocard_lvl_hlt_buff
        o_stamina = o['STAM']
        o_max_stamina = o['STAM']
        o_moveset = o['MOVESET']
        o_attack = o['ATK'] + ocard_lvl_attack_buff
        o_defense = o['DEF'] + ocard_lvl_defense_buff
        o_type = o['TYPE']

        o_passive = o['PASS'][0]
        o_speed = o['SPD']
        o_universe = o['UNIVERSE']
        o_title_universe = otitle['UNIVERSE']
        o_title_passive = otitle['ABILITIES'][0]

        user1 = await self.bot.fetch_user(o_DID)
        o_title_passive_bool = False
        o_descriptions = []
        if o['DESCRIPTIONS']:
            o_descriptions = o['DESCRIPTIONS']
            o_greeting_description = o_descriptions[0]
            o_focus_description = o_descriptions[1]
            o_resolve_description = o_descriptions[2]
            o_special_move_description = o_descriptions[3]
            o_win_description = o_descriptions[4]
            o_lose_description = o_descriptions[5]
        else:
            o_greeting_description = "Are you ready to battle!"
            o_focus_description = "I still have more in the tank!"
            o_resolve_description = "Power up!"
            o_special_move_description = "Take this!"
            o_win_description = "Too easy. Come back when you're truly prepared."
            o_lose_description = "I can't believe I lost..."

        if companion:
            ### Companion Data
            c_user = companion
            if mode in ai_co_op_modes:
                cperformance = o_user['PERFORMANCE']
                cvault = vault
                cpet = {}
                for pet in vault['PETS']:
                    if activeDeck['PET'] == pet['NAME']:
                        cpet = pet
                carm = db.queryArm({'ARM': activeDeck['ARM']})
                carm_universe = carm['UNIVERSE']
                carm_passive = carm['ABILITIES'][0]
                carm_name = carm['ARM']
                carm_price = carm['PRICE']
                carm_element = carm['ELEMENT']
            else:
                cperformance = c_user['PERFORMANCE']
                cvault = db.queryVault({'DID': c_user['DID'], 'PETS.NAME': c_user['PET']})
                cpet = {}
                for pet in cvault['PETS']:
                    if c_user['PET'] == pet['NAME']:
                        cpet = pet
                carm = db.queryArm({'ARM': c_user['ARM']})
                carm_universe = carm['UNIVERSE']
                carm_price = carm['PRICE']
                cupdate_durability_message = update_arm_durability(self, cvault, carm, carm_universe, carm_price, c)
                if cupdate_durability_message['MESSAGE']:
                    await ctx.send(f"{cupdate_durability_message['MESSAGE']}")

                carm_universe = carm['UNIVERSE']
                carm_passive = carm['ABILITIES'][0]
                carm_name = carm['ARM']
                carm_element = carm['ELEMENT']

            cpet_passive_type = cpet['TYPE']
            cpet_name = cpet['NAME']
            cpet_image = cpet['PATH']
            cpet_exp = cpet['EXP']
            cpet_lvl = cpet['LVL']
            cpet_bond = cpet['BOND']

            if mode in ai_co_op_modes:
                c_DID = o_user['DID']
            else:
                c_DID = c_user['DID']

            c_card = c['NAME']
            ccard_lvl = 0
            ccard_tier = 0
            ccard_exp = 0
            ccard_lvl_attack_buff = 0
            ccard_lvl_defense_buff = 0
            ccard_lvl_ap_buff = 0
            ccard_lvl_hlt_buff = 0

            guild_buff = await crown_utilities.guild_buff_update_function(cteam.lower())
            if guild_buff:
                if guild_buff['Stat']:
                    ccard_lvl_attack_buff = 50
                    ccard_lvl_defense_buff = 50
                    ccard_lvl_ap_buff = 30
                    ccard_lvl_hlt_buff = 100
                    if oteam != cteam:
                        update_team_response = db.updateTeam(guild_buff['QUERY'], guild_buff['UPDATE_QUERY'])


            for x in cvault['CARD_LEVELS']:
                if x['CARD'] == c_card:
                    ccard_lvl = x['LVL']
                    ccard_tier = x['TIER']
                    ccard_exp = x['EXP']
                    ccard_lvl_ap_buff = ccard_lvl_ap_buff + x['AP']
                    ccard_lvl_attack_buff = ccard_lvl_attack_buff + x['ATK']
                    ccard_lvl_defense_buff = ccard_lvl_defense_buff + x['DEF']
                    ccard_lvl_hlt_buff = ccard_lvl_hlt_buff + x['HLT']

            c_gif = c['GIF']
            c_destiny = c['HAS_COLLECTION']
            c_card_path = c['PATH']
            c_rcard_path = c['RPATH']
            c_health = c['HLT'] + ccard_lvl_hlt_buff
            c_max_health = c['HLT'] + ccard_lvl_hlt_buff

            c_stamina = c['STAM']
            c_max_stamina = c['STAM']
            c_moveset = c['MOVESET']
            c_attack = c['ATK'] + ccard_lvl_attack_buff
            c_defense = c['DEF'] + ccard_lvl_defense_buff
            c_type = c['TYPE']

            c_passive = c['PASS'][0]
            c_speed = c['SPD']
            c_universe = c['UNIVERSE']
            c_title_universe = ctitle['UNIVERSE']
            c_title_passive = ctitle['ABILITIES'][0]

            user2 = await self.bot.fetch_user(c_DID)
            c_title_passive_bool = False
            c_descriptions = []
            if c['DESCRIPTIONS']:
                c_descriptions = c['DESCRIPTIONS']
                c_greeting_description = c_descriptions[0]
                c_focus_description = c_descriptions[1]
                c_resolve_description = c_descriptions[2]
                c_special_move_description = c_descriptions[3]
                c_win_description = c_descriptions[4]
                c_lose_description = c_descriptions[5]
            else:
                c_greeting_description = "Are you ready to battle!"
                c_focus_description = "I still have more in the tank!"
                c_resolve_description = "Power up!"
                c_special_move_description = "Take this!"
                c_win_description = "Too easy. Come back when you're truly prepared."
                c_lose_description = "I can't believe I lost..."

        if mode in pvp_modes or mode in raid_modes:
            # Player 2 Data
            t_user = player2
            tperformance = t_user['PERFORMANCE']
            tarm = db.queryArm({'ARM': t_user['ARM']})
            tarm_universe = tarm['UNIVERSE']
            tarm_passive = tarm['ABILITIES'][0]
            tarm_name = tarm['ARM']
            tarm_price = tarm['PRICE']
            tarm_element = tarm['ELEMENT']

            tvault = db.queryVault({'DID': str(t_user['DID']), 'PETS.NAME': t_user['PET']})
            if mode in pvp_modes:
                tupdate_durability_message = update_arm_durability(self, tvault, tarm, tarm_universe, tarm_price, t)
                if tupdate_durability_message['MESSAGE']:
                    await ctx.send(f"{tupdate_durability_message['MESSAGE']}")

            tpet = {}
            for pet in tvault['PETS']:
                if t_user['PET'] == pet['NAME']:
                    tpet = pet

            tpet_passive_type = tpet['TYPE']
            tpet_name = tpet['NAME']
            tpet_image = tpet['PATH']
            tpet_exp = tpet['EXP']
            tpet_lvl = tpet['LVL']
            tpet_bond = tpet['BOND']
            tpet_lookup = db.queryPet({'PET': tpet_name})
            tpet_passive = tpet_lookup['ABILITIES'][0]

            t_DID = t_user['DID']
            t_card = t['NAME']

            tcard_lvl = 0
            tcard_tier = 0
            tcard_exp = 0
            tcard_lvl_attack_buff = 0
            tcard_lvl_defense_buff = 0
            tcard_lvl_ap_buff = 0
            tcard_lvl_hlt_buff = 0

            for x in tvault['CARD_LEVELS']:
                if x['CARD'] == t_card:
                    tcard_lvl = x['LVL']
                    tcard_tier = x['TIER']
                    tcard_exp = x['EXP']
                    tcard_lvl_ap_buff = x['AP']
                    tcard_lvl_attack_buff = x['ATK']
                    tcard_lvl_defense_buff = x['DEF']
                    tcard_lvl_hlt_buff = x['HLT']

            t_gif = t['GIF']
            t_destiny = t['HAS_COLLECTION']
            t_card_path = t['PATH']
            t_rcard_path = t['RPATH']

            t_health = t['HLT'] + tcard_lvl_hlt_buff
            t_max_health = t['HLT'] + tcard_lvl_hlt_buff
            t_stamina = t['STAM']
            t_max_stamina = t['STAM']
            t_moveset = t['MOVESET']
            t_attack = t['ATK'] + tcard_lvl_attack_buff
            t_defense = t['DEF'] + tcard_lvl_defense_buff
            if mode == 'RAID':
                t_defense = round(t_defense + hall_def)
            t_type = t['TYPE']

            t_passive = t['PASS'][0]
            t_speed = t['SPD']
            t_universe = t['UNIVERSE']
            t_title_universe = ttitle['UNIVERSE']
            t_title_passive = ttitle['ABILITIES'][0]

            user2 = await self.bot.fetch_user(t_DID)
            t_title_passive_bool = False
            t_descriptions = []
            if t['DESCRIPTIONS']:
                t_descriptions = t['DESCRIPTIONS']
                t_greeting_description = t_descriptions[0]
                t_focus_description = t_descriptions[1]
                t_resolve_description = t_descriptions[2]
                t_special_move_description = t_descriptions[3]
                t_win_description = t_descriptions[4]
                t_lose_description = t_descriptions[5]
            else:
                t_greeting_description = "Are you ready to battle!"
                t_focus_description = "I still have more in the tank!"
                t_resolve_description = "Power up!"
                t_special_move_description = "Take this!"
                t_win_description = "Too easy. Come back when you're truly prepared."
                t_lose_description = "I can't believe I lost..."

        else:
            if mode in B_modes:
                tarm = db.queryArm({'ARM': enemy_arm})
            elif mode == "SCENARIO":
                    enemy_arm = "UARM"
                    if abyss_scaling > 200:
                        enemy_arm = "DARM"
                    tarm = db.queryArm({'ARM': scenario_universe_data[enemy_arm]})
            else:
                tarm = db.queryArm({'ARM': universe[enemy_arm]})

            tarm_universe = tarm['UNIVERSE']
            tarm_element = tarm['ELEMENT']
            t_destiny = t['HAS_COLLECTION']
            if mode in B_modes:
                tpet = db.queryPet({'PET': enemy_pet})
            elif mode in D_modes:
                tpet = db.queryPet({'PET': universe['DPET']})
            elif mode in U_modes:
                tpet = db.queryPet({'PET': universe['UPET']})
            elif mode in raid_modes:
                tpet = db.queryPet({'PET': tpet['NAME']})
            elif mode == "SCENARIO":
                enemy_pet = "UPET"
                if abyss_scaling > 200:
                    enemy_pet = "DPET"
                tpet = db.queryPet({'PET': scenario_universe_data[enemy_pet]})
            else:
                tpet = db.queryPet({'PET': universe['PET']})
            tpet_passive = tpet['ABILITIES'][0]
            tpet_name = tpet['PET']
            tpet_image = tpet['PATH']
            if mode in D_modes:
                tpet_lvl = 10
                tpet_bond = 3
                tcard_lvl = 350
                tcard_lvl_ap_buff = 116 + ap_buff_from_difficulty
                tcard_lvl_attack_defense_buff = 175
                tcard_lvl_hlt_buff = 438
            elif mode in B_modes:
                tpet_lvl = 10
                tpet_bond = 3
                tcard_lvl = 500
                tcard_lvl_ap_buff = 200 + ap_buff_from_difficulty
                tcard_lvl_attack_defense_buff = 200
                tcard_lvl_hlt_buff = 200
            else:
                if mode in co_op_modes and mode in U_modes:
                        tpet_lvl = 6
                        tpet_bond = 2
                        tcard_lvl = ocard_lvl
                        tcard_lvl_ap_buff = ocard_lvl_ap_buff + 50 + ap_buff_from_difficulty
                        tcard_lvl_attack_defense_buff = ocard_lvl_attack_buff + 50
                        tcard_lvl_hlt_buff = ocard_lvl_hlt_buff + 50
                elif mode in co_op_modes and mode in D_modes:
                    tpet_lvl = 10
                    tpet_bond = 3
                    tcard_lvl = 350
                    tcard_lvl_ap_buff = 116 + ap_buff_from_difficulty
                    tcard_lvl_attack_defense_buff = 175
                    tcard_lvl_hlt_buff = 438
                elif mode == "ABYSS" or mode == "SCENARIO":
                    tpet_lvl = 3
                    tpet_bond = 2
                    tcard_lvl = abyss_scaling
                    tcard_lvl_ap_buff = round(abyss_scaling / 3)
                    tcard_lvl_attack_defense_buff = round(abyss_scaling / 2)
                    tcard_lvl_hlt_buff = round((abyss_scaling / 20) * 25)
                else:
                    if ocard_lvl >= 150:
                        tpet_lvl = 3
                        tpet_bond = 1
                        tcard_lvl = 150
                        tcard_lvl_ap_buff = 50 + ap_buff_from_difficulty
                        tcard_lvl_attack_defense_buff = 75
                        tcard_lvl_hlt_buff = 187
                    else:
                        tpet_lvl = 3
                        tpet_bond = 2
                        tcard_lvl = ocard_lvl
                        tcard_lvl_ap_buff = ocard_lvl_ap_buff + ap_buff_from_difficulty
                        tcard_lvl_attack_defense_buff = ocard_lvl_attack_buff
                        tcard_lvl_hlt_buff = ocard_lvl_hlt_buff

            tarm_passive = tarm['ABILITIES'][0]
            tarm_name = tarm['ARM']
            tarm_element = tarm['ELEMENT']
            t_card = t['NAME']
            t_gif = t['GIF']
            t_card_path = t['PATH']
            t_rcard_path = t['RPATH']
            t_health = t['HLT'] + (10 * currentopponent) + opponent_health_scaling + tcard_lvl_hlt_buff  + health_buff_from_difficulty - health_debuff_from_difficulty
            t_max_health = t_health
            t_stamina = t['STAM']
            t_max_stamina = t['STAM']
            t_moveset = t['MOVESET']
            t_attack = t['ATK'] + (10 * currentopponent) + opponent_scaling + tcard_lvl_attack_defense_buff  + stat_buff_from_difficulty - stat_debuff_from_difficulty
            t_defense = t['DEF'] + (10 * currentopponent) + opponent_scaling + tcard_lvl_attack_defense_buff  + stat_buff_from_difficulty - stat_debuff_from_difficulty
            t_type = t['TYPE']

            t_passive = t['PASS'][0]
            t_speed = t['SPD']
            t_universe = t['UNIVERSE']
            t_title_universe = ttitle['UNIVERSE']
            t_title_passive = ttitle['ABILITIES'][0]

            # user2 = await self.bot.fetch_user(t_DID)
            t_title_passive_bool = False
            if t['DESCRIPTIONS']:
                t_descriptions = t['DESCRIPTIONS']
                t_greeting_description = t_descriptions[0]
                t_focus_description = t_descriptions[1]
                t_resolve_description = t_descriptions[2]
                t_special_move_description = t_descriptions[3]
                t_win_description = t_descriptions[4]
                t_lose_description = t_descriptions[5]
            else:
                t_greeting_description = "Are you ready to battle!"
                t_focus_description = "I still have more in the tank!"
                t_resolve_description = "Power up!"
                t_special_move_description = "Take this!"
                t_win_description = "Too easy. Come back when you're truly prepared."
                t_lose_description = "I can't believe I lost..."

        if mode in B_modes:
            # World Building
            t_arena = t_user['DESCRIPTION'][0]
            t_arenades = t_user['DESCRIPTION'][1]
            t_entrance = t_user['DESCRIPTION'][2]
            t_description = t_user['DESCRIPTION'][3]
            t_welcome = t_user['DESCRIPTION'][4]
            t_feeling = t_user['DESCRIPTION'][5]
            t_powerup = t_user['DESCRIPTION'][6]
            t_aura = t_user['DESCRIPTION'][7]
            t_assault = t_user['DESCRIPTION'][8]
            t_world = t_user['DESCRIPTION'][9]
            t_punish = t_user['DESCRIPTION'][10]
            t_rmessage = t_user['DESCRIPTION'][11]
            t_rebuke = t_user['DESCRIPTION'][12]
            t_concede = t_user['DESCRIPTION'][13]
            t_wins = t_user['DESCRIPTION'][14]

        # DBZ traits
        o_final_stand = False
        t_final_stand = False
        if o['UNIVERSE'] == "Dragon Ball Z":
            o_final_stand = True

        if t['UNIVERSE'] == "Dragon Ball Z":
            t_final_stand = True

        if companion:
            c_final_stand = False
            if c['UNIVERSE'] == "Dragon Ball Z":
                c_final_stand = True

            if oteam == cteam:
                o_defense = o_defense + 50
                c_defense = c_defense + 50
            if ofam == cfam:
                o_health = o_health + 100
                c_health = c_health + 100
                o_max_health = o_max_health + 100
                c_max_health = c_max_health + 100

            # Companion Passive Config
            if (c_universe == c_title_universe) or (c_title_universe == "Unbound"):
                c_title_passive_bool = True

            # Player 1 Focus & Resolve
            c_focus = 90
            c_used_focus = False
            c_resolve = 60
            c_used_resolve = False

            # Companion Moves
            c_1 = c_moveset[0]
            c_2 = c_moveset[1]
            c_3 = c_moveset[2]
            c_enhancer = c_moveset[3]
            c_enhancer_used = False
            c_pet_used = False
            c_block_used = False
            c_chainsaw = False
            c_defend_used = False
            c_def_chainsaw = False
            c_atk_chainsaw = False
            if c_universe == "Chainsawman":
                c_chainsaw = True

            carm_passive_type = list(carm_passive.keys())[0]
            carm_passive_value = list(carm_passive.values())[0]
            if carm_passive_type == 'BASIC':
                c_1 = {carm_name: carm_passive_value, "STAM": 10, "ELEMENT": carm_element}
            elif carm_passive_type == 'SPECIAL':
                c_2 = {carm_name: carm_passive_value, "STAM": 30, "ELEMENT": carm_element}
            elif carm_passive_type == 'ULTIMATE':
                c_3 = {carm_name: carm_passive_value, "STAM": 80, "ELEMENT": carm_element}


            cmove1_text = list(c_1.keys())[0]
            cmove1_element = list(c_1.values())[2]
            cmove2_text = list(c_2.keys())[0]
            cmove2_element = list(c_2.values())[2]
            cmove3_text = list(c_3.keys())[0]
            cmove3_element = list(c_3.values())[2]
            cmove_enhanced_text = list(c_enhancer.keys())[0]

            c_opponent_affinities = crown_utilities.check_affinities("t", c, cmove1_element, cmove2_element, cmove3_element)

            cpetmove_text = list(cpet.keys())[3]  # Name of the ability
            cpetmove_ap = (cpet_bond *  cpet_lvl) + list(cpet.values())[3]  # Ability Power

            cpet_move = {str(cpetmove_text): int(cpetmove_ap), 'STAM': 15, 'TYPE': str(cpet_passive_type)}

            # Player 1 Card Passive
            c_card_passive_type = list(c_passive.values())[1]
            c_card_passive = list(c_passive.values())[0]

                    # Title Passive
            c_title_passive_type = list(c_title_passive.keys())[0]
            c_title_passive_value = list(c_title_passive.values())[0]

            if not c_title_passive_bool:
                c_title_passive_type = False

                        # Arm Passive Player 1
            carm_passive_type = list(carm_passive.keys())[0]
            carm_passive_value = list(carm_passive.values())[0]
            carm_shield_active = False
            cshield_value = 0
            carm_barrier_active = False
            cbarrier_count = 0
            carm_parry_active = False
            cparry_count = 0
            carm_siphon_active = False
            csiphon_value = 0
            if carm_passive_type == 'ULTIMAX':
                c_1[cmove1_text] = c_1[cmove1_text] + carm_passive_value
                c_2[cmove2_text] = c_2[cmove2_text] + carm_passive_value
                c_3[cmove3_text] = c_3[cmove3_text] + carm_passive_value
            elif carm_passive_type == 'MANA':
                c_enhancer[cmove_enhanced_text] = round(c_enhancer[cmove_enhanced_text] +  (c_enhancer[cmove_enhanced_text] * (carm_passive_value / 100)))
            elif carm_passive_type == 'SHIELD':
                carm_shield_active = True
                cshield_value = carm_passive_value
            elif carm_passive_type == 'BARRIER':
                carm_barrier_active = True
                cbarrier_count = carm_passive_value
            elif carm_passive_type == 'PARRY':
                carm_parry_active = True
                cparry_count = carm_passive_value
            elif carm_passive_type == 'SIPHON':
                carm_siphon_active = True
                csiphon_value = carm_passive_value

        ################################################################################

        # Player 1 Passive Config
        if (o_universe == o_title_universe) or (o_title_universe == "Unbound"):
            o_title_passive_bool = True

        # Player 1 Focus & Resolve
        o_focus = 90
        o_used_focus = False
        o_resolve = 60
        o_used_resolve = False

        # Player 1 Moves
        o_1 = o_moveset[0]
        o_2 = o_moveset[1]
        o_3 = o_moveset[2]
        o_enhancer = o_moveset[3]
        o_enhancer_used = False
        o_pet_used = False
        o_block_used = False
        o_defend_used = False
        o_chainsaw = False
        o_def_chainsaw = False
        o_atk_chainsaw = False
        if o_universe == "Chainsawman":
            o_chainsaw = True

        oarm_passive_type = list(oarm_passive.keys())[0]
        oarm_passive_value = list(oarm_passive.values())[0]
        if oarm_passive_type == 'BASIC':
            o_1 = {oarm_name: oarm_passive_value, "STAM": 10, "ELEMENT": oarm_element}
        elif oarm_passive_type == 'SPECIAL':
            o_2 = {oarm_name: oarm_passive_value, "STAM": 30, "ELEMENT": oarm_element}
        elif oarm_passive_type == 'ULTIMATE':
            o_3 = {oarm_name: oarm_passive_value, "STAM": 80, "ELEMENT": oarm_element}


        omove1_text = list(o_1.keys())[0]
        omove1_element = list(o_1.values())[2]
        omove2_text = list(o_2.keys())[0]
        omove2_element = list(o_2.values())[2]
        omove3_text = list(o_3.keys())[0]
        omove3_element = list(o_3.values())[2]

        omove_enhanced_text = list(o_enhancer.keys())[0]

        opetmove_text = list(opet.keys())[3]  # Name of the ability
        opetmove_ap = (opet_bond * opet_lvl) + list(opet.values())[3]  # Ability Power

        opet_move = {str(opetmove_text): int(opetmove_ap), 'STAM': 15, 'TYPE': str(opet_passive_type)}

        # Player 1 Card Passive
        o_card_passive_type = list(o_passive.values())[1]
        o_card_passive = list(o_passive.values())[0]

                # Title Passive
        o_title_passive_type = list(o_title_passive.keys())[0]
        o_title_passive_value = list(o_title_passive.values())[0]

        if not o_title_passive_bool:
            o_title_passive_type = False

        # Arm Passive Player 1
        oarm_passive_type = list(oarm_passive.keys())[0]
        oarm_passive_value = list(oarm_passive.values())[0]
        oarm_shield_active = False
        oshield_value = 0
        oarm_barrier_active = False
        obarrier_count = 0
        oarm_parry_active = False
        oparry_count = 0
        oarm_siphon_active = False
        osiphon_value = 0
        if oarm_passive_type == 'ULTIMAX':
            o_1[omove1_text] = o_1[omove1_text] + oarm_passive_value
            o_2[omove2_text] = o_2[omove2_text] + oarm_passive_value
            o_3[omove3_text] = o_3[omove3_text] + oarm_passive_value
        elif oarm_passive_type == 'MANA':
            o_enhancer[omove_enhanced_text] = round(o_enhancer[omove_enhanced_text] + (o_enhancer[omove_enhanced_text] * (oarm_passive_value / 100)))
        elif oarm_passive_type == 'SHIELD':
            oarm_shield_active = True
            oshield_value = oarm_passive_value
        elif oarm_passive_type == 'BARRIER':
            oarm_barrier_active = True
            obarrier_count = oarm_passive_value
        elif oarm_passive_type == 'PARRY':
            oarm_parry_active = True
            oparry_count = oarm_passive_value
        elif oarm_passive_type == 'SIPHON':
            oarm_siphon_active = True
            osiphon_value = oarm_passive_value

        if mode in pvp_modes or mode in raid_modes:
            # Player 2 Moves
            t_1 = t_moveset[0]
            t_2 = t_moveset[1]
            t_3 = t_moveset[2]
            t_enhancer = t_moveset[3]

            tarm_passive_type = list(tarm_passive.keys())[0]
            tarm_passive_value = list(tarm_passive.values())[0]
            if tarm_passive_type == 'BASIC':
                t_1 = {tarm_name: tarm_passive_value, "STAM": 10, "ELEMENT": tarm_element}
            elif oarm_passive_type == 'SPECIAL':
                t_2 = {tarm_name: tarm_passive_value, "STAM": 30, "ELEMENT": tarm_element}
            elif oarm_passive_type == 'ULTIMATE':
                t_3 = {tarm_name: tarm_passive_value, "STAM": 80, "ELEMENT": tarm_element}


            tmove1_text = list(t_1.keys())[0]
            tmove1_element = list(t_1.values())[2]
            tmove2_text = list(t_2.keys())[0]
            tmove2_element = list(t_2.values())[2]
            tmove3_text = list(t_3.keys())[0]
            tmove3_element = list(t_3.values())[2]
            tmove_enhanced_text = list(t_enhancer.keys())[0]
            tpetmove_text = list(tpet_passive.keys())[0]

            tpetmove_text = list(tpet.keys())[3]  # Name of the ability
            tpetmove_ap = (tpet_bond * tpet_lvl) + list(tpet_passive.values())[0] # Ability Power
            tpet_move = {str(tpetmove_text): int(tpetmove_ap), 'STAM': 15, 'TYPE': str(tpet_passive_type)}
        else:
            t_1 = t_moveset[0]
            t_2 = t_moveset[1]
            t_3 = t_moveset[2]
            t_enhancer = t_moveset[3]

            tarm_passive_type = list(tarm_passive.keys())[0]
            tarm_passive_value = list(tarm_passive.values())[0]
            if tarm_passive_type == 'BASIC':
                t_1 = {tarm_name: tarm_passive_value, "STAM": 10, "ELEMENT": tarm_element}
            elif oarm_passive_type == 'SPECIAL':
                t_2 = {tarm_name: tarm_passive_value, "STAM": 30, "ELEMENT": tarm_element}
            elif oarm_passive_type == 'ULTIMATE':
                t_3 = {tarm_name: tarm_passive_value, "STAM": 80, "ELEMENT": tarm_element}

            tmove1_text = list(t_1.keys())[0]
            tmove1_element = list(t_1.values())[2]
            tmove2_text = list(t_2.keys())[0]
            tmove2_element = list(t_2.values())[2]
            tmove3_text = list(t_3.keys())[0]
            tmove3_element = list(t_3.values())[2]
            tmove_enhanced_text = list(t_enhancer.keys())[0]
            tpetmove_text = list(tpet_passive.keys())[0]
   
            tpetmove_ap = (tpet_bond * tpet_lvl) + list(tpet_passive.values())[0]  # Ability Power
            tpetmove_type = list(tpet_passive.values())[1]
            tpet_move = {str(tpetmove_text): int(tpetmove_ap), 'STAM': 15, 'TYPE': tpetmove_type}

        # Player 2 Passive Config
        if (t_universe == t_title_universe) or (t_title_universe == "Unbound"):
            t_title_passive_bool = True

        # Player 1 Card Passive
        t_card_passive_type = list(t_passive.values())[1]
        t_card_passive = list(t_passive.values())[0]

        # Title Passive
        t_title_passive_type = list(t_title_passive.keys())[0]
        t_title_passive_value = list(t_title_passive.values())[0]

        if not t_title_passive_bool:
            t_title_passive_type = False

        # Arm Passive Player 2
        tarm_passive_type = list(tarm_passive.keys())[0]
        tarm_passive_value = list(tarm_passive.values())[0]
        tarm_shield_active = False
        tshield_value = 0
        tarm_barrier_active = False
        tbarrier_count = 0
        tarm_parry_active = False
        tparry_count = 0
        tarm_siphon_active = False
        tsiphon_value = 0
        if tarm_passive_type == 'ULTIMAX':
            t_1[tmove1_text] = t_1[tmove1_text] + tarm_passive_value
            t_2[tmove2_text] = t_2[tmove2_text] + tarm_passive_value
            t_3[tmove3_text] = t_3[tmove3_text] + tarm_passive_value
        elif tarm_passive_type == 'MANA':
            t_enhancer[tmove_enhanced_text] = round(t_enhancer[tmove_enhanced_text] + (t_enhancer[tmove_enhanced_text] * (tarm_passive_value / 100)))
        elif tarm_passive_type == 'SHIELD':
            tarm_shield_active = True
            tshield_value = tarm_passive_value
        elif tarm_passive_type == 'BARRIER':
            tarm_barrier_active = True
            tbarrier_count = tarm_passive_value
        elif tarm_passive_type == 'PARRY':
            tarm_parry_active = True
            tparry_count = tarm_passive_value
        elif tarm_passive_type == 'SIPHON':
            tarm_siphon_active = True
            tsiphon_value = tarm_passive_value
        
        if companion:
            if (carm_universe == c_universe) and (c_title_universe == c_universe):
                c_attack = c_attack + 20
                c_defense = c_defense + 20
                c_max_health = c_max_health + 100
                c_health = c_health + 100
                if c_destiny:
                    c_attack = c_attack + 5
                    c_defense = c_defense + 5
                    c_max_health = c_max_health + 50
                    c_health = c_health + 50

        if (oarm_universe == o_universe) and (o_title_universe == o_universe):
            o_attack = o_attack + 20
            o_defense = o_defense + 20
            o_max_health = o_max_health + 100
            o_health = o_health + 100
            if o_destiny:
                o_attack = o_attack + 5
                o_defense = o_defense + 5
                o_max_health = o_max_health + 50
                o_health = o_health + 50

        if (tarm_universe == t_universe) and (t_title_universe == t_universe):
            t_attack = t_attack + 20
            t_defense = t_defense + 20
            t_max_health = t_max_health + 100
            t_health = t_health + 100
            if t_destiny:
                t_attack = t_attack + 5
                t_defense = t_defense + 5
                t_max_health = t_max_health + 50
                t_health = t_health + 50

        # Player 1 Focus & Resolve
        t_focus = 90
        t_used_focus = False
        t_resolve = 60
        t_used_resolve = False
        t_chainsaw = False
        t_def_chainsaw = False
        t_atk_chainsaw = False
        if t_universe == "Chainsawman":
            t_chainsaw = True
        t_enhancer_used = False
        t_pet_used = False
        t_block_used = False
        t_defend_used = False

        # Rebirth Scaling
        o_attack = o_attack + (o_user['REBIRTH'] * 10)
        o_defense = o_defense + (o_user['REBIRTH'] * 10)

        if companion and mode not in ai_co_op_modes:
            c_attack = c_attack + (c_user['REBIRTH'] * 10)
            c_defense = c_defense + (c_user['REBIRTH'] * 10)

        o_opponent_affinities = crown_utilities.check_affinities("t", o, tmove1_element, tmove2_element, tmove3_element)

        t_opponent_affinities = crown_utilities.check_affinities("o", t, omove1_element, omove2_element, omove3_element)

        if companion:
            t_for_c_opponent_affinities = crown_utilities.check_affinities("c", t, cmove1_element, cmove2_element, cmove3_element)
            c_opponent_affinities = crown_utilities.check_affinities("t", c, tmove1_element, tmove2_element, tmove3_element)



        STATS = {
            'o_full_card_info': o,
            't_full_card_info': t,
            'o_card_passive_type': o_card_passive_type,
            't_card_passive_type': t_card_passive_type,
            'omove1_element': omove1_element,
            'omove2_element': omove2_element,
            'omove3_element': omove3_element,
            'tmove1_element': tmove1_element,
            'tmove2_element': tmove2_element,
            'tmove3_element': tmove3_element,
            'o_opponent_affinities': o_opponent_affinities,
            't_opponent_affinities': t_opponent_affinities,
            'auto_battle': auto_battle,
            'operformance': operformance,
            'o_opponent_affinities': o_opponent_affinities,
            'o_title_passive_type': o_title_passive_type,
            'o_title_passive_value': o_title_passive_value,
            't_title_passive_type': t_title_passive_type,
            't_title_passive_value': t_title_passive_value,
            'o_card': o_card,
            'ocard_lvl': ocard_lvl,
            'o_card_path': o_card_path,
            'oarm': oarm,
            'oarm_passive_type' : oarm_passive_type,
            'oarm_passive_value' : oarm_passive_value,
            'o_user': o_user,
            'o_universe': o_universe,
            'o_attack': o_attack,
            'o_defense': o_defense,
            'o_stamina': o_stamina,
            'o_max_stamina': o_max_stamina,
            'o_health': o_health,
            'o_max_health': o_max_health,
            'o_DID': o_DID,
            'o_chainsaw': o_chainsaw,
            'o_atk_chainsaw': o_atk_chainsaw,
            'o_def_chainsaw': o_def_chainsaw,
            'omove1_text': omove1_text,
            'omove2_text': omove2_text,
            'omove3_text': omove3_text,
            'omove_enhanced_text': omove_enhanced_text,
            'o_1': o_1,
            'o_2': o_2,
            'o_3': o_3,
            'oarm_shield_active': oarm_shield_active,
            'oshield_value': oshield_value,
            'oarm_barrier_active': oarm_barrier_active,
            'obarrier_count': obarrier_count,
            'oarm_parry_active': oarm_parry_active,
            'oparry_count': oparry_count,
            'oarm_siphon_active': oarm_siphon_active,
            'osiphon_value': osiphon_value,
            'o_gif': o_gif,
            'o_enhancer': o_enhancer,
            'o_speed': o_speed,
            'o_special_move_description': o_special_move_description,
            'o_greeting_description': o_greeting_description,
            'o_focus_description': o_focus_description,
            'o_resolve_description': o_resolve_description,
            'o_special_move_description': o_special_move_description,
            'o_win_description': o_win_description,
            'o_lose_description': o_lose_description,
            'ocard_lvl_ap_buff': ocard_lvl_ap_buff,
            'opet_name': opet_name,
            'opet_move': opet_move,
            'opet_lvl': opet_lvl,
            'opet_bond': opet_bond,
            'opetmove_text': opetmove_text,
            'opet_image': opet_image,
            'o_pet_used': o_pet_used,
            'user1': user1,
            'o_focus': o_focus,
            'o_used_focus': o_used_focus,
            'o_resolve': o_resolve,
            'o_used_resolve': o_used_resolve,
            'o_block_used': o_block_used,
            'o_defend_used': o_defend_used,
            'o_enhancer_used': o_enhancer_used,
            'o_final_stand': o_final_stand,
            't_card': t_card,
            'tarm': tarm,
            'tarm_name': tarm_name,
            'tarm_passive_type' : tarm_passive_type,
            'tarm_passive_value' : tarm_passive_value,
            'tcard_lvl': tcard_lvl,
            't_universe': t_universe,
            't_attack': t_attack,
            't_opponent_affinities': t_opponent_affinities,
            't_defense': t_defense,
            't_health': t_health,
            't_max_health': t_max_health,
            't_chainsaw': t_chainsaw,
            't_atk_chainsaw': t_atk_chainsaw,
            't_def_chainsaw': t_def_chainsaw,
            't_stamina': t_stamina,
            't_max_stamina': t_max_stamina,
            't_1': t_1,
            't_2': t_2,
            't_3': t_3,
            'tarm_shield_active': tarm_shield_active,
            'tshield_value': tshield_value,
            'tarm_barrier_active': tarm_barrier_active,
            'tbarrier_count': tbarrier_count,
            'tarm_parry_active': tarm_parry_active,
            'tparry_count': tparry_count,
            'tarm_siphon_active': tarm_siphon_active,
            'tsiphon_value': tsiphon_value,
            'tmove1_text': tmove1_text,
            'tmove2_text': tmove2_text,
            'tmove3_text': tmove3_text,
            'tmove_enhanced_text': tmove_enhanced_text,
            't_enhancer': t_enhancer,
            't_enhancer_used': t_enhancer_used,
            't_speed': t_speed,
            't_special_move_description': t_special_move_description,
            't_gif': t_gif,
            't_greeting_description': t_greeting_description,
            't_focus_description': t_focus_description,
            't_resolve_description': t_resolve_description,
            't_special_move_description': t_special_move_description,
            't_win_description': t_win_description,
            't_lose_description': t_lose_description,
            't_focus': t_focus,
            't_used_focus': t_used_focus,
            't_resolve': t_resolve,
            't_used_resolve': t_used_resolve,
            't_final_stand': t_final_stand,
            'tcard_lvl_ap_buff': tcard_lvl_ap_buff,
            'tpet_name': tpet_name,
            'tpet_move': tpet_move,
            'tpet_lvl': tpet_lvl,
            'tpet_bond': tpet_bond,
            'tpetmove_text': tpetmove_text,
            'tpet_image': tpet_image,
            't_pet_used': t_pet_used,
            't_block_used': t_block_used,
            't_defend_used': t_defend_used
        }

        if mode in pvp_modes:
            STATS = {
                'o_card_passive_type': o_card_passive_type,
                't_card_passive_type': t_card_passive_type,
                'o_full_card_info': o,
                't_full_card_info': t,
                'omove1_element': omove1_element,
                'omove2_element': omove2_element,
                'omove3_element': omove3_element,
                'tmove1_element': tmove1_element,
                'tmove2_element': tmove2_element,
                'tmove3_element': tmove3_element,
                'auto_battle': auto_battle,
                'o_opponent_affinities': o_opponent_affinities,
                't_opponent_affinities': t_opponent_affinities,
                'o_title_passive_type': o_title_passive_type,
                'o_title_passive_value': o_title_passive_value,
                't_title_passive_type': t_title_passive_type,
                't_title_passive_value': t_title_passive_value,
                'operformance': operformance,
                'o_card': o_card,
                'ocard_lvl': ocard_lvl,
                'o_card_path': o_card_path,
                'oarm': oarm,
                'oarm_passive_type' : oarm_passive_type,
                'oarm_passive_value' : oarm_passive_value,
                'o_user': o_user,
                'o_universe': o_universe,
                'o_attack': o_attack,
                'o_defense': o_defense,
                'o_stamina': o_stamina,
                'o_max_stamina': o_max_stamina,
                'o_health': o_health,
                'o_max_health': o_max_health,
                'o_DID': o_DID,
                'o_chainsaw': o_chainsaw,
                'o_atk_chainsaw': o_atk_chainsaw,
                'o_def_chainsaw': o_def_chainsaw,
                'omove1_text': omove1_text,
                'omove2_text': omove2_text,
                'omove3_text': omove3_text,
                'omove_enhanced_text': omove_enhanced_text,
                'o_1': o_1,
                'o_2': o_2,
                'o_3': o_3,
                'oarm_shield_active': oarm_shield_active,
                'oshield_value': oshield_value,
                'oarm_barrier_active': oarm_barrier_active,
                'obarrier_count': obarrier_count,
                'oarm_parry_active': oarm_parry_active,
                'oparry_count': oparry_count,
                'oarm_siphon_active': oarm_siphon_active,
                'osiphon_value': osiphon_value,
                'o_gif': o_gif,
                'o_enhancer': o_enhancer,
                'o_speed': o_speed,
                'o_special_move_description': o_special_move_description,
                'o_greeting_description': o_greeting_description,
                'o_focus_description': o_focus_description,
                'o_resolve_description': o_resolve_description,
                'o_special_move_description': o_special_move_description,
                'o_win_description': o_win_description,
                'o_lose_description': o_lose_description,
                'ocard_lvl_ap_buff': ocard_lvl_ap_buff,
                'opet_name': opet_name,
                'opet_move': opet_move,
                'opetmove_text': opetmove_text,
                'opet_image': opet_image,
                'o_pet_used': o_pet_used,
                'user1': user1,
                'o_focus': o_focus,
                'o_used_focus': o_used_focus,
                'o_resolve': o_resolve,
                'o_used_resolve': o_used_resolve,
                'o_block_used': o_block_used,
                'o_defend_used': o_defend_used,
                'o_enhancer_used': o_enhancer_used,
                'o_final_stand': o_final_stand,
                'opet_lvl': opet_lvl,
                'opet_bond': opet_bond,
                'tpet_lvl': tpet_lvl,
                'tpet_bond': tpet_bond,
                't_card': t_card,
                'tcard_lvl': tcard_lvl,
                'tperformance': tperformance,
                'tarm': tarm,
                'tarm_name': tarm_name,
                'tarm_passive_type' : tarm_passive_type,
                'tarm_passive_value' : tarm_passive_value,
                't_universe': t_universe,
                't_attack': t_attack,
                't_defense': t_defense,
                't_health': t_health,
                't_max_health': t_max_health,
                't_chainsaw': t_chainsaw,
                't_atk_chainsaw': t_atk_chainsaw,
                't_def_chainsaw': t_def_chainsaw,
                't_stamina': t_stamina,
                't_max_stamina': t_max_stamina,
                't_1': t_1,
                't_2': t_2,
                't_3': t_3,
                'tarm_shield_active': tarm_shield_active,
                'tshield_value': tshield_value,
                'tarm_barrier_active': tarm_barrier_active,
                'tbarrier_count': tbarrier_count,
                'tarm_parry_active': tarm_parry_active,
                'tparry_count': tparry_count,
                'tarm_siphon_active': tarm_siphon_active,
                'tsiphon_value': tsiphon_value,
                'tmove1_text': tmove1_text,
                'tmove2_text': tmove2_text,
                'tmove3_text': tmove3_text,
                'tmove_enhanced_text': tmove_enhanced_text,
                't_enhancer': t_enhancer,
                't_enhancer_used': t_enhancer_used,
                't_speed': t_speed,
                't_special_move_description': t_special_move_description,
                't_gif': t_gif,
                't_greeting_description': t_greeting_description,
                't_focus_description': t_focus_description,
                't_resolve_description': t_resolve_description,
                't_special_move_description': t_special_move_description,
                't_win_description': t_win_description,
                't_lose_description': t_lose_description,
                't_focus': t_focus,
                't_used_focus': t_used_focus,
                't_resolve': t_resolve,
                't_used_resolve': t_used_resolve,
                't_final_stand': t_final_stand,
                'tcard_lvl_ap_buff': tcard_lvl_ap_buff,
                'tpet_name': tpet_name,
                'tpet_move': tpet_move,
                'tpetmove_text': tpetmove_text,
                'tpet_image': tpet_image,
                't_pet_used': t_pet_used,
                'user2': user2,
                't_DID': t_DID,
                't_card_path': t_card_path,
                'tarm': tarm,
                't_user': t_user,
                't_block_used': t_block_used,
                't_defend_used': t_defend_used
            }
        if mode == "RAID":
            STATS = {
                'o_card_passive_type': o_card_passive_type,
                't_card_passive_type': t_card_passive_type,
                'o_full_card_info': o,
                't_full_card_info': t,
                'omove1_element': omove1_element,
                'omove2_element': omove2_element,
                'omove3_element': omove3_element,
                'tmove1_element': tmove1_element,
                'tmove2_element': tmove2_element,
                'tmove3_element': tmove3_element,
                'o_opponent_affinities': o_opponent_affinities,
                't_opponent_affinities': t_opponent_affinities,
                'auto_battle': auto_battle,
                'o_title_passive_type': o_title_passive_type,
                'o_title_passive_value': o_title_passive_value,
                't_title_passive_type': t_title_passive_type,
                't_title_passive_value': t_title_passive_value,
                'operformance': operformance,
                'o_card': o_card,
                'ocard_lvl': ocard_lvl,
                'o_card_path': o_card_path,
                'oarm': oarm,
                'oarm_passive_type' : oarm_passive_type,
                'oarm_passive_value' : oarm_passive_value,
                'o_user': o_user,
                'o_universe': o_universe,
                'o_attack': o_attack,
                'o_defense': o_defense,
                'o_stamina': o_stamina,
                'o_max_stamina': o_max_stamina,
                'o_health': o_health,
                'o_max_health': o_max_health,
                'o_DID': o_DID,
                'o_chainsaw': o_chainsaw,
                'o_atk_chainsaw': o_atk_chainsaw,
                'o_def_chainsaw': o_def_chainsaw,
                'omove1_text': omove1_text,
                'omove2_text': omove2_text,
                'omove3_text': omove3_text,
                'omove_enhanced_text': omove_enhanced_text,
                'o_1': o_1,
                'o_2': o_2,
                'o_3': o_3,
                'oarm_shield_active': oarm_shield_active,
                'oshield_value': oshield_value,
                'oarm_barrier_active': oarm_barrier_active,
                'obarrier_count': obarrier_count,
                'oarm_parry_active': oarm_parry_active,
                'oparry_count': oparry_count,
                'oarm_siphon_active': oarm_siphon_active,
                'osiphon_value': osiphon_value,
                'o_gif': o_gif,
                'o_enhancer': o_enhancer,
                'o_speed': o_speed,
                'o_special_move_description': o_special_move_description,
                'o_greeting_description': o_greeting_description,
                'o_focus_description': o_focus_description,
                'o_resolve_description': o_resolve_description,
                'o_special_move_description': o_special_move_description,
                'o_win_description': o_win_description,
                'o_lose_description': o_lose_description,
                'ocard_lvl_ap_buff': ocard_lvl_ap_buff,
                'opet_name': opet_name,
                'opet_move': opet_move,
                'opetmove_text': opetmove_text,
                'opet_image': opet_image,
                'o_pet_used': o_pet_used,
                'user1': user1,
                'o_focus': o_focus,
                'o_used_focus': o_used_focus,
                'o_resolve': o_resolve,
                'o_used_resolve': o_used_resolve,
                'o_block_used': o_block_used,
                'o_defend_used': o_defend_used,
                'o_enhancer_used': o_enhancer_used,
                'o_final_stand': o_final_stand,
                'opet_lvl': opet_lvl,
                'opet_bond': opet_bond,
                'tpet_lvl': tpet_lvl,
                'tpet_bond': tpet_bond,
                't_card': t_card,
                'tcard_lvl': tcard_lvl,
                'tperformance': operformance,
                'tarm': tarm,
                'tarm_name': tarm_name,
                'tarm_passive_type' : tarm_passive_type,
                'tarm_passive_value' : tarm_passive_value,
                't_universe': t_universe,
                't_attack': t_attack,
                't_defense': t_defense,
                't_health': t_health,
                't_max_health': t_max_health,
                't_chainsaw': t_chainsaw,
                't_atk_chainsaw': t_atk_chainsaw,
                't_def_chainsaw': t_def_chainsaw,
                't_stamina': t_stamina,
                't_max_stamina': t_max_stamina,
                't_1': t_1,
                't_2': t_2,
                't_3': t_3,
                'tarm_shield_active': tarm_shield_active,
                'tshield_value': tshield_value,
                'tarm_barrier_active': tarm_barrier_active,
                'tbarrier_count': tbarrier_count,
                'tarm_parry_active': tarm_parry_active,
                'tparry_count': tparry_count,
                'tarm_siphon_active': tarm_siphon_active,
                'tsiphon_value': tsiphon_value,
                'tmove1_text': tmove1_text,
                'tmove2_text': tmove2_text,
                'tmove3_text': tmove3_text,
                'tmove_enhanced_text': tmove_enhanced_text,
                't_enhancer': t_enhancer,
                't_enhancer_used': t_enhancer_used,
                't_speed': t_speed,
                't_special_move_description': t_special_move_description,
                't_gif': t_gif,
                't_greeting_description': t_greeting_description,
                't_focus_description': t_focus_description,
                't_resolve_description': t_resolve_description,
                't_special_move_description': t_special_move_description,
                't_win_description': t_win_description,
                't_lose_description': t_lose_description,
                't_focus': t_focus,
                't_used_focus': t_used_focus,
                't_resolve': t_resolve,
                't_used_resolve': t_used_resolve,
                't_final_stand': t_final_stand,
                'tcard_lvl_ap_buff': tcard_lvl_ap_buff,
                'tpet_name': tpet_name,
                'tpet_move': tpet_move,
                'tpetmove_text': tpetmove_text,
                'tpet_image': tpet_image,
                't_pet_used': t_pet_used,
                'user2': user2,
                't_DID': t_DID,
                't_card_path': t_card_path,
                'tarm': tarm,
                't_user': t_user,
                't_block_used': t_block_used,
                't_defend_used': t_defend_used
            }
        if mode == "Boss":
            STATS = {
                'o_card_passive_type': o_card_passive_type,
                't_card_passive_type': t_card_passive_type,
                'o_full_card_info': o,
                't_full_card_info': t,
                'omove1_element': omove1_element,
                'omove2_element': omove2_element,
                'omove3_element': omove3_element,
                'tmove1_element': tmove1_element,
                'tmove2_element': tmove2_element,
                'tmove3_element': tmove3_element,
                'o_opponent_affinities': o_opponent_affinities,
                't_opponent_affinities': t_opponent_affinities,
                'auto_battle': auto_battle,
                'o_title_passive_type': o_title_passive_type,
                'o_title_passive_value': o_title_passive_value,
                't_title_passive_type': t_title_passive_type,
                't_title_passive_value': t_title_passive_value,
                'operformance': operformance,
                'opet_lvl': opet_lvl,
                'opet_bond': opet_bond,
                'tpet_lvl': tpet_lvl,
                'tpet_bond': tpet_bond,
                'o_card': o_card,
                'ocard_lvl': ocard_lvl,
                'o_card_path': o_card_path,
                'oarm': oarm,
                'oarm_passive_type' : oarm_passive_type,
                'oarm_passive_value' : oarm_passive_value,
                'o_user': o_user,
                'o_universe': o_universe,
                'o_attack': o_attack,
                'o_defense': o_defense,
                'o_stamina': o_stamina,
                'o_max_stamina': o_max_stamina,
                'o_health': o_health,
                'o_max_health': o_max_health,
                'o_DID': o_DID,
                'o_chainsaw': o_chainsaw,
                'o_atk_chainsaw': o_atk_chainsaw,
                'o_def_chainsaw': o_def_chainsaw,
                'omove1_text': omove1_text,
                'omove2_text': omove2_text,
                'omove3_text': omove3_text,
                'omove_enhanced_text': omove_enhanced_text,
                'o_1': o_1,
                'o_2': o_2,
                'o_3': o_3,
                'oarm_shield_active': oarm_shield_active,
                'oshield_value': oshield_value,
                'oarm_barrier_active': oarm_barrier_active,
                'obarrier_count': obarrier_count,
                'oarm_parry_active': oarm_parry_active,
                'oparry_count': oparry_count,
                'oarm_siphon_active': oarm_siphon_active,
                'osiphon_value': osiphon_value,
                'o_gif': o_gif,
                'o_enhancer': o_enhancer,
                'o_speed': o_speed,
                'o_special_move_description': o_special_move_description,
                'o_greeting_description': o_greeting_description,
                'o_focus_description': o_focus_description,
                'o_resolve_description': o_resolve_description,
                'o_special_move_description': o_special_move_description,
                'o_win_description': o_win_description,
                'o_lose_description': o_lose_description,
                'ocard_lvl_ap_buff': ocard_lvl_ap_buff,
                'opet_name': opet_name,
                'opet_move': opet_move,
                'opetmove_text': opetmove_text,
                'opet_image': opet_image,
                'o_pet_used': o_pet_used,
                'user1': user1,
                'o_focus': o_focus,
                'o_used_focus': o_used_focus,
                'o_resolve': o_resolve,
                'o_used_resolve': o_used_resolve,
                'o_block_used': o_block_used,
                'o_defend_used': o_defend_used,
                'o_enhancer_used': o_enhancer_used,
                'o_final_stand': o_final_stand,
                't_card': t_card,
                'tarm': tarm,
                'tarm_name': tarm_name,
                'tarm_passive_type' : tarm_passive_type,
                'tarm_passive_value' : tarm_passive_value,
                'tcard_lvl': tcard_lvl,
                't_universe': t_universe,
                't_attack': t_attack,
                't_defense': t_defense,
                't_health': t_health,
                't_max_health': t_max_health,
                't_chainsaw': t_chainsaw,
                't_atk_chainsaw': t_atk_chainsaw,
                't_def_chainsaw': t_def_chainsaw,
                't_stamina': t_stamina,
                't_max_stamina': t_max_stamina,
                'tmove1_text': tmove1_text,
                'tmove2_text': tmove2_text,
                'tmove3_text': tmove3_text,
                'tmove_enhanced_text': tmove_enhanced_text,
                't_1': t_1,
                't_2': t_2,
                't_3': t_3,
                'tarm_shield_active': tarm_shield_active,
                'tshield_value': tshield_value,
                'tarm_barrier_active': tarm_barrier_active,
                'tbarrier_count': tbarrier_count,
                'tarm_parry_active': tarm_parry_active,
                'tparry_count': tparry_count,
                'tarm_siphon_active': tarm_siphon_active,
                'tsiphon_value': tsiphon_value,
                't_enhancer': t_enhancer,
                't_enhancer_used': t_enhancer_used,
                't_speed': t_speed,
                't_special_move_description': t_special_move_description,
                't_gif': t_gif,
                't_greeting_description': t_greeting_description,
                't_focus_description': t_focus_description,
                't_resolve_description': t_resolve_description,
                't_special_move_description': t_special_move_description,
                't_win_description': t_win_description,
                't_lose_description': t_lose_description,
                't_focus': t_focus,
                't_used_focus': t_used_focus,
                't_resolve': t_resolve,
                't_used_resolve': t_used_resolve,
                't_final_stand': t_final_stand,
                'tcard_lvl_ap_buff': tcard_lvl_ap_buff,
                'tpet_name': tpet_name,
                'tpet_move': tpet_move,
                'tpetmove_text': tpetmove_text,
                'tpet_image': tpet_image,
                't_pet_used': t_pet_used,
                't_arena': t_arena,
                't_arenades': t_arenades,
                't_entrance': t_entrance,
                't_description': t_description,
                't_welcome': t_welcome,
                't_feeling': t_feeling,
                't_powerup': t_powerup,
                't_aura': t_aura,
                't_assault': t_assault,
                't_world': t_world,
                't_punish': t_punish,
                't_rmessage': t_rmessage,
                't_rebuke': t_rebuke,
                't_concede': t_concede,
                't_wins': t_wins,
                't_block_used': t_block_used,
                't_defend_used': t_defend_used
            }

        if mode == "CBoss":
            STATS = {
                'o_card_passive_type': o_card_passive_type,
                't_card_passive_type': t_card_passive_type,
                'c_card_passive_type': c_card_passive_type,
                'o_full_card_info': o,
                'c_full_card_info': c,
                't_full_card_info': t,
                'omove1_element': omove1_element,
                'omove2_element': omove2_element,
                'omove3_element': omove3_element,
                'tmove1_element': tmove1_element,
                'tmove2_element': tmove2_element,
                'tmove3_element': tmove3_element,
                'cmove1_element': cmove1_element,
                'cmove2_element': cmove2_element,
                'cmove3_element': cmove3_element,
                'o_opponent_affinities': o_opponent_affinities,
                't_opponent_affinities': t_opponent_affinities,
                't_for_c_opponent_affinities': t_for_c_opponent_affinities,
                'c_opponent_affinities': c_opponent_affinities,
                'auto_battle': auto_battle,
                'o_title_passive_type': o_title_passive_type,
                'o_title_passive_value': o_title_passive_value,
                't_title_passive_type': t_title_passive_type,
                't_title_passive_value': t_title_passive_value,
                'c_title_passive_type': c_title_passive_type,
                'c_title_passive_value': c_title_passive_value,
                'operformance': operformance,
                'opet_lvl': opet_lvl,
                'opet_bond': opet_bond,
                'tpet_lvl': tpet_lvl,
                'tpet_bond': tpet_bond,
                'cpet_lvl': cpet_lvl,
                'cpet_bond': cpet_bond,
                'o_card': o_card,
                'ocard_lvl': ocard_lvl,
                'o_card_path': o_card_path,
                'oarm': oarm,
                'oarm_passive_type' : oarm_passive_type,
                'oarm_passive_value' : oarm_passive_value,
                'o_user': o_user,
                'o_universe': o_universe,
                'o_attack': o_attack,
                'o_defense': o_defense,
                'o_stamina': o_stamina,
                'o_max_stamina': o_max_stamina,
                'o_health': o_health,
                'o_max_health': o_max_health,
                'o_DID': o_DID,
                'o_chainsaw': o_chainsaw,
                'o_atk_chainsaw': o_atk_chainsaw,
                'o_def_chainsaw': o_def_chainsaw,
                'omove1_text': omove1_text,
                'omove2_text': omove2_text,
                'omove3_text': omove3_text,
                'omove_enhanced_text': omove_enhanced_text,
                'o_1': o_1,
                'o_2': o_2,
                'o_3': o_3,
                'oarm_shield_active': oarm_shield_active,
                'oshield_value': oshield_value,
                'oarm_barrier_active': oarm_barrier_active,
                'obarrier_count': obarrier_count,
                'oarm_parry_active': oarm_parry_active,
                'oparry_count': oparry_count,
                'oarm_siphon_active': oarm_siphon_active,
                'osiphon_value': osiphon_value,
                'o_gif': o_gif,
                'o_enhancer': o_enhancer,
                'o_speed': o_speed,
                'o_special_move_description': o_special_move_description,
                'o_greeting_description': o_greeting_description,
                'o_focus_description': o_focus_description,
                'o_resolve_description': o_resolve_description,
                'o_special_move_description': o_special_move_description,
                'o_win_description': o_win_description,
                'o_lose_description': o_lose_description,
                'ocard_lvl_ap_buff': ocard_lvl_ap_buff,
                'opet_name': opet_name,
                'opet_move': opet_move,
                'opetmove_text': opetmove_text,
                'opet_image': opet_image,
                'o_pet_used': o_pet_used,
                'user1': user1,
                'o_focus': o_focus,
                'o_used_focus': o_used_focus,
                'o_resolve': o_resolve,
                'o_used_resolve': o_used_resolve,
                'o_block_used': o_block_used,
                'o_defend_used': o_defend_used,
                'o_enhancer_used': o_enhancer_used,
                'o_final_stand': o_final_stand,
                't_card': t_card,
                'tarm': tarm,
                'tarm_name': tarm_name,
                'tarm_passive_type' : tarm_passive_type,
                'tarm_passive_value' : tarm_passive_value,
                'tcard_lvl': tcard_lvl,
                't_universe': t_universe,
                't_attack': t_attack,
                't_defense': t_defense,
                't_health': t_health,
                't_max_health': t_max_health,
                't_chainsaw': t_chainsaw,
                't_atk_chainsaw': t_atk_chainsaw,
                't_def_chainsaw': t_def_chainsaw,
                't_stamina': t_stamina,
                't_max_stamina': t_max_stamina,
                'tmove1_text': tmove1_text,
                'tmove2_text': tmove2_text,
                'tmove3_text': tmove3_text,
                'tmove_enhanced_text': tmove_enhanced_text,
                't_1': t_1,
                't_2': t_2,
                't_3': t_3,
                'tarm_shield_active': tarm_shield_active,
                'tshield_value': tshield_value,
                'tarm_barrier_active': tarm_barrier_active,
                'tbarrier_count': tbarrier_count,
                'tarm_parry_active': tarm_parry_active,
                'tparry_count': tparry_count,
                'tarm_siphon_active': tarm_siphon_active,
                'tsiphon_value': tsiphon_value,
                't_enhancer': t_enhancer,
                't_enhancer_used': t_enhancer_used,
                't_speed': t_speed,
                't_special_move_description': t_special_move_description,
                't_gif': t_gif,
                't_greeting_description': t_greeting_description,
                't_focus_description': t_focus_description,
                't_resolve_description': t_resolve_description,
                't_special_move_description': t_special_move_description,
                't_win_description': t_win_description,
                't_lose_description': t_lose_description,
                't_focus': t_focus,
                't_used_focus': t_used_focus,
                't_resolve': t_resolve,
                't_used_resolve': t_used_resolve,
                't_final_stand': t_final_stand,
                'tcard_lvl_ap_buff': tcard_lvl_ap_buff,
                'tpet_name': tpet_name,
                'tpet_move': tpet_move,
                'tpetmove_text': tpetmove_text,
                'tpet_image': tpet_image,
                't_pet_used': t_pet_used,
                't_arena': t_arena,
                't_arenades': t_arenades,
                't_entrance': t_entrance,
                't_description': t_description,
                't_welcome': t_welcome,
                't_feeling': t_feeling,
                't_powerup': t_powerup,
                't_aura': t_aura,
                't_assault': t_assault,
                't_world': t_world,
                't_punish': t_punish,
                't_rmessage': t_rmessage,
                't_rebuke': t_rebuke,
                't_concede': t_concede,
                't_wins': t_wins,
                't_block_used': t_block_used,
                't_defend_used': t_defend_used,
                'cperformance': cperformance,
                'c_card': c_card,
                'ccard_lvl': ccard_lvl,
                'c_card_path': c_card_path,
                'carm': carm,
                'carm_name': carm_name,
                'carm_passive_type' : carm_passive_type,
                'carm_passive_value' : carm_passive_value,
                'c_user': c_user,
                'c_universe': c_universe,
                'c_attack': c_attack,
                'c_defense': c_defense,
                'c_stamina': c_stamina,
                'c_max_stamina': c_max_stamina,
                'c_health': c_health,
                'c_max_health': c_max_health,
                'c_DID': c_DID,
                'c_chainsaw': c_chainsaw,
                'c_atk_chainsaw': c_atk_chainsaw,
                'c_def_chainsaw': c_def_chainsaw,
                'cmove1_text': cmove1_text,
                'cmove2_text': cmove2_text,
                'cmove3_text': cmove3_text,
                'cmove_enhanced_text': cmove_enhanced_text,
                'c_1': c_1,
                'c_2': c_2,
                'c_3': c_3,
                'carm_shield_active': carm_shield_active,
                'cshield_value': cshield_value,
                'carm_barrier_active': carm_barrier_active,
                'cbarrier_count': cbarrier_count,
                'carm_parry_active': carm_parry_active,
                'cparry_count': cparry_count,
                'carm_siphon_active': carm_siphon_active,
                'csiphon_value': csiphon_value,
                'c_gif': c_gif,
                'c_enhancer': c_enhancer,
                'c_speed': c_speed,
                'c_special_move_description': c_special_move_description,
                'c_greeting_description': c_greeting_description,
                'c_focus_description': c_focus_description,
                'c_resolve_description': c_resolve_description,
                'c_special_move_description': c_special_move_description,
                'c_win_description': c_win_description,
                'c_lose_description': c_lose_description,
                'ccard_lvl_ap_buff': ccard_lvl_ap_buff,
                'cpet_name': cpet_name,
                'cpet_move': cpet_move,
                'cpetmove_text': cpetmove_text,
                'cpet_image': cpet_image,
                'c_pet_used': c_pet_used,
                'user2': user2,
                'c_focus': c_focus,
                'c_used_focus': c_used_focus,
                'c_resolve': c_resolve,
                'c_used_resolve': c_used_resolve,
                'c_block_used': c_block_used,
                'c_defend_used': c_defend_used,
                'c_enhancer_used': c_enhancer_used,
                'c_final_stand': c_final_stand,
            }

        if mode in co_op_modes and mode != "CBoss":
            STATS = {
                'o_card_passive_type': o_card_passive_type,
                't_card_passive_type': t_card_passive_type,
                'c_card_passive_type': c_card_passive_type,
                'o_full_card_info': o,
                'c_full_card_info': c,
                't_full_card_info': t,
                'omove1_element': omove1_element,
                'omove2_element': omove2_element,
                'omove3_element': omove3_element,
                'tmove1_element': tmove1_element,
                'tmove2_element': tmove2_element,
                'tmove3_element': tmove3_element,
                'cmove1_element': cmove1_element,
                'cmove2_element': cmove2_element,
                'cmove3_element': cmove3_element,
                'c_opponent_affinities': c_opponent_affinities,
                'o_opponent_affinities': o_opponent_affinities,
                't_opponent_affinities': t_opponent_affinities,
                't_for_c_opponent_affinities': t_for_c_opponent_affinities,
                'auto_battle': auto_battle,
                'o_title_passive_type': o_title_passive_type,
                'o_title_passive_value': o_title_passive_value,
                't_title_passive_type': t_title_passive_type,
                't_title_passive_value': t_title_passive_value,
                'c_title_passive_type': c_title_passive_type,
                'c_title_passive_value': c_title_passive_value,
                'operformance': operformance,
                'opet_lvl': opet_lvl,
                'opet_bond': opet_bond,
                'tpet_lvl': tpet_lvl,
                'tpet_bond': tpet_bond,
                'cpet_lvl': cpet_lvl,
                'cpet_bond': cpet_bond,
                'o_card': o_card,
                'ocard_lvl': ocard_lvl,
                'o_card_path': o_card_path,
                'oarm': oarm,
                'oarm_passive_type' : oarm_passive_type,
                'oarm_passive_value' : oarm_passive_value,
                'o_user': o_user,
                'o_universe': o_universe,
                'o_attack': o_attack,
                'o_defense': o_defense,
                'o_stamina': o_stamina,
                'o_max_stamina': o_max_stamina,
                'o_health': o_health,
                'o_max_health': o_max_health,
                'o_DID': o_DID,
                'o_chainsaw': o_chainsaw,
                'o_atk_chainsaw': o_atk_chainsaw,
                'o_def_chainsaw': o_def_chainsaw,
                'omove1_text': omove1_text,
                'omove2_text': omove2_text,
                'omove3_text': omove3_text,
                'omove_enhanced_text': omove_enhanced_text,
                'o_1': o_1,
                'o_2': o_2,
                'o_3': o_3,
                'oarm_shield_active': oarm_shield_active,
                'oshield_value': oshield_value,
                'oarm_barrier_active': oarm_barrier_active,
                'obarrier_count': obarrier_count,
                'oarm_parry_active': oarm_parry_active,
                'oparry_count': oparry_count,
                'oarm_siphon_active': oarm_siphon_active,
                'osiphon_value': osiphon_value,
                'o_gif': o_gif,
                'o_enhancer': o_enhancer,
                'o_speed': o_speed,
                'o_special_move_description': o_special_move_description,
                'o_greeting_description': o_greeting_description,
                'o_focus_description': o_focus_description,
                'o_resolve_description': o_resolve_description,
                'o_special_move_description': o_special_move_description,
                'o_win_description': o_win_description,
                'o_lose_description': o_lose_description,
                'ocard_lvl_ap_buff': ocard_lvl_ap_buff,
                'opet_name': opet_name,
                'opet_move': opet_move,
                'opetmove_text': opetmove_text,
                'opet_image': opet_image,
                'o_pet_used': o_pet_used,
                'user1': user1,
                'o_focus': o_focus,
                'o_used_focus': o_used_focus,
                'o_resolve': o_resolve,
                'o_used_resolve': o_used_resolve,
                'o_block_used': o_block_used,
                'o_defend_used': o_defend_used,
                'o_enhancer_used': o_enhancer_used,
                'o_final_stand': o_final_stand,
                't_card': t_card,
                'tarm_name': tarm_name,
                'tarm': tarm,
                'tcard_lvl': tcard_lvl,
                't_universe': t_universe,
                't_attack': t_attack,
                't_defense': t_defense,
                't_health': t_health,
                't_max_health': t_max_health,
                't_chainsaw': t_chainsaw,
                't_atk_chainsaw': t_atk_chainsaw,
                't_def_chainsaw': t_def_chainsaw,
                't_stamina': t_stamina,
                't_max_stamina': t_max_stamina,
                'tmove1_text': tmove1_text,
                'tmove2_text': tmove2_text,
                'tmove3_text': tmove3_text,
                'tmove_enhanced_text': tmove_enhanced_text,
                't_1': t_1,
                't_2': t_2,
                't_3': t_3,
                'tarm_shield_active': tarm_shield_active,
                'tshield_value': tshield_value,
                'tarm_barrier_active': tarm_barrier_active,
                'tbarrier_count': tbarrier_count,
                'tarm_parry_active': tarm_parry_active,
                'tparry_count': tparry_count,
                'tarm_siphon_active': tarm_siphon_active,
                'tsiphon_value': tsiphon_value,
                't_enhancer': t_enhancer,
                't_enhancer_used': t_enhancer_used,
                't_speed': t_speed,
                't_special_move_description': t_special_move_description,
                't_gif': t_gif,
                't_greeting_description': t_greeting_description,
                't_focus_description': t_focus_description,
                't_resolve_description': t_resolve_description,
                't_special_move_description': t_special_move_description,
                't_win_description': t_win_description,
                't_lose_description': t_lose_description,
                't_focus': t_focus,
                't_used_focus': t_used_focus,
                't_resolve': t_resolve,
                't_used_resolve': t_used_resolve,
                't_final_stand': t_final_stand,
                't_block_used': t_block_used,
                't_defend_used': t_defend_used,
                'tcard_lvl_ap_buff': tcard_lvl_ap_buff,
                'tpet_name': tpet_name,
                'tpet_move': tpet_move,
                'tpetmove_text': tpetmove_text,
                'tpet_image': tpet_image,
                't_pet_used': t_pet_used,
                'cperformance': cperformance,
                'c_card': c_card,
                'ccard_lvl': ccard_lvl,
                'c_card_path': c_card_path,
                'carm': carm,
                'carm_name': carm_name,
                'carm_passive_type' : carm_passive_type,
                'carm_passive_value' : carm_passive_value,
                'c_user': c_user,
                'c_universe': c_universe,
                'c_attack': c_attack,
                'c_defense': c_defense,
                'cperformance': cperformance,
                'c_stamina': c_stamina,
                'c_max_stamina': c_max_stamina,
                'c_health': c_health,
                'c_max_health': c_max_health,
                'c_DID': c_DID,
                'c_chainsaw': c_chainsaw,
                'c_atk_chainsaw': c_atk_chainsaw,
                'c_def_chainsaw': c_def_chainsaw,
                'cmove1_text': cmove1_text,
                'cmove2_text': cmove2_text,
                'cmove3_text': cmove3_text,
                'cmove_enhanced_text': cmove_enhanced_text,
                'c_1': c_1,
                'c_2': c_2,
                'c_3': c_3,
                'carm_shield_active': carm_shield_active,
                'cshield_value': cshield_value,
                'carm_barrier_active': carm_barrier_active,
                'cbarrier_count': cbarrier_count,
                'carm_parry_active': carm_parry_active,
                'cparry_count': cparry_count,
                'carm_siphon_active': carm_siphon_active,
                'csiphon_value': csiphon_value,
                'c_gif': c_gif,
                'c_enhancer': c_enhancer,
                'c_speed': c_speed,
                'c_special_move_description': c_special_move_description,
                'c_greeting_description': c_greeting_description,
                'c_focus_description': c_focus_description,
                'c_resolve_description': c_resolve_description,
                'c_special_move_description': c_special_move_description,
                'c_win_description': c_win_description,
                'c_lose_description': c_lose_description,
                'ccard_lvl_ap_buff': ccard_lvl_ap_buff,
                'cpet_name': cpet_name,
                'cpet_move': cpet_move,
                'cpetmove_text': cpetmove_text,
                'cpet_image': cpet_image,
                'c_pet_used': c_pet_used,
                'user2': user2,
                'c_focus': c_focus,
                'c_used_focus': c_used_focus,
                'c_resolve': c_resolve,
                'c_used_resolve': c_used_resolve,
                'c_block_used': c_block_used,
                'c_defend_used': c_defend_used,
                'c_enhancer_used': c_enhancer_used,
                'c_final_stand': c_final_stand,
            }

        return STATS
    except Exception as ex:
        trace = []
        tb = ex.__traceback__
        while tb is not None:
            trace.append({
                "filename": tb.tb_frame.f_code.co_filename,
                "name": tb.tb_frame.f_code.co_name,
                "lineno": tb.tb_lineno
            })
            tb = tb.tb_next
        print(str({
            'type': type(ex).__name__,
            'message': str(ex),
            'trace': trace
        }))
        guild = self.bot.get_guild(main.guild_id)
        channel = guild.get_channel(main.guild_channel)
        await channel.send(f"BUILD PLAYER STATS ERROR**, TYPE: {type(ex).__name__}, MESSAGE: {str(ex)}, TRACE: {trace}")
        return


async def enemy_approached(self, message, channel, player, selected_mode, universe, opponent, bounty):
    try:
        private_channel = channel
        mode = selected_mode

        sowner = player
        oteam = sowner['TEAM']
        # guild = message.guild
        # overwrites = {
        #     guild.default_role: discord.PermissionOverwrite(read_messages=False),
        #     guild.me: discord.PermissionOverwrite(read_messages=True),
        #     message.author: discord.PermissionOverwrite(read_messages=True, send_messages=True),
        # }    
        # private_channel = await guild.create_text_channel(f'{str(message.author)}-{selected_mode}-run',
        #                                                   overwrites=overwrites)
        oguild = "RANDOMIZED_BATTLE"
        crestlist = opponent
        crestsearch = bounty
        await battle_commands(self, message, mode, universe, universe['TITLE'], None, oguild, crestlist, crestsearch, sowner, oteam, private_channel, None, None, None, None, None, None, None, None, None)
    except Exception as ex:
        trace = []
        tb = ex.__traceback__
        while tb is not None:
            trace.append({
                "filename": tb.tb_frame.f_code.co_filename,
                "name": tb.tb_frame.f_code.co_name,
                "lineno": tb.tb_lineno
            })
            tb = tb.tb_next
        print(str({
            'type': type(ex).__name__,
            'message': str(ex),
            'trace': trace
        }))



async def select_universe(self, ctx, sowner: object, oteam: str, ofam: str, mode: str, user: None):
    U_modes = ['ATales', 'Tales', 'CTales', 'DTales', 'SCENARIO']
    AUTO_BATTLE_modes = ['ATales', 'ADungeon']
    D_modes = ['CDungeon', 'DDungeon', 'Dungeon', 'ADungeon']
    B_modes = ['Boss', 'CBoss']
    C_MODES = ['CTales', 'CDungeon', 'CBoss']

    saved_spots = sowner['SAVE_SPOT']
    # if isinstance(ctx.channel, discord.channel.DMChannel):
    #     await ctx.send(m.SERVER_FUNCTION_ONLY)
    #     return
    oguild = "PCG"
    prevault = db.queryVault({'DID': sowner['DID']})
    balance = prevault['BALANCE']
    difficulty = sowner['DIFFICULTY']
    crestlist = []
    crestsearch = False
    autoBattle = False
    guild = ctx.guild
    rift_on = False
    team_query = {'TEAM_NAME': oteam.lower()}
    guild_buff_update_query = {}
    filter_query = {}
    # overwrites = { guild.default_role: discord.PermissionOverwrite(read_messages=False), guild.me: discord.PermissionOverwrite(read_messages=True), ctx.author: discord.PermissionOverwrite(read_messages=True),}    

    if sowner['RIFT'] == 1:
        rift_on = True

    if mode in C_MODES:
        await user.send(f"{sowner['NAME']} needs your help! React in server to join their Coop Tale!!")
        coop_buttons = [
                    manage_components.create_button(
                        style=ButtonStyle.green,
                        label="Join Battle!",
                        custom_id="yes"
                    ),
                    manage_components.create_button(
                        style=ButtonStyle.red,
                        label="Decline",
                        custom_id="no"
                    )
                ]
        coop_buttons_action_row = manage_components.create_actionrow(*coop_buttons)
        msg = await ctx.send(f"{user.mention} Do you accept the **Coop Invite**?", components=[coop_buttons_action_row])
        def check(button_ctx):
            return button_ctx.author == user
        try:
            button_ctx: ComponentContext = await manage_components.wait_for_component(self.bot, components=[coop_buttons_action_row], timeout=120, check=check)

            if button_ctx.custom_id == "no":
                await button_ctx.send("Coop **Declined**")
                self.stop = True
                return
            if button_ctx.custom_id == "yes":
                # overwrites = {
                #     guild.default_role: discord.PermissionOverwrite(read_messages=False),
                #     guild.me: discord.PermissionOverwrite(read_messages=True),
                #     ctx.author: discord.PermissionOverwrite(read_messages=True, send_messages=True),
                #     user: discord.PermissionOverwrite(read_messages=True, send_messages=True),
                # }
                await button_ctx.defer(ignore=True)
        except Exception as ex:
            trace = []
            tb = ex.__traceback__
            while tb is not None:
                trace.append({
                    "filename": tb.tb_frame.f_code.co_filename,
                    "name": tb.tb_frame.f_code.co_name,
                    "lineno": tb.tb_lineno
                })
                tb = tb.tb_next
            print(str({
                'type': type(ex).__name__,
                'message': str(ex),
                'trace': trace
            }))
            guild = self.bot.get_guild(main.guild_id)
            channel = guild.get_channel(main.guild_channel)
            await channel.send(f"'PLAYER': **{str(ctx.author)}**, 'GUILD': **{str(ctx.author.guild)}**,  TYPE: {type(ex).__name__}, MESSAGE: {str(ex)}, TRACE: {trace}")
            return
    
    if oteam != 'PCG':
        team_info = db.queryTeam(team_query)
        team_buff = await crown_utilities.guild_buff_update_function(oteam)
        if team_buff:
            if team_buff['Rift']:
                rift_on = True
                guild_buff_update_query = team_buff['UPDATE_QUERY']
                filter_query = team_buff['FILTER_QUERY']

        guildname = team_info['GUILD']
        if guildname != "PCG":
            oguild = db.queryGuildAlt({'GNAME': guildname})
            if oguild:
                crestlist = oguild['CREST']
                crestsearch = True
    if sowner['PATRON'] != True and mode in AUTO_BATTLE_modes:
        embedVar = discord.Embed(title=f"Auto-Battles Locked", description=f"To Unlock Auto-Battles Join Patreon!",
                                 colour=0xe91e63)
        embedVar.add_field(
            name=f"Check out the #patreon channel!\nThank you for supporting the development of future games!",
            value="-Party Chat Dev Team")
        await ctx.send(embed=embedVar)
        return
        autoBattle = True

    if mode in U_modes:
        completed_crown_tales = sowner['CROWN_TALES']
        all_universes = db.queryAllUniverse()
        available_universes = []
        universe_menu = []
        selected_universe = ""
        universe_embed_list = []
        if rift_on:
            for uni in all_universes:
                if uni['HAS_CROWN_TALES'] == True or uni['TIER'] == 9:
                    if uni['TITLE'] in completed_crown_tales:
                        save_spot_text = "No Save Data"
                        if difficulty != "EASY":
                            for save in saved_spots:
                                if save['UNIVERSE'] == uni['TITLE'] and save['MODE'] in U_modes:
                                    save_spot_text = str(save['CURRENTOPPONENT'])
                        corruption_message = "📢 Not Corrupted"
                        if uni['CORRUPTED']:
                            corruption_message = "👾 **Corrupted**"

                        embedVar = discord.Embed(title= f"{uni['TITLE']}", description=textwrap.dedent(f"""
                        {Crest_dict[uni['TITLE']]} **Number of Fights**: :crossed_swords: **{len(uni['CROWN_TALES'])}**
                        🎗️ **Universe Title**: {uni['UTITLE']}
                        🦾 **Universe Arm**: {uni['UARM']}
                        🧬 **Universe Summon**: {uni['UPET']}

                        **Saved Game**: :crossed_swords: *{save_spot_text}*
                        **Difficulty**: ⚙️ {difficulty.lower().capitalize()}
                        **Completed**: 🟢
                        {corruption_message}
                        """))
                        embedVar.set_image(url=uni['PATH'])
                        embedVar.set_thumbnail(url=ctx.author.avatar_url)
                        universe_embed_list.append(embedVar)
                    else:
                        save_spot_text = "No Save Data"
                        if difficulty != "EASY":
                            for save in saved_spots:
                                if save['UNIVERSE'] == uni['TITLE'] and save['MODE'] in U_modes:
                                    save_spot_text = str(save['CURRENTOPPONENT'])
                        corruption_message = "📢 Not Corrupted"
                        if uni['CORRUPTED']:
                            corruption_message = "👾 **Corrupted**"

                        embedVar = discord.Embed(title= f"{uni['TITLE']}", description=textwrap.dedent(f"""
                        {Crest_dict[uni['TITLE']]} **Number of Fights**: :crossed_swords: **{len(uni['CROWN_TALES'])}**
                        🎗️ **Universe Title**: {uni['UTITLE']}
                        🦾 **Universe Arm**: {uni['UARM']}
                        🧬 **Universe Summon**: {uni['UPET']}

                        **Saved Game**: :crossed_swords: *{save_spot_text}*
                        **Difficulty**: ⚙️ {difficulty.lower().capitalize()}
                        **Completed**: 🔴
                        {corruption_message}
                        """))
                        embedVar.set_image(url=uni['PATH'])
                        embedVar.set_thumbnail(url=ctx.author.avatar_url)
                        universe_embed_list.append(embedVar)
        else:
            for uni in all_universes:
                if uni['HAS_CROWN_TALES'] == True and uni['TIER'] != 9:
                    if uni['TITLE'] in completed_crown_tales:
                        save_spot_text = "No Save Data"
                        if difficulty != "EASY":
                            for save in saved_spots:
                                if save['UNIVERSE'] == uni['TITLE'] and save['MODE'] in U_modes:
                                    save_spot_text = str(save['CURRENTOPPONENT'])
                        corruption_message = "📢 Not Corrupted"
                        if uni['CORRUPTED']:
                            corruption_message = "👾 **Corrupted**"


                        embedVar = discord.Embed(title= f"{uni['TITLE']}", description=textwrap.dedent(f"""
                        {Crest_dict[uni['TITLE']]} **Number of Fights**: :crossed_swords: **{len(uni['CROWN_TALES'])}**
                        🎗️ **Universe Title**: {uni['UTITLE']}
                        🦾 **Universe Arm**: {uni['UARM']}
                        🧬 **Universe Summon**: {uni['UPET']}

                        **Saved Game**: :crossed_swords: *{save_spot_text}*
                        **Difficulty**: ⚙️ {difficulty.lower().capitalize()}
                        **Completed**: 🟢
                        {corruption_message}
                        """))
                        embedVar.set_image(url=uni['PATH'])
                        embedVar.set_thumbnail(url=ctx.author.avatar_url)
                        universe_embed_list.append(embedVar)
                    else:
                        save_spot_text = "No Save Data"
                        if difficulty != "EASY":
                            for save in saved_spots:
                                if save['UNIVERSE'] == uni['TITLE'] and save['MODE'] in U_modes:
                                    save_spot_text = str(save['CURRENTOPPONENT'])
                        corruption_message = "📢 Not Corrupted"
                        if uni['CORRUPTED']:
                            corruption_message = "👾 **Corrupted**"

                        embedVar = discord.Embed(title= f"{uni['TITLE']}", description=textwrap.dedent(f"""
                        {Crest_dict[uni['TITLE']]} **Number of Fights**: :crossed_swords: **{len(uni['CROWN_TALES'])}**
                        🎗️ **Universe Title**: {uni['UTITLE']}
                        🦾 **Universe Arm**: {uni['UARM']}
                        🧬 **Universe Summon**: {uni['UPET']}

                        **Saved Game**: :crossed_swords: *{save_spot_text}*
                        **Difficulty**: ⚙️ {difficulty.lower().capitalize()}
                        **Completed**: 🔴
                        {corruption_message}
                        """))
                        embedVar.set_image(url=uni['PATH'])
                        embedVar.set_thumbnail(url=ctx.author.avatar_url)
                        universe_embed_list.append(embedVar)

        buttons = [
            manage_components.create_button(style=3, label="Start Tales!", custom_id="start"),
            manage_components.create_button(style=1, label="View Available Scenario Battles!", custom_id="scenario"),
        ]
        custom_action_row = manage_components.create_actionrow(*buttons)


        # custom_button = manage_components.create_button(style=3, label="Start")
        # custom_button = manage_components.create_button(style=3, label="View Scenario Battles!")
        

        async def custom_function(self, button_ctx):
            if button_ctx.author == ctx.author:
                if button_ctx.custom_id == "scenario":
                    await button_ctx.defer(ignore=True)
                    universe = str(button_ctx.origin_message.embeds[0].title)
                    await scenario(self, ctx, universe)
                    self.stop = True
                    return
                elif button_ctx.custom_id == "start":                
                    await button_ctx.defer(ignore=True)
                    selected_universe = custom_function
                    custom_function.selected_universe = str(button_ctx.origin_message.embeds[0].title)
                    self.stop = True
            else:
                await ctx.send("This is not your button.", hidden=True)

        await Paginator(bot=self.bot, ctx=ctx, useQuitButton=True, deleteAfterTimeout=True, pages=universe_embed_list, timeout=60, customActionRow=[
            custom_action_row,
            custom_function,
        ]).run()
        

        try:
            # print(custom_function.selected_universez
            selected_universe = custom_function.selected_universe
            if selected_universe == "":
                return

            universe = db.queryUniverse({'TITLE': str(selected_universe)})
            universe_owner = universe['GUILD']
            if not universe['CROWN_TALES']:
                await ctx.send(f"{selected_universe} is not ready to be explored! Check back later!")
                return
            #Universe Cost
            entrance_fee = 1000
            if selected_universe in crestlist:
                await ctx.send(f"{Crest_dict[selected_universe]} | :flags: {guildname} {selected_universe} Crest Activated! No entrance fee!")
            else:
                if balance <= entrance_fee:
                    await ctx.send(f"Tales require an :coin: {'{:,}'.format(entrance_fee)} entrance fee!", delete_after=5)
                    db.updateUserNoFilter({'DID': str(ctx.author.id)}, {'$set': {'AVAILABLE': True}})
                    return
                else:
                    await crown_utilities.curse(entrance_fee, str(ctx.author.id))
                    if universe_owner != 'PCG':
                        crest_guild = db.queryGuildAlt({'GNAME' : universe_owner})
                        if crest_guild:
                            await crown_utilities.blessguild(entrance_fee, universe['GUILD'])
                            await ctx.send(f"{Crest_dict[selected_universe]} | {crest_guild['GNAME']} Universe Toll Paid! :coin:{'{:,}'.format(entrance_fee)}")
            
            # #Create Explore Category
            # categoryname = "Crown Unlimited"
            # category = discord.utils.get(guild.categories, name=categoryname)

            # if category is None: #If there's no category matching with the `name`
            #     category = await guild.create_category_channel(categoryname)
            # private_channel = await guild.create_text_channel(f'{str(ctx.author)}-{mode}-run', overwrites=overwrites, category=category)
            # await private_channel.send(f"{ctx.author.mention} private channel has been opened for you. Good luck!")
            
            # React to Saved Spots
            currentopponent = 0
            if difficulty != "EASY":
                currentopponent = update_save_spot(self, ctx, saved_spots, selected_universe, U_modes)
            else:
                currentopponent = 0

            if rift_on:
                update_team_response = db.updateTeam(team_query, guild_buff_update_query)
            return {'SELECTED_UNIVERSE': selected_universe,
                    'UNIVERSE_DATA': universe, 'CREST_LIST': crestlist, 'CREST_SEARCH': crestsearch,
                    'COMPLETED_TALES': completed_crown_tales, 'OGUILD': oguild, 'CURRENTOPPONENT': currentopponent}
            
        except Exception as ex:
            trace = []
            tb = ex.__traceback__
            while tb is not None:
                trace.append({
                    "filename": tb.tb_frame.f_code.co_filename,
                    "name": tb.tb_frame.f_code.co_name,
                    "lineno": tb.tb_lineno
                })
                tb = tb.tb_next
            print(str({
                'type': type(ex).__name__,
                'message': str(ex),
                'trace': trace
            }))

    if mode in D_modes:
        completed_dungeons = sowner['DUNGEONS']
        completed_crown_tales = sowner['CROWN_TALES']
        all_universes = db.queryAllUniverse()
        available_universes = []
        universe_menu = []
        selected_universe = ""
        universe_embed_list = []
        for uni in completed_crown_tales:
            if uni != "":
                uni_option = db.queryUniverse({"TITLE": str(uni)})
                save_spot_text = "No Save Data"
                for save in saved_spots:
                    if save['UNIVERSE'] == uni and save['MODE'] in D_modes:
                        save_spot_text = str(save['CURRENTOPPONENT'])
                corruption_message = "📢 Not Corrupted"
                if uni_option['CORRUPTED']:
                    corruption_message = "👾 **Corrupted**"

                if uni in completed_dungeons:
                    completed = "🟢"
                else:
                    completed = "🔴"

                embedVar = discord.Embed(title= f"{uni}", description=textwrap.dedent(f"""
                {Crest_dict[uni_option['TITLE']]} **Number of Fights**: :fire: **{len(uni_option['DUNGEONS'])}**
                🎗️ **Dungeon Title**: {uni_option['DTITLE']}
                🦾 **Dungeon Arm**: {uni_option['DARM']}
                🧬 **Dungeon Summon**: {uni_option['DPET']}

                **Saved Game**: :fire: *{save_spot_text}*
                **Completed**: {completed}
                {corruption_message}
                """))
                embedVar.set_image(url=uni_option['PATH'])
                embedVar.set_thumbnail(url=ctx.author.avatar_url)
                universe_embed_list.append(embedVar)

        if not universe_embed_list:
            await ctx.send("No available Dungeons for you at this time!")
            return
        custom_button = manage_components.create_button(style=3, label="Select")

        async def custom_function(self, button_ctx):
            if button_ctx.author == ctx.author:
                await button_ctx.defer(ignore=True)
                selected_universe = custom_function
                custom_function.selected_universe = str(button_ctx.origin_message.embeds[0].title)
                self.stop = True
            else:
                await ctx.send("This is not your button.", hidden=True)

            
        await Paginator(bot=self.bot, ctx=ctx, useQuitButton=True, deleteAfterTimeout=True, pages=universe_embed_list, timeout=60,  customButton=[
            custom_button,
            custom_function,
        ]).run()

        try:
            # Universe Cost
            selected_universe = custom_function.selected_universe
            universe = db.queryUniverse({'TITLE': str(selected_universe)})
            universe_owner = universe['GUILD']
            if not universe['HAS_DUNGEON']:
                await ctx.send(f"**{selected_universe}'s** dungeon is not available at this time. ")
                return
            #Universe Cost
            entrance_fee = 5000
            if selected_universe in crestlist:
                await ctx.send(f"{Crest_dict[selected_universe]} | :flags: {guildname} {selected_universe} Crest Activated! No entrance fee!")
            else:
                if balance <= entrance_fee:
                    await ctx.send(f"Tales require an :coin: {'{:,}'.format(entrance_fee)} entrance fee!", delete_after=5)
                    db.updateUserNoFilter({'DID': str(ctx.author.id)}, {'$set': {'AVAILABLE': True}})
                    return
                else:
                    await crown_utilities.curse(entrance_fee, str(ctx.author.id))
                    if universe['GUILD'] != 'PCG':
                        crest_guild = db.queryGuildAlt({'GNAME' : universe['GUILD']})
                        if crest_guild:
                            await crown_utilities.blessguild(entrance_fee, universe['GUILD'])
                            await ctx.send(f"{Crest_dict[selected_universe]} | {crest_guild['GNAME']} Universe Toll Paid! :coin:{'{:,}'.format(entrance_fee)}")
            categoryname = "Crown Unlimited"
            category = discord.utils.get(guild.categories, name=categoryname)

            # if category is None: #If there's no category matching with the `name`
            #     category = await guild.create_category_channel(categoryname)
            # private_channel = await guild.create_text_channel(f'{str(ctx.author)}-{mode}-run', overwrites=overwrites, category=category)
            # await private_channel.send(f"{ctx.author.mention} private channel has been opened for you. Good luck!")
            
            
            currentopponent = update_save_spot(self, ctx, saved_spots, selected_universe, D_modes)
            return {'SELECTED_UNIVERSE': selected_universe,
                    'UNIVERSE_DATA': universe, 'CREST_LIST': crestlist, 'CREST_SEARCH': crestsearch,
                    'COMPLETED_DUNGEONS': completed_dungeons, 'OGUILD': oguild, 'CURRENTOPPONENT': currentopponent}
        except Exception as ex:
            trace = []
            tb = ex.__traceback__
            while tb is not None:
                trace.append({
                    "filename": tb.tb_frame.f_code.co_filename,
                    "name": tb.tb_frame.f_code.co_name,
                    "lineno": tb.tb_lineno
                })
                tb = tb.tb_next
            print(str({
                'type': type(ex).__name__,
                'message': str(ex),
                'trace': trace
            }))

    if mode in B_modes:
        completed_crown_tales = sowner['CROWN_TALES']
        completed_dungeons = sowner['DUNGEONS']
        all_universes = db.queryAllUniverse()
        available_universes = []
        selected_universe = ""
        universe_menu = []
        universe_embed_list = []
        for uni in completed_dungeons:
            if uni != "":
                searchUni = db.queryUniverse({'TITLE': str(uni)})
                if searchUni['UNIVERSE_BOSS'] != "":
                    boss_info = db.queryBoss({"NAME": searchUni['UNIVERSE_BOSS']})
                    if boss_info:
                        embedVar = discord.Embed(title= f"{uni}", description=textwrap.dedent(f"""
                        {Crest_dict[uni]} **Boss**: :japanese_ogre: **{boss_info['NAME']}**
                        🎗️ **Boss Title**: {boss_info['TITLE']}
                        🦾 **Boss Arm**: {boss_info['ARM']}
                        🧬 **Boss Summon**: {boss_info['PET']}

                        """))
                        embedVar.set_image(url=boss_info['PATH'])
                        embedVar.set_thumbnail(url=ctx.author.avatar_url)
                        universe_embed_list.append(embedVar)
        if not universe_embed_list:
            await ctx.send("No available Bosses for you at this time!")
            return
        
        custom_button = manage_components.create_button(style=3, label="Select")

        async def custom_function(self, button_ctx):
            if button_ctx.author == ctx.author:
                await button_ctx.defer(ignore=True)
                selected_universe = custom_function
                custom_function.selected_universe = str(button_ctx.origin_message.embeds[0].title)
                self.stop = True
            else:
                await ctx.send("This is not your button.", hidden=True)

        await Paginator(bot=self.bot, ctx=ctx, useQuitButton=True, deleteAfterTimeout=True, pages=universe_embed_list, timeout=60,  customButton=[
            custom_button,
            custom_function,
        ]).run()

        try:
            # Universe Cost
            selected_universe = custom_function.selected_universe
            universe = db.queryUniverse({'TITLE': str(selected_universe)})
            universe_owner = universe['GUILD']
            #Universe Cost
            entrance_fee = 10000
            if selected_universe in crestlist:
                await ctx.send(f"{Crest_dict[selected_universe]} | :flags: {guildname} {selected_universe} Crest Activated! No entrance fee!")
            else:
                if balance <= entrance_fee:
                    await ctx.send(f"Tales require an :coin: {'{:,}'.format(entrance_fee)} entrance fee!", delete_after=5)
                    db.updateUserNoFilter({'DID': str(ctx.author.id)}, {'$set': {'AVAILABLE': True}})
                    return
                else:
                    await crown_utilities.curse(entrance_fee, str(ctx.author.id))
                    if universe['GUILD'] != 'PCG':
                        crest_guild = db.queryGuildAlt({'GNAME' : universe['GUILD']})
                        if crest_guild:
                            await crown_utilities.blessguild(entrance_fee, universe['GUILD'])
                            await ctx.send(f"{Crest_dict[selected_universe]} | {crest_guild['GNAME']} Universe Toll Paid! :coin:{'{:,}'.format(entrance_fee)}")
            categoryname = "Crown Unlimited"
            category = discord.utils.get(guild.categories, name=categoryname)

            # if category is None: #If there's no category matching with the `name`
            #     category = await guild.create_category_channel(categoryname)
            # private_channel = await guild.create_text_channel(f'{str(ctx.author)}-{mode}-fight', overwrites=overwrites, category=category)
            # await private_channel.send(f"{ctx.author.mention} private channel has been opened for you.")

            currentopponent = 0
            return {'SELECTED_UNIVERSE': selected_universe,
                    'UNIVERSE_DATA': universe, 'CREST_LIST': crestlist, 'CREST_SEARCH': crestsearch,
                    'COMPLETED_DUNGEONS': completed_dungeons, 'OGUILD': oguild, 'BOSS_NAME': universe['UNIVERSE_BOSS'],
                    'CURRENTOPPONENT': currentopponent}
        except Exception as ex:
            trace = []
            tb = ex.__traceback__
            while tb is not None:
                trace.append({
                    "filename": tb.tb_frame.f_code.co_filename,
                    "name": tb.tb_frame.f_code.co_name,
                    "lineno": tb.tb_lineno
                })
                tb = tb.tb_next
            print(str({
                'PLAYER': str(ctx.author),
                'type': type(ex).__name__,
                'message': str(ex),
                'trace': trace
            }))
            embedVar = discord.Embed(title=f"Unable to start boss fight. Seek support in the Anime 🆚+ support server https://discord.gg/cqP4M92", delete_after=30, colour=0xe91e63)
            await ctx.send(embed=embedVar)
            guild = self.bot.get_guild(main.guild_id)
            channel = guild.get_channel(main.guild_channel)
            await channel.send(f"'PLAYER': **{str(ctx.author)}**, 'GUILD': **{str(ctx.author.guild)}**, TYPE: {type(ex).__name__}, MESSAGE: {str(ex)}, TRACE: {trace}")
            return

async def battle_commands(self, ctx, mode, universe, selected_universe, completed_universes, oguild, crestlist,
                          crestsearch, sowner, oteam, ofam, currentopponent, cowner, cteam, cfam, deckNumber, user, arena_flag, arena_owner, arena_type):
    private_channel = ctx.channel
    randomized_battle = False
    co_op_modes = ['CTales', 'DTales', 'CDungeon', 'DDungeon', 'CBoss']
    ai_co_op_modes = ['DTales', 'DDungeon']
    AUTO_BATTLE_modes = ['ATales', 'ADungeon']
    U_modes = ['ATales', 'Tales', 'CTales', 'DTales']
    D_modes = ['CDungeon', 'DDungeon', 'Dungeon', 'ADungeon']
    B_modes = ['Boss', 'CBoss']
    PVP_MODES = ['PVP']
    solo_modes = ['ATales', 'Tales', 'Dungeon', 'Boss']
    opponent_pet_modes = ['Dungeon', 'DDungeon', 'CDungeon']
    RAID_MODES = ['RAID']

    basic_attack_name = "BASIC"
    special_attack_name = "SUPER"
    ultimate_attack_name = "ULTIMATE"

    # mode = 'ATales'
    try:
        starttime = time.asctime()
        h_gametime = starttime[11:13]
        m_gametime = starttime[14:16]
        s_gametime = starttime[17:19]

        if mode not in B_modes and not randomized_battle and mode not in PVP_MODES and mode not in D_modes and mode not in RAID_MODES and mode != "ABYSS" and mode != "RAID" and mode != "SCENARIO":
            legends = [x for x in universe['CROWN_TALES']]
            total_legends = len(legends)
            # currentopponent = 0
        # if mode not in B_modes and not randomized_battle and mode not in PVP_MODES and mode in D_modes and mode not in RAID_MODES:
        if mode == "ABYSS":
            legends = [x for x in universe['ENEMIES']]
            total_legends = len(legends)      
            t = db.queryCard({'NAME': legends[currentopponent]})
            ttitle = db.queryTitle({'TITLE': universe['TITLE']})
            abyss_scaling = deckNumber

        if mode == "SCENARIO":
            legends = [x for x in universe['ENEMIES']]
            scenario_universe_data = db.queryUniverse({'TITLE': universe['UNIVERSE']})
            total_legends = len(legends)      
            t = db.queryCard({'NAME': legends[currentopponent]})
            enemy_title = "UTITLE"
            if deckNumber > 200:
                enemy_title = "DTITLE"
            ttitle = db.queryTitle({'TITLE': scenario_universe_data[enemy_title]})
            abyss_scaling = deckNumber


        if mode not in B_modes and not randomized_battle and mode not in PVP_MODES and mode not in D_modes and mode != "ABYSS" and mode != "RAID" and mode != "SCENARIO":
            legends = [x for x in universe['CROWN_TALES']]
            total_legends = len(legends)
            # currentopponent = 0
        if mode not in B_modes and not randomized_battle and mode not in PVP_MODES and mode in D_modes and mode != "ABYSS" and mode != "RAID" and mode != "SCENARIO":
            legends = [x for x in universe['DUNGEONS']]
            total_legends = len(legends)
            # currentopponent = 0

        continued = True

        while continued == True:

            o = db.queryCard({'NAME': sowner['CARD']})
            otitle = db.queryTitle({'TITLE': sowner['TITLE']})

            if mode in PVP_MODES:
                opponent = currentopponent
                t = db.queryCard({'NAME': opponent['CARD']})
                ttitle = db.queryTitle({'TITLE': opponent['TITLE']})
                tguild = cfam
                tteam = cteam
            if mode in RAID_MODES:
                opponent = currentopponent
                t = db.queryCard({'NAME': opponent['CARD']})
                ttitle = db.queryTitle({'TITLE': opponent['TITLE']})
                tguild = cteam
                tteam = cowner
                hall = universe
                title_match_active = selected_universe
                shield_test_active = completed_universes
                shield_training_active = crestlist

            if oguild == "RANDOMIZED_BATTLE":
                private_channel = ofam
                randomized_battle = True
                opponent = crestlist
                abyss_scaling = crestsearch
                if mode in U_modes:
                    t = db.queryCard({'NAME': opponent})
                    ttitle = db.queryTitle({'TITLE': universe['UTITLE']})
                    currentopponent = 8

                if mode in D_modes:
                    t = db.queryCard({'NAME': opponent})
                    ttitle = db.queryTitle({'TITLE': universe['DTITLE']})
                    currentopponent = 35

            if not randomized_battle:
                vault = db.queryVault({'DID': str(ctx.author.id)})
                abyss_scaling = 0
                if mode in B_modes:
                    bossname = universe['UNIVERSE_BOSS']
                    boss = db.queryBoss({'NAME': str(bossname)})
                    t = db.queryCard({'NAME': boss['CARD']})
                    ttitle = db.queryTitle({'TITLE': boss['TITLE']})

                if mode in U_modes:
                    t = db.queryCard({'NAME': legends[currentopponent]})
                    ttitle = db.queryTitle({'TITLE': universe['UTITLE']})

                if mode in D_modes:
                    t = db.queryCard({'NAME': legends[currentopponent]})
                    ttitle = db.queryTitle({'TITLE': universe['DTITLE']})
                
                if mode == "ABYSS":
                    abyss_scaling = deckNumber
                    t = db.queryCard({'NAME': legends[currentopponent]})
                    ttitle = db.queryTitle({'TITLE': universe['TITLE']})

                if mode == "SCENARIO":
                    abyss_scaling = deckNumber
                    t = db.queryCard({'NAME': legends[currentopponent]})
                    enemy_title = "UTITLE"
                    if deckNumber > 200:
                        enemy_title = "DTITLE"
                    ttitle = db.queryTitle({'TITLE': scenario_universe_data[enemy_title]})


            if mode in ai_co_op_modes:
                activeDeck = vault['DECK'][deckNumber]
                companion = db.queryCard({'NAME': str(activeDeck['CARD'])})
                c = companion
                ctitle = db.queryTitle({'TITLE': str(activeDeck['TITLE'])})
            
            elif mode in co_op_modes:
                companion = db.queryCard({'NAME': str(cowner['CARD'])})
                c = companion
                ctitle = db.queryTitle({'TITLE': str(cowner['TITLE'])})

                if companion['NAME'] == o['NAME']:
                    await ctx.send(f"You're already using {o['NAME']}. Please use a different card as your companion. ")
                    # await discord.TextChannel.delete(private_channel, reason=None)
                    return

            if mode in ai_co_op_modes:
                stats = await build_player_stats(self, randomized_battle, ctx, sowner, o, otitle, t, ttitle, mode,
                                                 universe, currentopponent, oteam, ofam, abyss_scaling, companion, c,
                                                 ctitle, cteam, cfam, activeDeck, None, None, None, None)
            
            elif mode in co_op_modes and mode != "CBoss":
                stats = await build_player_stats(self, randomized_battle, ctx, sowner, o, otitle, t, ttitle, mode,
                                                 universe, currentopponent, oteam, ofam, abyss_scaling, cowner, c,
                                                 ctitle, cteam, cfam, None, None, None, None, None)
            
            elif mode in B_modes:
                if mode == "CBoss":
                    stats = await build_player_stats(self, randomized_battle, ctx, sowner, o, otitle, t, ttitle, mode,
                                                     universe, 0, oteam, ofam, abyss_scaling, cowner, c, ctitle, cteam,
                                                     cfam, None, boss, None, None, None)
                else:
                    stats = await build_player_stats(self, randomized_battle, ctx, sowner, o, otitle, t, ttitle, mode,
                                                     universe, 0, oteam, ofam, abyss_scaling, None, None, None, None,
                                                     None, None, boss, None, None, None)
            
            elif mode in PVP_MODES:
                stats = await build_player_stats(self, randomized_battle, ctx, sowner, o, otitle, t, ttitle, mode, None,
                                                 None, oteam, ofam, None, None, None, None, None, None, None, None,
                                                 opponent, None, None)
            
            elif mode in RAID_MODES:
                stats = await build_player_stats(self, randomized_battle, ctx, sowner, o, otitle, t, ttitle, mode, hall,
                                                 None, oteam, ofam, None, None, None, None, None, None, None, None,
                                                 opponent, tteam, tguild)
            
            else:
                stats = await build_player_stats(self, randomized_battle, ctx, sowner, o, otitle, t, ttitle, mode,
                                                 universe, currentopponent, oteam, ofam, abyss_scaling, None, None,
                                                 None, None, None, None, None, None, None, None)
            auto_battle = True
            difficulty = sowner['DIFFICULTY']
            o_card_passive_type = stats['o_card_passive_type']
            battle_history_message_amount = sowner['BATTLE_HISTORY']
            o_full_card_info = stats['o_full_card_info']
            o_affinity_message = crown_utilities.set_affinities(o_full_card_info)
            o_title_passive_type = stats['o_title_passive_type']
            o_title_passive_value = stats['o_title_passive_value']
            o_opponent_affinities = stats['o_opponent_affinities']
            omove1_element = stats['omove1_element']
            o_basic_emoji = crown_utilities.set_emoji(omove1_element)
            omove2_element = stats['omove2_element']
            o_super_emoji = crown_utilities.set_emoji(omove2_element)
            omove3_element = stats['omove3_element']
            o_ultimate_emoji = crown_utilities.set_emoji(omove3_element)
            # print(f"O BASIC: {}")
            # print(f"O SUPER: {}")
            # print(f"O ULTIMATE: {}")
            operformance = stats['operformance']
            o_card = stats['o_card']
            ocard_lvl = stats['ocard_lvl']
            o_card_path = stats['o_card_path']
            oarm = stats['oarm']
            oarm_name = oarm['ARM']
            oarm_passive_type = stats['oarm_passive_type']
            oarm_passive_value = stats['oarm_passive_value']
            o_user = stats['o_user']
            o_universe = stats['o_universe']
            o_attack = stats['o_attack']
            o_defense = stats['o_defense']
            o_stamina = stats['o_stamina']
            o_max_stamina = stats['o_max_stamina']
            o_health = stats['o_health']
            o_max_health = stats['o_max_health']
            o_DID = stats['o_DID']
            o_chainsaw = stats['o_chainsaw']
            o_atk_chainsaw = stats['o_atk_chainsaw']
            o_def_chainsaw = stats['o_def_chainsaw']
            omove1_text = stats['omove1_text']
            omove2_text = stats['omove2_text']
            omove3_text = stats['omove3_text']
            omove_enhanced_text = stats['omove_enhanced_text']
            o_enhancer_used = stats['o_enhancer_used']
            o_1 = stats['o_1']
            o_2 = stats['o_2']
            o_3 = stats['o_3']
            oarm_shield_active = stats['oarm_shield_active']
            oshield_value = stats['oshield_value']
            oarm_barrier_active = stats['oarm_barrier_active']
            obarrier_count = stats['obarrier_count']
            oarm_parry_active = stats['oarm_parry_active']
            oparry_count = stats['oparry_count']
            oarm_siphon_active = stats['oarm_siphon_active']
            osiphon_value = stats['osiphon_value']
            o_gif = stats['o_gif']
            o_enhancer = stats['o_enhancer']
            opet_lvl = stats['opet_lvl']
            opet_bond = stats['opet_bond']
            o_speed = stats['o_speed']
            o_special_move_description = stats['o_special_move_description']
            o_greeting_description = stats['o_greeting_description']
            o_focus_description = stats['o_focus_description']
            o_resolve_description = stats['o_resolve_description']
            o_special_move_description = stats['o_special_move_description']
            o_win_description = stats['o_win_description']
            o_lose_description = stats['o_lose_description']
            ocard_lvl_ap_buff = stats['ocard_lvl_ap_buff']
            opet_name = stats['opet_name']
            opet_move = stats['opet_move']
            opetmove_text = stats['opetmove_text']
            opet_image = stats['opet_image']
            o_pet_used = stats['o_pet_used']
            user1 = stats['user1']
            o_focus = stats['o_focus']
            o_used_focus = stats['o_used_focus']
            o_resolve = stats['o_resolve']
            o_used_resolve = stats['o_used_resolve']
            o_block_used = stats['o_block_used']
            o_defend_used = stats['o_defend_used']
            o_final_stand = stats['o_final_stand']
            o_card_tier = o_full_card_info['TIER']

            corruption_hlt_buff = 0
            corruption_atk_buff = 0
            corruption_def_buff = 0
            corruption_ap_buff = 0

            if universe and mode != "ABYSS" and mode != "RAID" and mode != "SCENARIO":
                if universe['CORRUPTED']:
                    corruption_hlt_buff = 150
                    corruption_atk_buff = 40
                    corruption_def_buff = 40
                    corruption_ap_buff = 35
                    if difficulty == "HARD":
                        corruption_hlt_buff = 600
                        corruption_atk_buff = 80
                        corruption_def_buff = 120
                        corruption_ap_buff = 65


            if mode in PVP_MODES or mode in RAID_MODES:
                if mode in RAID_MODES:
                    tperformance = stats['operformance']
                else:
                    tperformance = stats['tperformance']
                t_title_passive_type = stats['t_title_passive_type']
                t_opponent_affinities = stats['t_opponent_affinities']
                tmove1_element = stats['tmove1_element']
                tmove2_element = stats['tmove2_element']
                tmove3_element = stats['tmove3_element']
                t_basic_emoji = crown_utilities.set_emoji(tmove1_element)
                t_super_emoji = crown_utilities.set_emoji(tmove2_element)
                t_ultimate_emoji = crown_utilities.set_emoji(tmove3_element)
                t_card_passive_type = stats['t_card_passive_type']
                t_title_passive_value = stats['t_title_passive_value']
                tpet_lvl = stats['tpet_lvl']
                tpet_bond = stats['tpet_bond']
                t_card = stats['t_card']
                t_full_card_info = stats['t_full_card_info']
                t_affinity_message = crown_utilities.set_affinities(t_full_card_info)
                tcard_lvl = stats['tcard_lvl']
                t_card_path = stats['t_card_path']
                tarm = stats['tarm']
                tarm_name = stats['tarm_name']
                tarm_passive_type = stats['tarm_passive_type']
                tarm_passive_value = stats['tarm_passive_value']
                t_user = stats['t_user']
                t_universe = stats['t_universe']
                t_attack = stats['t_attack']
                t_defense = stats['t_defense']
                t_stamina = stats['t_stamina']
                t_max_stamina = stats['t_max_stamina']
                t_health = stats['t_health']
                t_max_health = stats['t_max_health']
                t_DID = stats['t_DID']
                t_chainsaw = stats['t_chainsaw']
                t_atk_chainsaw = stats['t_atk_chainsaw']
                t_def_chainsaw = stats['t_def_chainsaw']
                tmove1_text = stats['tmove1_text']
                tmove2_text = stats['tmove2_text']
                tmove3_text = stats['tmove3_text']
                tmove_enhanced_text = stats['tmove_enhanced_text']
                t_enhancer_used = stats['t_enhancer_used']
                t_1 = stats['t_1']
                t_2 = stats['t_2']
                t_3 = stats['t_3']
                tarm_shield_active = stats['tarm_shield_active']
                tshield_value = stats['tshield_value']
                tarm_barrier_active = stats['tarm_barrier_active']
                tbarrier_count = stats['tbarrier_count']
                tarm_parry_active = stats['tarm_parry_active']
                tparry_count = stats['tparry_count']
                tarm_siphon_active = stats['tarm_siphon_active']
                tsiphon_value = stats['tsiphon_value']
                t_gif = stats['t_gif']
                t_enhancer = stats['t_enhancer']
                t_speed = stats['t_speed']
                t_special_move_description = stats['t_special_move_description']
                t_greeting_description = stats['t_greeting_description']
                t_focus_description = stats['t_focus_description']
                t_resolve_description = stats['t_resolve_description']
                t_special_move_description = stats['t_special_move_description']
                t_win_description = stats['t_win_description']
                t_lose_description = stats['t_lose_description']
                tcard_lvl_ap_buff = stats['tcard_lvl_ap_buff']
                tpet_name = stats['tpet_name']
                tpet_move = stats['tpet_move']
                tpetmove_text = stats['tpetmove_text']
                tpet_image = stats['tpet_image']
                t_pet_used = stats['t_pet_used']
                user2 = stats['user2']
                t_focus = stats['t_focus']
                t_used_focus = stats['t_used_focus']
                t_resolve = stats['t_resolve']
                t_used_resolve = stats['t_used_resolve']
                t_block_used = stats['t_block_used']
                t_defend_used = stats['t_defend_used']
                t_final_stand = stats['t_final_stand']
                t_card_tier = t_full_card_info['TIER']
            else:
                t_card_passive_type = stats['t_card_passive_type']
                tmove1_element = stats['tmove1_element']
                tmove2_element = stats['tmove2_element']
                tmove3_element = stats['tmove3_element']
                t_basic_emoji = crown_utilities.set_emoji(tmove1_element)
                t_super_emoji = crown_utilities.set_emoji(tmove2_element)
                t_ultimate_emoji = crown_utilities.set_emoji(tmove3_element)
                t_opponent_affinities = stats['t_opponent_affinities']
                t_title_passive_type = stats['t_title_passive_type']
                t_title_passive_value = stats['t_title_passive_value']
                tpet_lvl = stats['tpet_lvl']
                tpet_bond = stats['tpet_bond']
                t_card = stats['t_card']
                t_full_card_info = stats['t_full_card_info']
                t_affinity_message = crown_utilities.set_affinities(t_full_card_info)
                t_card_tier = t_full_card_info['TIER']
                tcard_lvl = stats['tcard_lvl']
                tcard_lvl_ap_buff = stats['tcard_lvl_ap_buff']
                tarm = stats['tarm']
                tarm_name = stats['tarm_name']
                # if mode in D_modes:
                #     tcard_lvl = tcard_lvl
                #     tcard_lvl_ap_buff = 100
                # elif mode in U_modes:
                #     tcard_lvl = 30
                #     tcard_lvl_ap_buff = 10
                # elif mode in B_modes:
                #     tcard_lvl = 500
                #     tcard_lvl_ap_buff = 166
                t_universe = stats['t_universe']
                t_attack = stats['t_attack'] + corruption_atk_buff
                t_defense = stats['t_defense'] + corruption_def_buff
                t_health = stats['t_health'] + corruption_hlt_buff
                t_max_health = stats['t_max_health'] + corruption_hlt_buff
                t_chainsaw = stats['t_chainsaw']
                t_atk_chainsaw = stats['t_atk_chainsaw']
                t_def_chainsaw = stats['t_def_chainsaw']
                t_stamina = stats['t_stamina']
                t_max_stamina = stats['t_max_stamina']
                tmove1_text = stats['tmove1_text']
                tmove2_text = stats['tmove2_text']
                tmove3_text = stats['tmove3_text']
                tmove_enhanced_text = stats['tmove_enhanced_text']
                t_enhancer_used = stats['t_enhancer_used']
                t_1 = stats['t_1']
                t_2 = stats['t_2']
                t_3 = stats['t_3']
                tarm_shield_active = stats['tarm_shield_active']
                tshield_value = stats['tshield_value']
                tarm_barrier_active = stats['tarm_barrier_active']
                tbarrier_count = stats['tbarrier_count']
                tarm_parry_active = stats['tarm_parry_active']
                tparry_count = stats['tparry_count']
                tarm_siphon_active = stats['tarm_siphon_active']
                tsiphon_value = stats['tsiphon_value']
                t_enhancer = stats['t_enhancer']
                t_enhancer_used = stats['t_enhancer_used']
                t_speed = stats['t_speed']
                t_special_move_description = stats['t_special_move_description']
                t_gif = stats['t_gif']
                t_greeting_description = stats['t_greeting_description']
                t_focus_description = stats['t_focus_description']
                t_resolve_description = stats['t_resolve_description']
                t_special_move_description = stats['t_special_move_description']
                t_win_description = stats['t_win_description']
                t_lose_description = stats['t_lose_description']
                t_focus = stats['t_focus']
                t_used_focus = stats['t_used_focus']
                t_resolve = stats['t_resolve']
                t_used_resolve = stats['t_used_resolve']
                t_final_stand = stats['t_final_stand']
                tpet_move = stats['tpet_move']
                tpet_name = stats['tpet_name']
                tpet_image = stats['tpet_image']
                t_pet_used = stats['t_pet_used']
                tpetmove_text = stats['tpetmove_text']
                t_block_used = stats['t_block_used']
                t_defend_used = stats['t_defend_used']
                t_title = ttitle['TITLE']

            if mode in B_modes:
                t_arena = stats['t_arena']
                t_arenades = stats['t_arenades']
                t_entrance = stats['t_entrance']
                t_description = stats['t_description']
                t_welcome = stats['t_welcome']
                t_feeling = stats['t_feeling']
                t_powerup = stats['t_powerup']
                t_aura = stats['t_aura']
                t_assault = stats['t_assault']
                t_world = stats['t_world']
                t_punish = stats['t_punish']
                t_rmessage = stats['t_rmessage']
                t_rebuke = stats['t_rebuke']
                t_concede = stats['t_concede']
                t_wins = stats['t_wins']
                boss_special_move_default_msg = t_special_move_description

            if mode not in co_op_modes:
                c_health = 0
                c_block_used = False
                c_card = "Not Co-op"
                c_max_health = 0

            if mode in co_op_modes:
                c_card_passive_type = stats['c_card_passive_type']
                c_full_card_info = stats['c_full_card_info']
                c_affinity_message = crown_utilities.set_affinities(c_full_card_info)
                cmove1_element = stats['cmove1_element']
                cmove2_element = stats['cmove2_element']
                cmove3_element = stats['cmove3_element']
                c_basic_emoji = crown_utilities.set_emoji(cmove1_element)
                c_super_emoji = crown_utilities.set_emoji(cmove2_element)
                c_ultimate_emoji = crown_utilities.set_emoji(cmove3_element)

                t_for_c_opponent_affinities = stats['t_for_c_opponent_affinities']
                c_opponent_affinities = stats['c_opponent_affinities']
                c_title_passive_type = stats['c_title_passive_type']
                c_title_passive_value = stats['c_title_passive_value']
                cpet_lvl = stats['cpet_lvl']
                cpet_bond = stats['cpet_bond']
                c_card = stats['c_card']
                ccard_lvl = stats['ccard_lvl']
                c_card_path = stats['c_card_path']
                carm = stats['carm']
                carm_name = stats['carm_name']
                carm_passive_type = stats['carm_passive_type']
                carm_passive_value = stats['carm_passive_value']
                c_user = stats['c_user']
                c_universe = stats['c_universe']
                c_attack = stats['c_attack']
                c_defense = stats['c_defense']
                c_stamina = stats['c_stamina']
                c_max_stamina = stats['c_max_stamina']
                c_health = stats['c_health']
                c_max_health = stats['c_max_health']
                c_DID = stats['c_DID']
                c_chainsaw = stats['c_chainsaw']
                c_atk_chainsaw = stats['c_atk_chainsaw']
                c_def_chainsaw = stats['c_def_chainsaw']
                cmove1_text = stats['cmove1_text']
                cmove2_text = stats['cmove2_text']
                cmove3_text = stats['cmove3_text']
                cmove_enhanced_text = stats['cmove_enhanced_text']
                c_enhancer_used = stats['c_enhancer_used']
                c_1 = stats['c_1']
                c_2 = stats['c_2']
                c_3 = stats['c_3']
                carm_shield_active = stats['carm_shield_active']
                cshield_value = stats['cshield_value']
                carm_barrier_active = stats['carm_barrier_active']
                cbarrier_count = stats['cbarrier_count']
                carm_parry_active = stats['carm_parry_active']
                cparry_count = stats['cparry_count']
                carm_siphon_active = stats['carm_siphon_active']
                csiphon_value = stats['csiphon_value']
                c_gif = stats['c_gif']
                c_enhancer = stats['c_enhancer']
                c_speed = stats['c_speed']
                c_special_move_description = stats['c_special_move_description']
                c_greeting_description = stats['c_greeting_description']
                c_focus_description = stats['c_focus_description']
                c_resolve_description = stats['c_resolve_description']
                c_special_move_description = stats['c_special_move_description']
                c_win_description = stats['c_win_description']
                c_lose_description = stats['c_lose_description']
                ccard_lvl_ap_buff = stats['ccard_lvl_ap_buff']
                cpet_name = stats['cpet_name']
                cpet_move = stats['cpet_move']
                cpetmove_text = stats['cpetmove_text']
                cpet_image = stats['cpet_image']
                c_pet_used = stats['c_pet_used']
                user2 = stats['user2']
                c_focus = stats['c_focus']
                c_used_focus = stats['c_used_focus']
                c_resolve = stats['c_resolve']
                c_used_resolve = stats['c_used_resolve']
                c_block_used = stats['c_block_used']
                c_defend_used = stats['c_defend_used']
                c_final_stand = stats['c_final_stand']
                c_focus_count = 0
                c_card_tier = c_full_card_info['TIER']
                if c_universe == "Solo Leveling":
                    temp_tarm_shield_active = stats['tarm_shield_active']
                    temp_tshield_value = stats['tshield_value']
                    temp_tarm_barrier_active = stats['tarm_barrier_active']
                    temp_tbarrier_count = stats['tbarrier_count']
                    temp_tarm_parry_active = stats['tarm_parry_active']
                    temp_tparry_count = stats['tparry_count']
                    c_swapped = False
                if t_universe == "Solo Leveling":
                    temp_carm_shield_active = stats['carm_shield_active']
                    temp_cshield_value = stats['cshield_value']
                    temp_carm_barrier_active = stats['carm_barrier_active']
                    temp_cbarrier_count = stats['cbarrier_count']
                    temp_carm_parry_active = stats['carm_parry_active']
                    temp_cparry_count = stats['cparry_count']
                    t_swapped = False

            # Turn iterator
            o_focus_count = 0
            t_focus_count = 0
            turn = 0
            if o_speed > t_speed:
                turn = 0
            else:
                turn = 1
            turn_total = 0

            demon_slayer_buff = 0
            tdemon_slayer_buff = 0
            cdemon_slayer_buff = 0
            o_naruto_heal_buff = 0
            t_naruto_heal_buff = 0
            c_naruto_heal_buff = 0
            o_gow_resolve = False
            t_gow_resolve = False
            c_gow_resolve = False

            fire_element = "FIRE"
            ice_element = "ICE"
            water_element = "WATER"
            earth_element = "EARTH"
            electric_element = "ELECTRIC"
            wind_element = "WIND"
            spirit_element = "SPIRIT"
            psychic_element = "PSYCHIC"
            death_element = "DEATH"
            life_element = "LIFE"
            light_element = "LIGHT"
            dark_element = "DARK"
            poison_element = "POISON"
            ranged_element = "RANGED"
            bleed_element = "BLEED"
            time_element = "TIME"
            gravity_element = "GRAVITY"
            recoil_element = "RECOIL"

            o_burn_dmg = 0
            o_poison_dmg = 0
            o_freeze_enh = False
            o_ice_counter = 0
            o_water_buff = 0
            o_shock_buff = 0
            o_psychic_debuff = 0
            o_bleed_counter = 0
            o_bleed_hit = False
            o_basic_water_buff = 0
            o_special_water_buff = 0
            o_ultimate_water_buff = 0
            o_gravity_hit =False

            t_burn_dmg = 0
            t_poison_dmg = 0
            t_freeze_enh = False
            t_ice_counter = 0
            t_water_buff = 0
            t_shock_buff = 0
            t_psychic_debuff = 0
            t_bleed_counter = 0
            t_bleed_hit = False
            t_basic_water_buff = 0
            t_special_water_buff = 0
            t_ultimate_water_buff = 0
            t_gravity_hit=False

            c_burn_dmg = 0
            c_poison_dmg = 0
            c_freeze_enh = False
            c_ice_counter = 0
            c_water_buff = 0
            c_shock_buff = 0
            c_psychic_debuff = 0
            c_bleed_counter = 0
            c_bleed_hit = False
            c_basic_water_buff = 0
            c_special_water_buff = 0
            c_ultimate_water_buff = 0
            c_gravity_hit =False



            if o_universe == "Solo Leveling":
                temp_tarm_shield_active = stats['tarm_shield_active']
                temp_tshield_value = stats['tshield_value']
                temp_tarm_barrier_active = stats['tarm_barrier_active']
                temp_tbarrier_count = stats['tbarrier_count']
                temp_tarm_parry_active = stats['tarm_parry_active']
                temp_tparry_count = stats['tparry_count']
                o_swapped = False

            if t_universe == "Solo Leveling":
                temp_oarm_shield_active = stats['oarm_shield_active']
                temp_oshield_value = stats['oshield_value']
                temp_oarm_barrier_active = stats['oarm_barrier_active']
                temp_obarrier_count = stats['obarrier_count']
                temp_oarm_parry_active = stats['oarm_parry_active']
                temp_oparry_count = stats['oparry_count']
                t_swapped = False




            # Enhance Turn Iterators
            eo = 0
            et = 0
            botActive = True
            tutorial = False
            raidActive = False
            tutorial_basic = False
            tutorial_special = False
            tutorial_ultimate = False
            tutorial_enhancer = False
            tutorial_block = False
            tutorial_resolve = False
            tutorial_summon = False
            tutorial_focus= False

            if mode == "RAID":
                raidActive = True
                botActive= False
            if mode in PVP_MODES:
                botActive = False
                tutorialbot = '837538366509154407'
                legendbot = '845672426113466395'
                userID = t_user['DID']
                if tutorialbot == userID:
                    botActive = True
                    tutorial = True
                    turn = 0
                elif legendbot == userID:
                    botActive = True
                    tutorial = True
                    await ctx.send(f"Welcome to Legends!")
                    turn = 0
                else:
                    botActive = False
                    start = starting_position(o_speed, t_speed)
                    if start == True:
                        turn = 0
                    else:
                        turn = 1

            if mode not in B_modes and not randomized_battle and mode not in PVP_MODES and mode not in RAID_MODES:
                lineup = f"{currentopponent + 1}/{total_legends}"
            options = [1, 2, 3, 4, 5, 0]

            
            previous_moves = []
            previous_moves_len = 0
            previous_moves_into_embed = "\n".join(previous_moves)


            
            title = ""
            start_tales_buttons = [
                manage_components.create_button(
                    style=ButtonStyle.blue,
                    label="Start Match",
                    custom_id="start_tales_yes"
                ),
                manage_components.create_button(
                    style=ButtonStyle.red,
                    label="End",
                    custom_id="start_tales_no"
                ),
            ]

            if auto_battle:
                start_tales_buttons.append(
                    manage_components.create_button(
                        style=ButtonStyle.grey,
                        label="Auto Battle",
                        custom_id="start_auto_tales"
                    )

                )
            
            original_mode = mode

            if tutorial ==False and mode not in PVP_MODES and mode not in RAID_MODES and mode not in B_modes and mode != "ABYSS" and mode != "SCENARIO":
                if currentopponent > 0 and not randomized_battle and mode not in PVP_MODES and mode not in B_modes:
                    if difficulty != "EASY":
                        start_tales_buttons.append(

                            manage_components.create_button(
                                style=ButtonStyle.green,
                                label="Save Game",
                                custom_id="save_tales_yes"
                            )
                        )

            start_tales_buttons_action_row = manage_components.create_actionrow(*start_tales_buttons)

            tap1 = list(t_1.values())[0] + tcard_lvl_ap_buff + t_shock_buff + t_basic_water_buff
            tap2 = list(t_2.values())[0] + tcard_lvl_ap_buff + t_shock_buff + t_special_water_buff
            tap3 = list(t_3.values())[0] + tcard_lvl_ap_buff + tdemon_slayer_buff + t_shock_buff + t_ultimate_water_buff
            tenh1 = list(t_enhancer.values())[0]
            tenh_name = list(t_enhancer.values())[2]
            
            # UNIVERSE CARD
            if t_universe == "Souls" and t_used_resolve:
                player_2_card = showcard(t, tarm, t_max_health, t_health, t_max_stamina, t_stamina,
                                    t_used_resolve, ttitle, t_used_focus, t_attack, t_defense,
                                    turn_total, tap2, tap3, tap3, tenh1, tenh_name, tcard_lvl, o_defense)
            else:
                player_2_card = showcard(t, tarm, t_max_health, t_health, t_max_stamina, t_stamina,
                                        t_used_resolve, ttitle, t_used_focus, t_attack, t_defense,
                                        turn_total, tap1, tap2, tap3, tenh1, tenh_name, tcard_lvl, o_defense)
            # await private_channel.send(file=player_2_card)
            
            

            # if randomized_battle:
            #     private_channel = ctx.author
            battle_ping_message = await private_channel.send(f"{ctx.author.mention} {user2.mention}")
            if mode not in PVP_MODES and mode not in B_modes and mode != "ABYSS" and mode not in RAID_MODES and mode not in co_op_modes:
                embedVar = discord.Embed(title=f"✅ Confirm Start! ({currentopponent + 1}/{total_legends})", description=f"**{o_card}** 🆚 **{t_card}**")
                embedVar.add_field(name="__Your Affinities__", value=f"{o_affinity_message}")
                embedVar.add_field(name="__Opponent Affinities__", value=f"{t_affinity_message}")
                embedVar.set_image(url="attachment://image.png")
                embedVar.set_thumbnail(url=ctx.author.avatar_url)
                battle_msg = await private_channel.send(embed=embedVar, components=[start_tales_buttons_action_row], file=player_2_card)
            if mode == "ABYSS":
                embedVar = discord.Embed(title=f"🌑 Abyss Floor {universe['FLOOR']}\n✨ Confirm Start!  ({currentopponent + 1}/{total_legends})", description=f"**{o_card}** 🆚 **{t_card}**")
                embedVar.add_field(name="__Your Affinities__", value=f"{o_affinity_message}")
                embedVar.add_field(name="__Opponent Affinities__", value=f"{t_affinity_message}")
                embedVar.set_image(url="attachment://image.png")
                embedVar.set_thumbnail(url=ctx.author.avatar_url)
                battle_msg = await private_channel.send(embed=embedVar, components=[start_tales_buttons_action_row], file=player_2_card)
            
            if mode in PVP_MODES and tutorial:
                embedVar = discord.Embed(title=f"✅ Click Start Match to Begin the Tutorial!", description=f"You : **{o_card}** 🆚 **{t_card}**")
                embedVar.set_image(url="attachment://image.png")
                embedVar.add_field(name="__Your Affinities__", value=f"{o_affinity_message}")
                embedVar.add_field(name="__Opponent Affinities__", value=f"{t_affinity_message}")
                embedVar.set_thumbnail(url=ctx.author.avatar_url)
                battle_msg = await private_channel.send(embed=embedVar, components=[start_tales_buttons_action_row], file=player_2_card)
                
            elif mode in PVP_MODES and tutorial == False:
                embedVar = discord.Embed(title=f"✅ Confirm PVP Battle!", description=f"{user2.mention}\n**{o_card}** 🆚 **{t_card}**")
                embedVar.set_thumbnail(url=ctx.author.avatar_url)
                embedVar.add_field(name="__Your Affinities__", value=f"{o_affinity_message}")
                embedVar.add_field(name="__Opponent Affinities__", value=f"{t_affinity_message}")
                battle_msg = await private_channel.send(embed=embedVar, components=[start_tales_buttons_action_row])      
                
            elif mode in RAID_MODES:
                embedVar = discord.Embed(title=f"✅ Confirm Raid Battle!", description=f"{ctx.author.mention}\n**{o_card}** 🆚 **{t_card}**")
                embedVar.set_image(url="attachment://image.png")
                embedVar.add_field(name="__Your Affinities__", value=f"{o_affinity_message}")
                embedVar.add_field(name="__Opponent Affinities__", value=f"{t_affinity_message}")
                embedVar.set_thumbnail(url=ctx.author.avatar_url)
                battle_msg = await private_channel.send(embed=embedVar, components=[start_tales_buttons_action_row], file=player_2_card)
            
            if mode in co_op_modes and mode not in ai_co_op_modes and mode not in B_modes:
                embedVar = discord.Embed(title=f"✅ Confirm Co-Op Battle! ({currentopponent + 1}/{total_legends})", description=f"{ctx.author.mention}\n**{o_card}** & **{c_card}** 🆚 **{t_card}**")
                embedVar.set_image(url="attachment://image.png")
                embedVar.add_field(name="__Your Affinities__", value=f"{o_affinity_message}")
                embedVar.add_field(name="__Companion Affinities__", value=f"{c_affinity_message}")
                embedVar.add_field(name="__Opponent Affinities__", value=f"{t_affinity_message}")
                embedVar.set_thumbnail(url=ctx.author.avatar_url)
                battle_msg = await private_channel.send(embed=embedVar, components=[start_tales_buttons_action_row], file=player_2_card)
                
            if mode in ai_co_op_modes:
                embedVar = discord.Embed(title=f"✅ Confirm Duo Battle! ({currentopponent + 1}/{total_legends})", description=f"{ctx.author.mention}\n**{o_card}** & **{c_card}** 🆚 **{t_card}**")
                embedVar.set_image(url="attachment://image.png")
                embedVar.add_field(name="__Your Affinities__", value=f"{o_affinity_message}")
                embedVar.add_field(name="__Companion Affinities__", value=f"{c_affinity_message}")
                embedVar.add_field(name="__Opponent Affinities__", value=f"{t_affinity_message}")
                embedVar.set_thumbnail(url=ctx.author.avatar_url)
                battle_msg = await private_channel.send(embed=embedVar, components=[start_tales_buttons_action_row], file=player_2_card) 
                
            if mode in B_modes and mode not in co_op_modes:
                embedVar = discord.Embed(title=f"✅ Boss Fight!", description=f"{ctx.author.mention}\n**{o_card}** 🆚 **{t_card}**")
                embedVar.set_image(url="attachment://image.png")
                embedVar.add_field(name="__Your Affinities__", value=f"{o_affinity_message}")
                embedVar.add_field(name="__Opponent Affinities__", value=f"{t_affinity_message}")
                embedVar.set_thumbnail(url=ctx.author.avatar_url)
                battle_msg = await private_channel.send(embed=embedVar, components=[start_tales_buttons_action_row], file=player_2_card)
                
            if mode in B_modes and mode in co_op_modes:
                embedVar = discord.Embed(title=f"✅ Boss Fight!", description=f"{ctx.author.mention}\n**{o_card}** & **{c_card}** 🆚 **{t_card}**")
                embedVar.set_image(url="attachment://image.png")
                embedVar.add_field(name="__Your Affinities__", value=f"{o_affinity_message}")
                embedVar.add_field(name="__Companion Affinities__", value=f"{c_affinity_message}")
                embedVar.add_field(name="__Boss Affinities__", value=f"{t_affinity_message}")
                embedVar.set_thumbnail(url=ctx.author.avatar_url)
                battle_msg = await private_channel.send(embed=embedVar, components=[start_tales_buttons_action_row], file=player_2_card)

            def check(button_ctx):
                if mode in PVP_MODES:
                    if tutorial:
                        return button_ctx.author == ctx.author
                    else:
                        return button_ctx.author == user2
                elif mode in co_op_modes:
                    return button_ctx.author == ctx.author
                else:
                    return button_ctx.author == ctx.author

            try:
                button_ctx: ComponentContext = await manage_components.wait_for_component(self.bot, components=[
                            start_tales_buttons_action_row], timeout=180, check=check)

                if button_ctx.custom_id == "start_tales_no":
                    await battle_msg.delete()
                    await battle_ping_message.delete()
                    return

                if button_ctx.custom_id == "save_tales_yes":
                    await battle_msg.delete()
                    await battle_ping_message.delete()
                    await save_spot(self, ctx, universe, mode, currentopponent)
                    await button_ctx.send(f"Game has been saved.")
                    return
                if button_ctx.custom_id == "start_tales_yes" or button_ctx.custom_id == "start_auto_tales":
                    await battle_ping_message.delete()
                    if button_ctx.custom_id == "start_auto_tales":
                        mode = 'ATales'
                        embedVar = discord.Embed(title=f"Auto Battle has started", color=0xe74c3c)
                        embedVar.set_thumbnail(url=ctx.author.avatar_url)
                        await battle_msg.delete(delay=2)
                        await asyncio.sleep(2)
                        battle_msg = await private_channel.send(embed=embedVar)
                    # await button_ctx.defer(ignore=True)
                    while (((o_health > 0) and (c_health > 0)) and (t_health > 0) and mode in co_op_modes) or (
                            (o_health > 0) and (t_health > 0) and mode not in co_op_modes):
                        if previous_moves:
                            previous_moves_len = len(previous_moves)
                            # print(f"LIST LEN: {previous_moves_len}")
                            if previous_moves_len >= battle_history_message_amount:
                                previous_moves = previous_moves[-battle_history_message_amount:]
                            
                            previous_moves_into_embed = "\n\n".join(previous_moves)
                        
                        if mode in PVP_MODES or mode in RAID_MODES:
                            # Player 1 Turn Start
                            if turn == 0:
                                if t_bleed_hit:
                                    t_bleed_hit = False
                                    bleed_dmg = 5 * turn_total
                                    o_health = o_health - bleed_dmg
                                    previous_moves.append(f"🩸 **{o_card}** shredded for **{round(bleed_dmg)}** bleed dmg...")

                                if t_burn_dmg > 3:
                                    o_health = o_health - t_burn_dmg
                                    previous_moves.append(f"🔥 **{o_card}** burned for **{round(t_burn_dmg)}** dmg...")
                                
                                if t_freeze_enh:
                                    previous_moves.append(f"❄️ **{o_card}** has been frozen for a turn...")
                                    turn_total = turn_total + 1
                                    turn = 1
                                    continue

                                if t_poison_dmg:
                                    o_health = o_health - t_poison_dmg
                                    previous_moves.append(f"🧪 **{o_card}** poisoned for **{t_poison_dmg}** dmg...")
                                
                                if o_gravity_hit:
                                    o_gravity_hit = False
                                
                                t_burn_dmg = round(t_burn_dmg / 2)
                                o_freeze_enh = False
                                                    
                                if o_title_passive_type:
                                    if o_title_passive_type == "HLT":
                                        o_health = round(round(o_health + ((o_title_passive_value / 100) * o_health)))
                                    if o_title_passive_type == "LIFE":
                                        if o_max_health != o_health:
                                            t_health = round(t_health - ((o_title_passive_value / 100) * t_health))
                                            o_health = round(o_health + ((o_title_passive_value / 100) * t_health))
                                    if o_title_passive_type == "ATK":
                                        o_attack = o_attack + o_title_passive_value
                                    if o_title_passive_type == "DEF":
                                        o_defense = o_defense + o_title_passive_value
                                    if o_title_passive_type == "STAM":
                                        if o_stamina > 15:
                                            o_stamina = o_stamina + o_title_passive_value
                                    if o_title_passive_type == "DRAIN":
                                        if o_stamina > 15:
                                            t_stamina = t_stamina - o_title_passive_value
                                            o_stamina = o_stamina + o_title_passive_value
                                    if o_title_passive_type == "FLOG":
                                        t_attack = round(t_attack - ((o_title_passive_value / 100) * t_attack))
                                        o_attack = round(o_attack + ((o_title_passive_value / 100) * t_attack))
                                    if o_title_passive_type == "WITHER":
                                        t_defense = round(t_defense - ((o_title_passive_value / 100) * t_defense))
                                        o_defense = round(o_defense + ((o_title_passive_value / 100) * t_defense))
                                    if o_title_passive_type == "RAGE":
                                        o_defense = round(o_defense - ((o_title_passive_value / 100) * o_defense))
                                        o_attack = round(o_attack + ((o_title_passive_value / 100) * o_defense))
                                    if o_title_passive_type == "BRACE":
                                        o_defense = round(o_defense + ((o_title_passive_value / 100) * o_attack))
                                        o_attack = round(o_attack - ((o_title_passive_value / 100) * o_attack))
                                    if o_title_passive_type == "BZRK":
                                        o_health = round(o_health - ((o_title_passive_value / 100) * o_health))
                                        o_attack = round(o_attack + ((o_title_passive_value / 100) * o_health))
                                    if o_title_passive_type == "CRYSTAL":
                                        o_health = round(o_health - ((o_title_passive_value / 100) * o_health))
                                        o_defense = round(o_defense + ((o_title_passive_value / 100) * o_health))
                                    if o_title_passive_type == "FEAR":
                                        o_health = o_health - o_title_passive_value
                                        t_defense = t_defense - (o_title_passive_value / 2)
                                        t_attack = t_attack - (o_title_passive_value / 2)
                                    if o_title_passive_type == "GROWTH":
                                        o_health = o_health - o_title_passive_value
                                        o_defense = o_defense + (o_title_passive_value / 2)
                                        o_attack = o_attack + (o_title_passive_value / 2)
                                    if o_title_passive_type == "SLOW":
                                        if turn_total != 0:
                                            turn_total = turn_total - 1
                                    if o_title_passive_type == "HASTE":
                                        turn_total = turn_total + 1
                                    if o_title_passive_type == "STANCE":
                                        tempattack = o_attack + o_title_passive_value
                                        o_attack = o_defense
                                        o_defense = tempattack
                                    if o_title_passive_type == "CONFUSE":
                                        tempattack = t_attack - o_title_passive_value
                                        t_attack = t_defense
                                        t_defense = tempattack
                                    if o_title_passive_type == "BLINK":
                                        o_stamina = o_stamina - o_title_passive_value
                                        t_stamina = t_stamina + o_title_passive_value
                                if o_card_passive_type:
                                    o_value_for_passive = o_card_tier * .5
                                    o_flat_for_passive = 10 * (o_card_tier * .5)
                                    o_stam_for_passive = 5 * (o_card_tier * .5)
                                    if o_card_passive_type == "HLT":
                                        o_health = round(round(o_health + ((o_value_for_passive / 100) * o_health)))
                                    if o_card_passive_type == "LIFE":
                                        if o_max_health != o_health:
                                            t_health = round(t_health - ((o_value_for_passive / 100) * t_health))
                                            o_health = round(o_health + ((o_value_for_passive / 100) * t_health))
                                    if o_card_passive_type == "ATK":
                                        o_attack = o_attack + o_flat_for_passive
                                    if o_card_passive_type == "DEF":
                                        o_defense = o_defense + o_flat_for_passive
                                    if o_card_passive_type == "STAM":
                                        if o_stamina > 15:
                                            o_stamina = o_stamina + o_stam_for_passive
                                    if o_card_passive_type == "DRAIN":
                                        if o_stamina > 15:
                                            t_stamina = t_stamina - o_stam_for_passive
                                            o_stamina = o_stamina + o_stam_for_passive
                                    if o_card_passive_type == "FLOG":
                                        t_attack = round(t_attack - ((o_value_for_passive / 100) * t_attack))
                                        o_attack = round(o_attack + ((o_value_for_passive / 100) * t_attack))
                                    if o_card_passive_type == "WITHER":
                                        t_defense = round(t_defense - ((o_value_for_passive / 100) * t_defense))
                                        o_defense = round(o_defense + ((o_value_for_passive / 100) * t_defense))
                                    if o_card_passive_type == "RAGE":
                                        o_defense = round(o_defense - ((o_value_for_passive / 100) * o_defense))
                                        o_attack = round(o_attack + ((o_value_for_passive / 100) * o_defense))
                                    if o_card_passive_type == "BRACE":
                                        o_defense = round(o_defense + ((o_value_for_passive / 100) * o_attack))
                                        o_attack = round(o_attack - ((o_value_for_passive / 100) * o_attack))
                                    if o_card_passive_type == "BZRK":
                                        o_health = round(o_health - ((o_value_for_passive / 100) * o_health))
                                        o_attack = round(o_attack + ((o_value_for_passive / 100) * o_health))
                                    if o_card_passive_type == "CRYSTAL":
                                        o_health = round(o_health - ((o_value_for_passive / 100) * o_health))
                                        o_defense = round(o_defense + ((o_value_for_passive / 100) * o_health))
                                    if o_card_passive_type == "FEAR":
                                        o_health = o_health - o_flat_for_passive
                                        t_defense = t_defense - (o_flat_for_passive / 2)
                                        t_attack = t_attack - (o_flat_for_passive / 2)
                                    if o_card_passive_type == "GROWTH":
                                        o_health = o_health - o_flat_for_passive
                                        o_defense = o_defense + (o_flat_for_passive / 2)
                                        o_attack = o_attack + (o_flat_for_passive / 2)
                                    if o_card_passive_type == "SLOW":
                                        if turn_total != 0:
                                            turn_total = turn_total - 1
                                    if o_card_passive_type == "HASTE":
                                        turn_total = turn_total + 1
                                    if o_card_passive_type == "STANCE":
                                        tempattack = o_attack + o_flat_for_passive
                                        o_attack = o_defense
                                        o_defense = tempattack
                                    if o_card_passive_type == "CONFUSE":
                                        tempattack = t_attack - o_flat_for_passive
                                        t_attack = t_defense
                                        t_defense = tempattack
                                    if o_card_passive_type == "BLINK":
                                        o_stamina = o_stamina - o_stam_for_passive
                                        t_stamina = t_stamina + o_stam_for_passive


                                if o_block_used == True:
                                    o_block_used = False
                                    o_defense = o_defense / 2
                                if o_universe == "Death Note" and turn_total == 0:
                                    embedVar = discord.Embed(title=f"{o_card} Scheduled Death 📓",
                                                            description=f"**{o_card} says**\nYou will die in 50  turns...",
                                                            colour=0xe91e63)
                                    previous_moves.append(f"(**{turn_total}**) **{o_card}** 🩸 Scheduled Death 📓")
                                if t_universe == 'Death Note' and turn_total == 0:
                                    embedVar = discord.Embed(title=f"{o_card} Scheduled Death 📓",
                                                            description=f"**{t_card} says**\nYou will die in 50  turns...",
                                                            colour=0xe91e63)
                                    previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 Scheduled Death 📓")
                                
                                if o_attack <= 25:
                                    o_attack = 25
                                if o_defense <= 30:
                                    o_defense = 30
                                if o_attack > 9999:
                                    o_attack = 9999
                                if o_defense > 9999:
                                    o_defense = 9999
                                if o_health >= o_max_health:
                                    o_health = o_max_health


                                # Tutorial Instructions
                                if turn_total == 0:
                                    if botActive:
                                        embedVar = discord.Embed(title=f"Welcome to **Anime 🆚+**!",
                                                                description=f"Follow the instructions to learn how to play the Game!",
                                                                colour=0xe91e63)
                                        embedVar.add_field(name="**How do I play?**",
                                                        value="The point of the game is to win **Battles**!\n**To do this**, you need to select moves outmanuevering your opponent to **secure the win**!\n\n**Select a move** to get started.\nWhen your :cyclone:**ST (Stamina)** depletes to **0** your Card will **Heal** and enter **Focus State** !")
                                        embedVar.add_field(name="**Moveset**",
                                                            value=":boom: - Basic Attack *costs 10 :cyclone:*\n:comet: - Special Attack *costs 30 :cyclone:*\n:rosette: - Ultimate Move *costs 80 :cyclone:*\n:microbe: - Enhancer *costs 20 :cyclone:*\n🛡️ - Block *costs 20 :cyclone:*")
                                        embedVar.set_footer(
                                            text="Focus State : When card deplete to 0 stamina, they focus to Heal they also gain ATK and DEF ")
                                        await private_channel.send(embed=embedVar)
                                        await asyncio.sleep(2)
                                        t_attack = t_attack - 50
                                        t_defense = t_defense - 50
                                    elif mode == "RAID":
                                        embedVar = discord.Embed(title=f"Raiding!",
                                                    description=f"Attack the Shield and Claim the Bounty",
                                                    colour=0xe91e63)
                                        embedVar.add_field(name="**Raid Battle Mechanics**",
                                                            value="Raids are PVE battles against a Guilds defender or SHIELD. This player was selected to defend the guild. You will battle their current Build.")
                                        embedVar.set_footer(
                                            text="Be wary, there are no summons allowed in the Association Hall")
                                        await private_channel.send(embed=embedVar)
                                        await asyncio.sleep(2)
                                        embedVar2 = discord.Embed(
                                            title=f"**{o_card}**  🆚 **{t_card}** Shield Defense has begun!",
                                            description=f"{o_card} Says:\n{o_greeting_description}", colour=0xe91e63)
                                        await private_channel.send(embed=embedVar2)
                                    else:
                                        # await ctx.send(f"{user1.mention}{user2.mention}")
                                        embedVar = discord.Embed(
                                            title=f"**{o_card}** & {opet_name} 🆚 **{t_card}** & {tpet_name} Ranked Battle has begun!",
                                            description=f"{o_card} Says:\n{o_greeting_description}", colour=0xe91e63)
                                        
                                        previous_moves.append(f"(**{turn_total}**) **{o_card}** & {opet_name} 🆚 **{t_card}** & {tpet_name} Ranked Battle has begun!")
                                if o_health <= (o_max_health * .25):
                                    embed_color_o = 0xe74c3c
                                    if o_chainsaw == True:
                                        if o_atk_chainsaw == False:
                                            o_atk_chainsaw = True
                                            o_chainsaw = False
                                            o_defense = o_defense * 2
                                            o_attack = o_attack * 2
                                            embedVar = discord.Embed(title=f"{o_card}'s Devilization",
                                                                    description=f"**{o_card}** Doubles ATK and DEF",
                                                                    colour=0xe91e63)
                                            previous_moves.append(f"(**{turn_total}**) **{o_card}** 🩸's Devilization")

                                elif o_health <= (o_max_health * .50):
                                    embed_color_o = 0xe67e22
                                    if o_chainsaw == True:
                                        if o_atk_chainsaw == False:
                                            o_atk_chainsaw = True
                                            o_chainsaw = False
                                            o_defense = o_defense * 2
                                            o_attack = o_attack * 2
                                            embedVar = discord.Embed(title=f"{o_card}'s Devilization",
                                                                    description=f"**{o_card}** Doubles ATK and DEF",
                                                                    colour=0xe91e63)
                                            previous_moves.append(f"(**{turn_total}**) **{o_card}** 🩸's Devilization")
                                elif o_health <= (o_max_health * .75):
                                    embed_color_o = 0xf1c40f

                                else:
                                    embed_color_o = 0x2ecc71

                                if o_stamina < 10:
                                    o_pet_used = False
                                    o_focus_count = o_focus_count + 1
                                    if botActive and tutorial_focus ==False:
                                        tutorial_focus = True
                                        embedVar = discord.Embed(title=f"You've entered :cyclone:**Focus State**!",
                                                                description=f"Entering :cyclone:**Focus State** sacrifices a turn to **Heal** and regain **ST (Stamina)**!",
                                                                colour=0xe91e63)
                                        embedVar.add_field(name=":cyclone:**Focusing**",
                                                        value="Increase **ATK** (🟦) and **DEF** (🟥)!")
                                        embedVar.add_field(name="⚡**Resolve Transformation**",
                                                        value="⚡Resolve and 🧬Summon aid into battle!")
                                        embedVar.set_footer(
                                            text="Pay attention to your oppononets ST(Stamina). If they are entering Focus State, you will have the ability to strike twice!")
                                        await ctx.send(embed=embedVar)
                                        await asyncio.sleep(2)
                                    # Universal Trait
                                    # fortitude or luck is based on health
                                    fortitude = 0.0
                                    low = o_health - (o_health * .90)
                                    if low <=0:
                                        low = 1
                                    high = o_health - (o_health * .80)
                                    fortitude = round(random.randint(int(low), int(high)))

                                    o_stamina = o_focus
                                    o_healthcalc = round(((o_focus * .40) + (fortitude * 1)) / 2)

                                    if o_title_passive_type:
                                        if o_title_passive_type == "GAMBLE":
                                            o_healthcalc = o_title_passive_value
                                        if o_title_passive_type == "SOULCHAIN":
                                            o_stamina = o_title_passive_value
                                            t_stamina = o_title_passive_value
                                            if mode in co_op_modes:
                                                c_stmina = o_title_passive_value


                                    if t_title_passive_type:
                                        if t_title_passive_type == "GAMBLE":
                                            o_healthcalc = t_title_passive_value
                                    
                                    if mode in co_op_modes:
                                        if c_title_passive_type:
                                            if c_title_passive_type == "GAMBLE":
                                                o_healthcalc = c_title_passive_value

                                    o_attackcalc = round(.20 * ((o_focus * .15) + round(fortitude * 1)))
                                    o_defensecalc = round(.20 * ((o_focus * .15) + round(fortitude * 1)))
                                    # check if user is at max health and sets messages and focus health value
                                    o_newhealth = 0
                                    healmessage = ""
                                    messagenumber = 0
                                    if o_universe == "Crown Rift Madness":
                                        healmessage = "yet inner **Madness** drags on..."
                                        messagenumber = 3
                                    else:
                                        if o_health <= o_max_health:
                                            o_newhealth = o_health + o_healthcalc
                                            if o_newhealth > o_max_health:
                                                healmessage = "the injuries dissapeared!"
                                                messagenumber = 1
                                                o_health = o_max_health
                                            else:
                                                healmessage = "regained some vitality."
                                                messagenumber = 2
                                                o_health = o_newhealth
                                        else:
                                            healmessage = f"**{t_card}**'s blows don't appear to have any effect!"
                                            messagenumber = 0
                                    if not o_used_resolve:
                                        o_attack = o_attack + o_attackcalc
                                        o_defense = o_defense + o_defensecalc
                                    o_used_focus = True
                                    
                                    if botActive:
                                        previous_moves.append(f"(**{turn_total}**) 🌀 **{o_card}** focused and {healmessage}")
                                    if not botActive:
                                        embedVar = discord.Embed(title=f"{o_card} FOCUSED", description=f"**{o_card} says**\n{o_focus_description}", colour=0xe91e63)
                                        embedVar.add_field(name=f"{o_card} focused and {healmessage}", value="All stats & stamina increased")
                                        previous_moves.append(f"(**{turn_total}**) 🌀 **{o_card}** focused and {healmessage}")
                                    # Resolve Check and Calculation
                                    if not o_used_resolve and o_used_focus and o_universe == "Digimon":  # Digimon Universal Trait
                                        # fortitude or luck is based on health
                                        fortitude = 0.0
                                        low = o_health - (o_health * .75)
                                        high = o_health - (o_health * .66)
                                        fortitude = round(random.randint(int(low), int(high)))
                                        # Resolve Scaling
                                        o_resolve_health = round(fortitude + (.5 * o_resolve))
                                        o_resolve_attack = round((.30 * o_defense) * (o_resolve / (.50 * o_defense)))
                                        o_resolve_defense = round((.30 * o_defense) * (o_resolve / (.50 * o_defense)))

                                        o_stamina = o_stamina + o_resolve
                                        o_health = o_health + o_resolve_health
                                        o_attack = round(o_attack + o_resolve_attack)
                                        o_defense = round(o_defense - o_resolve_defense)
                                        o_used_resolve = True
                                        o_pet_used = False
                                        if turn_total <=5:
                                            o_attack = round(o_attack * 2)
                                            o_defense = round(o_defense * 2 )
                                            previous_moves.append(f"(**{turn_total}**) **{o_card}** 🩸 Transformation: Mega Digivolution!!!")
                                        else:
                                            previous_moves.append(f"(**{turn_total}**) **{o_card}** 🩸 Transformation: Digivolve")
                                        if botActive and tutorial_resolve==False:
                                            tutorial_resolve = True
                                            embedVar = discord.Embed(title=f"⚡**Resolve Transformation**!",
                                                                    description=f"**Heal**, Boost **ATK**, and gain the ability to 🧬**Summon**!",
                                                                    colour=0xe91e63)
                                            embedVar.add_field(name=f"Trade Offs!",
                                                            value="Sacrifice **DEF** and **Focusing** will not increase **ATK** or **DEF**")
                                            embedVar.add_field(name=f"🧬 Summons",
                                                            value=f"🧬**Summons** will use their :microbe:**Enhancers** to assist you in battle! You're summon: 🧬 **{opet_name}**")
                                            embedVar.set_footer(
                                                text=f"You can only enter ⚡Resolve once per match! Use the Heal Wisely!!!")
                                            await button_ctx.send(embed=embedVar)

                                    elif o_universe == "League Of Legends":
                                        embedVar = discord.Embed(title=f"Turret Shot hits {t_card} for **{60 + turn_total}** Damage 💥",
                                                                colour=0xe91e63)
                                        previous_moves.append(f"(**{turn_total}**) 🩸 Turret Shot hits **{t_card}** for **{60 + turn_total}** Damage 💥")
                                        t_health = round(t_health - (60 + turn_total))

                                    elif o_universe == "Solo Leveling":
                                        embedVar = discord.Embed(
                                            title=f"Ruler's Authority... Opponent loses **{30 + turn_total}** 🛡️ 🔻",
                                            colour=0xe91e63)
                                        previous_moves.append(f"(**{turn_total}**) 🩸 Ruler's Authority... Opponent loses **{30 + turn_total}** 🛡️ 🔻")
                                        t_defense = round(t_defense - (30 + turn_total))

                                    elif o_universe == "Dragon Ball Z":
                                        o_health = o_health + t_stamina + turn_total
                                        previous_moves.append(f"(**{turn_total}**) 🩸 Saiyan Spirit... You heal for **{t_stamina + turn_total}** ❤️")


                                    elif o_universe == "Black Clover":
                                        embedVar = discord.Embed(title=f"Mana Zone! **{o_card}** Increased Stamina 🌀",
                                                                colour=0xe91e63)
                                        previous_moves.append(f"(**{turn_total}**) 🩸 Mana Zone! **{o_card}** Increased AP & Stamina 🌀")
                                        o_stamina = 100
                                        ocard_lvl_ap_buff = ocard_lvl_ap_buff + 30

                                    elif o_universe == "Death Note":
                                        if turn_total >= 50:
                                            embedVar = discord.Embed(title=f"{t_card}'s' Scheduled Death 📓",
                                                                    description=f"**{o_card} says**\n**Delete**",
                                                                    colour=0xe91e63)
                                            embedVar.add_field(name=f"{t_card} had a heart attack and died", value=f"Death....")
                                            previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 had a heart attack and died")
                                            t_health = 0

                                    if t_universe == "One Punch Man":
                                        embedVar = discord.Embed(
                                            title=f"Hero Reinforcements! **{t_card}**  Increased Health & Max Health ❤️",
                                            colour=0xe91e63)
                                        previous_moves.append(f"(**{turn_total}**) 🩸 Hero Reinforcements! **{t_card}**  Increased Health & Max Health ❤️")
                                        t_health = round(t_health + 100)
                                        t_max_health = round(t_max_health + 100)

                                    elif t_universe == "7ds":
                                        embedVar = discord.Embed(title=f"Power Of Friendship! 🧬 **{tpet_name}** Rested, **{t_card}** Increased Stamina 🌀",
                                                                colour=0xe91e63)
                                        previous_moves.append(f"(**{turn_total}**) 🩸 Power Of Friendship! 🧬 **{tpet_name}** Rested, **{t_card}** Increased Stamina 🌀")
                                        t_stamina = t_stamina + 60
                                        t_pet_used = False

                                    elif t_universe == "Souls":
                                        embedVar = discord.Embed(
                                            title=f"Combo Recognition! **{t_card}** Increased Attack by **{60 + turn_total}** 🔺 ",
                                            colour=0xe91e63)
                                        previous_moves.append(f"(**{turn_total}**) 🩸 Combo Recognition! **{t_card}** Increased Attack by **{60 + turn_total}** 🔺")
                                        t_attack = round(t_attack + (60 + turn_total))
                                    else:
                                        turn_total = turn_total + 1
                                        if o_universe != "Crown Rift Madness":
                                            turn = 1
                                        else:
                                            turn = 0
                                    turn_total = turn_total + 1
                                    if o_universe != "Crown Rift Madness":
                                        turn = 1
                                    else:
                                        turn = 0
                                else:
                                    # Ap Levels
                                    ap1 = list(o_1.values())[0] + ocard_lvl_ap_buff + o_shock_buff + o_basic_water_buff
                                    ap2 = list(o_2.values())[0] + ocard_lvl_ap_buff + o_shock_buff + o_special_water_buff
                                    ap3 = list(o_3.values())[0] + ocard_lvl_ap_buff + demon_slayer_buff + o_shock_buff + o_ultimate_water_buff
                                    enh1 = list(o_enhancer.values())[0]
                                    enh_name = list(o_enhancer.values())[2]
                                    pet_enh_name = list(opet_move.values())[2]
                                    pet_msg_on_resolve = ""

                                    # UNIVERSE CARD
                                    if o_universe == "Souls" and o_used_resolve:
                                        player_1_card = showcard(o, oarm,o_max_health, o_health, o_max_stamina, o_stamina,
                                                                o_used_resolve, otitle, o_used_focus, o_attack, o_defense,
                                                                turn_total, ap2, ap3, ap3, enh1, enh_name, ocard_lvl, t_defense)
                                    else:
                                        player_1_card = showcard(o, oarm,o_max_health, o_health, o_max_stamina, o_stamina,
                                                                o_used_resolve, otitle, o_used_focus, o_attack, o_defense,
                                                                turn_total, ap1, ap2, ap3, enh1, enh_name, ocard_lvl, t_defense)
                                    # await private_channel.send(file=player_1_card)

                                    if o_universe == "Solo Leveling" and not o_swapped:
                                        if temp_tarm_shield_active and not tarm_shield_active:
                                            if oarm_shield_active:
                                                oshield_value = oshield_value + temp_tshield_value
                                                previous_moves.append(f"(**{turn_total}**) **{o_card}** 🩸 **ARISE!** *{tarm_name}* is now yours")
                                                o_swapped = True
                                            elif not oarm_shield_active:
                                                oarm_shield_active = True
                                                oshield_value = temp_tshield_value
                                                previous_moves.append(f"(**{turn_total}**) **{o_card}** 🩸 **ARISE!** *{tarm_name}* is now yours")
                                                o_swapped = True
                                        elif temp_tarm_barrier_active and not tarm_barrier_active:
                                            if oarm_barrier_active:
                                                obarrier_count = obarrier_count + temp_tbarrier_count
                                                previous_moves.append(f"(**{turn_total}**) **{o_card}** 🩸 **ARISE!** *{tarm_name}* is now yours")
                                                o_swapped = True
                                            elif not oarm_barrier_active:
                                                oarm_barrier_active = True
                                                obarrier_count = temp_tbarrier_count
                                                previous_moves.append(f"(**{turn_total}**) **{o_card}** 🩸 **ARISE!** *{tarm_name}* is now yours")
                                                o_swapped = True
                                        elif temp_tarm_parry_active and not tarm_parry_active:
                                            if oarm_parry_active:
                                                oparry_count = oparry_count + temp_tparry_count
                                                previous_moves.append(f"(**{turn_total}**) **{o_card}** 🩸 **ARISE!** *{tarm_name}* is now yours")
                                                o_swapped = True
                                            elif not oarm_parry_active:
                                                oarm_parry_active = True
                                                oparry_count = temp_tparry_count
                                                previous_moves.append(f"(**{turn_total}**) **{o_card}** 🩸 **ARISE!** *{tarm_name}* is now yours")
                                                o_swapped = True


                                    if o_used_focus and o_used_resolve:
                                        options = ["q", "Q", "0", "1", "2", "3", "4", "6"]
                                    elif o_used_focus and not o_used_resolve:
                                        options = ["q", "Q", "0", "1", "2", "3", "4", "5"]
                                    else:
                                        options = ["q", "Q", "0", "1", "2", "3", "4"]

                                    battle_buttons = []
                                    util_buttons = [
                                        manage_components.create_button(
                                            style=ButtonStyle.grey,
                                            label="Quit | /ff",
                                            custom_id="q"
                                        ),
                                    ]
                                    if o_stamina >= 10:
                                        battle_buttons.append(
                                            manage_components.create_button(
                                                style=ButtonStyle.green,
                                                label=f"{o_basic_emoji} 10",
                                                custom_id="1"
                                            )
                                        )

                                    if o_stamina >= 30:
                                        battle_buttons.append(
                                            manage_components.create_button(
                                                style=ButtonStyle.green,
                                                label=f"{o_super_emoji} 30",
                                                custom_id="2"
                                            )
                                        )


                                    if o_stamina >= 80:
                                        battle_buttons.append(
                                            manage_components.create_button(
                                                style=ButtonStyle.green,
                                                label=f"{o_ultimate_emoji} 80",
                                                custom_id="3"
                                            )
                                        )

                                    if o_stamina >= 20:
                                        battle_buttons.append(
                                            manage_components.create_button(
                                                style=ButtonStyle.blue,
                                                label=f"🦠 20",
                                                custom_id="4"
                                            )
                                        )

                                        if t_gravity_hit == False:
                                            util_buttons.append(
                                                manage_components.create_button(
                                                    style=ButtonStyle.grey,
                                                    label="Block 20",
                                                    custom_id="0"
                                                )
                                            )

                                    if o_used_focus and o_used_resolve and not o_pet_used and mode != "RAID":
                                        util_buttons.append(
                                            manage_components.create_button(
                                                style=ButtonStyle.green,
                                                label="🧬",
                                                custom_id="6"
                                            )
                                        )

                                    if o_used_focus and not o_used_resolve:
                                        util_buttons.append(
                                            manage_components.create_button(
                                                style=ButtonStyle.green,
                                                label="⚡Resolve!",
                                                custom_id="5"
                                            )
                                        )

                                    battle_action_row = manage_components.create_actionrow(*battle_buttons)
                                    util_action_row = manage_components.create_actionrow(*util_buttons)
                                    components = [battle_action_row, util_action_row]
                                    if o_used_resolve:
                                        pet_msg_on_resolve = f"🧬 {enhancer_mapping[pet_enh_name]}"
                                    tarm_message = ""
                                    if tarm_barrier_active:
                                        tarm_message = f"💠{tbarrier_count}"
                                    elif tarm_shield_active:
                                        tarm_message = f"🌐{tshield_value}"
                                    elif tarm_parry_active:
                                        tarm_message = f"🔄{tparry_count}"
                                    if oarm_passive_type == "BARRIER":
                                        if oarm_barrier_active:
                                            oarm_passive_value = f"{obarrier_count}"
                                        else:
                                            oarm_passive_value = 0
                                    elif oarm_passive_type == "SHIELD":
                                        if oarm_shield_active:
                                            oarm_passive_value = f"{oshield_value}"
                                        else:
                                            oarm_passive_value = 0
                                    elif oarm_passive_type == "PARRY":
                                        if oarm_parry_active:
                                            oarm_passive_value = f"{oparry_count}"
                                        else:
                                            oarm_passive_value = 0
                                    embedVar = discord.Embed(title=f"", description=textwrap.dedent(f"""\
                                    {previous_moves_into_embed}

                                    """), color=0xe74c3c)
                                    embedVar.set_author(name=f"🦾 {oarm_name} - {oarm_passive_type} {oarm_passive_value} {enhancer_suffix_mapping[oarm_passive_type]}\n{pet_msg_on_resolve}")
                                    # await asyncio.sleep(2)
                                    embedVar.add_field(name=f"➡️ **Current Turn** {turn_total}", value=f"{ctx.author.mention} Select move below!")
                                    embedVar.set_image(url="attachment://image.png")
                                    embedVar.set_thumbnail(url=ctx.author.avatar_url)
                                    embedVar.set_footer(
                                        text=f"{t_card}: ❤️{round(t_health)} 🌀{round(t_stamina)} 🗡️{round(t_attack)}/🛡️{round(t_defense)} {tarm_message}",
                                        icon_url="https://cdn.discordapp.com/emojis/789290881654980659.gif?v=1")
                                    await battle_msg.delete(delay=1)
                                    await asyncio.sleep(1)
                                    battle_msg = await private_channel.send(embed=embedVar, components=components, file=player_1_card)


                                    # Make sure user is responding with move
                                    def check(button_ctx):
                                        return button_ctx.author == user1 and button_ctx.custom_id in options

                                    try:
                                        button_ctx: ComponentContext = await manage_components.wait_for_component(self.bot,
                                                                                                                components=[
                                                                                                                    battle_action_row,
                                                                                                                    util_action_row],
                                                                                                                timeout=80,
                                                                                                                check=check)

                                        # calculate data based on selected move
                                        if button_ctx.custom_id == "q" or button_ctx.custom_id == "Q":
                                            o_health = 0
                                            previous_moves.append(f"(**{turn_total}**) 💨 **{o_card}** Fled...")
                                            await battle_msg.delete(delay=None)
                                            # await asyncio.sleep(2)
                                            battle_msg = await button_ctx.send(f"{ctx.author.mention} has fled the battle...")
                                            # await button_ctx.send(f"{ctx.author.mention} has fled the battle...")
                                            #return
                                        if button_ctx.custom_id == "1":
                                            if botActive and tutorial_basic == False:
                                                tutorial_basic =True
                                                embedVar = discord.Embed(title=f":boom:Basic Attack!",
                                                                        description=f":boom:**Basic Attack** cost **10 ST(Stamina)** to deal decent Damage!",
                                                                        colour=0xe91e63)
                                                embedVar.add_field(
                                                    name=f"Your Basic Attack: {o_basic_emoji} {list(o_1.keys())[0]} inflicts {omove1_element}",
                                                    value=f"**{omove1_element}** : *{element_mapping[omove1_element]}*")
                                                embedVar.add_field(name=f"Combos!",
                                                                value="Chain your :boom:**Basic Attack** with :microbe:**Enhancers** To Maximize Damage!")
                                                embedVar.set_footer(
                                                    text=f"Basic Attacks are great when you are low on stamina. Enter Focus State to Replenish!")
                                                await button_ctx.send(embed=embedVar)
                                                await asyncio.sleep(2)
                                            if o_universe == "Souls" and o_used_resolve:
                                                dmg = damage_cal(t_opponent_affinities, special_attack_name, omove2_element, o_universe, o_card, o_2, o_attack, o_defense, t_defense, o_stamina,
                                                                o_enhancer_used, o_health, t_health, t_stamina, o_max_health,
                                                                t_attack, o_special_move_description, turn_total,
                                                                ocard_lvl_ap_buff, o_1)                                                
                                            else:
                                                dmg = damage_cal(t_opponent_affinities, basic_attack_name, omove1_element, o_universe, o_card, o_1, o_attack, o_defense, t_defense, o_stamina,
                                                                o_enhancer_used, o_health, t_health, t_stamina, o_max_health,
                                                                t_attack, o_special_move_description, turn_total,
                                                                ocard_lvl_ap_buff, None)

                                        elif button_ctx.custom_id == "2":
                                            if botActive and tutorial_special==False:
                                                tutorial_special = True
                                                embedVar = discord.Embed(title=f":comet:Special Attack!",
                                                                        description=f":comet:**Special Attack** cost **30 ST(Stamina)** to deal great Damage!",
                                                                        colour=0xe91e63)
                                                embedVar.add_field(
                                                    name=f"Your Special Attack: {o_super_emoji} {list(o_2.keys())[0]} inflicts {omove2_element}",
                                                    value=f"**{omove2_element}** : *{element_mapping[omove2_element]}*")
                                                embedVar.add_field(name=f"Strategy!",
                                                                value=":comet:**Special Attacks** are the balance between **ST (Stamina)** cost and Damage Output when trying to build **Combos**!")
                                                embedVar.set_footer(
                                                    text=f"Special Attacks are great when you need to control the Focus game! Use Them to Maximize your Focus and build stronger Combos!")
                                                await button_ctx.send(embed=embedVar)
                                                await asyncio.sleep(2)
                                            if o_universe == "Souls" and o_used_resolve:
                                                dmg = damage_cal(t_opponent_affinities, ultimate_attack_name, omove3_element, o_universe, o_card, o_3, o_attack, o_defense, t_defense, o_stamina,
                                                                o_enhancer_used, o_health, t_health, t_stamina, o_max_health,
                                                                t_attack, o_special_move_description, turn_total,
                                                                ocard_lvl_ap_buff, o_2)                                                
                                            else:
                                                dmg = damage_cal(t_opponent_affinities, special_attack_name, omove2_element, o_universe, o_card, o_2, o_attack, o_defense, t_defense, o_stamina,
                                                                o_enhancer_used, o_health, t_health, t_stamina, o_max_health,
                                                                t_attack, o_special_move_description, turn_total,
                                                                ocard_lvl_ap_buff, None)

                                        elif button_ctx.custom_id == "3":
                                            if botActive and tutorial_ultimate==False:
                                                tutorial_ultimate=True
                                                embedVar = discord.Embed(title=f":rosette:Ultimate Move!",
                                                                        description=f":rosette:**Ultimate Move** cost **80 ST(Stamina)** to deal incredible Damage!",
                                                                        colour=0xe91e63)
                                                embedVar.add_field(
                                                    name=f"Your Ultimate: {o_ultimate_emoji} {list(o_3.keys())[0]} inflicts {omove3_element}",
                                                    value=f"**{omove3_element}** : *{element_mapping[omove3_element]}*")
                                                embedVar.add_field(name=f"Ultimate GIF",
                                                                value="Using your ultimate move also comes with a bonus GIF to deliver that final blow!\n*Enter performance mode to disable GIFs\n/performace*")
                                                embedVar.set_footer(
                                                    text=f"Ultimate moves will consume most of your ST(Stamina) for Incredible Damage! Use Them Wisely!")
                                                await button_ctx.send(embed=embedVar)
                                                await asyncio.sleep(2)
                                            dmg = damage_cal(t_opponent_affinities, ultimate_attack_name, omove3_element, o_universe, o_card, o_3, o_attack, o_defense, t_defense, o_stamina,
                                                            o_enhancer_used, o_health, t_health, t_stamina, o_max_health,
                                                            t_attack, o_special_move_description, turn_total,
                                                            ocard_lvl_ap_buff, None)

                                            if o_gif != "N/A" and not operformance:
                                                await battle_msg.delete(delay=None)
                                                # await asyncio.sleep(1)
                                                battle_msg = await private_channel.send(f"{o_gif}")
                                                await asyncio.sleep(2)
                                        
                                        elif button_ctx.custom_id == "4":
                                            if botActive and tutorial_enhancer==False:
                                                tutorial_enhancer = True
                                                embedVar = discord.Embed(title=f":microbe:Enhancers!",
                                                                        description=f":microbe:**Enhancers** cost **20 ST(Stamina)** to Boost your Card or Debuff Your Opponent!",
                                                                        colour=0xe91e63)
                                                embedVar.add_field(
                                                    name=f"Your Enhancer::microbe: {omove_enhanced_text} is a {list(o_enhancer.values())[2]}",
                                                    value=f"**{list(o_enhancer.values())[2]}** : *{enhancer_mapping[list(o_enhancer.values())[2]]}*")
                                                embedVar.set_footer(
                                                    text=f"Use /enhancers to view a full list of Enhancers! Look for the {list(o_enhancer.values())[2]} Enhancer")
                                                await button_ctx.send(embed=embedVar)
                                                await asyncio.sleep(2)
                                            o_enhancer_used = True
                                            dmg = damage_cal(t_opponent_affinities, basic_attack_name, omove1_element, o_universe, o_card, o_enhancer, o_attack, o_defense, t_defense,
                                                            o_stamina, o_enhancer_used, o_health, t_health, t_stamina,
                                                            o_max_health, t_attack, o_special_move_description, turn_total,
                                                            ocard_lvl_ap_buff, None)

                                            o_enhancer_used = False
                                        
                                        elif button_ctx.custom_id == "5":
                                            # Resolve Check and Calculation
                                            if not o_used_resolve and o_used_focus:
                                                if botActive and tutorial_resolve == False:
                                                    tutorial_resolve = True
                                                    embedVar = discord.Embed(title=f"⚡**Resolve Transformation**!",
                                                                            description=f"**Heal**, Boost **ATK**, and gain the ability to 🧬**Summon**!",
                                                                            colour=0xe91e63)
                                                    embedVar.add_field(name=f"Trade Offs!",
                                                                    value="Sacrifice **DEF** and **Focusing** will not increase **ATK** or **DEF**")
                                                    embedVar.add_field(name=f"🧬 Summons",
                                                                    value=f"🧬**Summons** will use their :microbe:**Enhancers** to assist you in battle! You're summon: 🧬 **{opet_name}**")
                                                    embedVar.set_footer(
                                                        text=f"You can only enter ⚡Resolve once per match! Use the Heal Wisely!!!")
                                                    await button_ctx.send(embed=embedVar)
                                                    await asyncio.sleep(2)
                                                if o_universe == "My Hero Academia":  # My Hero Trait
                                                    # fortitude or luck is based on health
                                                    fortitude = 0.0
                                                    low = o_health - (o_health * .75)
                                                    high = o_health - (o_health * .66)
                                                    fortitude = round(random.randint(int(low), int(high)))
                                                    # Resolve Scaling
                                                    o_resolve_health = round(fortitude + (.5 * o_resolve))
                                                    o_resolve_attack = round(
                                                        (.30 * o_defense) * (o_resolve / (.50 * o_defense)))
                                                    o_resolve_defense = round(
                                                        (.30 * o_defense) * (o_resolve / (.50 * o_defense)))
                                                    ocard_lvl_ap_buff = ocard_lvl_ap_buff + 80 + turn_total

                                                    o_stamina = o_stamina + o_resolve
                                                    o_health = o_health + o_resolve_health
                                                    o_attack = round(o_attack + o_resolve_attack)
                                                    o_defense = round(o_defense - o_resolve_defense)
                                                    o_used_resolve = True
                                                    o_pet_used = False
                                                    embedVar = discord.Embed(title=f"{o_card} PLUS ULTRAAA",
                                                                            description=f"**{o_card} says**\n{o_resolve_description}",
                                                                            colour=0xe91e63)
                                                    embedVar.add_field(name=f"Transformation: Plus Ultra",
                                                                    value="You do not lose a turn after you Resolve.")
                                                    previous_moves.append(f"(**{turn_total}**) **{o_card}** 🩸 Resolved: PLUS ULTRA!")
                                                    await button_ctx.defer(ignore=True)
                                                    turn_total = turn_total + 1
                                                    turn = 0

                                                elif o_universe == "Demon Slayer": 
                                                    # fortitude or luck is based on health
                                                    fortitude = 0.0
                                                    low = o_health - (o_health * .75)
                                                    high = o_health - (o_health * .66)
                                                    fortitude = round(random.randint(int(low), int(high)))
                                                    # Resolve Scaling
                                                    o_resolve_health = round(fortitude + (.5 * o_resolve))
                                                    o_resolve_attack = round(
                                                        (.30 * o_defense) * (o_resolve / (.50 * o_defense)))
                                                    o_resolve_defense = round(
                                                        (.30 * o_defense) * (o_resolve / (.50 * o_defense)))

                                                    o_stamina = o_stamina + o_resolve
                                                    o_health = o_health + o_resolve_health
                                                    o_attack = round(o_attack + o_resolve_attack)
                                                    o_defense = round(o_defense - o_resolve_defense)
                                                    if t_attack > o_attack:
                                                        o_attack = t_attack
                                                    if t_defense > o_defense:
                                                        o_defense = t_defense
                                                    o_used_resolve = True
                                                    o_pet_used = False
                                                    embedVar = discord.Embed(title=f"{o_card} begins Total Concentration Breathing",
                                                                            description=f"**{o_card} says**\n{o_resolve_description}",
                                                                            colour=0xe91e63)
                                                    previous_moves.append(f"(**{turn_total}**) **{o_card}** 🩸 Resolved: Total Concentration Breathing!")
                                                    await button_ctx.defer(ignore=True)
                                                    turn_total = turn_total + 1
                                                    turn = 1

                                                elif o_universe == "Naruto": 
                                                    # fortitude or luck is based on health
                                                    fortitude = 0.0
                                                    low = o_health - (o_health * .75)
                                                    high = o_health - (o_health * .66)
                                                    fortitude = round(random.randint(int(low), int(high)))
                                                    # Resolve Scaling
                                                    o_resolve_health = round(fortitude + (.5 * o_resolve))
                                                    o_resolve_attack = round(
                                                        (.30 * o_defense) * (o_resolve / (.50 * o_defense)))
                                                    o_resolve_defense = round(
                                                        (.30 * o_defense) * (o_resolve / (.50 * o_defense)))

                                                    o_stamina = o_stamina + o_resolve
                                                    o_health = o_health + o_resolve_health
                                                    o_health = o_health + o_naruto_heal_buff
                                                    o_attack = round(o_attack + o_resolve_attack)
                                                    o_defense = round(o_defense - o_resolve_defense)

                                                    o_used_resolve = True
                                                    o_pet_used = False
                                                    embedVar = discord.Embed(title=f"{o_card} Heals from Hashirama Cells",
                                                                            description=f"**{o_card} says**\n{o_resolve_description}",
                                                                            colour=0xe91e63)
                                                    previous_moves.append(f"(**{turn_total}**) **{o_card}** 🩸 Resolved: Hashirama Cells heal you for **{o_naruto_heal_buff}**")
                                                    await button_ctx.defer(ignore=True)
                                                    turn_total = turn_total + 1
                                                    turn = 1

                                                elif o_universe == "Attack On Titan":
                                                    # fortitude or luck is based on health
                                                    fortitude = 0.0
                                                    low = o_health - (o_health * .75)
                                                    high = o_health - (o_health * .66)
                                                    fortitude = round(random.randint(int(low), int(high)))
                                                    # Resolve Scaling
                                                    o_resolve_health = round(fortitude + (.5 * o_resolve))
                                                    o_resolve_attack = round(
                                                        (.30 * o_defense) * (o_resolve / (.50 * o_defense)))
                                                    o_resolve_defense = round(
                                                        (.30 * o_defense) * (o_resolve / (.50 * o_defense)))

                                                    o_stamina = o_stamina + o_resolve
                                                    o_health = o_health + o_resolve_health
                                                    o_attack = round(o_attack + o_resolve_attack)
                                                    o_defense = round(o_defense - o_resolve_defense)
                                                    o_used_resolve = True
                                                    o_pet_used = False
                                                    health_boost = 100 * o_focus_count
                                                    o_health = o_health + health_boost
                                                    embedVar = discord.Embed(title=f"{o_card} Titan Mode",
                                                                            description=f"**{o_card} says**\n{o_resolve_description}",
                                                                            colour=0xe91e63)
                                                    embedVar.add_field(name=f"Transformation Complete",
                                                                    value=f"Health increased by **{health_boost}**!")
                                                    previous_moves.append(f"(**{turn_total}**) **{o_card}** 🩸 Resolved: Titan Mode")
                                                    await button_ctx.defer(ignore=True)

                                                    turn_total = turn_total + 1
                                                    turn = 1

                                                elif o_universe == "Bleach":  # Bleach Trait
                                                    # fortitude or luck is based on health
                                                    fortitude = 0.0
                                                    low = o_health - (o_health * .75)
                                                    high = o_health - (o_health * .66)
                                                    fortitude = round(random.randint(int(low), int(high)))
                                                    # Resolve Scaling
                                                    o_resolve_health = round(fortitude + (.5 * o_resolve))
                                                    o_resolve_attack = round(
                                                        (.30 * o_defense) * (o_resolve / (.50 * o_defense)))
                                                    o_resolve_defense = round(
                                                        (.30 * o_defense) * (o_resolve / (.50 * o_defense)))

                                                    o_stamina = o_stamina + o_resolve
                                                    o_health = o_health + o_resolve_health
                                                    o_attack = round((o_attack + (2 * o_resolve_attack)) * 2)
                                                    o_defense = round(o_defense - o_resolve_defense)
                                                    # if o_defense >= 120:
                                                    # o_defense = 120
                                                    o_used_resolve = True
                                                    o_pet_used = False
                                                    embedVar = discord.Embed(title=f"{o_card} BANKAI :zap:",
                                                                            description=f"**{o_card} says**\n{o_resolve_description}",
                                                                            colour=0xe91e63)
                                                    embedVar.add_field(name=f"Transformation: Bankai",
                                                                    value="Gain double Attack on Resolve.")
                                                    previous_moves.append(f"(**{turn_total}**) **{o_card}** 🩸 Resolved: Bankai!")
                                                    await button_ctx.defer(ignore=True)
                                                    turn_total = turn_total + 1
                                                    turn = 1
                                                
                                                elif o_universe == "God Of War":  # God Of War Trait
                                                    # fortitude or luck is based on health
                                                    fortitude = 0.0
                                                    low = o_health - (o_health * .75)
                                                    high = o_health - (o_health * .66)
                                                    fortitude = round(random.randint(int(low), int(high)))
                                                    # Resolve Scaling
                                                    o_resolve_health = round(fortitude + (.5 * o_resolve))
                                                    o_resolve_attack = round(
                                                        (.30 * o_defense) * (o_resolve / (.50 * o_defense)))
                                                    o_resolve_defense = round(
                                                        (.30 * o_defense) * (o_resolve / (.50 * o_defense)))

                                                    o_stamina = o_stamina + o_resolve
                                                    o_health = o_max_health
                                                    o_attack = round(o_attack + o_resolve_attack)
                                                    o_defense = round(o_defense - o_resolve_defense)
                                                    o_used_resolve = True
                                                    o_pet_used = False
                                                    
                                                    if o_gow_resolve:
                                                        previous_moves.append(f"(**{turn_total}**) **{o_card}** 🩸 Resolved: Ascension!")
                                                    elif not o_gow_resolve:
                                                        o_used_resolve = False
                                                        o_gow_resolve = True
                                                        o_defense = 125
                                                        previous_moves.append(f"(**{turn_total}**) **{o_card}** 🩸 Crushed Blood Orb: Health Refill")
                                                    
                                                    embedVar = discord.Embed(title=f"{o_card} ASCENDED :zap:",
                                                                            description=f"**{o_card} says**\n{o_resolve_description}",
                                                                            colour=0xe91e63)
                                                    embedVar.add_field(name=f"Transformation: Ascension",
                                                                    value="On Resolve Refill Health.")
                                                    
                                                    await button_ctx.defer(ignore=True)
                                                    turn_total = turn_total + 1
                                                    turn = 1
                                                
                                                elif o_universe == "Fate":  # Fate Trait
                                                    # fortitude or luck is based on health
                                                    fortitude = 0.0
                                                    low = o_health - (o_health * .75)
                                                    high = o_health - (o_health * .66)
                                                    fortitude = round(random.randint(int(low), int(high)))
                                                    # Resolve Scaling
                                                    o_resolve_health = round(fortitude + (.5 * o_resolve))
                                                    o_resolve_attack = round(
                                                        (.30 * o_defense) * (o_resolve / (.50 * o_defense)))
                                                    o_resolve_defense = round(
                                                        (.30 * o_defense) * (o_resolve / (.50 * o_defense)))

                                                    o_stamina = o_stamina + o_resolve
                                                    o_health = o_health + o_resolve_health
                                                    o_attack = round(o_attack + o_resolve_attack)
                                                    o_defense = round(o_defense - o_resolve_defense)

                                                    dmg = damage_cal(t_opponent_affinities, ultimate_attack_name, omove3_element, o_universe, o_card, o_3, o_attack, o_defense, t_defense,
                                                                    o_stamina, o_enhancer_used, o_health, t_health, t_stamina,
                                                                    o_max_health, t_attack, o_special_move_description,
                                                                    turn_total, ocard_lvl_ap_buff, None)
                                                    t_health = t_health - dmg['DMG']
                                                    embedVar = discord.Embed(
                                                        title=f"{o_card} COMMAND SEAL :zap:\n\n{dmg['MESSAGE']}",
                                                        description=f"**{o_card} says**\n{o_resolve_description}",
                                                        colour=0xe91e63)
                                                    embedVar.add_field(name=f"Transformation: Command Seal",
                                                                    value="On Resolve, Strike with Ultimate, then Focus.")
                                                    previous_moves.append(f"(**{turn_total}**) **{o_card}** 🩸 Resolved: Command Seal!")
                                                    await button_ctx.defer(ignore=True)
                                                    # o_stamina = 0
                                                    o_used_resolve = True
                                                    o_pet_used = False
                                                    turn_total = turn_total + 1
                                                    turn = 1
                                                
                                                elif o_universe == "Kanto Region" or o_universe == "Johto Region" or o_universe == "Hoenn Region" or o_universe == "Sinnoh Region" or o_universe == "Kalos Region" or o_universe == "Unova Region" or o_universe == "Alola Region" or o_universe == "Galar Region":  # Pokemon Resolves
                                                    # fortitude or luck is based on health
                                                    fortitude = 0.0
                                                    low = o_health - (o_health * .75)
                                                    high = o_health - (o_health * .66)
                                                    fortitude = round(random.randint(int(low), int(high)))
                                                    # Resolve Scaling
                                                    o_resolve_health = round(fortitude + (.5 * o_resolve))
                                                    o_resolve_attack = round(
                                                        (.30 * o_defense) * (o_resolve / (.50 * o_defense)))
                                                    o_resolve_defense = round(
                                                        (.30 * o_defense) * (o_resolve / (.50 * o_defense)))

                                                    o_stamina = o_stamina + o_resolve
                                                    o_health = o_health + o_resolve_health
                                                    o_attack = round(o_attack + o_resolve_attack)
                                                    o_defense = round(o_defense) * 2
                                                    o_used_resolve = True
                                                    o_pet_used = False
                                                    embedVar = discord.Embed(title=f"{o_card} EVOLUTION :zap:",
                                                                            description=f"**{o_card} says**\n{o_resolve_description}",
                                                                            colour=0xe91e63)
                                                    embedVar.add_field(name=f"Transformation: Evolution",
                                                                    value="When you Resolve you do not lose Defense.")
                                                    if turn_total >= 50:
                                                        o_max_health = o_max_health + 1000
                                                        o_health = o_health + 1000
                                                        previous_moves.append(f"(**{turn_total}**) **{o_card}** 🩸 Resolved: Gigantomax Evolution!!! Gained **1000** HP!!!")
                                                    elif turn_total >=30:
                                                        o_max_health = o_max_health + 500
                                                        o_health = o_health + 500
                                                        previous_moves.append(f"(**{turn_total}**) **{o_card}** 🩸 Resolved: Mega Evolution!! Gained **300** HP!")
                                                    else:
                                                        previous_moves.append(f"(**{turn_total}**) **{o_card}** 🩸 Resolved: Evolution!")
                                                    await button_ctx.defer(ignore=True)
                                                    turn_total = turn_total + 1
                                                    turn = 1
                                                else:  # Standard Resolve
                                                    # fortitude or luck is based on health
                                                    fortitude = 0.0
                                                    low = o_health - (o_health * .75)
                                                    high = o_health - (o_health * .66)
                                                    fortitude = round(random.randint(int(low), int(high)))
                                                    # Resolve Scaling
                                                    o_resolve_health = round(fortitude + (.5 * o_resolve))
                                                    o_resolve_attack = round(
                                                        (.30 * o_defense) * (o_resolve / (.50 * o_defense)))
                                                    o_resolve_defense = round(
                                                        (.30 * o_defense) * (o_resolve / (.50 * o_defense)))

                                                    o_stamina = o_stamina + o_resolve
                                                    o_health = o_health + o_resolve_health
                                                    o_attack = round(o_attack + o_resolve_attack)
                                                    o_defense = round(o_defense - o_resolve_defense)
                                                    o_used_resolve = True
                                                    o_pet_used = False
                                                    if o_universe == "League Of Legends":
                                                        t_health = t_health - (60 * (o_focus_count + t_focus_count))
                                                        embedVar = discord.Embed(title=f"{o_card} PENTA KILL!",
                                                                                description=f"**{o_card} says**\n{o_resolve_description}",
                                                                                colour=0xe91e63)
                                                        embedVar.add_field(name=f"Nexus Destroyed",
                                                                        value=f"**{o_card}** dealt **{(60 * (o_focus_count + t_focus_count))}** damage.")
                                                        previous_moves.append(f"(**{turn_total}**) **{o_card}** 🩸 Resolved: Pentakill! Dealing {(60 * (o_focus_count + t_focus_count))} damage.")
                                                        await button_ctx.defer(ignore=True)
                                                    elif o_universe == "Souls":
                                                        previous_moves.append(f"(**{turn_total}**) **{o_card}** 🩸 Phase 2: Enhanced Moveset!")
                                                        await button_ctx.defer(ignore=True)
                                                    else:
                                                        embedVar = discord.Embed(title=f"{o_card} STRENGTHENED RESOLVE :zap:",
                                                                                description=f"**{o_card} says**\n{o_resolve_description}",
                                                                                colour=0xe91e63)
                                                        embedVar.add_field(name=f"Transformation",
                                                                        value="All stats & stamina greatly increased")
                                                        previous_moves.append(f"(**{turn_total}**) ⚡ **{o_card}** Resolved!")
                                                        await button_ctx.defer(ignore=True)
                                                    turn_total = turn_total + 1
                                                    turn = 1
                                            else:
                                                emessage = m.CANNOT_USE_RESOLVE
                                                embedVar = discord.Embed(title=emessage,
                                                                        description=f"Entering `Resolved State` sacrifices a turn to power up even greater and regain `Stamina`!",
                                                                        colour=0xe91e63)
                                                previous_moves.append(f"(**{turn_total}**) **{o_card}** cannot resolve")
                                                await button_ctx.defer(ignore=True)
                                                turn = 0
                                        
                                        elif button_ctx.custom_id == "6" and mode != "RAID":
                                            # Resolve Check and Calculation
                                            if o_used_resolve and o_used_focus and not o_pet_used:
                                                if botActive and tutorial_summon == False:
                                                    tutorial_summon = True
                                                    embedVar = discord.Embed(title=f"{o_card} Summoned 🧬 **{opet_name}**",colour=0xe91e63)
                                                    embedVar.add_field(name=f"🧬**Summon Enhancers**!",
                                                                    value="You can use 🧬**Summons** once per Focus without losing a turn!")
                                                    embedVar.add_field(name=f"Resting",
                                                                    value="🧬**Summons** need to rest after using their ability! **Focus** to Replenish your 🧬**Summon**")
                                                    embedVar.set_footer(
                                                        text=f"🧬Summons will Level Up and build Bond as you win battles! Train up your 🧬summons to perform better in the field!")
                                                    await button_ctx.send(embed=embedVar)
                                                    await asyncio.sleep(2)
                                                o_enhancer_used = True
                                                dmg = damage_cal(t_opponent_affinities, basic_attack_name, omove1_element, o_universe, o_card, opet_move, o_attack, o_defense, t_defense,
                                                                o_stamina, o_enhancer_used, o_health, t_health, t_stamina,
                                                                o_max_health, t_attack, o_special_move_description, turn_total,
                                                                ocard_lvl_ap_buff, None)
                                                o_enhancer_used = False
                                                o_pet_used = True
                                                opet_dmg = dmg['DMG']
                                                opet_type = dmg['ENHANCED_TYPE']
                                                if dmg['CAN_USE_MOVE']:
                                                    if opet_type == 'ATK':
                                                        o_attack = round(o_attack + dmg['DMG'])
                                                    elif opet_type == 'DEF':
                                                        o_defense = round(o_defense + dmg['DMG'])
                                                    elif opet_type == 'STAM':
                                                        o_stamina = round(o_stamina + dmg['DMG'])
                                                    elif opet_type == 'HLT':
                                                        o_health = round(o_health + dmg['DMG'])
                                                    elif opet_type == 'LIFE':
                                                        o_health = round(o_health + dmg['DMG'])
                                                        t_health = round(t_health - dmg['DMG'])
                                                    elif opet_type == 'DRAIN':
                                                        o_stamina = round(o_stamina + dmg['DMG'])
                                                        t_stamina = round(t_stamina - dmg['DMG'])
                                                    elif opet_type == 'FLOG':
                                                        o_attack = round(o_attack + dmg['DMG'])
                                                        t_attack = round(t_attack - dmg['DMG'])
                                                    elif opet_type == 'WITHER':
                                                        o_defense = round(o_defense + dmg['DMG'])
                                                        t_defense = round(t_defense - dmg['DMG'])
                                                    elif opet_type == 'RAGE':
                                                        o_defense = round(o_defense - dmg['DMG'])
                                                        o_attack = round(o_attack + dmg['DMG'])
                                                    elif opet_type == 'BRACE':
                                                        o_defense = round(o_defense + dmg['DMG'])
                                                        o_attack = round(o_attack - dmg['DMG'])
                                                    elif opet_type == 'BZRK':
                                                        o_health = round(o_health - dmg['DMG'])
                                                        o_attack = round(o_attack + dmg['DMG'])
                                                    elif opet_type == 'CRYSTAL':
                                                        o_health = round(o_health - dmg['DMG'])
                                                        o_defense = round(o_defense + dmg['DMG'])
                                                    elif opet_type == 'GROWTH':
                                                        o_max_health = round(o_max_health - dmg['DMG'])
                                                        o_defense = round(o_defense + (dmg['DMG'] * .5))
                                                        o_attack = round(o_attack + (dmg['DMG'] * .5))
                                                    elif opet_type == 'STANCE':
                                                        tempattack = dmg['DMG']
                                                        o_attack = o_defense
                                                        o_defense = tempattack
                                                    elif opet_type == 'CONFUSE':
                                                        tempattack = dmg['DMG']
                                                        t_attack = t_defense
                                                        t_defense = tempattack
                                                    elif opet_type == 'BLINK':
                                                        o_stamina = round(o_stamina - dmg['DMG'])
                                                        t_stamina = round(t_stamina + dmg['DMG'])
                                                    elif opet_type == 'SLOW':
                                                        tempstam = round(t_stamina + dmg['DMG'])
                                                        o_stamina = round(o_stamina - dmg['DMG'])
                                                        t_stamina = o_stamina
                                                        o_stamina = tempstam
                                                    elif opet_type == 'HASTE':
                                                        tempstam = round(t_stamina - dmg['DMG'])
                                                        o_stamina = round(o_stamina + dmg['DMG'])
                                                        t_stamina = o_stamina
                                                        o_stamina = tempstam
                                                    elif opet_type == 'SOULCHAIN':
                                                        o_stamina = round(dmg['DMG'])
                                                        t_stamina = o_stamina
                                                    elif opet_type == 'GAMBLE':
                                                        o_health = round(dmg['DMG'])
                                                        t_health = o_health
                                                    elif opet_type == 'FEAR':
                                                        o_max_health = round(o_max_health - dmg['DMG'])
                                                        t_defense = round(t_defense - (dmg['DMG'] * .5))
                                                        t_attack = round(t_attack - (dmg['DMG'] * .5))
                                                    elif opet_type == 'WAVE':
                                                        t_health = round(t_health - dmg['DMG'])
                                                    elif opet_type == 'BLAST':
                                                        if dmg['DMG'] >= 100:
                                                            dmg['DMG'] = 100
                                                        t_health = round(t_health - dmg['DMG'])
                                                    elif opet_type == 'CREATION':
                                                        o_max_health = round(o_max_health + dmg['DMG'])
                                                        o_health = round(o_health + dmg['DMG'])
                                                    elif opet_type == 'DESTRUCTION':
                                                        if dmg['DMG'] >= 100:
                                                            dmg['DMG'] = 100
                                                        t_max_health = round(t_max_health - dmg['DMG'])
                                                        if t_max_health <=1:
                                                            t_max_health = 1
                
                                                    o_stamina = o_stamina - int(dmg['STAMINA_USED'])

                                                    if o_universe == "Persona":
                                                        petdmg = damage_cal(t_opponent_affinities, basic_attack_name, omove1_element, o_universe, o_card, o_1, o_attack, o_defense,
                                                                            t_defense, o_stamina, o_enhancer_used, o_health,
                                                                            t_health, t_stamina, o_max_health, t_attack,
                                                                            o_special_move_description, turn_total,
                                                                            ocard_lvl_ap_buff, None)
                                                        t_health = t_health - petdmg['DMG']

                                                        embedVar = discord.Embed(
                                                            title=f"**Persona!**\n{opet_name} was summoned from {o_card}'s soul dealing **{petdmg['DMG']}** damage!!",
                                                            colour=0xe91e63)
                                                        await battle_msg.delete(delay=None)
                                                        if not operformance:
                                                            summon_file = showsummon(opet_image, opet_name, dmg['MESSAGE'], opet_lvl, opet_bond)
                                                            embedVar.set_image(url="attachment://pet.png")
                                                            # await asyncio.sleep(2)
                                                            # battle_msg = await private_channel.send(embed=embedVar, file=summon_file)
                                                            # await asyncio.sleep(2)
                                                        #embedVar.set_image(url="attachment://pet.png")
                                                        previous_moves.append(f"(**{turn_total}**) 🩸 **Persona**! : **{opet_name}** was summoned from **{o_card}'s** soul dealing **{petdmg['DMG']}** damage!\n**{t_card}** summon disabled!")
                                                        t_pet_used = True
                                                        if not operformance:
                                                            await asyncio.sleep(2)
                                                            battle_msg = await private_channel.send(embed=embedVar, file=summon_file)
                                                            await asyncio.sleep(2)
                                                            await battle_msg.delete(delay=None)
                                                        await button_ctx.defer(ignore=True)
                                                        

                                                    else:
                                                        embedVar = discord.Embed(
                                                            title=f"{o_card} Summoned 🧬 **{opet_name}**",
                                                            colour=0xe91e63)
                                                        await battle_msg.delete(delay=None)
                                                        if not operformance:
                                                            summon_file = showsummon(opet_image, opet_name, dmg['MESSAGE'], opet_lvl, opet_bond)
                                                            
                                                        embedVar.set_image(url="attachment://pet.png")
                                                        previous_moves.append(f"(**{turn_total}**) **{o_card}** Summoned 🧬 **{opet_name}**: {dmg['MESSAGE']}")
                                                        
                                                        if not operformance:
                                                            await asyncio.sleep(2)
                                                            battle_msg = await private_channel.send(embed=embedVar, file=summon_file)
                                                            await asyncio.sleep(2)
                                                            await battle_msg.delete(delay=None)
                                                        await button_ctx.defer(ignore=True)
                                                        
                                                    turn = 0
                                                else:
                                                    previous_moves.append(f"(**{turn_total}**) 🧬 **{opet_name}** needs a turn to rest...")
                                                    await button_ctx.defer(ignore=True)
                                                    turn = 0
                                            else:
                                                previous_moves.append(f"(**{turn_total}**) 🧬 **{opet_name}** needs a turn to rest...")
                                                await button_ctx.defer(ignore=True)
                                        
                                        elif button_ctx.custom_id == "0": 
                                            if o_universe == "Persona":
                                                o_stamina = o_stamina
                                                o_block_used = True
                                                o_defense = round(o_defense * 2)
                                                previous_moves.append(f"(**{turn_total}**) **{o_pet}:** Blocked 🛡️")
                                                turn_total = turn_total + 1
                                                turn = 1
                                                if botActive and tutorial_block==False:
                                                    tutorial_block=True
                                                    embedVar = discord.Embed(title=f"🛡️Blocking!",
                                                                            description=f"🛡️**Blocking** cost **20 ST(Stamina)** to Double your **DEF** until your next turn!",
                                                                            colour=0xe91e63)
                                                    embedVar.add_field(name=f"**Engagements**",
                                                                    value="You will take less DMG when your **DEF** is greater than your opponenents **ATK**")
                                                    embedVar.add_field(name=f"**Engagement Insight**",
                                                                    value="❕: %50-%75 of AP\n💢: %75-%110 AP\n‼️: %90-%120 AP")
                                                    embedVar.set_footer(
                                                        text=f"Use 🛡️Block strategically to defend against your opponents strongest abilities!")
                                                    await button_ctx.send(embed=embedVar)
                                                    await asyncio.sleep(2)
                                                else:
                                                    await button_ctx.defer(ignore=True)
                                            elif o_stamina >= 20:
                                                if o_universe == "Attack On Titan":
                                                    previous_moves.append(f"(**{turn_total}**) **Rally** 🩸 ! **{o_card}** Increased Max Health ❤️")
                                                    o_max_health = round(o_max_health + 100)
                                                    o_health = o_health + 100

                                                if o_universe == "Bleach":
                                                    dmg = damage_cal(t_opponent_affinities, basic_attack_name, omove1_element, o_universe, o_card, o_1, o_attack, o_defense, t_defense, o_stamina,
                                                                    o_enhancer_used, o_health, t_health, t_stamina, o_max_health,
                                                                    t_attack, o_special_move_description, turn_total,
                                                                    ocard_lvl_ap_buff, None)
                                                    
                                                    previous_moves.append(f"(**{turn_total}**) **{o_card}** Exerted their 🩸 Spiritual Pressure - {dmg['MESSAGE']}")
                                                    if dmg['REPEL']:
                                                        o_health = o_health - dmg['DMG']
                                                    elif dmg['ABSORB']:
                                                        t_health = t_health + dmg['DMG']
                                                    elif dmg['ELEMENT'] == water_element:
                                                        if omove1_element == water_element:
                                                            o_basic_water_buff = o_basic_water_buff + 25
                                                        if omove2_element == water_element:
                                                            o_special_water_buff = o_special_water_buff + 25
                                                        if omove3_element == water_element:
                                                            o_ultimate_water_buff = o_ultimate_water_buff + 25
                                                        t_health = t_health - dmg['DMG']
                                                        

                                                    elif dmg['ELEMENT'] == time_element:
                                                        o_stamina = 0
                                                        t_health = t_health - dmg['DMG']

                                                    elif dmg['ELEMENT'] == earth_element:
                                                        o_defense = o_defense + (dmg['DMG'] * .20)
                                                        t_health = t_health - dmg['DMG']

                                                    elif dmg['ELEMENT'] == death_element:
                                                        t_max_health = t_max_health - (dmg['DMG'] * .07)
                                                        t_health = t_health - dmg['DMG']

                                                    elif dmg['ELEMENT'] == light_element:
                                                        o_stamina = round(o_stamina + (dmg['STAMINA_USED'] / 2))
                                                        t_health = t_health - dmg['DMG']

                                                    elif dmg['ELEMENT'] == dark_element:
                                                        o_stamina = o_stamina + 5
                                                        t_stamina = t_stamina - 5
                                                        t_health = t_health - dmg['DMG']

                                                    elif dmg['ELEMENT'] == life_element:
                                                        o_health = o_health + (dmg['DMG'] * .15)
                                                        t_health = t_health - dmg['DMG']

                                                    elif dmg['ELEMENT'] == recoil_element:
                                                        o_health = o_health - (dmg['DMG'] * .25)
                                                        t_health = t_health - dmg['DMG']


                                                    elif dmg['ELEMENT'] == psychic_element:
                                                        t_defense = t_defense - (dmg['DMG'] * .08)
                                                        t_attack = t_attack - (dmg['DMG'] * .08)
                                                        t_health = t_health - dmg['DMG']

                                                    elif dmg['ELEMENT'] == fire_element:
                                                        o_burn_dmg = o_burn_dmg + round(dmg['DMG'] * .20)
                                                        t_health = t_health - dmg['DMG']


                                                    elif dmg['ELEMENT'] == electric_element:
                                                        o_shock_buff = o_shock_buff +  (dmg['DMG'] * .07)
                                                        t_health = t_health - dmg['DMG']

                                                    elif dmg['ELEMENT'] == poison_element:
                                                        if o_poison_dmg <= 100:
                                                            o_poison_dmg = o_poison_dmg + 8
                                                        t_health = t_health - dmg['DMG']

                                                    elif dmg['ELEMENT'] == ice_element:
                                                        o_ice_counter = o_ice_counter + 1
                                                        if o_ice_counter == 3:
                                                            o_freeze_enh = True
                                                            o_ice_counter = 0
                                                        t_health = t_health - dmg['DMG']

                                                    elif dmg['ELEMENT'] == bleed_element:
                                                        o_bleed_counter = o_bleed_counter + 1
                                                        if o_bleed_counter == 5:
                                                            o_bleed_hit = True
                                                            o_bleed_counter = 0
                                                        t_health = t_health - dmg['DMG']
                                                        
                                                    elif dmg['ELEMENT'] == gravity_element:
                                                        o_gravity_hit = True
                                                        t_health = t_health - dmg['DMG']
                                                    
                                                    else:
                                                        t_health = t_health - dmg['DMG']


                                                o_stamina = o_stamina - 20
                                                o_block_used = True
                                                o_defense = round(o_defense * 2)
                                                previous_moves.append(f"(**{turn_total}**) **{o_card}:** Blocked 🛡️")
                                                turn_total = turn_total + 1
                                                turn = 1
                                                if botActive and tutorial_block==False:
                                                    tutorial_block=True
                                                    embedVar = discord.Embed(title=f"🛡️Blocking!",
                                                                            description=f"🛡️**Blocking** cost **20 ST(Stamina)** to Double your **DEF** until your next turn!",
                                                                            colour=0xe91e63)
                                                    embedVar.add_field(name=f"**Engagements**",
                                                                    value="You will take less DMG when your **DEF** is greater than your opponenents **ATK**")
                                                    embedVar.add_field(name=f"**Engagement Insight**",
                                                                    value="❕: %50-%75 of AP\n💢: %75-%110 AP\n‼️: %90-%120 AP")
                                                    embedVar.set_footer(
                                                        text=f"Use 🛡️Block strategically to defend against your opponents strongest abilities!")
                                                    await button_ctx.send(embed=embedVar)
                                                    await asyncio.sleep(2)
                                                else:
                                                    await button_ctx.defer(ignore=True)
                                            else:
                                                previous_moves.append(f"(**{turn_total}**) **{o_card}** is too tired to block.")
                                                await button_ctx.defer(ignore=True)
                                                turn = 0

                                        if button_ctx.custom_id != "5" and button_ctx.custom_id != "6" and button_ctx.custom_id != "0" and button_ctx.custom_id != "q"and button_ctx.custom_id in options:
                                            # If you have enough stamina for move, use it
                                            if dmg['CAN_USE_MOVE']:
                                                if dmg['ENHANCE']:
                                                    enh_type = dmg['ENHANCED_TYPE']
                                                    if enh_type == 'ATK':
                                                        o_attack = round(o_attack + dmg['DMG'])
                                                    elif enh_type == 'DEF':
                                                        o_defense = round(o_defense + dmg['DMG'])
                                                    elif enh_type == 'STAM':
                                                        o_stamina = round(o_stamina + dmg['DMG'])
                                                    elif enh_type == 'HLT':
                                                        o_health = round(o_health + dmg['DMG'])
                                                    elif enh_type == 'LIFE':
                                                        o_health = round(o_health + dmg['DMG'])
                                                        t_health = round(t_health - dmg['DMG'])
                                                    elif enh_type == 'DRAIN':
                                                        o_stamina = round(o_stamina + dmg['DMG'])
                                                        t_stamina = round(t_stamina - dmg['DMG'])
                                                    elif enh_type == 'FLOG':
                                                        o_attack = round(o_attack + dmg['DMG'])
                                                        t_attack = round(t_attack - dmg['DMG'])
                                                    elif enh_type == 'WITHER':
                                                        o_defense = round(o_defense + dmg['DMG'])
                                                        t_defense = round(t_defense - dmg['DMG'])
                                                    elif enh_type == 'RAGE':
                                                        o_defense = round(o_defense - dmg['DMG'])
                                                        o_attack = round(o_attack + dmg['DMG'])
                                                    elif enh_type == 'BRACE':
                                                        o_defense = round(o_defense + dmg['DMG'])
                                                        o_attack = round(o_attack - dmg['DMG'])
                                                    elif enh_type == 'BZRK':
                                                        o_health = round(o_health - dmg['DMG'])
                                                        o_attack = round(o_attack + dmg['DMG'])
                                                    elif enh_type == 'CRYSTAL':
                                                        o_health = round(o_health - dmg['DMG'])
                                                        o_defense = round(o_defense + dmg['DMG'])
                                                    elif enh_type == 'GROWTH':
                                                        o_max_health = round(o_max_health - dmg['DMG'])
                                                        o_defense = round(o_defense + (dmg['DMG'] * .5))
                                                        o_attack = round(o_attack + (dmg['DMG'] * .5))
                                                    elif enh_type == 'STANCE':
                                                        tempattack = dmg['DMG']
                                                        o_attack = o_defense
                                                        o_defense = tempattack
                                                    elif enh_type == 'CONFUSE':
                                                        tempattack = dmg['DMG']
                                                        t_attack = t_defense
                                                        t_defense = tempattack
                                                    elif enh_type == 'BLINK':
                                                        o_stamina = round(o_stamina - dmg['DMG'])
                                                        t_stamina = round(t_stamina + dmg['DMG'])
                                                    elif enh_type == 'SLOW':
                                                        tempstam = round(t_stamina + dmg['DMG'])
                                                        o_stamina = round(o_stamina - dmg['DMG'])
                                                        t_stamina = o_stamina
                                                        o_stamina = tempstam
                                                    elif enh_type == 'HASTE':
                                                        tempstam = round(t_stamina - dmg['DMG'])
                                                        o_stamina = round(o_stamina + dmg['DMG'])
                                                        t_stamina = o_stamina
                                                        o_stamina = tempstam
                                                    elif enh_type == 'SOULCHAIN':
                                                        o_stamina = round(dmg['DMG'])
                                                        t_stamina = o_stamina
                                                    elif enh_type == 'GAMBLE':
                                                        o_health = round(dmg['DMG'])
                                                        t_health = o_health
                                                    elif enh_type == 'FEAR':
                                                        o_max_health = round(o_max_health - dmg['DMG'])
                                                        t_defense = round(t_defense - (dmg['DMG'] * .5))
                                                        t_attack = round(t_attack - (dmg['DMG'] * .5))
                                                    elif enh_type == 'WAVE':
                                                        t_health = round(t_health - dmg['DMG'])
                                                    elif enh_type == 'BLAST':
                                                        t_health = round(t_health - dmg['DMG'])
                                                    elif enh_type == 'CREATION':
                                                        o_max_health = round(o_max_health + dmg['DMG'])
                                                        o_health = round(o_health + dmg['DMG'])
                                                    elif enh_type == 'DESTRUCTION':
                                                        t_max_health = round(t_max_health - dmg['DMG'])
                                                        # o_max_health = round(o_max_health - dmg['DMG'])
                                                        if t_max_health <=1:
                                                            t_max_health = 1
                                                        # if o_max_health <=1:
                                                        #     o_max_health = 1
                                                    if enh_type in Stamina_Enhancer_Check or enh_type in Time_Enhancer_Check or enh_type in Control_Enhancer_Check:
                                                        o_stamina = o_stamina
                                                    else:
                                                        o_stamina = o_stamina - int(dmg['STAMINA_USED'])

                                                    embedVar = discord.Embed(title=f"{dmg['MESSAGE']}", colour=embed_color_o)
                                                    previous_moves.append(f"(**{turn_total}**) **{o_card}**: 🦠 {dmg['MESSAGE']}")
                                                    # if botActive:
                                                        # await asyncio.sleep(2)
                                                    turn_total = turn_total + 1
                                                    turn = 1
                                                    
                                                    await button_ctx.defer(ignore=True)
                                                elif dmg['DMG'] == 0:
                                                    o_stamina = o_stamina - int(dmg['STAMINA_USED'])

                                                    embedVar = discord.Embed(title=f"{dmg['MESSAGE']}", colour=embed_color_o)
                                                    if oarm_barrier_active and dmg['ELEMENT'] != psychic_element:
                                                        oarm_barrier_active=False
                                                        embedVar.add_field(name=f"{o_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                        previous_moves.append(f"(**{turn_total}**) **{o_card}'s** **Barrier** Disabled!")
                                                    previous_moves.append(f"(**{turn_total}**) **{o_card}**: {dmg['MESSAGE']}")
                                                    turn_total = turn_total + 1
                                                    turn = 1
                                                    
                                                    await button_ctx.defer(ignore=True)
                                                else:
                                                    if t_universe == "Naruto" and t_stamina < 10:
                                                        t_stored_damage = round(dmg['DMG'])
                                                        t_naruto_heal_buff = t_naruto_heal_buff + t_stored_damage
                                                        t_health = t_health
                                                        embedVar = discord.Embed(title=f"{t_card}: Substitution Jutsu", description=f"{o_card} strikes a log", colour=0xe91e63)
                                                        if oarm_barrier_active and dmg['ELEMENT'] != psychic_element:
                                                            oarm_barrier_active=False
                                                            embedVar.add_field(name=f"{o_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                            previous_moves.append(f"(**{turn_total}**) **{o_card}**'s 💠 Barrier Disabled!")

                                                        previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸: Substitution Jutsu")
                                                        if not t_used_resolve:
                                                            previous_moves.append(f"(**{turn_total}**) 🩸**{t_stored_damage}** Hasirama Cells stored. 🩸**{t_naruto_heal_buff}** total stored.")

                                                       # await button_ctx.defer(ignore=True)
                                                    elif tarm_shield_active and dmg['ELEMENT'] != dark_element:
                                                        if tshield_value > 0:
                                                            tshield_value = tshield_value -dmg['DMG']
                                                            t_health = t_health 
                                                            if tshield_value <=0:
                                                                embedVar = discord.Embed(title=f"{t_card}'s' **Shield** Shattered!", description=f"{o_card} breaks the **Shield**!", colour=0xe91e63)
                                                                previous_moves.append(f"(**{turn_total}**) 🌐**{t_card}**: Shield Shattered!")
                                                                if oarm_barrier_active and dmg['ELEMENT'] != psychic_element:
                                                                    oarm_barrier_active=False
                                                                    embedVar.add_field(name=f"{o_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                    previous_moves.append(f"(**{turn_total}**) **{o_card}**'s 💠 Barrier Disabled!")
                                                                
                                                         #       await button_ctx.defer(ignore=True)
                                                                tarm_shield_active = False
                                                            else:
                                                                embedVar = discord.Embed(title=f"{t_card} Activates **Shield** 🌐", description=f"**{o_card}** strikes the Shield 🌐\n**{tshield_value} Shield** Left!", colour=0xe91e63)
                                                                previous_moves.append(f"(**{turn_total}**) **{o_card}** strikes **{t_card}**'s Shield 🌐\n**{tshield_value} Shield** Left!")
                                                                if oarm_barrier_active and dmg['ELEMENT'] != psychic_element:
                                                                    oarm_barrier_active=False
                                                                    embedVar.add_field(name=f"{o_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                    previous_moves.append(f"(**{turn_total}**) **{o_card}**'s 💠 Barrier Disabled!")
                                                                
                                                         #       await button_ctx.defer(ignore=True)

                                                    elif tarm_barrier_active and dmg['ELEMENT'] != psychic_element:
                                                        if tbarrier_count >1:
                                                            t_health = t_health 
                                                            embedVar = discord.Embed(title=f"{t_card} Activates **Barrier** 💠", description=f"{o_card}'s attack **Nullified**!\n **{tbarrier_count - 1} Barriers** remain!", colour=0xe91e63)
                                                            previous_moves.append(f"(**{turn_total}**) **{t_card}** Activates Barrier 💠 {o_card}'s attack **Nullified**!\n **{tbarrier_count - 1} Barriers** remain!")
                                                            if oarm_barrier_active and dmg['ELEMENT'] != psychic_element:
                                                                oarm_barrier_active=False
                                                                embedVar.add_field(name=f"{o_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                previous_moves.append(f"(**{turn_total}**) **{o_card}**'s 💠 Barrier Disabled!")
                                                            
                                                      #      await button_ctx.defer(ignore=True)
                                                            tbarrier_count = tbarrier_count - 1
                                                        elif tbarrier_count==1:
                                                            embedVar = discord.Embed(title=f"{t_card}'s **Barrier** Broken!", description=f"{o_card} destroys the **Barrier**", colour=0xe91e63)
                                                            previous_moves.append(f"(**{turn_total}**) **{t_card}**'s Barrier Broken!")
                                                            tbarrier_count = tbarrier_count - 1
                                                            if oarm_barrier_active and dmg['ELEMENT'] != psychic_element:
                                                                oarm_barrier_active=False
                                                                embedVar.add_field(name=f"{o_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                previous_moves.append(f"(**{turn_total}**) **{o_card}**'s 💠 Barrier Disabled!")
                                                            
                                                    #        await button_ctx.defer(ignore=True)
                                                            tarm_barrier_active = False
                                                    
                                                    elif tarm_parry_active and dmg['ELEMENT'] != earth_element:
                                                        if tparry_count > 1:
                                                            t_health = t_health
                                                            tparry_damage = round(dmg['DMG'])
                                                            t_health = round(t_health - (tparry_damage * .75))
                                                            o_health = round(o_health - (tparry_damage * .25))
                                                            tparry_count = tparry_count - 1
                                                            embedVar = discord.Embed(title=f"{t_card} Activates **Parry** 🔄", description=f"{o_card} takes {round(tparry_damage * .25)}! DMG\n **{tparry_count} Parries** to go!!", colour=0xe91e63)
                                                            previous_moves.append(f"(**{turn_total}**) **{t_card}** Activates Parry 🔄  {o_card} takes {round(tparry_damage * .25)}! DMG\n **{tparry_count} Parries** to go!!")
                                                            if oarm_barrier_active and dmg['ELEMENT'] != psychic_element:
                                                                oarm_barrier_active=False
                                                                embedVar.add_field(name=f"{o_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                previous_moves.append(f"(**{turn_total}**) **{o_card}**'s 💠 Barrier Disabled!")
                                                            
                                                    #        await button_ctx.defer(ignore=True)
                                                            
                                                        elif tparry_count==1:
                                                            t_health = t_health
                                                            tparry_damage = round(dmg['DMG'])
                                                            t_health = round(t_health - (tparry_damage * .75))
                                                            o_health = round(o_health - (tparry_damage * .25))
                                                            embedVar = discord.Embed(title=f"{t_card} **Parry** Penetrated!!", description=f"{o_card} takes {round(tparry_damage * .25)}! DMG and breaks the **Parry**", colour=0xe91e63)
                                                            previous_moves.append(f"(**{turn_total}**) **{t_card}** Parry Penetrated! **{o_card}** takes **{round(tparry_damage * .25)}**! DMG and breaks the **Parry**")
                                                            tparry_count = tparry_count - 1
                                                            if oarm_barrier_active and dmg['ELEMENT'] != psychic_element:
                                                                oarm_barrier_active=False
                                                                embedVar.add_field(name=f"{o_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                previous_moves.append(f"(**{turn_total}**) **{o_card}**'s 💠 Barrier Disabled!")
                                                            
                                                   #         await button_ctx.defer(ignore=True)
                                                            tarm_parry_active = False
                                                    
                                                    else:
                                                        if dmg['REPEL']:
                                                            o_health = o_health - dmg['DMG']
                                                        elif dmg['ABSORB']:
                                                            t_health = t_health + dmg['DMG']
                                                        elif dmg['ELEMENT'] == water_element:
                                                            if omove1_element == water_element:
                                                                o_basic_water_buff = o_basic_water_buff + 25
                                                            if omove2_element == water_element:
                                                                o_special_water_buff = o_special_water_buff + 25
                                                            if omove3_element == water_element:
                                                                o_ultimate_water_buff = o_ultimate_water_buff + 25
                                                            t_health = t_health - dmg['DMG']
                                                            

                                                        elif dmg['ELEMENT'] == time_element:
                                                            o_stamina = 0
                                                            t_health = t_health - dmg['DMG']

                                                        elif dmg['ELEMENT'] == earth_element:
                                                            o_defense = o_defense + (dmg['DMG'] * .20)
                                                            t_health = t_health - dmg['DMG']

                                                        elif dmg['ELEMENT'] == death_element:
                                                            t_max_health = t_max_health - (dmg['DMG'] * .07)
                                                            t_health = t_health - dmg['DMG']

                                                        elif dmg['ELEMENT'] == light_element:
                                                            o_stamina = round(o_stamina + (dmg['STAMINA_USED'] / 2))
                                                            t_health = t_health - dmg['DMG']

                                                        elif dmg['ELEMENT'] == dark_element:
                                                            o_stamina = o_stamina + 5
                                                            t_stamina = t_stamina - 5
                                                            t_health = t_health - dmg['DMG']

                                                        elif dmg['ELEMENT'] == life_element:
                                                            o_health = o_health + (dmg['DMG'] * .15)
                                                            t_health = t_health - dmg['DMG']

                                                        elif dmg['ELEMENT'] == recoil_element:
                                                            o_health = o_health - (dmg['DMG'] * .25)
                                                            t_health = t_health - dmg['DMG']


                                                        elif dmg['ELEMENT'] == psychic_element:
                                                            t_defense = t_defense - (dmg['DMG'] * .08)
                                                            t_attack = t_attack - (dmg['DMG'] * .08)
                                                            t_health = t_health - dmg['DMG']

                                                        elif dmg['ELEMENT'] == fire_element:
                                                            o_burn_dmg = o_burn_dmg + round(dmg['DMG'] * .20)
                                                            t_health = t_health - dmg['DMG']


                                                        elif dmg['ELEMENT'] == electric_element:
                                                            o_shock_buff = o_shock_buff +  (dmg['DMG'] * .07)
                                                            t_health = t_health - dmg['DMG']

                                                        elif dmg['ELEMENT'] == poison_element:
                                                            if o_poison_dmg <= 100:
                                                                o_poison_dmg = o_poison_dmg + 8
                                                            t_health = t_health - dmg['DMG']

                                                        elif dmg['ELEMENT'] == ice_element:
                                                            o_ice_counter = o_ice_counter + 1
                                                            if o_ice_counter == 3:
                                                                o_freeze_enh = True
                                                                o_ice_counter = 0
                                                            t_health = t_health - dmg['DMG']

                                                        elif dmg['ELEMENT'] == bleed_element:
                                                            o_bleed_counter = o_bleed_counter + 1
                                                            if o_bleed_counter == 5:
                                                                o_bleed_hit = True
                                                                o_bleed_counter = 0
                                                            t_health = t_health - dmg['DMG']
                                                            
                                                        elif dmg['ELEMENT'] == gravity_element:
                                                            o_gravity_hit = True
                                                            t_health = t_health - dmg['DMG']
                                                        
                                                        else:
                                                            t_health = t_health - dmg['DMG']



                                                        # t_health = t_health - dmg['DMG']
                                                        embedVar = discord.Embed(title=f"{dmg['MESSAGE']}", colour=embed_color_o)
                                                        previous_moves.append(f"(**{turn_total}**) **{o_card}**: {dmg['MESSAGE']}")
                                                        if oarm_siphon_active:
                                                            siphon_damage = (dmg['DMG'] * .10) + osiphon_value
                                                            o_health = round(o_health + siphon_damage)
                                                            if o_health >= o_max_health:
                                                                o_health = o_max_health
                                                                previous_moves.append(f"(**{turn_total}**) **{o_card}**: 💉 Siphoned **Full Health!**")
                                                            else:
                                                                previous_moves.append(f"(**{turn_total}**) **{o_card}**: 💉 Siphoned **{round(siphon_damage)}** Health!")
                                                        if oarm_barrier_active and dmg['ELEMENT'] != psychic_element:
                                                            oarm_barrier_active=False
                                                            embedVar.add_field(name=f"{o_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                            previous_moves.append(f"(**{turn_total}**) **{o_card}**'s 💠 Barrier Disabled!")
                                                #        await button_ctx.defer(ignore=True)
                                                    if t_health <= 0:
                                                        if t_final_stand==True:
                                                            if t_universe == "Dragon Ball Z":
                                                                embedVar = discord.Embed(title=f"{t_card}'s LAST STAND", description=f"{t_card} FINDS RESOLVE", colour=0xe91e63)
                                                                embedVar.add_field(name=f"**{t_card}** Resolved and continues to fight", value="All stats & stamina increased")
                                                                if oarm_barrier_active and dmg['ELEMENT'] != psychic_element:
                                                                    oarm_barrier_active=False
                                                                    embedVar.add_field(name=f"{o_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                    previous_moves.append(f"(**{turn_total}**) **{o_card}**'s 💠 Barrier Disabled!")
                                                                previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 Transformation: Last Stand!!!")
                                                #             await button_ctx.defer(ignore=True)
                                                                t_health = int(.75 * (t_attack + t_defense))
                                                                
                                                                t_used_resolve = True
                                                                t_used_focus = True
                                                                t_final_stand = False
                                                                o_stamina = o_stamina - dmg['STAMINA_USED']
                                                                turn_total = turn_total + 1
                                                                turn = 1
                                                        else:
                                                            t_health = 0
                                                            o_stamina = o_stamina - dmg['STAMINA_USED']
                                                            turn_total = turn_total + 1
                                                       #     await button_ctx.defer(ignore=True)
                                                    else:
                                                        o_stamina = o_stamina - dmg['STAMINA_USED']
                                                        turn_total = turn_total + 1
                                                        turn = 1
                                                    await button_ctx.defer(ignore=True)    
                                            else:
                                                previous_moves.append(f"(**{turn_total}**) **{o_card}**: Not enough Stamina to use this ability.")
                                                # embedVar = discord.Embed(title=emessage,
                                                #                         description=f"Use abilities to Increase `STAM` or enter `FOCUS STATE`!",
                                                #                         colour=0xe91e63)
                                                turn = 0
                                                await button_ctx.defer(ignore=True)
                                    # except Exception as e:
                                    #     await ctx.send(f"{ctx.author.mention}, the match has ended. ")
                                    #     await button_ctx.defer(ignore=True)
                                    #     return
                                    except asyncio.TimeoutError:
                                        if mode in PVP_MODES and not tutorial:
                                            await ctx.author.send(f"{ctx.author.mention} your Battle was closed. You must interact before the timeout!")
                                            await ctx.send(f"{ctx.author.mention} your Battle was closed. You must interact before the timeout!")
                                        else:
                                            await ctx.author.send(f"{ctx.author.mention} your Tutorial Battle was closed. You must interact before the timeout!")
                                            await ctx.send(f"{ctx.author.mention} your Tutorial Battle was closed. You must interact before the timeout!")
                                        previous_moves.append(f"(**{turn_total}**) 💨 **{o_card}** Fled...")
                                        o_health = 0
                                    except Exception as ex:
                                        trace = []
                                        tb = ex.__traceback__
                                        while tb is not None:
                                            trace.append({
                                                "filename": tb.tb_frame.f_code.co_filename,
                                                "name": tb.tb_frame.f_code.co_name,
                                                "lineno": tb.tb_lineno
                                            })
                                            tb = tb.tb_next
                                        print(str({
                                            'type': type(ex).__name__,
                                            'message': str(ex),
                                            'trace': trace
                                        }))
                                        guild = self.bot.get_guild(main.guild_id)
                                        channel = guild.get_channel(main.guild_channel)
                                        await channel.send(f"'PLAYER': **{str(ctx.author)}**, 'GUILD': **{str(ctx.author.guild)}**, TYPE: {type(ex).__name__}, MESSAGE: {str(ex)}, TRACE: {trace}")

                
                            # Player 2 Turn Start
                            elif turn == 1:
                                if o_bleed_hit:
                                    o_bleed_hit = False
                                    bleed_dmg = 5 * turn_total
                                    t_health = t_health - bleed_dmg
                                    previous_moves.append(f"🩸 **{t_card}** shredded for **{round(bleed_dmg)}** bleed dmg...")
                                if o_burn_dmg > 3:
                                    t_health = t_health - o_burn_dmg
                                    previous_moves.append(f"🔥 **{t_card}** burned for **{round(o_burn_dmg)}** dmg...")
                                if o_freeze_enh:
                                    previous_moves.append(f"❄️ **{t_card}** has been frozen for a turn...")
                                    turn_total = turn_total + 1
                                    turn = 0
                                    continue

                                if o_poison_dmg:
                                    t_health = t_health - o_poison_dmg
                                    previous_moves.append(f"🧪 **{t_card}** poisoned for **{o_poison_dmg}** dmg...")

                                if t_gravity_hit:
                                    t_gravity_hit = False
                                    
                                o_burn_dmg = round(o_burn_dmg / 2)
                                t_freeze_enh = False

                                if t_title_passive_type:
                                    if t_title_passive_type == "HLT":
                                        t_health = round(t_health + ((t_title_passive_value / 100) * t_health))
                                    if t_title_passive_type == "LIFE":
                                        if t_max_health != t_health:
                                            o_health = round(o_health - ((t_title_passive_value / 100) * o_health))
                                            t_health = round(t_health + ((t_title_passive_value / 100) * o_health))
                                    if t_title_passive_type == "ATK":
                                        t_attack = t_attack + t_title_passive_value
                                    if t_title_passive_type == "DEF":
                                        t_defense = t_defense + t_title_passive_value
                                    if t_title_passive_type == "STAM":
                                        if t_stamina > 15:
                                            t_stamina = t_stamina + t_title_passive_value
                                    if t_title_passive_type == "DRAIN":
                                        if t_stamina > 15:
                                            t_stamina = t_stamina + t_title_passive_value
                                            o_stamina = o_stamina - t_title_passive_value
                                    if t_title_passive_type == "FLOG":
                                        t_attack = round(t_attack + ((t_title_passive_value / 100) * o_attack))
                                        o_attack = round(o_attack - ((t_title_passive_value / 100) * o_attack))
                                    if t_title_passive_type == "WITHER":
                                        t_defense = round(t_defense + ((t_title_passive_value / 100) * o_defense))
                                        o_defense = round(o_defense - ((t_title_passive_value / 100) * o_defense))
                                    if t_title_passive_type == "RAGE":
                                        t_defense = round(t_defense - ((t_title_passive_value / 100) * t_defense))
                                        t_attack = round(t_attack + ((t_title_passive_value / 100) * t_defense))
                                    if t_title_passive_type == "BRACE":
                                        t_defense = round(t_defense + ((t_title_passive_value / 100) * t_attack))
                                        t_attack = round(t_attack - ((t_title_passive_value / 100) * t_attack))
                                    if t_title_passive_type == "BZRK":
                                        t_health = round(t_health - ((t_title_passive_value / 100) * t_health))
                                        t_attack = round(t_attack + ((t_title_passive_value / 100) * t_health))
                                    if t_title_passive_type == "CRYSTAL":
                                        t_health = round(t_health - ((t_title_passive_value / 100) * t_health))
                                        t_defense = round(t_defense + ((t_title_passive_value / 100) * t_health))
                                    if t_title_passive_type == "FEAR":
                                        t_health = t_health - t_title_passive_value
                                        o_defense = o_defense - (t_title_passive_value / 2)
                                        o_attack = o_attack - (t_title_passive_value / 2)
                                    if t_title_passive_type == "GROWTH":
                                        t_health = t_health - t_title_passive_value
                                        t_defense = t_defense + (t_title_passive_value / 2)
                                        t_attack = t_attack + (t_title_passive_value / 2)
                                    if t_title_passive_type == "SLOW":
                                        if turn_total != 0:
                                            turn_total = turn_total - 1
                                    if t_title_passive_type == "HASTE":
                                        turn_total = turn_total + 1
                                    if t_title_passive_type == "STANCE":
                                        tempattack = t_attack + t_title_passive_value
                                        t_attack = t_defense
                                        t_defense = tempattack
                                    if t_title_passive_type == "CONFUSE":
                                        tempattack = o_attack - t_title_passive_value
                                        o_attack = o_defense
                                        o_defense = tempattack
                                    if t_title_passive_type == "BLINK":
                                        o_stamina = o_stamina + t_title_passive_value
                                        t_stamina = t_stamina - t_title_passive_value
                                if t_card_passive_type:
                                    t_value_for_passive = t_card_tier * .5
                                    t_flao_for_passive = 10 * (t_card_tier * .5)
                                    t_stam_for_passive = 5 * (t_card_tier * .5)
                                    if t_card_passive_type == "HLT":
                                        t_health = round(round(t_health + ((t_value_for_passive / 100) * t_health)))
                                    if t_card_passive_type == "LIFE":
                                        if t_mao_health != t_health:
                                            o_health = round(o_health - ((t_value_for_passive / 100) * o_health))
                                            t_health = round(t_health + ((t_value_for_passive / 100) * o_health))
                                    if t_card_passive_type == "ATK":
                                        t_attack = t_attack + t_flao_for_passive
                                    if t_card_passive_type == "DEF":
                                        t_defense = t_defense + t_flao_for_passive
                                    if t_card_passive_type == "STAM":
                                        if t_stamina > 15:
                                            t_stamina = t_stamina + t_stam_for_passive
                                    if t_card_passive_type == "DRAIN":
                                        if t_stamina > 15:
                                            o_stamina = o_stamina - t_stam_for_passive
                                            t_stamina = t_stamina + t_stam_for_passive
                                    if t_card_passive_type == "FLOG":
                                        o_attack = round(o_attack - ((t_value_for_passive / 100) * o_attack))
                                        t_attack = round(t_attack + ((t_value_for_passive / 100) * o_attack))
                                    if t_card_passive_type == "WITHER":
                                        o_defense = round(o_defense - ((t_value_for_passive / 100) * o_defense))
                                        t_defense = round(t_defense + ((t_value_for_passive / 100) * o_defense))
                                    if t_card_passive_type == "RAGE":
                                        t_defense = round(t_defense - ((t_value_for_passive / 100) * t_defense))
                                        t_attack = round(t_attack + ((t_value_for_passive / 100) * t_defense))
                                    if t_card_passive_type == "BRACE":
                                        t_defense = round(t_defense + ((t_value_for_passive / 100) * t_attack))
                                        t_attack = round(t_attack - ((t_value_for_passive / 100) * t_attack))
                                    if t_card_passive_type == "BZRK":
                                        t_health = round(t_health - ((t_value_for_passive / 100) * t_health))
                                        t_attack = round(t_attack + ((t_value_for_passive / 100) * t_health))
                                    if t_card_passive_type == "CRYSTAL":
                                        t_health = round(t_health - ((t_value_for_passive / 100) * t_health))
                                        t_defense = round(t_defense + ((t_value_for_passive / 100) * t_health))
                                    if t_card_passive_type == "FEAR":
                                        t_health = t_health - t_flao_for_passive
                                        o_defense = o_defense - (t_flao_for_passive / 2)
                                        o_attack = o_attack - (t_flao_for_passive / 2)
                                    if t_card_passive_type == "GROWTH":
                                        t_health = t_health - t_flao_for_passive
                                        t_defense = t_defense + (t_flao_for_passive / 2)
                                        t_attack = t_attack + (t_flao_for_passive / 2)
                                    if t_card_passive_type == "SLOW":
                                        if turn_total != 0:
                                            turn_total = turn_total - 1
                                    if t_card_passive_type == "HASTE":
                                        turn_total = turn_total + 1
                                    if t_card_passive_type == "STANCE":
                                        tempattack = t_attack + t_flao_for_passive
                                        t_attack = t_defense
                                        t_defense = tempattack
                                    if t_card_passive_type == "CONFUSE":
                                        tempattack = o_attack - t_flao_for_passive
                                        o_attack = o_defense
                                        o_defense = tempattack
                                    if t_card_passive_type == "BLINK":
                                        t_stamina = t_stamina - t_stam_for_passive
                                        o_stamina = o_stamina + t_stam_for_passive
                                if o_universe == "Death Note" and turn_total == 0:
                                    embedVar = discord.Embed(title=f"{o_card} Scheduled Death 📓",
                                                            description=f"**{o_card} says**\nYou will die in 50  turns...",
                                                            colour=0xe91e63)
                                    previous_moves.append(f"(**{turn_total}**) **{o_card}** 🩸 Scheduled Death 📓")
                                if t_universe == 'Death Note' and turn_total == 0:
                                    embedVar = discord.Embed(title=f"{o_card} Scheduled Death 📓",
                                                            description=f"**{t_card} says**\nYou will die in 50  turns...",
                                                            colour=0xe91e63)
                                    previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 Scheduled Death 📓")
                                
                                if t_block_used == True:
                                    t_block_used = False
                                    t_defense = int(t_defense / 2)
                                if t_attack <= 25:
                                    t_attack = 25
                                if t_defense <= 30:
                                    t_defense = 30
                                if t_attack >= 9999:
                                    t_attack = 9999
                                if t_defense >= 9999:
                                    t_defense = 9999
                                if t_health >= t_max_health:
                                    t_health = t_max_health
                                if turn_total == 0:
                                    if botActive:
                                        embedVar = discord.Embed(title=f"Welcome to **Anime 🆚+**!",
                                                                description=f"Follow the instructions to learn how to play the Game!",
                                                                colour=0xe91e63)
                                        embedVar.add_field(name="**How do I play?**",
                                                        value="The point of the game is to win **Battles**!\n**To do this**, you need to select moves outmanuevering your opponent to **secure the win**!\n\nSelect a move to get started.\nWhen your :cyclone:**ST (Stamina)** depletes to **0** your Card will **Heal** and enter **Focus State** !")
                                        embedVar.set_footer(
                                            text="Focus State : When card deplete to 0 stamina, they focus to Heal they also gain ATK and DEF ")
                                        await private_channel.send(embed=embedVar)
                                        await asyncio.sleep(2)
                                        t_attack = t_attack - 50
                                        t_defense = t_defense - 50
                                    elif mode == "RAID":
                                        embedVar = discord.Embed(title=f"Raiding!",
                                                    description=f"Attack the Shield and Claim the Bounty",
                                                    colour=0xe91e63)
                                        embedVar.add_field(name="**Raid Battle Mechanics**",
                                                            value="Raids are PVE battles against a Guilds defender or SHIELD. This player was selected to defend the guild. You will battle their current Build.")
                                        embedVar.set_footer(
                                            text="Be wary, there are no summons allowed in the Association Hall")
                                        await private_channel.send(embed=embedVar)
                                        await asyncio.sleep(2)
                                        embedVar2 = discord.Embed(
                                            title=f"**{o_card}**  🆚 **{t_card}** Shield Defense has begun!",
                                            description=f"{o_card} Says:\n{o_greeting_description}", colour=0xe91e63)
                                        await private_channel.send(embed=embedVar2)
                                    else:
                                        embedVar = discord.Embed(title=f"MATCH START",
                                                                description=f"`{t_card} Says:`\n{t_greeting_description}",
                                                                colour=0xe91e63)
                                        # await ctx.send(embed=embedVar)

                                if t_health <= (t_max_health * .25):
                                    embed_color_t = 0xe74c3c
                                    if t_chainsaw == True:
                                        if t_atk_chainsaw == False:
                                            t_atk_chainsaw = True
                                            t_chainsaw = False
                                            t_defense = t_defense * 2
                                            t_attack = t_attack * 2
                                            embedVar = discord.Embed(title=f"{t_card}'s Devilization",
                                                                    description=f"**{t_card}** Doubles Stats", colour=0xe91e63)
                                            previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸's Devilization")
                                elif t_health <= (t_max_health * .50):
                                    embed_color_t = 0xe67e22
                                    if t_chainsaw == True:
                                        if t_atk_chainsaw == False:
                                            t_atk_chainsaw = True
                                            t_chainsaw = False
                                            t_defense = t_defense * 2
                                            t_attack = t_attack * 2
                                            embedVar = discord.Embed(title=f"{t_card}'s Devilization",
                                                                    description=f"**{t_card}** Doubles Stats", colour=0xe91e63)
                                            previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸's Devilization")
                                elif t_health <= (t_max_health * .75):
                                    embed_color_t = 0xf1c40f
                                else:
                                    embed_color_t = 0x2ecc71

                                # Focus

                                if t_stamina < 10:
                                    t_pet_used = False
                                    t_focus_count = t_focus_count + 1
                                    fortitude = 0.0
                                    low = t_health - (t_health * .90)
                                    if low<= 0:
                                        low = 1
                                    high = t_health - (t_health * .80)
                                    fortitude = round(random.randint(int(low), int(high)))

                                    t_stamina = t_focus
                                    t_healthcalc = round(((t_focus * .40) + (fortitude * 1)) / 2)
                                    t_attackcalc = round(.20 * ((t_focus * .15) + round(fortitude * 1)))
                                    t_defensecalc = round(.20 * ((t_focus * .10) + round(fortitude * 1)))
                                    t_newhealth = 0
                                    healmessage = ""
                                    messagenumber = 0
                                    if t_title_passive_type:
                                        if t_title_passive_type == "GAMBLE":
                                            t_healthcalc = t_title_passive_value
                                        if t_title_passive_type == "SOULCHAIN":
                                            o_stamina = t_title_passive_value
                                            t_stamina = t_title_passive_value
                                            if mode in co_op_modes:
                                                c_stmina = t_title_passive_value


                                    if o_title_passive_type:
                                        if o_title_passive_type == "GAMBLE":
                                            t_healthcalc = o_title_passive_value
                                    
                                    if mode in co_op_modes:
                                        if c_title_passive_type:
                                            if c_title_passive_type == "GAMBLE":
                                                t_healthcalc = c_title_passive_value


                                    if t_universe == "Crown Rift Madness":
                                        healmessage = "yet inner **Madness** drags on..."
                                        messagenumber = 3
                                    else:
                                        if t_health <= t_max_health:
                                            t_newhealth = t_health + t_healthcalc
                                            if t_newhealth > t_max_health:
                                                healmessage = f"recovered!"
                                                messagenumber = 1
                                                t_health = t_max_health
                                            else:
                                                healmessage = f"stopped the bleeding..."
                                                messagenumber = 2
                                                t_health = t_newhealth
                                        else:
                                            healmessage = f"hasn't been touched..."
                                            messagenumber = 0
                                    if not t_used_resolve:
                                        t_attack = t_attack + t_attackcalc
                                        t_defense = t_defense + t_defensecalc
                                    t_used_focus = True
                                    embedVar = discord.Embed(title=f"{t_card} FOCUSED", description=f"**{t_card} says**\n{t_focus_description}", colour=0xe91e63)
                                    embedVar.add_field(name=f"{t_card} focused and {healmessage}", value="All stats & stamina increased")
                                    
                                    previous_moves.append(f"(**{turn_total}**) 🌀 **{t_card}** focused and {healmessage}")
                                    if not t_used_resolve and t_used_focus and t_universe == "Digimon":  # Digimon Universal Trait
                                        # fortitude or luck is based on health
                                        fortitude = 0.0
                                        low = t_health - (t_health * .75)
                                        high = t_health - (t_health * .66)
                                        fortitude = round(random.randint(int(low), int(high)))
                                        # Resolve Scaling
                                        t_resolve_health = round(fortitude + (.5 * t_resolve))
                                        t_resolve_attack = round((.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                        t_resolve_defense = round((.30 * t_defense) * (t_resolve / (.50 * t_defense)))

                                        t_stamina = t_stamina + t_resolve
                                        t_health = t_health + t_resolve_health
                                        t_attack = round(t_attack + t_resolve_attack)
                                        t_defense = round(t_defense - t_resolve_defense)
                                        t_used_resolve = True

                                        embedVar = discord.Embed(title=f"{t_card} DIGIVOLUTION :zap:",
                                                                description=f"**{t_card} says**\n{t_resolve_description}",
                                                                colour=0xe91e63)
                                        embedVar.add_field(name=f"Transformation: Digivolve", value="On Focus you Resolve.")
                                        if turn_total <=5:
                                            t_attack = round(t_attack * 2)
                                            t_defense = round(t_defense * 2 )
                                            previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 Transformation: Mega Digivolution!!!")
                                        else:
                                            previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 Transformation: Digivolve")
                                    elif t_universe == "League Of Legends":
                                        embedVar = discord.Embed(title=f"Turret Shot hits {o_card} for **{60 + turn_total}** Damage 💥",
                                                                colour=0xe91e63)
                                        previous_moves.append(f"(**{turn_total}**) 🩸 Turret Shot hits **{o_card}** for **{60 + turn_total}** Damage 💥")
                                        o_health = round(o_health - (60 + turn_total))

                                    elif t_universe == "Dragon Ball Z":
                                        t_health = t_health + o_stamina + turn_total
                                        previous_moves.append(f"(**{turn_total}**) 🩸 Saiyan Spirit... You heal for **{o_stamina + turn_total}** ❤️")


                                    elif t_universe == "Solo Leveling":
                                        embedVar = discord.Embed(
                                            title=f"Ruler's Authority... {o_card} loses **{30 + turn_total}** 🛡️ 🔻",
                                            colour=0xe91e63)
                                        previous_moves.append(f"(**{turn_total}**) 🩸 Ruler's Authority... {o_card} loses **{30 + turn_total}** 🛡️ 🔻")
                                        o_defense = round(o_defense - (30 + turn_total))
                                    elif t_universe == "Black Clover":
                                        embedVar = discord.Embed(title=f"Mana Zone! **{t_card}** Increased Stamina 🌀",
                                                                colour=0xe91e63)
                                        previous_moves.append(f"(**{turn_total}**) 🩸 Mana Zone! **{t_card}** Increased AP & Stamina 🌀")
                                        t_stamina = 100
                                        tcard_lvl_ap_buff = tcard_lvl_ap_buff + 30
                                    elif t_universe == "Death Note":
                                        if turn_total >= 50:
                                            embedVar = discord.Embed(title=f"{o_card}'s' Scheduled Death 📓",
                                                                    description=f"**{t_card} says**\n**Delete**",
                                                                    colour=0xe91e63)
                                            embedVar.add_field(name=f"{o_card} had a heart attack and died", value=f"Death....")
                                            previous_moves.append(f"(**{turn_total}**) **{o_card}** 🩸 had a heart attack and died")
                                            o_health = 0
                                    if o_universe == "One Punch Man":
                                        embedVar = discord.Embed(title=f"Hero Reinforcements! **{o_card}** Increased Health!  ❤️",
                                                                colour=0xe91e63)
                                        previous_moves.append(f"(**{turn_total}**) Hero Reinforcements! **{o_card}** Increased Health!  ❤️")
                                        o_health = round(o_health + 100)
                                        o_max_health = round(o_max_health + 100)
                                    elif o_universe == "7ds":
                                        embedVar = discord.Embed(title=f"Power Of Friendship! 🧬 **{opet_name}** Rested, **{o_card}** Increased Stamina 🌀",
                                                                colour=0xe91e63)
                                        previous_moves.append(f"(**{turn_total}**) 🩸 Power Of Friendship! 🧬 **{opet_name}** Rested, **{o_card}** Increased Stamina 🌀")
                                        o_stamina = o_stamina + 60
                                        o_pet_used = False
                                    elif o_universe == "Souls":
                                        embedVar = discord.Embed(
                                            title=f"Combo Recognition! **{o_card}** Increased Attack by **{60 + turn_total}** 🔺 ",
                                            colour=0xe91e63)
                                        previous_moves.append(f"(**{turn_total}**) 🩸 Combo Recognition! **{o_card}** Increased Attack by **{60 + turn_total}** 🔺")
                                        o_attack = round(o_attack + (60 + turn_total))
                                    else:
                                        turn_total = turn_total + 1
                                        if t_universe != "Crown Rift Madness":
                                            turn = 0
                                        else:
                                            turn = 1
                                    turn_total = turn_total + 1
                                    if t_universe != "Crown Rift Madness":
                                        turn = 0
                                    else:
                                        turn = 1
                                else:
                                    # Check If Playing Bot
                                    if botActive != True and raidActive == False:
                                        # PlayUser
                                        tap1 = list(t_1.values())[0] + tcard_lvl_ap_buff + t_shock_buff + t_basic_water_buff
                                        tap2 = list(t_2.values())[0] + tcard_lvl_ap_buff + t_shock_buff + t_special_water_buff
                                        tap3 = list(t_3.values())[0] + tcard_lvl_ap_buff + tdemon_slayer_buff + t_shock_buff + t_ultimate_water_buff
                                        tenh1 = list(t_enhancer.values())[0]
                                        tenh_name = list(t_enhancer.values())[2]
                                        tpet_enh_name = list(tpet_move.values())[2]
                                        tpet_msg_on_resolve = ""
                                        # UNIVERSE CARD
                                        if t_universe == "Souls" and t_used_resolve:
                                            player_2_card = showcard(t, tarm,t_max_health, t_health, t_max_stamina, t_stamina,
                                                                t_used_resolve, ttitle, t_used_focus, t_attack, t_defense,
                                                                turn_total, tap2, tap3, tap3, tenh1, tenh_name, tcard_lvl, o_defense)
                                        else:
                                            player_2_card = showcard(t, tarm,t_max_health, t_health, t_max_stamina, t_stamina,
                                                                    t_used_resolve, ttitle, t_used_focus, t_attack, t_defense,
                                                                    turn_total, tap1, tap2, tap3, tenh1, tenh_name, tcard_lvl, o_defense)
                                                                

                                
                                        if t_universe == "Solo Leveling" and not t_swapped:
                                            if temp_oarm_shield_active and not oarm_shield_active:
                                                if tarm_shield_active:
                                                    tshield_value = tshield_value + temp_oshield_value
                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 **ARISE!** *{oarm_name}* is now yours")
                                                    t_swapped = True
                                                elif not tarm_shield_active:
                                                    tarm_shield_active = True
                                                    tshield_value = temp_oshield_value
                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 **ARISE!** *{oarm_name}* is now yours")
                                                    t_swapped = True
                                            elif temp_oarm_barrier_active and not oarm_barrier_active:
                                                if tarm_barrier_active:
                                                    tbarrier_count = tbarrier_count + temp_obarrier_count
                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 **ARISE!** *{oarm_name}* is now yours")
                                                    t_swapped = True
                                                elif not tarm_barrier_active:
                                                    tarm_barrier_active = True
                                                    tbarrier_count = temp_obarrier_count
                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 **ARISE!** *{oarm_name}* is now yours")
                                                    t_swapped = True
                                            elif temp_oarm_parry_active and not oarm_parry_active:
                                                if tarm_parry_active:
                                                    tparry_count = tparry_count + temp_oparry_count
                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 **ARISE!** *{oarm_name}* is now yours")
                                                    t_swapped = True
                                                elif not tarm_parry_active:
                                                    tarm_parry_active = True
                                                    tparry_count = temp_oparry_count
                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 **ARISE!** *{oarm_name}* is now yours")
                                                    t_swapped = True
                                    


                                        # await private_channel.send(file=player_2_card)

                                        if t_used_focus and t_used_resolve:
                                            options = ["q", "Q", "0", "1", "2", "3", "4", "6"]
                                        elif t_used_focus and not t_used_resolve:
                                            options = ["q", "Q", "0", "1", "2", "3", "4", "5"]
                                        else:
                                            options = ["q", "Q", "0", "1", "2", "3", "4"]

                                        battle_buttons = []
                                        util_buttons = [
                                            manage_components.create_button(
                                                style=ButtonStyle.grey,
                                                label="Quit | /ff",
                                                custom_id="q"
                                            ),
                                        ]
                                        if t_stamina >= 10:
                                            battle_buttons.append(
                                                manage_components.create_button(
                                                    style=ButtonStyle.green,
                                                    label=f"{t_basic_emoji} 10",
                                                    custom_id="1"
                                                )
                                            )

                                        if t_stamina >= 30:
                                            battle_buttons.append(
                                                manage_components.create_button(
                                                    style=ButtonStyle.green,
                                                    label=f"{t_super_emoji} 30",
                                                    custom_id="2"
                                                )
                                            )


                                        if t_stamina >= 80:
                                            battle_buttons.append(
                                                manage_components.create_button(
                                                    style=ButtonStyle.green,
                                                    label=f"{t_ultimate_emoji} 80",
                                                    custom_id="3"
                                                )
                                            )

                                        if t_stamina >= 20:
                                            battle_buttons.append(
                                                manage_components.create_button(
                                                    style=ButtonStyle.blue,
                                                    label=f"🦠 20",
                                                    custom_id="4"
                                                )
                                            )

                                            if o_gravity_hit == False:
                                                util_buttons.append(
                                                    manage_components.create_button(
                                                        style=ButtonStyle.grey,
                                                        label="Block 20",
                                                        custom_id="0"
                                                    )
                                                )
                                        if t_used_focus and t_used_resolve and not t_pet_used and mode != "RAID":
                                            util_buttons.append(
                                                manage_components.create_button(
                                                    style=ButtonStyle.green,
                                                    label="🧬",
                                                    custom_id="6"
                                                )
                                            )

                                        if t_used_focus and not t_used_resolve:
                                            util_buttons.append(
                                                manage_components.create_button(
                                                    style=ButtonStyle.green,
                                                    label="⚡Resolve!",
                                                    custom_id="5"
                                                )
                                            )

                                        battle_action_row = manage_components.create_actionrow(*battle_buttons)
                                        util_action_row = manage_components.create_actionrow(*util_buttons)
                                        oarm_message =""
                                        if t_used_resolve:
                                            tpet_msg_on_resolve = f"🧬 *{enhancer_mapping[tpet_enh_name]}*"
                                        if oarm_barrier_active:
                                            oarm_message = f"💠{obarrier_count}"
                                        elif oarm_shield_active:
                                            oarm_message = f"🌐{oshield_value}"
                                        elif oarm_parry_active:
                                            oarm_message = f"🔄{oparry_count}"
                                        if tarm_passive_type == "BARRIER":
                                            if tarm_barrier_active:
                                                tarm_passive_value = f"{tbarrier_count}"
                                            else:
                                                tarm_passive_value = 0
                                        elif tarm_passive_type == "SHIELD":
                                            if tarm_shield_active:
                                                tarm_passive_value = f"{tshield_value}"
                                            else:
                                                tarm_passive_value = 0
                                        elif tarm_passive_type == "PARRY":
                                            if tarm_parry_active:
                                                tarm_passive_value = f"{tparry_count}"
                                            else:
                                                tarm_passive_value = 0
                                        components = [battle_action_row, util_action_row]
                                        embedVar = discord.Embed(title=f"", description=textwrap.dedent(f"""\
                                        {previous_moves_into_embed}

                                        """), color=0xe74c3c)
                                        embedVar.set_author(name=f"🦾 {tarm_name} - {tarm_passive_type} {tarm_passive_value} {enhancer_suffix_mapping[tarm_passive_type]}\n{tpet_msg_on_resolve}")
                                        embedVar.add_field(name=f"➡️ **Current Turn** {turn_total}", value=f"{user2.mention} Select move below!")
                                        embedVar.set_image(url="attachment://image.png")
                                        embedVar.set_footer(
                                            text=f"{o_card}: ❤️{round(o_health)} 🌀{round(o_stamina)} 🗡️{round(o_attack)}/🛡️{round(o_defense)}{oarm_message}",
                                            icon_url="https://cdn.discordapp.com/emojis/789290881654980659.gif?v=1")
                                        await battle_msg.delete(delay=1)
                                        await asyncio.sleep(1)
                                        battle_msg = await private_channel.send(embed=embedVar, components=components, file=player_2_card)

                                        # Make sure user is responding with move
                                        def check(button_ctx):
                                            return button_ctx.author == user2 and button_ctx.custom_id in options

                                        try:
                                            button_ctx: ComponentContext = await manage_components.wait_for_component(self.bot,
                                                                                                                    components=[
                                                                                                                        battle_action_row,
                                                                                                                        util_action_row],
                                                                                                                    timeout=80,
                                                                                                                    check=check)

                                            # calculate data based on selected move
                                            if button_ctx.custom_id == "q" or button_ctx.custom_id == "Q":
                                                t_health = 0
                                                uid = t_DID
                                                tuser = await self.bot.fetch_user(uid)
                                                previous_moves.append(f"(**{turn_total}**) 💨 **{t_card}** Fled...")
                                                await battle_msg.delete(delay=1)
                                                await asyncio.sleep(1)
                                                battle_msg = await private_channel.send(content=f"{tuser.mention} has fled.")

                                                #return
                                            if button_ctx.custom_id == "1":
                                                if t_universe == "Souls" and t_used_resolve:
                                                    dmg = damage_cal(o_opponent_affinities, special_attack_name, tmove2_element, t_universe, t_card, t_2, t_attack, t_defense, o_defense, t_stamina,
                                                                    t_enhancer_used, t_health, o_health, o_stamina, t_max_health,
                                                                    o_attack, t_special_move_description, turn_total,
                                                                    tcard_lvl_ap_buff, t_1)
                                                else:
                                                    dmg = damage_cal(o_opponent_affinities, basic_attack_name, tmove1_element, t_universe, t_card, t_1, t_attack, t_defense, o_defense,
                                                                    t_stamina, t_enhancer_used, t_health, o_health, o_stamina,
                                                                    t_max_health, o_attack, t_special_move_description, turn_total,
                                                                    tcard_lvl_ap_buff, None)
                                            elif button_ctx.custom_id == "2":
                                                if t_universe == "Souls" and t_used_resolve:
                                                    dmg = damage_cal(o_opponent_affinities, ultimate_attack_name, tmove3_element, t_universe, t_card, t_3, t_attack, t_defense, o_defense, t_stamina,
                                                                    t_enhancer_used, t_health, o_health, o_stamina, t_max_health,
                                                                    o_attack, t_special_move_description, turn_total,
                                                                    tcard_lvl_ap_buff, t_2)
                                                else:
                                                    dmg = damage_cal(o_opponent_affinities, special_attack_name, tmove2_element, t_universe, t_card, t_2, t_attack, t_defense, o_defense,
                                                                    t_stamina, t_enhancer_used, t_health, o_health, o_stamina,
                                                                    t_max_health, o_attack, t_special_move_description, turn_total,
                                                                    tcard_lvl_ap_buff, None)
                                            elif button_ctx.custom_id == "3":

                                                dmg = damage_cal(o_opponent_affinities, ultimate_attack_name, tmove3_element, t_universe, t_card, t_3, t_attack, t_defense, o_defense,
                                                                t_stamina, t_enhancer_used, t_health, o_health, o_stamina,
                                                                t_max_health, o_attack, t_special_move_description, turn_total,
                                                                tcard_lvl_ap_buff, None)
                                                if t_gif != "N/A" and not operformance:
                                                    await battle_msg.delete(delay=None)
                                                    # await asyncio.sleep(2)
                                                    battle_msg = await private_channel.send(f"{t_gif}")
                                                    await asyncio.sleep(2)
                                            elif button_ctx.custom_id == "4":
                                                t_enhancer_used = True

                                                dmg = damage_cal(o_opponent_affinities, basic_attack_name, tmove1_element, t_universe, t_card, t_enhancer, t_attack, t_defense, o_defense,
                                                                t_stamina, t_enhancer_used, t_health, o_health, o_stamina,
                                                                t_max_health, o_attack, t_special_move_description, turn_total,
                                                                tcard_lvl_ap_buff, None)
                                                t_enhancer_used = False
                                            elif button_ctx.custom_id == "5":
                                                if not t_used_resolve and t_used_focus:
                                                    if t_universe == "My Hero Academia":  # My hero TRait
                                                        # fortitude or luck is based on health
                                                        fortitude = 0.0
                                                        low = t_health - (t_health * .75)
                                                        high = t_health - (t_health * .66)
                                                        fortitude = round(random.randint(int(low), int(high)))
                                                        # Resolve Scaling
                                                        t_resolve_health = round(fortitude + (.5 * t_resolve))
                                                        t_resolve_attack = round(
                                                            (.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                                        t_resolve_defense = round(
                                                            (.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                                        tcard_lvl_ap_buff = tcard_lvl_ap_buff + 80 + turn_total

                                                        t_stamina = t_stamina + t_resolve
                                                        t_health = t_health + t_resolve_health
                                                        t_attack = round(t_attack + t_resolve_attack)
                                                        t_defense = round(t_defense - t_resolve_defense)
                                                        t_used_resolve = True
                                                        t_pet_used = False

                                                        embedVar = discord.Embed(title=f"{t_card} PLUS ULTRAAA",
                                                                                description=f"**{t_card} says**\n{t_resolve_description}",
                                                                                colour=0xe91e63)
                                                        embedVar.add_field(name=f"Transformation: Plus Ultra",
                                                                        value="You do not lose a turn after you Resolve.")
                                                        previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 Resolved: PLUS ULTRA!")
                                                        await button_ctx.defer(ignore=True)
                                                        turn_total = turn_total + 1
                                                        turn = 1
                                                    elif t_universe == "Demon Slayer": 
                                                        # fortitude or luck is based on health
                                                        fortitude = 0.0
                                                        low = t_health - (t_health * .75)
                                                        high = t_health - (t_health * .66)
                                                        fortitude = round(random.randint(int(low), int(high)))
                                                        # Resolve Scaling
                                                        t_resolve_health = round(fortitude + (.5 * t_resolve))
                                                        t_resolve_attack = round(
                                                            (.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                                        t_resolve_defense = round(
                                                            (.30 * t_defense) * (t_resolve / (.50 * t_defense)))

                                                        t_stamina = t_stamina + t_resolve
                                                        t_health = t_health + t_resolve_health
                                                        t_attack = round(t_attack + t_resolve_attack)
                                                        t_defense = round(t_defense - t_resolve_defense)
                                                        if o_attack > t_attack:
                                                            t_attack = o_attack
                                                        if o_defense > t_defense:
                                                            t_defense = o_defense
                                                        t_used_resolve = True
                                                        t_pet_used = False
                                                        embedVar = discord.Embed(title=f"{t_card} begins Total Concentration Breathing",
                                                                                description=f"**{t_card} says**\n{t_resolve_description}",
                                                                                colour=0xe91e63)
                                                        previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 Resolved: Total Concentration Breathing!")
                                                        await button_ctx.defer(ignore=True)
                                                        turn_total = turn_total + 1
                                                        turn = 0

                                                    elif t_universe == "Naruto": 
                                                        # fortitude or luck is based on health
                                                        fortitude = 0.0
                                                        low = t_health - (t_health * .75)
                                                        high = t_health - (t_health * .66)
                                                        fortitude = round(random.randint(int(low), int(high)))
                                                        # Resolve Scaling
                                                        t_resolve_health = round(fortitude + (.5 * t_resolve))
                                                        t_resolve_attack = round(
                                                            (.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                                        t_resolve_defense = round(
                                                            (.30 * t_defense) * (t_resolve / (.50 * t_defense)))

                                                        t_stamina = t_stamina + t_resolve
                                                        t_health = t_health + t_resolve_health
                                                        t_health = t_health + t_naruto_heal_buff
                                                        t_attack = round(t_attack + t_resolve_attack)
                                                        t_defense = round(t_defense - t_resolve_defense)
                                                        t_used_resolve = True
                                                        t_pet_used = False
                                                        embedVar = discord.Embed(title=f"{t_card} Heals from Hashirama Cells",
                                                                                description=f"**{t_card} says**\n{t_resolve_description}",
                                                                                colour=0xe91e63)
                                                        previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 Resolved: Hashirama Cells heal you for **{t_naruto_heal_buff}**")
                                                        
                                                        turn_total = turn_total + 1
                                                        turn = 0


                                                    elif t_universe == "Attack On Titan":
                                                        # fortitude or luck is based on health
                                                        fortitude = 0.0
                                                        low = t_health - (t_health * .75)
                                                        high = t_health - (t_health * .66)
                                                        fortitude = round(random.randint(int(low), int(high)))
                                                        # Resolve Scaling
                                                        t_resolve_health = round(fortitude + (.5 * t_resolve))
                                                        t_resolve_attack = round(
                                                            (.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                                        t_resolve_defense = round(
                                                            (.30 * t_defense) * (t_resolve / (.50 * t_defense)))

                                                        t_stamina = t_stamina + t_resolve
                                                        t_health = t_health + t_resolve_health
                                                        t_attack = round(t_attack + t_resolve_attack)
                                                        t_defense = round(t_defense - t_resolve_defense)
                                                        t_used_resolve = True
                                                        t_pet_used = False
                                                        health_boost = 100 * t_focus_count
                                                        t_health = t_health + health_boost
                                                        embedVar = discord.Embed(title=f"{t_card} Titan Mode",
                                                                                description=f"**{t_card} says**\n{t_resolve_description}",
                                                                                colour=0xe91e63)
                                                        embedVar.add_field(name=f"Transformation Complete",
                                                                        value=f"Health increased by **{health_boost}**!")
                                                        previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 Resolved: Titan Mode")
                                                        await button_ctx.defer(ignore=True)

                                                        turn_total = turn_total + 1
                                                        turn = 0

                                                    elif t_universe == "Bleach":  # Bleach Trait
                                                        # fortitude or luck is based on health
                                                        fortitude = 0.0
                                                        low = t_health - (t_health * .75)
                                                        high = t_health - (t_health * .66)
                                                        fortitude = round(random.randint(int(low), int(high)))
                                                        # Resolve Scaling
                                                        t_resolve_health = round(fortitude + (.5 * t_resolve))
                                                        t_resolve_attack = round(
                                                            (.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                                        t_resolve_defense = round(
                                                            (.30 * t_defense) * (t_resolve / (.50 * t_defense)))

                                                        t_stamina = t_stamina + t_resolve
                                                        t_health = t_health + t_resolve_health
                                                        t_attack = round((t_attack + (2 * t_resolve_attack)) * 2)
                                                        t_defense = round(t_defense - t_resolve_defense)
                                                        # if t_defense >= 120:
                                                        # t_defense = 120
                                                        t_used_resolve = True
                                                        t_pet_used = False

                                                        embedVar = discord.Embed(title=f"{t_card} STRENGTHENED RESOLVE :zap:",
                                                                                description=f"**{t_card} says**\n{t_resolve_description}",
                                                                                colour=0xe91e63)
                                                        embedVar.add_field(name=f"Transformation: Bankai",
                                                                        value="Gain double Attack on Resolve.")
                                                        previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 Resolved: Bankai!")
                                                        await button_ctx.defer(ignore=True)
                                                        turn_total = turn_total + 1
                                                        turn = 0
                                                    elif t_universe == "God Of War":  # God Of War Trait
                                                        # fortitude or luck is based on health
                                                        fortitude = 0.0
                                                        low = t_health - (t_health * .75)
                                                        high = t_health - (t_health * .66)
                                                        fortitude = round(random.randint(int(low), int(high)))
                                                        # Resolve Scaling
                                                        t_resolve_health = round(fortitude + (.5 * t_resolve))
                                                        t_resolve_attack = round(
                                                            (.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                                        t_resolve_defense = round(
                                                            (.30 * t_defense) * (t_resolve / (.50 * t_defense)))

                                                        t_stamina = t_stamina + t_resolve
                                                        t_health = t_max_health
                                                        t_attack = round(t_attack + t_resolve_attack)
                                                        t_defense = round(t_defense - t_resolve_defense)
                                                        t_used_resolve = True
                                                        t_pet_used = False

                                                        if t_gow_resolve:
                                                            previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 Resolved: Ascension!")
                                                        elif not t_gow_resolve:
                                                            t_used_resolve = False
                                                            t_gow_resolve = True
                                                            t_defense = 125
                                                            previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 Crushed Blood Orb: Health Refill")
                                                        

                                                        embedVar = discord.Embed(title=f"{t_card} STRENGTHENED RESOLVE :zap:",
                                                                                description=f"**{t_card} says**\n{t_resolve_description}",
                                                                                colour=0xe91e63)
                                                        embedVar.add_field(name=f"Transformation: Ascension",
                                                                        value="On Resolve Refill Health.")
                                                        
                                                        await button_ctx.defer(ignore=True)
                                                        turn_total = turn_total + 1
                                                        turn = 0
                                                    elif t_universe == "Fate":  # Fate Trait
                                                        # fortitude or luck is based on health
                                                        fortitude = 0.0
                                                        low = t_health - (t_health * .75)
                                                        high = t_health - (t_health * .66)
                                                        fortitude = round(random.randint(int(low), int(high)))
                                                        # Resolve Scaling
                                                        t_resolve_health = round(fortitude + (.5 * t_resolve))
                                                        t_resolve_attack = round(
                                                            (.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                                        t_resolve_defense = round(
                                                            (.30 * t_defense) * (t_resolve / (.50 * t_defense)))

                                                        t_stamina = t_stamina + t_resolve
                                                        t_health = t_health + t_resolve_health
                                                        t_attack = round(t_attack + t_resolve_attack)
                                                        t_defense = round(t_defense - t_resolve_defense)
                                                        t_used_resolve = True

                                                        dmg = damage_cal(o_opponent_affinities, ultimate_attack_name, tmove3_element, t_universe, t_card, t_3, t_attack, t_defense,
                                                                        o_defense, t_stamina, t_enhancer_used, t_health,
                                                                        o_health, o_stamina, t_max_health, o_attack,
                                                                        t_special_move_description, turn_total,
                                                                        tcard_lvl_ap_buff, None)
                                                        t_pet_used = False
                                                        o_health = o_health - int(dmg['DMG'])
                                                        embedVar = discord.Embed(
                                                            title=f"{t_card} STRENGTHENED RESOLVE :zap:\n\n{dmg['MESSAGE']}",
                                                            description=f"**{t_card} says**\n{t_resolve_description}",
                                                            colour=0xe91e63)
                                                        embedVar.add_field(name=f"Transformation: Command Seal",
                                                                        value="On Resolve, Strike with Ultimate, then Focus.")
                                                        previous_moves.append(f"(**{turn_total}**) **{o_card}** 🩸 Resolved: Command Seal!")
                                                        await button_ctx.defer(ignore=True)
                                                        # t_stamina = 0
                                                        turn_total = turn_total + 1
                                                        turn = 0
                                                    elif t_universe == "Kanto Region" or t_universe == "Johto Region" or t_universe == "Hoenn Region" or t_universe == "Sinnoh Region" or t_universe == "Kalos Region" or t_universe == "Unova Region" or t_universe == "Alola Region" or t_universe == "Galar Region":  # Pokemon Resolves
                                                        # fortitude or luck is based on health
                                                        fortitude = 0.0
                                                        low = t_health - (t_health * .75)
                                                        high = t_health - (t_health * .66)
                                                        fortitude = round(random.randint(int(low), int(high)))
                                                        # Resolve Scaling
                                                        t_resolve_health = round(fortitude + (.5 * t_resolve))
                                                        t_resolve_attack = round(
                                                            (.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                                        t_resolve_defense = round(
                                                            (.30 * t_defense) * (t_resolve / (.50 * t_defense)))

                                                        t_stamina = t_stamina + t_resolve
                                                        t_health = t_health + t_resolve_health
                                                        t_attack = round(t_attack + t_resolve_attack)
                                                        t_defense = round(t_defense) * 2
                                                        t_used_resolve = True
                                                        t_pet_used = False

                                                        embedVar = discord.Embed(title=f"{t_card} STRENGTHENED RESOLVE :zap:",
                                                                                description=f"**{t_card} says**\n{t_resolve_description}",
                                                                                colour=0xe91e63)
                                                        embedVar.add_field(name=f"Transformation: Evolution",
                                                                        value="When you Resolve you do not lose Defense.")
                                                        if turn_total >= 50:
                                                            t_max_health = t_max_health + 1000
                                                            t_health = t_health + 1000
                                                            previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 Resolved: Gigantomax Evolution!!! Gained **1000** HP!!!")
                                                        elif turn_total >= 30:
                                                            t_max_health = t_max_health + 300
                                                            t_health = t_health + 300
                                                            previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 Resolved: Mega Evolution!! Gained **300** HP!")
                                                        else:
                                                            previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 Resolved: Evolution!")
                                                        await button_ctx.defer(ignore=True)
                                                        turn_total = turn_total + 1
                                                        turn = 0
                                                    else:
                                                        # fortitude or luck is based on health
                                                        fortitude = 0.0
                                                        low = t_health - (t_health * .75)
                                                        high = t_health - (t_health * .66)
                                                        fortitude = round(random.randint(int(low), int(high)))
                                                        # Resolve Scaling
                                                        t_resolve_health = round(fortitude + (.5 * t_resolve))
                                                        t_resolve_attack = round(
                                                            (.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                                        t_resolve_defense = round(
                                                            (.30 * t_defense) * (t_resolve / (.50 * t_defense)))

                                                        t_stamina = t_stamina + t_resolve
                                                        t_health = t_health + t_resolve_health
                                                        t_attack = round(t_attack + t_resolve_attack)
                                                        t_defense = round(t_defense - t_resolve_defense)
                                                        t_used_resolve = True
                                                        t_pet_used = False

                                                        if t_universe == "League Of Legends":
                                                            o_health = o_health - (60 * (o_focus_count + t_focus_count))
                                                            embedVar = discord.Embed(title=f"{t_card} PENTA KILL!",
                                                                                    description=f"**{t_card} says**\n{t_resolve_description}",
                                                                                    colour=0xe91e63)
                                                            embedVar.add_field(name=f"Nexus Destroyed",
                                                                            value=f"**{t_card}** dealt **{(60 * (o_focus_count + t_focus_count))}** damage.")
                                                            previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 Resolved: Pentakill! Dealing {(60 * (o_focus_count + t_focus_count))} damage.")
                                                            await button_ctx.defer(ignore=True)
                                                        elif t_universe == "Souls":
                                                            previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 Phase 2: Enhanced Moveset!")
                                                            await button_ctx.defer(ignore=True)
                                                        else:
                                                            embedVar = discord.Embed(
                                                                title=f"{t_card} STRENGTHENED RESOLVE :zap:",
                                                                description=f"**{t_card} says**\n{t_resolve_description}",
                                                                colour=0xe91e63)
                                                            embedVar.add_field(name=f"Transformation",
                                                                            value="All stats & stamina greatly increased")
                                                            previous_moves.append(f"(**{turn_total}**) ⚡ **{t_card}** Resolved!")
                                                            await button_ctx.defer(ignore=True)
                                                        turn_total = turn_total + 1
                                                        turn = 0
                                                else:
                                                    previous_moves.append(f"(**{turn_total}**) {t_card} cannot resolve!")
                                                    turn = 1
                                            elif button_ctx.custom_id == "6" and mode != "RAID":
                                                # Resolve Check and Calculation
                                                if t_used_resolve and t_used_focus and not t_pet_used:
                                                    t_enhancer_used = True
                                                    dmg = damage_cal(o_opponent_affinities, basic_attack_name, tmove1_element, t_universe, t_card, tpet_move, t_attack, t_defense,
                                                                    o_defense, t_stamina, t_enhancer_used, t_health, o_health,
                                                                    o_stamina, t_max_health, o_attack,
                                                                    t_special_move_description, turn_total, tcard_lvl_ap_buff, None)
                                                    t_enhancer_used = False
                                                    t_pet_used = True
                                                    tpet_dmg = dmg['DMG']
                                                    tpet_type = dmg['ENHANCED_TYPE']
                                                    if dmg['CAN_USE_MOVE']:
                                                        if tpet_type == 'ATK':
                                                            t_attack = round(t_attack + dmg['DMG'])
                                                        elif tpet_type == 'DEF':
                                                            t_defense = round(t_defense + dmg['DMG'])
                                                        elif tpet_type == 'STAM':
                                                            t_stamina = round(t_stamina + dmg['DMG'])
                                                        elif tpet_type == 'HLT':
                                                            t_health = round(t_health + dmg['DMG'])
                                                        elif tpet_type == 'LIFE':
                                                            t_health = round(t_health + dmg['DMG'])
                                                            o_health = round(o_health - dmg['DMG'])
                                                        elif tpet_type == 'DRAIN':
                                                            t_stamina = round(t_stamina + dmg['DMG'])
                                                            o_stamina = round(o_stamina - dmg['DMG'])
                                                        elif tpet_type == 'FLOG':
                                                            t_attack = round(t_attack + dmg['DMG'])
                                                            o_attack = round(o_attack - dmg['DMG'])
                                                        elif tpet_type == 'WITHER':
                                                            t_defense = round(t_defense + dmg['DMG'])
                                                            o_defense = round(o_defense - dmg['DMG'])
                                                        elif tpet_type == 'RAGE':
                                                            t_defense = round(t_defense - dmg['DMG'])
                                                            t_attack = round(t_attack + dmg['DMG'])
                                                        elif tpet_type == 'BRACE':
                                                            t_defense = round(t_defense + dmg['DMG'])
                                                            t_attack = round(t_attack - dmg['DMG'])
                                                        elif tpet_type == 'BZRK':
                                                            t_health = round(t_health - dmg['DMG'])
                                                            t_attack = round(t_attack + dmg['DMG'])
                                                        elif tpet_type == 'CRYSTAL':
                                                            t_health = round(t_health - dmg['DMG'])
                                                            t_defense = round(t_defense + dmg['DMG'])
                                                        elif tpet_type == 'GROWTH':
                                                            t_max_health = round(t_max_health - dmg['DMG'])
                                                            t_defense = round(t_defense + (dmg['DMG'] * .5))
                                                            t_attack = round(t_attack + (dmg['DMG'] * .5))
                                                        elif tpet_type == 'STANCE':
                                                            tempattack = dmg['DMG']
                                                            t_attack = t_defense
                                                            t_defense = tempattack
                                                        elif tpet_type == 'CONFUSE':
                                                            tempattack = dmg['DMG']
                                                            o_attack = o_defense
                                                            o_defense = tempattack
                                                        elif tpet_type == 'BLINK':
                                                            t_stamina = round(t_stamina - dmg['DMG'])
                                                            o_stamina = round(o_stamina + dmg['DMG'])
                                                        elif tpet_type == 'SLOW':
                                                            tempstam = round(o_stamina + dmg['DMG'])
                                                            t_stamina = round(t_stamina - dmg['DMG'])
                                                            o_stamina = t_stamina
                                                            t_stamina = tempstam
                                                        elif tpet_type == 'HASTE':
                                                            tempstam = round(o_stamina - dmg['DMG'])
                                                            t_stamina = round(t_stamina + dmg['DMG'])
                                                            o_stamina = t_stamina
                                                            t_stamina = tempstam
                                                        elif tpet_type == 'SOULCHAIN':
                                                            t_stamina = round(dmg['DMG'])
                                                            o_stamina = t_stamina
                                                        elif tpet_type == 'GAMBLE':
                                                            t_health = round(dmg['DMG'])
                                                            o_health = t_health
                                                        elif tpet_type == 'FEAR':
                                                            t_max_health = round(t_max_health - dmg['DMG'])
                                                            o_defense = round(o_defense + (dmg['DMG'] * .5))
                                                            o_attack = round(o_attack + (dmg['DMG'] * .5))
                                                        elif tpet_type == 'WAVE':
                                                            o_health = round(o_health - dmg['DMG'])
                                                        elif tpet_type == 'BLAST':
                                                            if dmg['DMG'] >= 100:
                                                                dmg['DMG'] = 100
                                                            o_health = round(o_health - dmg['DMG'])
                                                        elif tpet_type == 'CREATION':
                                                            t_max_health = round(t_max_health + dmg['DMG'])
                                                            t_health = round(t_health + dmg['DMG'])
                                                        elif tpet_type == 'DESTRUCTION':
                                                            if dmg['DMG'] >= 100:
                                                                dmg['DMG'] = 100
                                                            o_max_health = round(o_max_health - dmg['DMG'])
                                                            if o_max_health <=1:
                                                                o_max_health = 1
                                                        
                                                        t_stamina = t_stamina - int(dmg['STAMINA_USED'])

                                                        if t_universe == "Persona":
                                                            petdmg = damage_cal(o_opponent_affinities, basic_attack_name, tmove1_element, t_universe, t_card, t_1, t_attack, t_defense,
                                                                                o_defense, t_stamina, t_enhancer_used, t_health,
                                                                                o_health, o_stamina, t_max_health, o_attack,
                                                                                t_special_move_description, turn_total,
                                                                                tcard_lvl_ap_buff, None)
                                                            o_health = o_health - petdmg['DMG']

                                                            embedVar = discord.Embed(
                                                                title=f"**PERSONA!**\n{tpet_name} was summoned from {t_card}'s soul dealing **{petdmg['DMG']}** damage!!",
                                                                colour=0xe91e63)
                                                            await battle_msg.delete(delay=2)
                                                            if not operformance:
                                                                tsummon_file = showsummon(tpet_image, tpet_name, dmg['MESSAGE'], tpet_lvl, tpet_bond)
                                                                embedVar.set_image(url="attachment://pet.png")
                                                                await asyncio.sleep(2)
                                                                battle_msg = await private_channel.send(embed=embedVar, file=tsummon_file)
                                                                await asyncio.sleep(2)
                                                                await battle_msg.delete(delay=None)
                                                            previous_moves.append(f"(**{turn_total}**) **Persona!** 🩸 : **{tpet_name}** was summoned from **{t_card}'s** soul dealing **{petdmg['DMG']}** damage!\n**{o_card}** summon disabled!")
                                                            o_pet_used = True
                                                            await button_ctx.defer(ignore=True)
                                                            
                                                            
                                                            #embedVar.set_image(url="attachment://pet.png")
                                                        else:
                                                            embedVar = discord.Embed(title=f"{t_card} Summoned 🧬 **{tpet_name}**", colour=0xe91e63)
                                                            await battle_msg.delete(delay=2)
                                                            if not operformance:
                                                                tsummon_file = showsummon(tpet_image, tpet_name, dmg['MESSAGE'], tpet_lvl, tpet_bond)
                                                                embedVar.set_image(url="attachment://pet.png")
                                                                await asyncio.sleep(2)
                                                                battle_msg = await private_channel.send(embed=embedVar, file=tsummon_file)
                                                                await asyncio.sleep(2)
                                                                await battle_msg.delete(delay=2)

                                                            
                                                            
                                                            #embedVar.set_image(url="attachment://pet.png")

                                                            previous_moves.append(f"(**{turn_total}**) **{t_card}** Summoned 🧬 **{tpet_name}**: {dmg['MESSAGE']}")
                                                            
                                                        turn = 1
                                                    else:
                                                        previous_moves.append(f"(**{turn_total}**) 🧬 **{opet_name}** needs a turn to rest...")
                                                        await button_ctx.defer(ignore=True)
                                                        turn = 1
                                                else:
                                                    previous_moves.append(f"(**{turn_total}**) {t_card} Could not summon 🧬 **{tpet_name}**. Needs rest")
                                                    await button_ctx.defer(ignore=True)
                                                    turn = 1
                                            elif button_ctx.custom_id == "0":
                                                if t_universe == "Persona":
                                                    block_message = f"**Confidant Block!*** 🩸: **{t_card}** Blocked 🛡️"
                                                    t_block_used = True
                                                    t_defense = round(t_defense * 2)
                                                    previous_moves.append(block_message)
                                                    await button_ctx.defer(ignore=True)
                                                    turn_total = turn_total + 1
                                                    turn = 0

                                                if t_stamina >= 20:
                                                    if t_universe == "Attack On Titan":
                                                        previous_moves.append(f"(**{turn_total}**) **Rally** 🩸 ! **{t_card}** Increased Max Health ❤️")
                                                        t_max_health = round(t_max_health + 100)
                                                        t_health = t_health + 100

                                                    if t_universe == "Bleach":
                                                        dmg = damage_cal(o_opponent_affinities, basic_attack_name, tmove1_element, t_universe, t_card, t_1, t_attack, t_defense, o_defense,
                                                                        t_stamina, t_enhancer_used, t_health, o_health, o_stamina,
                                                                        t_max_health, o_attack, t_special_move_description, turn_total,
                                                                        tcard_lvl_ap_buff, None)
                                                        previous_moves.append(f"(**{turn_total}**) **{t_card}** Exerted their 🩸 Spiritual Pressure - {dmg['MESSAGE']}")
                                                        if dmg['REPEL']:
                                                            t_health = t_health - dmg['DMG']
                                                        elif dmg['ABSORB']:
                                                            o_health = o_health + dmg['DMG']
                                                        elif dmg['ELEMENT'] == water_element:
                                                            if tmove1_element == water_element:
                                                                t_basic_water_buff = t_basic_water_buff + 25
                                                            if tmove2_element == water_element:
                                                                t_special_water_buff = t_special_water_buff + 25
                                                            if tmove3_element == water_element:
                                                                t_ultimate_water_buff = t_ultimate_water_buff + 25
                                                            o_health = o_health - (dmg['DMG'] + t_water_buff)

                                                        elif dmg['ELEMENT'] == earth_element:
                                                            t_defense = t_defense + (dmg['DMG'] * .20)
                                                            o_health = o_health - dmg['DMG']

                                                        elif dmg['ELEMENT'] == recoil_element:
                                                            t_health = t_health - (dmg['DMG'] * .25)
                                                            o_health = o_health - dmg['DMG']

                                                        elif dmg['ELEMENT'] == time_element:
                                                            t_stamina = 0
                                                            o_health = o_health - dmg['DMG']


                                                        elif dmg['ELEMENT'] == death_element:
                                                            o_max_health = o_max_health - (dmg['DMG'] * .07)
                                                            o_health = o_health - dmg['DMG']

                                                        elif dmg['ELEMENT'] == light_element:
                                                            t_stamina = round(t_stamina + (dmg['STAMINA_USED'] / 2))
                                                            o_health = o_health - dmg['DMG']

                                                        elif dmg['ELEMENT'] == dark_element:
                                                            t_stamina = t_stamina + 5
                                                            o_stamina = o_stamina - 5
                                                            o_health = o_health - dmg['DMG']

                                                        elif dmg['ELEMENT'] == life_element:
                                                            t_health = t_health + (dmg['DMG'] * .15)
                                                            o_health = o_health - dmg['DMG']

                                                        elif dmg['ELEMENT'] == psychic_element:
                                                            o_defense = o_defense - (dmg['DMG'] * .08)
                                                            o_attack = o_attack - (dmg['DMG'] * .08)
                                                            o_health = o_health - dmg['DMG']

                                                        elif dmg['ELEMENT'] == fire_element:
                                                            t_burn_dmg = t_burn_dmg + round(dmg['DMG'] * .20)
                                                            o_health = o_health - dmg['DMG']


                                                        elif dmg['ELEMENT'] == electric_element:
                                                            t_shock_buff = t_shock_buff +  (dmg['DMG'] * .07)
                                                            o_health = o_health - dmg['DMG']

                                                        elif dmg['ELEMENT'] == poison_element:
                                                            if t_poison_dmg <= 100:
                                                                t_poison_dmg = t_poison_dmg + 8
                                                            o_health = o_health - dmg['DMG']
    
                                                        elif dmg['ELEMENT'] == ice_element:
                                                            t_ice_counter = t_ice_counter + 1
                                                            if t_ice_counter == 3:
                                                                t_freeze_enh = True
                                                                t_ice_counter = 0
                                                            o_health = o_health - dmg['DMG']

                                                        elif dmg['ELEMENT'] == bleed_element:
                                                            t_bleed_counter = t_bleed_counter + 1
                                                            if t_bleed_counter == 5:
                                                                t_bleed_hit = True
                                                                t_bleed_counter = 0
                                                            o_health = o_health - dmg['DMG']
                                                            
                                                        elif dmg['ELEMENT'] == gravity_element:
                                                            t_gravity_hit = True
                                                            o_health = o_health - dmg['DMG']
                                                        
                                                        else:
                                                            o_health = o_health - dmg['DMG']
                                                        
                                                    t_stamina = t_stamina - 20
                                                    t_block_used = True
                                                    t_defense = round(t_defense * 2)
                                                    embedVar = discord.Embed(title=f"**{t_card}** Blocked 🛡️",
                                                                            colour=0xe91e63)

                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}** Blocked 🛡️")
                                                    await button_ctx.defer(ignore=True)
                                                    turn_total = turn_total + 1
                                                    turn = 0
                                                else:
                                                    previous_moves.append(f"(**{turn_total}**) **{o_card}** is too tired to block.")
                                                    await button_ctx.defer(ignore=True)
                                                    turn = 1

                                            if button_ctx.custom_id != "5" and button_ctx.custom_id != "6" and button_ctx.custom_id != "0" and button_ctx.custom_id != "q" and button_ctx.custom_id in options:
                                                # If you have enough stamina for move, use it
                                                if dmg['CAN_USE_MOVE']:
                                                    if dmg['ENHANCE']:

                                                        enh_type = dmg['ENHANCED_TYPE']
                                                        if enh_type == 'ATK':
                                                            t_attack = round(t_attack + dmg['DMG'])
                                                        elif enh_type == 'DEF':
                                                            t_defense = round(t_defense + dmg['DMG'])
                                                        elif enh_type == 'STAM':
                                                            t_stamina = round(t_stamina + dmg['DMG'])
                                                        elif enh_type == 'HLT':
                                                            t_health = round(t_health + dmg['DMG'])
                                                        elif enh_type == 'LIFE':
                                                            t_health = round(t_health + dmg['DMG'])
                                                            o_health = round(o_health - dmg['DMG'])
                                                        elif enh_type == 'DRAIN':
                                                            t_stamina = round(t_stamina + dmg['DMG'])
                                                            o_stamina = round(o_stamina - dmg['DMG'])
                                                        elif enh_type == 'FLOG':
                                                            t_attack = round(t_attack + dmg['DMG'])
                                                            o_attack = round(o_attack - dmg['DMG'])
                                                        elif enh_type == 'WITHER':
                                                            t_defense = round(t_defense + dmg['DMG'])
                                                            o_defense = round(o_defense - dmg['DMG'])
                                                        elif enh_type == 'RAGE':
                                                            t_defense = round(t_defense - dmg['DMG'])
                                                            t_attack = round(t_attack + dmg['DMG'])
                                                        elif enh_type == 'BRACE':
                                                            t_defense = round(t_defense + dmg['DMG'])
                                                            t_attack = round(t_attack - dmg['DMG'])
                                                        elif enh_type == 'BZRK':
                                                            t_health = round(t_health - dmg['DMG'])
                                                            t_attack = round(t_attack + dmg['DMG'])
                                                        elif enh_type == 'CRYSTAL':
                                                            t_health = round(t_health - dmg['DMG'])
                                                            t_defense = round(t_defense + dmg['DMG'])
                                                        elif enh_type == 'GROWTH':
                                                            t_max_health = round(t_max_health - dmg['DMG'])
                                                            t_defense = round(t_defense + (dmg['DMG'] * .5))
                                                            t_attack = round(t_attack + (dmg['DMG'] * .5))
                                                        elif enh_type == 'STANCE':
                                                            tempattack = dmg['DMG']
                                                            t_attack = t_defense
                                                            t_defense = tempattack
                                                        elif enh_type == 'CONFUSE':
                                                            tempattack = dmg['DMG']
                                                            o_attack = o_defense
                                                            o_defense = tempattack
                                                        elif enh_type == 'BLINK':
                                                            t_stamina = round(t_stamina - dmg['DMG'])
                                                            o_stamina = round(o_stamina + dmg['DMG'])
                                                        elif enh_type == 'SLOW':
                                                            tempstam = round(o_stamina + dmg['DMG'])
                                                            t_stamina = round(t_stamina - dmg['DMG'])
                                                            o_stamina = t_stamina
                                                            t_stamina = tempstam
                                                        elif enh_type == 'HASTE':
                                                            tempstam = round(o_stamina - dmg['DMG'])
                                                            t_stamina = round(t_stamina + dmg['DMG'])
                                                            o_stamina = t_stamina
                                                            t_stamina = tempstam
                                                        elif enh_type == 'SOULCHAIN':
                                                            t_stamina = round(dmg['DMG'])
                                                            o_stamina = t_stamina
                                                        elif enh_type == 'GAMBLE':
                                                            t_health = round(dmg['DMG'])
                                                            o_health = t_health
                                                        elif enh_type == 'FEAR':
                                                            t_max_health = round(t_max_health - dmg['DMG'])
                                                            o_defense = round(o_defense - (dmg['DMG'] * .5))
                                                            o_attack = round(o_attack - (dmg['DMG'] * .5))
                                                        elif enh_type == 'WAVE':
                                                            o_health = round(o_health - dmg['DMG'])
                                                        elif enh_type == 'BLAST':
                                                            o_health = round(o_health - dmg['DMG'])
                                                        elif enh_type == 'CREATION':
                                                            t_max_health = round(t_max_health + dmg['DMG'])
                                                            t_health = round(t_health + dmg['DMG'])
                                                        elif enh_type == 'DESTRUCTION':
                                                            # t_max_health = round(t_max_health - dmg['DMG'])
                                                            o_max_health = round(o_max_health - dmg['DMG'])
                                                            # if t_max_health <=1:
                                                            #     t_max_health = 1
                                                            if o_max_health <=1:
                                                                o_max_health = 1
                                                            
                                                        if enh_type in Stamina_Enhancer_Check or enh_type in Time_Enhancer_Check or enh_type in Control_Enhancer_Check:
                                                            t_stamina = t_stamina
                                                        else:
                                                            t_stamina = t_stamina - int(dmg['STAMINA_USED'])
                                                        embedVar = discord.Embed(title=f"{dmg['MESSAGE']}",
                                                                                colour=embed_color_t)
                                                        previous_moves.append(f"(**{turn_total}**) **{t_card}**: 🦠 {dmg['MESSAGE']}")
                                                        await button_ctx.defer(ignore=True)
                                                        turn_total = turn_total + 1
                                                        turn = 0
                                                    elif dmg['DMG'] == 0:
                                                        t_stamina = t_stamina - int(dmg['STAMINA_USED'])
                                                        embedVar = discord.Embed(title=f"{dmg['MESSAGE']}", colour=embed_color_t)
                                                        if oarm_barrier_active and dmg['ELEMENT'] != psychic_element:
                                                            tarm_barrier_active=False
                                                            embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                            previous_moves.append(f"(**{turn_total}**) **{t_card}'s** **Barrier** Disabled!")
                                                        previous_moves.append(f"(**{turn_total}**) **{t_card}**: {dmg['MESSAGE']}")
                                                        await button_ctx.defer(ignore=True)
                                                        turn_total = turn_total + 1
                                                        turn = 0
                                                    else:
                                                        if o_universe == "Naruto" and o_stamina < 10:
                                                            o_stored_damage = round(dmg['DMG'])
                                                            o_naruto_heal_buff = o_naruto_heal_buff + o_stored_damage
                                                            o_health = o_health 
                                                            embedVar = discord.Embed(title=f"{o_card}: Substitution Jutsu", description=f"{t_card} strikes a log", colour=0xe91e63)
                                                            if oarm_barrier_active and dmg['ELEMENT'] != psychic_element:
                                                                tarm_barrier_active=False
                                                                embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                previous_moves.append(f"(**{turn_total}**) **{t_card}**'s 💠 Barrier Disabled!")

                                                            previous_moves.append(f"(**{turn_total}**) **{o_card}** 🩸: Substitution Jutsu")
                                                            if not o_used_resolve:
                                                                previous_moves.append(f"(**{turn_total}**) 🩸**{o_stored_damage}** Hasirama Cells stored. 🩸**{o_naruto_heal_buff}** total stored.")
                                                            await button_ctx.defer(ignore=True)

                                                        elif oarm_shield_active and dmg['ELEMENT'] != dark_element:
                                                            if oshield_value > 0:
                                                                oshield_value = oshield_value -dmg['DMG']
                                                                o_health = o_health 
                                                                if oshield_value <=0:
                                                                    embedVar = discord.Embed(title=f"{o_card}'s' **Shield** Shattered!", description=f"{t_card} breaks the **Shield**!", colour=0xe91e63)
                                                                    previous_moves.append(f"(**{turn_total}**) 🌐**{o_card}**: Shield Shattered!")
                                                                    if oarm_barrier_active and dmg['ELEMENT'] != psychic_element:
                                                                        tarm_barrier_active=False
                                                                        embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                        previous_moves.append(f"(**{turn_total}**) **{o_card}**'s 💠 Barrier Disabled!")
                                                                    
                                                                    oarm_shield_active = False
                                                                    await button_ctx.defer(ignore=True)
                                                                else:
                                                                    embedVar = discord.Embed(title=f"{o_card} Activates **Shield** 🌐", description=f"**{t_card}** strikes the Shield 🌐\n**{oshield_value} Shield** Left!", colour=0xe91e63)
                                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}** strikes **{o_card}**'s Shield 🌐\n**{oshield_value} Shield** Left!")
                                                                    if oarm_barrier_active and dmg['ELEMENT'] != psychic_element:
                                                                        tarm_barrier_active=False
                                                                        embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                        previous_moves.append(f"(**{turn_total}**) **{t_card}**'s 💠 Barrier Disabled!")
                                                                    await button_ctx.defer(ignore=True)

                                                        elif oarm_barrier_active and dmg['ELEMENT'] != psychic_element:
                                                            if obarrier_count >1:
                                                                o_health = o_health 
                                                                embedVar = discord.Embed(title=f"{o_card} Activates **Barrier** 💠", description=f"{t_card}'s attack **Nullified**!\n💠 {obarrier_count - 1} **Barriers** remain!", colour=0xe91e63)
                                                                previous_moves.append(f"(**{turn_total}**) **{o_card}** Activates Barrier 💠  **{t_card}'s** attack **Nullified**!\n💠 {obarrier_count - 1} **Barriers** remain!")
                                                                if oarm_barrier_active and dmg['ELEMENT'] != psychic_element:
                                                                    tarm_barrier_active=False
                                                                    embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}**'s 💠 Barrier Disabled!")
                                                                await button_ctx.defer(ignore=True)
                                                                obarrier_count = obarrier_count - 1
                                                            elif obarrier_count==1:
                                                                embedVar = discord.Embed(title=f"{o_card}'s **Barrier** Broken!", description=f"{t_card} destroys the **Barrier**", colour=0xe91e63)
                                                                previous_moves.append(f"(**{turn_total}**) **{o_card}**'s Barrier Broken!")
                                                                obarrier_count = obarrier_count - 1
                                                                if oarm_barrier_active and dmg['ELEMENT'] != psychic_element:
                                                                    tarm_barrier_active=False
                                                                    embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}**'s 💠 Barrier Disabled!")
                                                                await button_ctx.defer(ignore=True)
                                                                oarm_barrier_active = False
                                                        
                                                        elif oarm_parry_active and dmg['ELEMENT'] != earth_element:
                                                            if oparry_count > 1:
                                                                oparry_damage = round(dmg['DMG'])
                                                                o_health = round(o_health - (oparry_damage * .75))
                                                                t_health = round(t_health - (oparry_damage * .25))
                                                                oparry_count = oparry_count - 1
                                                                embedVar = discord.Embed(title=f"{o_card} Activates **Parry** 🔄", description=f"{t_card} takes {round(oparry_damage * .25)}! DMG\n **{oparry_count} Parries** to go!!", colour=0xe91e63)
                                                                previous_moves.append(f"(**{turn_total}**) **{o_card}** Activates Parry 🔄 {t_card} takes {round(oparry_damage * .25)}! DMG\n **{oparry_count}  Parries** to go!!")
                                                                if oarm_barrier_active and dmg['ELEMENT'] != psychic_element:
                                                                    tarm_barrier_active=False
                                                                    embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}**'s 💠 Barrier Disabled!")
                                                                await button_ctx.defer(ignore=True)
                                                                
                                                            elif oparry_count==1:
                                                                oparry_damage = round(dmg['DMG'])
                                                                o_health = round(o_health - (oparry_damage * .75))
                                                                t_health = round(t_health - (oparry_damage * .25))
                                                                embedVar = discord.Embed(title=f"{o_card} **Parry** Penetrated!!", description=f"{t_card} takes {round(oparry_damage * .25)}! DMG and breaks the **Parry**", colour=0xe91e63)
                                                                previous_moves.append(f"(**{turn_total}**) **{o_card}** Parry Penetrated! **{t_card}** takes **{round(oparry_damage * .25)}**! DMG and breaks the **Parry**")
                                                                oparry_count = oparry_count - 1
                                                                if oarm_barrier_active and dmg['ELEMENT'] != psychic_element:
                                                                    tarm_barrier_active=False
                                                                    embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}**'s 💠 Barrier Disabled!")
                                                                await button_ctx.defer(ignore=True)
                                                                oarm_parry_active = False
                                                        
                                                        else:
                                                            if dmg['REPEL']:
                                                                t_health = t_health - int(dmg['DMG'])
                                                            elif dmg['ABSORB']:
                                                                o_health = o_health + int(dmg['DMG'])
                                                            elif dmg['ELEMENT'] == water_element:
                                                                if tmove1_element == water_element:
                                                                    t_basic_water_buff = t_basic_water_buff + 25
                                                                if tmove2_element == water_element:
                                                                    t_special_water_buff = t_special_water_buff + 25
                                                                if tmove3_element == water_element:
                                                                    t_ultimate_water_buff = t_ultimate_water_buff + 25
                                                                o_health = o_health - (dmg['DMG'] + t_water_buff)

                                                            elif dmg['ELEMENT'] == earth_element:
                                                                t_defense = t_defense + (dmg['DMG'] * .20)
                                                                o_health = o_health - dmg['DMG']

                                                            elif dmg['ELEMENT'] == recoil_element:
                                                                t_health = t_health - (dmg['DMG'] * .25)
                                                                o_health = o_health - dmg['DMG']

                                                            elif dmg['ELEMENT'] == time_element:
                                                                t_stamina = 0
                                                                o_health = o_health - dmg['DMG']


                                                            elif dmg['ELEMENT'] == death_element:
                                                                o_max_health = o_max_health - (dmg['DMG'] * .07)
                                                                o_health = o_health - dmg['DMG']

                                                            elif dmg['ELEMENT'] == light_element:
                                                                t_stamina = round(t_stamina + (dmg['STAMINA_USED'] / 2))
                                                                o_health = o_health - dmg['DMG']

                                                            elif dmg['ELEMENT'] == dark_element:
                                                                t_stamina = t_stamina + 5
                                                                o_stamina = o_stamina - 5
                                                                o_health = o_health - dmg['DMG']

                                                            elif dmg['ELEMENT'] == life_element:
                                                                t_health = t_health + (dmg['DMG'] * .15)
                                                                o_health = o_health - dmg['DMG']

                                                            elif dmg['ELEMENT'] == psychic_element:
                                                                o_defense = o_defense - (dmg['DMG'] * .08)
                                                                o_attack = o_attack - (dmg['DMG'] * .08)
                                                                o_health = o_health - dmg['DMG']

                                                            elif dmg['ELEMENT'] == fire_element:
                                                                t_burn_dmg = t_burn_dmg + round(dmg['DMG'] * .20)
                                                                o_health = o_health - dmg['DMG']


                                                            elif dmg['ELEMENT'] == electric_element:
                                                                t_shock_buff = t_shock_buff +  (dmg['DMG'] * .07)
                                                                o_health = o_health - dmg['DMG']

                                                            elif dmg['ELEMENT'] == poison_element:
                                                                if t_poison_dmg <= 100:
                                                                    t_poison_dmg = t_poison_dmg + 8
                                                                o_health = o_health - dmg['DMG']
        
                                                            elif dmg['ELEMENT'] == ice_element:
                                                                t_ice_counter = t_ice_counter + 1
                                                                if t_ice_counter == 3:
                                                                    t_freeze_enh = True
                                                                    t_ice_counter = 0
                                                                o_health = o_health - dmg['DMG']

                                                            elif dmg['ELEMENT'] == bleed_element:
                                                                t_bleed_counter = t_bleed_counter + 1
                                                                if t_bleed_counter == 5:
                                                                    t_bleed_hit = True
                                                                    t_bleed_counter = 0
                                                                o_health = o_health - dmg['DMG']
                                                                
                                                            elif dmg['ELEMENT'] == gravity_element:
                                                                t_gravity_hit = True
                                                                o_health = o_health - dmg['DMG']
                                                            
                                                            else:
                                                                o_health = o_health - dmg['DMG']


                                                            embedVar = discord.Embed(title=f"{dmg['MESSAGE']}", colour=embed_color_t)
                                                            previous_moves.append(f"(**{turn_total}**) **{t_card}**: {dmg['MESSAGE']}")
                                                            if tarm_siphon_active:
                                                                siphon_damage = (dmg['DMG'] * .10) + tsiphon_value
                                                                t_health = round(t_health + siphon_damage)
                                                                if t_health >= t_max_health:
                                                                    t_health = t_max_health
                                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}**: 💉 Siphoned **Full Health!**")
                                                                else:
                                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}**: 💉 Siphoned **{round(siphon_damage)}** Health!")
                                                                await button_ctx.defer(ignore=True)
                                                            if oarm_barrier_active and dmg['ELEMENT'] != psychic_element:
                                                                tarm_barrier_active=False
                                                                embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                previous_moves.append(f"(**{turn_total}**) **{t_card}**'s 💠 Barrier Disabled!")
                                                            await button_ctx.defer(ignore=True)
                                                        if o_health <= 0:
                                                            if o_final_stand==True:
                                                                if o_universe == "Dragon Ball Z":
                                                                    embedVar = discord.Embed(title=f"{o_card}'s LAST STAND", description=f"{o_card} FINDS RESOLVE", colour=0xe91e63)
                                                                    embedVar.add_field(name=f"**{o_card}** Resolved and continues to fight", value="All stats & stamina increased")
                                                                    if oarm_barrier_active and dmg['ELEMENT'] != psychic_element:
                                                                        tarm_barrier_active=False
                                                                        embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                        previous_moves.append(f"(**{turn_total}**) **{t_card}**'s 💠 Barrier Disabled!")
                                                                    previous_moves.append(f"(**{turn_total}**) **{o_card}** 🩸 Transformation: Last Stand!!!")
                                                                    
                                                                    o_health = int(.75 * (o_attack + o_defense))
                                                                    
                                                                    o_stamina = 100
                                                                    o_used_resolve = True
                                                                    o_used_focus = True
                                                                    o_final_stand = False
                                                                    t_stamina = t_stamina - int(dmg['STAMINA_USED'])
                                                                    turn_total = turn_total + 1
                                                                    turn = 0
                                                            else:
                                                                o_health = 0
                                                                t_stamina = t_stamina - int(dmg['STAMINA_USED'])
                                                                turn_total = turn_total + 1
                                                                # await button_ctx.defer(ignore=True)
                                                        else:
                                                            t_stamina = t_stamina - int(dmg['STAMINA_USED'])
                                                            turn_total = turn_total + 1
                                                            # await button_ctx.defer(ignore=True)
                                                            turn = 0

                                                else:
                                                    emessage = m.NOT_ENOUGH_STAMINA
                                                    embedVar = discord.Embed(title=emessage,
                                                                            description=f"Use abilities to Increase `STAM` or enter `FOCUS STATE`!",
                                                                            colour=0xe91e63)
                                                    #await button_ctx.send(embed=embedVar)
                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}**: Not enough Stamina to use this ability.")
                                                    turn = 1
                                        # except Exception as e:
                                        #     await ctx.send(f"{ctx.author.mention}, the match has ended. ")
                                        #     await button_ctx.defer(ignore=True)
                                        #     return
                                        except Exception as ex:
                                            trace = []
                                            tb = ex.__traceback__
                                            while tb is not None:
                                                trace.append({
                                                    "filename": tb.tb_frame.f_code.co_filename,
                                                    "name": tb.tb_frame.f_code.co_name,
                                                    "lineno": tb.tb_lineno
                                                })
                                                tb = tb.tb_next
                                            print(str({
                                                'type': type(ex).__name__,
                                                'message': str(ex),
                                                'trace': trace
                                            }))
                                            guild = self.bot.get_guild(main.guild_id)
                                            channel = guild.get_channel(main.guild_channel)
                                            await channel.send(f"'PLAYER': **{str(ctx.author)}**, 'GUILD': **{str(ctx.author.guild)}**, TYPE: {type(ex).__name__}, MESSAGE: {str(ex)}, TRACE: {trace}")

                                    
                                    # Play Bot
                                    else:
                                        # UNIVERSE CARD
                                        tap1 = list(t_1.values())[0] + tcard_lvl_ap_buff + t_shock_buff + t_basic_water_buff
                                        tap2 = list(t_2.values())[0] + tcard_lvl_ap_buff + t_shock_buff + t_special_water_buff
                                        tap3 = list(t_3.values())[0] + tcard_lvl_ap_buff + tdemon_slayer_buff + t_shock_buff + t_ultimate_water_buff
                                        tenh1 = list(t_enhancer.values())[0]
                                        tenh_name = list(t_enhancer.values())[2]
                                        tpet_enh_name = list(tpet_move.values())[2]
                                        tpet_msg_on_resolve = ""
                                        # UNIVERSE CARD
                                        if t_universe == "Souls" and t_used_resolve:
                                            player_2_card = showcard(t, tarm,t_max_health, t_health, t_max_stamina, t_stamina,
                                                                t_used_resolve, ttitle, t_used_focus, t_attack, t_defense,
                                                                turn_total, tap2, tap3, tap3, tenh1, tenh_name, tcard_lvl, o_defense)
                                        else:
                                            player_2_card = showcard(t, tarm,t_max_health, t_health, t_max_stamina, t_stamina,
                                                                    t_used_resolve, ttitle, t_used_focus, t_attack, t_defense,
                                                                    turn_total, tap1, tap2, tap3, tenh1, tenh_name, tcard_lvl, o_defense)
                                            
                                        if t_universe == "Solo Leveling" and not t_swapped:
                                            if temp_oarm_shield_active and not oarm_shield_active:
                                                if tarm_shield_active:
                                                    tshield_value = tshield_value + temp_oshield_value
                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 **ARISE!** *{oarm_name}* is now yours")
                                                    t_swapped = True
                                                elif not tarm_shield_active:
                                                    tarm_shield_active = True
                                                    tshield_value = temp_oshield_value
                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 **ARISE!** *{oarm_name}* is now yours")
                                                    t_swapped = True
                                            elif temp_oarm_barrier_active and not oarm_barrier_active:
                                                if tarm_barrier_active:
                                                    tbarrier_count = tbarrier_count + temp_obarrier_count
                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 **ARISE!** *{oarm_name}* is now yours")
                                                    t_swapped = True
                                                elif not tarm_barrier_active:
                                                    tarm_barrier_active = True
                                                    tbarrier_count = temp_obarrier_count
                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 **ARISE!** *{oarm_name}* is now yours")
                                                    t_swapped = True
                                            elif temp_oarm_parry_active and not oarm_parry_active:
                                                if tarm_parry_active:
                                                    tparry_count = tparry_count + temp_oparry_count
                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 **ARISE!** *{oarm_name}* is now yours")
                                                    t_swapped = True
                                                elif not tarm_parry_active:
                                                    tarm_parry_active = True
                                                    tparry_count = temp_oparry_count
                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 **ARISE!** *{oarm_name}* is now yours")
                                                    t_swapped = True
                                        tembedVar = discord.Embed(title=f"_Turn_ {turn_total}", description=textwrap.dedent(f"""\
                                        {previous_moves_into_embed}
                                        """), color=0xe74c3c)
                                        tembedVar.set_image(url="attachment://image.png")
                                        await battle_msg.delete(delay=2)
                                        await asyncio.sleep(2)
                                        battle_msg = await private_channel.send(embed=tembedVar, file=player_2_card)
                                        await asyncio.sleep(3)
                                        aiMove = 0

                                        if t_used_resolve and not t_pet_used and mode != "RAID":
                                            aiMove = 6
                                        elif t_enhancer['TYPE'] == "WAVE" and (turn_total % 10 == 0 or turn_total == 0 or turn_total == 1):
                                            if t_stamina >=20:
                                                aiMove =4
                                        elif tarm_barrier_active: #Ai Barrier Checks
                                            if t_stamina >=20: #Stamina Check For Enhancer
                                                aiMove = await ai_enhancer_moves(turn_total,t_used_focus,t_used_resolve,t_pet_used,t_stamina,
                                                                           t_enhancer['TYPE'],t_health,t_max_health,t_attack,
                                                                           t_defense,o_stamina,o_attack,o_defense, o_health)
                                            else:
                                                aiMove = 1
                                        elif o_health <=350: #Killing Blow
                                            if t_enhancer['TYPE'] == "BLAST":
                                                if t_stamina >=20:
                                                    aiMove =4
                                                else:
                                                    aiMove =1
                                            elif t_enhancer['TYPE'] == "WAVE" and (turn_total % 10 == 0 or turn_total == 0 or turn_total == 1):
                                                if t_stamina >=20:
                                                    aiMove =4
                                                else:
                                                    aiMove =1
                                            else:
                                                if t_stamina >= 90:
                                                    aiMove = 1
                                                elif t_stamina >= 80:
                                                    aiMove =3
                                                elif t_stamina >=30:
                                                    aiMove=2
                                                else:
                                                    aiMove=1
                                        elif o_stamina < 10:
                                            aiMove = 1
                                        elif t_health <= (.50 * t_max_health) and t_used_resolve == False and t_used_focus:
                                            aiMove = 5
                                        elif t_stamina >= 160 and (t_health >= o_health):
                                            aiMove = 3
                                        elif t_stamina >= 160:
                                            aiMove = 3
                                        elif t_stamina >= 150 and (t_health >= o_health):
                                            aiMove = 1
                                        elif t_stamina >= 150:
                                            aiMove = 1
                                        elif t_stamina >= 140 and (t_health >= o_health):
                                            aiMove = 1
                                        elif t_stamina >= 140:
                                            aiMove = 3
                                        elif t_stamina >= 130 and (t_health >= o_health):
                                            aiMove = 1
                                        elif t_stamina >= 130:
                                            aiMove = 3
                                        elif t_stamina >= 120 and (t_health >= o_health):
                                            aiMove = 2
                                        elif t_stamina >= 120:
                                            aiMove = 3
                                        elif t_stamina >= 110 and (t_health >= o_health):
                                            aiMove = 1
                                        elif t_stamina >= 110:
                                            aiMove = 2
                                        elif t_stamina >= 100 and (t_health >= o_health):
                                            aiMove = 4
                                        elif t_stamina >= 100:
                                            aiMove = 1
                                        elif t_stamina >= 90 and (t_health >= o_health):
                                            aiMove = 3
                                        elif t_stamina >= 90:
                                            aiMove = 4
                                        elif t_stamina >= 80 and (t_health >= o_health):
                                            aiMove = 1
                                        elif t_stamina >= 80:
                                            aiMove = 3
                                        elif t_stamina >= 70 and (t_health >= o_health):
                                            aiMove = 4
                                        elif t_stamina >= 70:
                                            aiMove = 1
                                        elif t_stamina >= 60 and (t_health >= o_health):
                                            aiMove = 1
                                        elif t_stamina >= 60:
                                            if t_used_resolve == False and t_used_focus:
                                                aiMove = 5
                                            elif t_used_focus == False:
                                                aiMove = 2
                                            else:
                                                aiMove = 1
                                        elif t_stamina >= 50 and (t_health >= o_health):
                                            if t_stamina >= o_stamina:
                                                aiMove = 4
                                            else:
                                                aiMove = 1
                                        elif t_stamina >= 50:
                                            aiMove = 2
                                        elif t_stamina >= 40 and (t_health >= o_health):
                                            aiMove = 1
                                        elif t_stamina >= 40:
                                            aiMove = 2
                                        elif t_stamina >= 30 and (t_health >= o_health):
                                            aiMove = 4
                                        elif t_stamina >= 30:
                                            aiMove = 2
                                        elif t_stamina >= 20 and (t_health >= o_health):
                                            aiMove = 1
                                        elif t_stamina >= 20:
                                            aiMove = 4
                                        elif t_stamina >= 10:
                                            aiMove = 1
                                        else:
                                            aiMove = 0

                                        if int(aiMove) == 0:
                                            t_health = 0
                                        if int(aiMove) == 1:
                                            if t_universe == "Souls" and t_used_resolve:
                                                dmg = damage_cal(o_opponent_affinities, special_attack_name, tmove2_element, t_universe, t_card, t_2, t_attack, t_defense, o_defense, t_stamina,
                                                                t_enhancer_used, t_health, o_health, o_stamina, t_max_health,
                                                                o_attack, t_special_move_description, turn_total,
                                                                tcard_lvl_ap_buff, t_1)
                                            else:
                                                dmg = damage_cal(o_opponent_affinities, basic_attack_name, tmove1_element, t_universe, t_card, t_1, t_attack, t_defense, o_defense, t_stamina,
                                                                t_enhancer_used, t_health, o_health, o_stamina, t_max_health,
                                                                o_attack, t_special_move_description, turn_total,
                                                                tcard_lvl_ap_buff, None)
                                        elif int(aiMove) == 2:
                                            if t_universe == "Souls" and t_used_resolve:
                                                dmg = damage_cal(o_opponent_affinities, ultimate_attack_name, tmove3_element, t_universe, t_card, t_3, t_attack, t_defense, o_defense, t_stamina,
                                                                t_enhancer_used, t_health, o_health, o_stamina, t_max_health,
                                                                o_attack, t_special_move_description, turn_total,
                                                                tcard_lvl_ap_buff, t_2)
                                            else:
                                                dmg = damage_cal(o_opponent_affinities, special_attack_name, tmove2_element, t_universe, t_card, t_2, t_attack, t_defense, o_defense, t_stamina,
                                                                t_enhancer_used, t_health, o_health, o_stamina, t_max_health,
                                                                o_attack, t_special_move_description, turn_total,
                                                                tcard_lvl_ap_buff, None)
                                        elif int(aiMove) == 3:
                                            dmg = damage_cal(o_opponent_affinities, ultimate_attack_name, tmove3_element, t_universe, t_card, t_3, t_attack, t_defense, o_defense, t_stamina,
                                                            t_enhancer_used, t_health, o_health, o_stamina, t_max_health,
                                                            o_attack, t_special_move_description, turn_total,
                                                            tcard_lvl_ap_buff, None)
                                            if t_gif != "N/A" and not operformance:
                                                await battle_msg.delete(delay=None)
                                                await asyncio.sleep(2)
                                                battle_msg = await private_channel.send(f"{t_gif}")
                                                await asyncio.sleep(1)
                                        elif int(aiMove) == 4:
                                            t_enhancer_used = True
                                            dmg = damage_cal(o_opponent_affinities, basic_attack_name, tmove1_element, t_universe, t_card, t_enhancer, t_attack, t_defense, o_defense,
                                                            t_stamina, t_enhancer_used, t_health, o_health, o_stamina,
                                                            t_max_health, o_attack, t_special_move_description, turn_total,
                                                            tcard_lvl_ap_buff, None)
                                            t_enhancer_used = False
                                        elif int(aiMove) == 5:
                                            if not t_used_resolve and t_used_focus:
                                                if t_universe == "My Hero Academia":  # My hero TRait
                                                    # fortitude or luck is based on health
                                                    fortitude = 0.0
                                                    low = t_health - (t_health * .75)
                                                    high = t_health - (t_health * .66)
                                                    fortitude = round(random.randint(int(low), int(high)))
                                                    # Resolve Scaling
                                                    t_resolve_health = round(fortitude + (.5 * t_resolve))
                                                    t_resolve_attack = round(
                                                        (.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                                    t_resolve_defense = round(
                                                        (.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                                    tcard_lvl_ap_buff = tcard_lvl_ap_buff + 80 + turn_total

                                                    t_stamina = t_stamina + t_resolve
                                                    t_health = t_health + t_resolve_health
                                                    t_attack = round(t_attack + t_resolve_attack)
                                                    t_defense = round(t_defense - t_resolve_defense)
                                                    t_used_resolve = True

                                                    embedVar = discord.Embed(title=f"{t_card} PLUS ULTRAAA",
                                                                            description=f"**{t_card} says**\n{t_resolve_description}",
                                                                            colour=0xe91e63)
                                                    embedVar.add_field(name=f"Transformation: Plus Ultra",
                                                                    value="You do not lose a turn after you Resolve.")
                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 Resolved: PLUS ULTRA!")
                                                    turn_total = turn_total + 1
                                                    turn = 1
                                                elif t_universe == "Demon Slayer": 
                                                    # fortitude or luck is based on health
                                                    fortitude = 0.0
                                                    low = t_health - (t_health * .75)
                                                    high = t_health - (t_health * .66)
                                                    fortitude = round(random.randint(int(low), int(high)))
                                                    # Resolve Scaling
                                                    t_resolve_health = round(fortitude + (.5 * t_resolve))
                                                    t_resolve_attack = round(
                                                        (.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                                    t_resolve_defense = round(
                                                        (.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                                    

                                                    t_stamina = t_stamina + t_resolve
                                                    t_health = t_health + t_resolve_health
                                                    t_attack = round(t_attack + t_resolve_attack)
                                                    t_defense = round(t_defense - t_resolve_defense)
                                                    if o_attack > t_attack:
                                                        t_attack = o_attack
                                                    if o_defense > t_defense:
                                                        t_defense = o_defense
                                                    t_used_resolve = True
                                                    t_pet_used = False
                                                    embedVar = discord.Embed(title=f"{t_card} begins Total Concentration Breathing",
                                                                            description=f"**{t_card} says**\n{t_resolve_description}",
                                                                            colour=0xe91e63)
                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 Resolved: Total Concentration Breathing!")
                                                
                                                    turn_total = turn_total + 1
                                                    turn = 0

                                                elif t_universe == "Naruto": 
                                                    # fortitude or luck is based on health
                                                    fortitude = 0.0
                                                    low = t_health - (t_health * .75)
                                                    high = t_health - (t_health * .66)
                                                    fortitude = round(random.randint(int(low), int(high)))
                                                    # Resolve Scaling
                                                    t_resolve_health = round(fortitude + (.5 * t_resolve))
                                                    t_resolve_attack = round(
                                                        (.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                                    t_resolve_defense = round(
                                                        (.30 * t_defense) * (t_resolve / (.50 * t_defense)))

                                                    t_stamina = t_stamina + t_resolve
                                                    t_health = t_health + t_resolve_health
                                                    t_health = t_health + t_naruto_heal_buff
                                                    t_attack = round(t_attack + t_resolve_attack)
                                                    t_defense = round(t_defense - t_resolve_defense)
                                                    t_used_resolve = True
                                                    t_pet_used = False
                                                    embedVar = discord.Embed(title=f"{t_card} Heals from Hashirama Cells",
                                                                            description=f"**{t_card} says**\n{t_resolve_description}",
                                                                            colour=0xe91e63)
                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 Resolved: Hashirama Cells heal you for **{t_naruto_heal_buff}**")
                                                    turn_total = turn_total + 1
                                                    turn = 0


                                                elif t_universe == "Attack On Titan":
                                                    # fortitude or luck is based on health
                                                    fortitude = 0.0
                                                    low = t_health - (t_health * .75)
                                                    high = t_health - (t_health * .66)
                                                    fortitude = round(random.randint(int(low), int(high)))
                                                    # Resolve Scaling
                                                    t_resolve_health = round(fortitude + (.5 * t_resolve))
                                                    t_resolve_attack = round(
                                                        (.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                                    t_resolve_defense = round(
                                                        (.30 * t_defense) * (t_resolve / (.50 * t_defense)))

                                                    t_stamina = t_stamina + t_resolve
                                                    t_health = t_health + t_resolve_health
                                                    t_attack = round(t_attack + t_resolve_attack)
                                                    t_defense = round(t_defense - t_resolve_defense)
                                                    t_used_resolve = True
                                                    t_pet_used = False
                                                    health_boost = 100 * t_focus_count
                                                    t_health = t_health + health_boost
                                                    embedVar = discord.Embed(title=f"{t_card} Titan Mode",
                                                                            description=f"**{t_card} says**\n{t_resolve_description}",
                                                                            colour=0xe91e63)
                                                    embedVar.add_field(name=f"Transformation Complete",
                                                                    value=f"Health increased by **{health_boost}**!")
                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 Resolved: Titan Mode")

                                                    turn_total = turn_total + 1
                                                    turn = 0

                                                elif t_universe == "Bleach":  # Bleach Trait
                                                    # fortitude or luck is based on health
                                                    fortitude = 0.0
                                                    low = t_health - (t_health * .75)
                                                    high = t_health - (t_health * .66)
                                                    fortitude = round(random.randint(int(low), int(high)))
                                                    # Resolve Scaling
                                                    t_resolve_health = round(fortitude + (.5 * t_resolve))
                                                    t_resolve_attack = round(
                                                        (.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                                    t_resolve_defense = round(
                                                        (.30 * t_defense) * (t_resolve / (.50 * t_defense)))

                                                    t_stamina = t_stamina + t_resolve
                                                    t_health = t_health + t_resolve_health
                                                    t_attack = round((t_attack + (2 * t_resolve_attack))* 2)
                                                    t_defense = round(t_defense - t_resolve_defense)
                                                    # if t_defense >= 120:
                                                    # t_defense = 120
                                                    t_used_resolve = True

                                                    embedVar = discord.Embed(title=f"{t_card} STRENGTHENED RESOLVE :zap:",
                                                                            description=f"**{t_card} says**\n{t_resolve_description}",
                                                                            colour=0xe91e63)
                                                    embedVar.add_field(name=f"Transformation: Bankai",
                                                                    value="Gain double Attack on Resolve.")
                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 Resolved: Bankai!")
                                                    turn_total = turn_total + 1
                                                    turn = 0
                                                elif t_universe == "God Of War":  # God Of War Trait
                                                    # fortitude or luck is based on health
                                                    fortitude = 0.0
                                                    low = t_health - (t_health * .75)
                                                    high = t_health - (t_health * .66)
                                                    fortitude = round(random.randint(int(low), int(high)))
                                                    # Resolve Scaling
                                                    t_resolve_health = round(fortitude + (.5 * t_resolve))
                                                    t_resolve_attack = round(
                                                        (.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                                    t_resolve_defense = round(
                                                        (.30 * t_defense) * (t_resolve / (.50 * t_defense)))

                                                    t_stamina = t_stamina + t_resolve
                                                    t_health = t_max_health
                                                    t_attack = round(t_attack + t_resolve_attack)
                                                    t_defense = round(t_defense - t_resolve_defense)
                                                    t_used_resolve = True

                                                    if t_gow_resolve:
                                                        previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 Resolved: Ascension!")
                                                    elif not t_gow_resolve:
                                                        t_used_resolve = False
                                                        t_gow_resolve = True
                                                        t_defense = 125
                                                        previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 Crushed Blood Orb: Health Refill")
                                                    

                                                    embedVar = discord.Embed(title=f"{t_card} STRENGTHENED RESOLVE :zap:",
                                                                            description=f"**{t_card} says**\n{t_resolve_description}",
                                                                            colour=0xe91e63)
                                                    embedVar.add_field(name=f"Transformation: Ascension",
                                                                    value="On Resolve Refill Health.")
                                                    
                                                    turn_total = turn_total + 1
                                                    turn = 0
                                                elif t_universe == "Fate":  # Fate Trait
                                                    # fortitude or luck is based on health
                                                    fortitude = 0.0
                                                    low = t_health - (t_health * .75)
                                                    high = t_health - (t_health * .66)
                                                    fortitude = round(random.randint(int(low), int(high)))
                                                    # Resolve Scaling
                                                    t_resolve_health = round(fortitude + (.5 * t_resolve))
                                                    t_resolve_attack = round(
                                                        (.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                                    t_resolve_defense = round(
                                                        (.30 * t_defense) * (t_resolve / (.50 * t_defense)))

                                                    t_stamina = t_stamina + t_resolve
                                                    t_health = t_health + t_resolve_health
                                                    t_attack = round(t_attack + t_resolve_attack)
                                                    t_defense = round(t_defense - t_resolve_defense)
                                                    t_used_resolve = True

                                                    dmg = damage_cal(o_opponent_affinities, ultimate_attack_name, tmove3_element, t_universe, t_card, t_3, t_attack, t_defense, o_defense,
                                                                    t_stamina, t_enhancer_used, t_health, o_health, o_stamina,
                                                                    t_max_health, o_attack, t_special_move_description,
                                                                    turn_total, tcard_lvl_ap_buff, None)
                                                    t_pet_used = False
                                                    o_health = o_health - int(dmg['DMG'])
                                                    embedVar = discord.Embed(
                                                        title=f"{t_card} STRENGTHENED RESOLVE :zap:\n\n{dmg['MESSAGE']}",
                                                        description=f"**{t_card} says**\n{t_resolve_description}",
                                                        colour=0xe91e63)
                                                    embedVar.add_field(name=f"Transformation: Command Seal",
                                                                    value="On Resolve, Strike with Ultimate, then Focus.")
                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 Resolved: Command Seal!")
                                                    # t_stamina = 0
                                                    turn_total = turn_total + 1
                                                    turn = 0
                                                elif t_universe == "Kanto Region" or t_universe == "Johto Region" or t_universe == "Hoenn Region" or t_universe == "Sinnoh Region" or t_universe == "Kalos Region" or t_universe == "Unova Region" or t_universe == "Alola Region" or t_universe == "Galar Region":  # Pokemon Resolves
                                                    # fortitude or luck is based on health
                                                    fortitude = 0.0
                                                    low = t_health - (t_health * .75)
                                                    high = t_health - (t_health * .66)
                                                    fortitude = round(random.randint(int(low), int(high)))
                                                    # Resolve Scaling
                                                    t_resolve_health = round(fortitude + (.5 * t_resolve))
                                                    t_resolve_attack = round(
                                                        (.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                                    t_resolve_defense = round(
                                                        (.30 * t_defense) * (t_resolve / (.50 * t_defense)))

                                                    t_stamina = t_stamina + t_resolve
                                                    t_health = t_health + t_resolve_health
                                                    t_attack = round(t_attack + t_resolve_attack)
                                                    t_defense = round(t_defense) * 2
                                                    t_used_resolve = True

                                                    embedVar = discord.Embed(title=f"{t_card} STRENGTHENED RESOLVE :zap:",
                                                                            description=f"**{t_card} says**\n{t_resolve_description}",
                                                                            colour=0xe91e63)
                                                    embedVar.add_field(name=f"Transformation: Evolution",
                                                                    value="When you Resolve you do not lose Defense.")
                                                    if turn_total >= 50:
                                                        t_max_health = t_max_health + 1000
                                                        t_health = t_health + 1000
                                                        previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 Resolved: Gigantomax Evolution!!! Gained **1000** HP!!!")
                                                    elif turn_total >= 30:
                                                        t_max_health = t_max_health + 300
                                                        t_health = t_health + 300
                                                        previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 Resolved: Mega Evolution!! Gained **300** HP!")
                                                    else:
                                                        previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 Resolved: Evolution!")
                                                    turn_total = turn_total + 1
                                                    turn = 0
                                                else:
                                                    # fortitude or luck is based on health
                                                    fortitude = 0.0
                                                    low = t_health - (t_health * .75)
                                                    high = t_health - (t_health * .66)
                                                    fortitude = round(random.randint(int(low), int(high)))
                                                    # Resolve Scaling
                                                    t_resolve_health = round(fortitude + (.5 * t_resolve))
                                                    t_resolve_attack = round(
                                                        (.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                                    t_resolve_defense = round(
                                                        (.30 * t_defense) * (t_resolve / (.50 * t_defense)))

                                                    t_stamina = t_stamina + t_resolve
                                                    t_health = t_health + t_resolve_health
                                                    t_attack = round(t_attack + t_resolve_attack)
                                                    t_defense = round(t_defense - t_resolve_defense)
                                                    t_used_resolve = True

                                                    if t_universe == "League Of Legends":
                                                        o_health = o_health - (60 * (o_focus_count + t_focus_count))
                                                        embedVar = discord.Embed(title=f"{t_card} PENTA KILL!",
                                                                                description=f"**{t_card} says**\n{t_resolve_description}",
                                                                                colour=0xe91e63)
                                                        embedVar.add_field(name=f"Nexus Destroyed",
                                                                        value=f"**{t_card}** dealt **{(60 * (o_focus_count + t_focus_count))}** damage.")
                                                        previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 Resolved: Pentakill! Dealing {(60 * (o_focus_count + t_focus_count))} damage.")
                                                    elif t_universe == "Souls":
                                                        previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 Phase 2: Enhanced Moveset!")
                                                        
                                                    else:
                                                        embedVar = discord.Embed(title=f"{t_card} STRENGTHENED RESOLVE :zap:",
                                                                                description=f"**{t_card} says**\n{t_resolve_description}",
                                                                                colour=0xe91e63)
                                                        embedVar.add_field(name=f"Transformation",
                                                                        value="All stats & stamina greatly increased")
                                                        previous_moves.append(f"(**{turn_total}**) ⚡ **{t_card}** Resolved!")
                                                    turn_total = turn_total + 1
                                                    turn = 0
                                            else:
                                                previous_moves.append(f"(**{turn_total}**) {t_card} cannot resolve!")
                                                turn = 1
                                        elif int(aiMove) == 6:
                                            # Resolve Check and Calculation
                                            if t_used_resolve and t_used_focus and not t_pet_used and mode != "RAID":
                                                t_enhancer_used = True
                                                dmg = damage_cal(o_opponent_affinities, basic_attack_name, tmove1_element, t_universe, t_card, tpet_move, t_attack, t_defense, o_defense,
                                                                t_stamina, t_enhancer_used, t_health, o_health, o_stamina,
                                                                t_max_health, o_attack, t_special_move_description, turn_total,
                                                                tcard_lvl_ap_buff, None)
                                                t_enhancer_used = False
                                                t_pet_used = True
                                                tpet_dmg = dmg['DMG']
                                                tpet_type = dmg['ENHANCED_TYPE']
                                                if dmg['CAN_USE_MOVE']:
                                                    if tpet_type == 'ATK':
                                                        t_attack = round(t_attack + dmg['DMG'])
                                                    elif tpet_type == 'DEF':
                                                        t_defense = round(t_defense + dmg['DMG'])
                                                    elif tpet_type == 'STAM':
                                                        t_stamina = round(t_stamina + dmg['DMG'])
                                                    elif tpet_type == 'HLT':
                                                        t_health = round(t_health + dmg['DMG'])
                                                    elif tpet_type == 'LIFE':
                                                        t_health = round(t_health + dmg['DMG'])
                                                        o_health = round(o_health - dmg['DMG'])
                                                    elif tpet_type == 'DRAIN':
                                                        t_stamina = round(t_stamina + dmg['DMG'])
                                                        o_stamina = round(o_stamina - dmg['DMG'])
                                                    elif tpet_type == 'FLOG':
                                                        t_attack = round(t_attack + dmg['DMG'])
                                                        o_attack = round(o_attack - dmg['DMG'])
                                                    elif tpet_type == 'WITHER':
                                                        t_defense = round(t_defense + dmg['DMG'])
                                                        o_defense = round(o_defense - dmg['DMG'])
                                                    elif tpet_type == 'RAGE':
                                                        t_defense = round(t_defense - dmg['DMG'])
                                                        t_attack = round(t_attack + dmg['DMG'])
                                                    elif tpet_type == 'BRACE':
                                                        t_defense = round(t_defense + dmg['DMG'])
                                                        t_attack = round(t_attack - dmg['DMG'])
                                                    elif tpet_type == 'BZRK':
                                                        t_health = round(t_health - dmg['DMG'])
                                                        t_attack = round(t_attack + dmg['DMG'])
                                                    elif tpet_type == 'CRYSTAL':
                                                        t_health = round(t_health - dmg['DMG'])
                                                        t_defense = round(t_defense + dmg['DMG'])
                                                    elif tpet_type == 'GROWTH':
                                                        t_max_health = round(t_max_health - dmg['DMG'])
                                                        t_defense = round(t_defense + (dmg['DMG'] * .5))
                                                        t_attack = round(t_attack + (dmg['DMG'] * .5))
                                                    elif tpet_type == 'STANCE':
                                                        tempattack = dmg['DMG']
                                                        t_attack = t_defense
                                                        t_defense = tempattack
                                                    elif tpet_type == 'CONFUSE':
                                                        tempattack = dmg['DMG']
                                                        o_attack = o_defense
                                                        o_defense = tempattack
                                                    elif tpet_type == 'BLINK':
                                                        t_stamina = round(t_stamina - dmg['DMG'])
                                                        o_stamina = round(o_stamina + dmg['DMG'])
                                                    elif tpet_type == 'SLOW':
                                                        tempstam = round(o_stamina + dmg['DMG'])
                                                        t_stamina = round(t_stamina - dmg['DMG'])
                                                        o_stamina = t_stamina
                                                        t_stamina = tempstam
                                                    elif tpet_type == 'HASTE':
                                                        tempstam = round(o_stamina - dmg['DMG'])
                                                        t_stamina = round(t_stamina + dmg['DMG'])
                                                        o_stamina = t_stamina
                                                        t_stamina = tempstam
                                                    elif tpet_type == 'SOULCHAIN':
                                                        t_stamina = round(dmg['DMG'])
                                                        o_stamina = t_stamina
                                                    elif tpet_type == 'GAMBLE':
                                                        t_health = round(dmg['DMG'])
                                                        o_health = t_health
                                                    elif tpet_type == 'FEAR':
                                                        t_max_health = round(t_max_health - dmg['DMG'])
                                                        o_defense = round(o_defense - (dmg['DMG'] * .5))
                                                        o_attack = round(o_attack - (dmg['DMG'] * .5))
                                                    elif tpet_type == 'WAVE':
                                                        o_health = round(o_health - dmg['DMG'])
                                                    elif tpet_type == 'BLAST':
                                                        if dmg['DMG'] >= 100:
                                                            dmg['DMG'] = 100
                                                        o_health = round(o_health - dmg['DMG'])
                                                    elif tpet_type == 'CREATION':
                                                        t_max_health = round(t_max_health + dmg['DMG'])
                                                        t_health = round(t_health + dmg['DMG'])
                                                    elif tpet_type == 'DESTRUCTION':
                                                        if dmg['DMG'] >= 100:
                                                            dmg['DMG'] = 100
                                                        o_max_health = round(o_max_health - dmg['DMG'])
                                                        if o_max_health <=1:
                                                            o_max_health = 1
                                                    t_stamina = t_stamina - int(dmg['STAMINA_USED'])

                                                    if t_universe == "Persona":
                                                        petdmg = damage_cal(o_opponent_affinities, basic_attack_name, tmove1_element, t_universe, t_card, tpet_move, t_attack,
                                                                            t_defense, o_defense, t_stamina,
                                                                            t_enhancer_used, t_health, o_health, o_stamina,
                                                                            t_max_health, o_attack,
                                                                            t_special_move_description, turn_total,
                                                                            tcard_lvl_ap_buff, None)

                                                        o_health = o_health - petdmg['DMG']

                                                        embedVar = discord.Embed(
                                                            title=f"**PERSONA!**\n{tpet_name} was summoned from {t_card}'s soul dealing **{petdmg['DMG']}** damage!!",
                                                            colour=0xe91e63)
                                                        await battle_msg.delete(delay=2)
                                                        if not operformance:
                                                            tsummon_file = showsummon(tpet_image, tpet_name, dmg['MESSAGE'], tpet_lvl, tpet_bond)
                                                            embedVar.set_image(url="attachment://pet.png")
                                                            await asyncio.sleep(2)
                                                            battle_msg = await private_channel.send(embed=embedVar, file=tsummon_file)
                                                            await asyncio.sleep(2)
                                                            await battle_msg.delete(delay=2)
                                                        #embedVar.set_image(url="attachment://pet.png")
    
                                                        previous_moves.append(f"(**{turn_total}**) **Persona!** 🩸 : **{tpet_name}** was summoned from **{t_card}'s** soul dealing **{petdmg['DMG']}** damage!\n**{o_card}** summon disabled!")
                                                        o_pet_used = True
                                                        #await button_ctx.defer(ignore=True)
                                                        #await battle_msg.delete(delay=2)
                                                    else:
                                                        embedVar = discord.Embed(
                                                            title=f"{t_card} Summoned 🧬 **{tpet_name}**",
                                                            colour=0xe91e63)
                                                        await battle_msg.delete(delay=2)
                                                        if not operformance:
                                                            tsummon_file = showsummon(tpet_image, tpet_name, dmg['MESSAGE'], tpet_lvl, tpet_bond)
                                                            embedVar.set_image(url="attachment://pet.png")
                                                            await asyncio.sleep(2)
                                                            battle_msg = await private_channel.send(embed=embedVar, file=tsummon_file)
                                                            await asyncio.sleep(2)
                                                            await battle_msg.delete(delay=None)
                                                        
                                                        
                                                        #embedVar.set_image(url="attachment://pet.png")

                                                        previous_moves.append(f"(**{turn_total}**) **{t_card}** Summoned 🧬 **{tpet_name}**: {dmg['MESSAGE']}")
                                                            
                                                    turn = 1
                                            else:
                                                previous_moves.append(f"(**{turn_total}**) {t_card} Could not summon 🧬 **{tpet_name}**. Needs rest")
                                                turn = 1
                                        elif int(aiMove) == 7:
                                            if t_universe == "Persona":
                                                block_message = f"**Confidant Block!*** 🩸: **{t_card}** Blocked 🛡️"
                                                t_block_used = True
                                                t_defense = round(t_defense * 2)

                                                previous_moves.append(block_message)
                                                await button_ctx.defer(ignore=True)
                                                turn_total = turn_total + 1
                                                turn = 0


                                            if t_stamina >= 20:
                                                if t_universe == "Attack On Titan":
                                                    previous_moves.append(f"(**{turn_total}**) **Rally** 🩸 ! **{t_card}** Increased Max Health ❤️")
                                                    t_max_health = round(t_max_health + 100)
                                                    t_health = t_health + 100

                                                if t_universe == "Bleach":
                                                    dmg = damage_cal(o_opponent_affinities, basic_attack_name, tmove1_element, t_universe, t_card, t_1, t_attack, t_defense, o_defense,
                                                                    t_stamina, t_enhancer_used, t_health, o_health, o_stamina,
                                                                    t_max_health, o_attack, t_special_move_description, turn_total,
                                                                    tcard_lvl_ap_buff, None)
                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}** Exerted their 🩸 Spiritual Pressure - {dmg['MESSAGE']}")
                                                    if dmg['REPEL']:
                                                        t_health = t_health - dmg['DMG']
                                                    elif dmg['ABSORB']:
                                                        o_health = o_health + dmg['DMG']
                                                    elif dmg['ELEMENT'] == water_element:
                                                        if tmove1_element == water_element:
                                                            t_basic_water_buff = t_basic_water_buff + 25
                                                        if tmove2_element == water_element:
                                                            t_special_water_buff = t_special_water_buff + 25
                                                        if tmove3_element == water_element:
                                                            t_ultimate_water_buff = t_ultimate_water_buff + 25
                                                        o_health = o_health - (dmg['DMG'] + t_water_buff)

                                                    elif dmg['ELEMENT'] == earth_element:
                                                        t_defense = t_defense + (dmg['DMG'] * .20)
                                                        o_health = o_health - dmg['DMG']

                                                    elif dmg['ELEMENT'] == recoil_element:
                                                        t_health = t_health - (dmg['DMG'] * .25)
                                                        o_health = o_health - dmg['DMG']

                                                    elif dmg['ELEMENT'] == time_element:
                                                        t_stamina = 0
                                                        o_health = o_health - dmg['DMG']


                                                    elif dmg['ELEMENT'] == death_element:
                                                        o_max_health = o_max_health - (dmg['DMG'] * .07)
                                                        o_health = o_health - dmg['DMG']

                                                    elif dmg['ELEMENT'] == light_element:
                                                        t_stamina = round(t_stamina + (dmg['STAMINA_USED'] / 2))
                                                        o_health = o_health - dmg['DMG']

                                                    elif dmg['ELEMENT'] == dark_element:
                                                        t_stamina = t_stamina + 5
                                                        o_stamina = o_stamina - 5
                                                        o_health = o_health - dmg['DMG']

                                                    elif dmg['ELEMENT'] == life_element:
                                                        t_health = t_health + (dmg['DMG'] * .15)
                                                        o_health = o_health - dmg['DMG']

                                                    elif dmg['ELEMENT'] == psychic_element:
                                                        o_defense = o_defense - (dmg['DMG'] * .08)
                                                        o_attack = o_attack - (dmg['DMG'] * .08)
                                                        o_health = o_health - dmg['DMG']

                                                    elif dmg['ELEMENT'] == fire_element:
                                                        t_burn_dmg = t_burn_dmg + round(dmg['DMG'] * .20)
                                                        o_health = o_health - dmg['DMG']


                                                    elif dmg['ELEMENT'] == electric_element:
                                                        t_shock_buff = t_shock_buff +  (dmg['DMG'] * .07)
                                                        o_health = o_health - dmg['DMG']

                                                    elif dmg['ELEMENT'] == poison_element:
                                                        if t_poison_dmg <= 100:
                                                            t_poison_dmg = t_poison_dmg + 8
                                                        o_health = o_health - dmg['DMG']

                                                    elif dmg['ELEMENT'] == ice_element:
                                                        t_ice_counter = t_ice_counter + 1
                                                        if t_ice_counter == 3:
                                                            t_freeze_enh = True
                                                            t_ice_counter = 0
                                                        o_health = o_health - dmg['DMG']

                                                    elif dmg['ELEMENT'] == bleed_element:
                                                        t_bleed_counter = t_bleed_counter + 1
                                                        if t_bleed_counter == 5:
                                                            t_bleed_hit = True
                                                            t_bleed_counter = 0
                                                        o_health = o_health - dmg['DMG']
                                                        
                                                    elif dmg['ELEMENT'] == gravity_element:
                                                        t_gravity_hit = True
                                                        o_health = o_health - dmg['DMG']
                                                    
                                                    else:
                                                        o_health = o_health - dmg['DMG']




                                                t_stamina = t_stamina - 20
                                                t_block_used = True
                                                t_defense = round(t_defense * 2)
                                                previous_moves.append(f"(**{turn_total}**) **{t_card}:** Blocked 🛡️")
                                                turn_total = turn_total + 1
                                                turn = 0
                                            else:
                                                turn = 1
                                        if int(aiMove) != 5 and int(aiMove) != 6 and int(aiMove) != 7:
                                            # If you have enough stamina for move, use it
                                            if dmg['CAN_USE_MOVE']:
                                                if dmg['ENHANCE']:
                                                    enh_type = dmg['ENHANCED_TYPE']
                                                    if enh_type == 'ATK':
                                                        t_attack = round(t_attack + dmg['DMG'])
                                                    elif enh_type == 'DEF':
                                                        t_defense = round(t_defense + dmg['DMG'])
                                                    elif enh_type == 'STAM':
                                                        t_stamina = round(t_stamina + dmg['DMG'])
                                                    elif enh_type == 'HLT':
                                                        t_health = round(t_health + dmg['DMG'])
                                                    elif enh_type == 'LIFE':
                                                        t_health = round(t_health + dmg['DMG'])
                                                        o_health = round(o_health - dmg['DMG'])
                                                    elif enh_type == 'DRAIN':
                                                        t_stamina = round(t_stamina + dmg['DMG'])
                                                        o_stamina = round(o_stamina - dmg['DMG'])
                                                    elif enh_type == 'FLOG':
                                                        t_attack = round(t_attack + dmg['DMG'])
                                                        o_attack = round(o_attack - dmg['DMG'])
                                                    elif enh_type == 'WITHER':
                                                        t_defense = round(t_defense + dmg['DMG'])
                                                        o_defense = round(o_defense - dmg['DMG'])
                                                    elif enh_type == 'RAGE':
                                                        t_defense = round(t_defense - dmg['DMG'])
                                                        t_attack = round(t_attack + dmg['DMG'])
                                                    elif enh_type == 'BRACE':
                                                        t_defense = round(t_defense + dmg['DMG'])
                                                        t_attack = round(t_attack - dmg['DMG'])
                                                    elif enh_type == 'BZRK':
                                                        t_health = round(t_health - dmg['DMG'])
                                                        t_attack = round(t_attack + (dmg['DMG']))
                                                    elif enh_type == 'CRYSTAL':
                                                        t_health = round(t_health - dmg['DMG'])
                                                        t_defense = round(t_defense + dmg['DMG'])
                                                    elif enh_type == 'GROWTH':
                                                        t_max_health = round(t_max_health - dmg['DMG'])
                                                        t_defense = round(t_defense + (dmg['DMG'] * .5))
                                                        t_attack = round(t_attack + (dmg['DMG'] * .5))
                                                    elif enh_type == 'STANCE':
                                                        tempattack = dmg['DMG']
                                                        t_attack = t_defense
                                                        t_defense = tempattack
                                                    elif enh_type == 'CONFUSE':
                                                        tempattack = dmg['DMG']
                                                        o_attack = o_defense
                                                        o_defense = tempattack
                                                    elif enh_type == 'BLINK':
                                                        t_stamina = round(t_stamina - dmg['DMG'])
                                                        o_stamina = round(o_stamina + dmg['DMG'])
                                                    elif enh_type == 'SLOW':
                                                        tempstam = round(o_stamina + dmg['DMG'])
                                                        t_stamina = round(t_stamina - dmg['DMG'])
                                                        o_stamina = t_stamina
                                                        t_stamina = tempstam
                                                    elif enh_type == 'HASTE':
                                                        tempstam = round(o_stamina - dmg['DMG'])
                                                        t_stamina = round(t_stamina + dmg['DMG'])
                                                        o_stamina = t_stamina
                                                        t_stamina = tempstam
                                                    elif enh_type == 'SOULCHAIN':
                                                        t_stamina = round(dmg['DMG'])
                                                        o_stamina = t_stamina
                                                    elif enh_type == 'GAMBLE':
                                                        t_health = round(dmg['DMG'])
                                                        o_health = t_health
                                                    elif enh_type == 'FEAR':
                                                        t_max_health = round(t_max_health - dmg['DMG'])
                                                        o_defense = round(o_defense - (dmg['DMG'] * .5))
                                                        o_attack = round(o_attack - (dmg['DMG'] * .5))
                                                    elif enh_type == 'WAVE':
                                                        o_health = round(o_health - dmg['DMG'])
                                                    elif enh_type == 'BLAST':
                                                        o_health = round(o_health - dmg['DMG'])
                                                    elif enh_type == 'CREATION':
                                                        t_max_health = round(t_max_health + dmg['DMG'])
                                                        t_health = round(t_health + dmg['DMG'])
                                                    elif enh_type == 'DESTRUCTION':
                                                        # t_max_health = round(t_max_health - dmg['DMG'])
                                                        o_max_health = round(o_max_health - dmg['DMG'])
                                                        # if t_max_health <=1:
                                                        #     t_max_health = 1
                                                        if o_max_health <=1:
                                                            o_max_health = 1
                                                    if enh_type in Stamina_Enhancer_Check or enh_type in Time_Enhancer_Check or enh_type in Control_Enhancer_Check:
                                                        t_stamina = t_stamina
                                                    else:
                                                        t_stamina = t_stamina - int(dmg['STAMINA_USED'])

                                                    embedVar = discord.Embed(title=f"{dmg['MESSAGE']}", colour=embed_color_t)
                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}**: 🦠 {dmg['MESSAGE']}")
                                                    turn_total = turn_total + 1
                                                    turn = 0
                                                elif dmg['DMG'] == 0:
                                                    t_stamina = t_stamina - int(dmg['STAMINA_USED'])
                                                    embedVar = discord.Embed(title=f"{dmg['MESSAGE']}", colour=embed_color_t)
                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}**: {dmg['MESSAGE']}")
                                                    if oarm_barrier_active and dmg['ELEMENT'] != psychic_element:
                                                        tarm_barrier_active=False
                                                        embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                        previous_moves.append(f"(**{turn_total}**) **{t_card}**'s 💠 Barrier Disabled!")
                                                    turn_total = turn_total + 1
                                                    turn = 0
                                                else:
                                                    if o_universe == "Naruto" and o_stamina < 10:
                                                        o_stored_damage = round(dmg['DMG'])
                                                        o_naruto_heal_buff = o_naruto_heal_buff + o_stored_damage
                                                        o_health = o_health 
                                                        embedVar = discord.Embed(title=f"{o_card}: Substitution Jutsu", description=f"{t_card} strikes a log", colour=0xe91e63)
                                                        previous_moves.append(f"(**{turn_total}**) **{o_card}** 🩸: Substitution Jutsu")
                                                        if not o_used_resolve:
                                                            previous_moves.append(f"(**{turn_total}**) 🩸**{o_stored_damage}** Hasirama Cells stored. 🩸**{o_naruto_heal_buff}** total stored.")
                                                        if oarm_barrier_active and dmg['ELEMENT'] != psychic_element:
                                                            tarm_barrier_active=False
                                                            embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                            previous_moves.append(f"(**{turn_total}**) **{t_card}**'s 💠 Barrier Disabled!")
                                                    elif oarm_shield_active and dmg['ELEMENT'] != dark_element:
                                                        if oshield_value > 0:
                                                            oshield_value = oshield_value -dmg['DMG']
                                                            o_health = o_health 
                                                            if oshield_value <=0:
                                                                embedVar = discord.Embed(title=f"{o_card}'s' **Shield** Shattered!", description=f"{t_card} breaks the **Shield**!", colour=0xe91e63)
                                                                previous_moves.append(f"(**{turn_total}**) **{o_card}'s** 🌐 Shield Shattered!")
                                                                if oarm_barrier_active and dmg['ELEMENT'] != psychic_element:
                                                                    tarm_barrier_active=False
                                                                    embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}**'s 💠 Barrier Disabled!")
                                                                oarm_shield_active = False
                                                            else:
                                                                embedVar = discord.Embed(title=f"{o_card} Activates **Shield** 🌐", description=f"**{t_card}** strikes the Shield 🌐\n**{oshield_value} Shield** Left!", colour=0xe91e63)
                                                                previous_moves.append(f"(**{turn_total}**) **{t_card}** strikes **{o_card}**'s Shield 🌐\n**{oshield_value} Shield** Left!")
                                                                if oarm_barrier_active and dmg['ELEMENT'] != psychic_element:
                                                                    tarm_barrier_active=False
                                                                    embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}**'s 💠 Barrier Disabled!")

                                                    elif oarm_barrier_active and dmg['ELEMENT'] != psychic_element:
                                                        if obarrier_count >1:
                                                            o_health = o_health 
                                                            embedVar = discord.Embed(title=f"{o_card} Activates **Barrier** 💠", description=f"{t_card}'s attack **Nullified**!\n💠 {obarrier_count - 1} **Barriers** remain!", colour=0xe91e63)
                                                            previous_moves.append(f"(**{turn_total}**) **{o_card}** Activates Barrier 💠 {t_card}'s attack **Nullified**!\n💠 {obarrier_count - 1} **Barriers** remain!")
                                                            if oarm_barrier_active and dmg['ELEMENT'] != psychic_element:
                                                                tarm_barrier_active=False
                                                                embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                previous_moves.append(f"(**{turn_total}**) **{t_card}**'s 💠 Barrier Disabled!")
                                                            obarrier_count = obarrier_count - 1
                                                        elif obarrier_count==1:
                                                            embedVar = discord.Embed(title=f"{o_card}'s **Barrier** Broken!", description=f"{t_card} destroys the **Barrier**", colour=0xe91e63)
                                                            obarrier_count = obarrier_count - 1
                                                            previous_moves.append(f"(**{turn_total}**) **{o_card}**'s Barrier Broken!")
                                                            if oarm_barrier_active and dmg['ELEMENT'] != psychic_element:
                                                                tarm_barrier_active=False
                                                                embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                previous_moves.append(f"(**{turn_total}**) **{t_card}**'s 💠 Barrier Disabled!")
                                                            oarm_barrier_active = False
                                                    elif oarm_parry_active and dmg['ELEMENT'] != earth_element:
                                                        if oparry_count > 1:
                                                            oparry_damage = round(dmg['DMG'])
                                                            o_health = round(o_health - (oparry_damage * .75))
                                                            t_health = round(t_health - (oparry_damage * .25))
                                                            oparry_count = oparry_count - 1
                                                            embedVar = discord.Embed(title=f"{o_card} Activates **Parry** 🔄", description=f"{t_card} takes {round(oparry_damage * .25)}! DMG\n **{oparry_count} Parries** to go!!", colour=0xe91e63)
                                                            previous_moves.append(f"(**{turn_total}**) **{o_card}** Activates Parry 🔄 {t_card} takes {round(oparry_damage * .25)}! DMG\n **{oparry_count}  Parries** to go!!")
                                                            if oarm_barrier_active and dmg['ELEMENT'] != psychic_element:
                                                                tarm_barrier_active=False
                                                                embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                previous_moves.append(f"(**{turn_total}**) **{t_card}**'s 💠 Barrier Disabled!")
                                                            
                                                        elif oparry_count==1:
                                                            oparry_damage = round(dmg['DMG'])
                                                            o_health = round(o_health - (oparry_damage * .75))
                                                            t_health = round(t_health - (oparry_damage * .25))
                                                            oparry_count = oparry_count - 1
                                                            embedVar = discord.Embed(title=f"{o_card} **Parry** Penetrated!!", description=f"{t_card} takes {round(oparry_damage * .25)}! DMG and breaks the **Parry**", colour=0xe91e63)
                                                            previous_moves.append(f"(**{turn_total}**) **{o_card}** Parry Penetrated! **{t_card}** takes **{round(oparry_damage * .25)}**! DMG and breaks the **Parry**")
                                                            if oarm_barrier_active and dmg['ELEMENT'] != psychic_element:
                                                                tarm_barrier_active=False
                                                                embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                previous_moves.append(f"(**{turn_total}**) **{t_card}**'s 💠 Barrier Disabled!")
                                                            oarm_parry_active = False
                                                    else:
                                                        if dmg['REPEL']:
                                                            t_health = t_health - int(dmg['DMG'])
                                                        elif dmg['ABSORB']:
                                                            o_health = o_health + int(dmg['DMG'])
                                                        elif dmg['ELEMENT'] == water_element:
                                                            if tmove1_element == water_element:
                                                                t_basic_water_buff = t_basic_water_buff + 25
                                                            if tmove2_element == water_element:
                                                                t_special_water_buff = t_special_water_buff + 25
                                                            if tmove3_element == water_element:
                                                                t_ultimate_water_buff = t_ultimate_water_buff + 25
                                                            o_health = o_health - (dmg['DMG'] + t_water_buff)

                                                        elif dmg['ELEMENT'] == earth_element:
                                                            t_defense = t_defense + (dmg['DMG'] * .20)
                                                            o_health = o_health - dmg['DMG']

                                                        elif dmg['ELEMENT'] == recoil_element:
                                                            t_health = t_health - (dmg['DMG'] * .25)
                                                            o_health = o_health - dmg['DMG']

                                                        elif dmg['ELEMENT'] == time_element:
                                                            t_stamina = 0
                                                            o_health = o_health - dmg['DMG']


                                                        elif dmg['ELEMENT'] == death_element:
                                                            o_max_health = o_max_health - (dmg['DMG'] * .07)
                                                            o_health = o_health - dmg['DMG']

                                                        elif dmg['ELEMENT'] == light_element:
                                                            t_stamina = round(t_stamina + (dmg['STAMINA_USED'] / 2))
                                                            o_health = o_health - dmg['DMG']

                                                        elif dmg['ELEMENT'] == dark_element:
                                                            t_stamina = t_stamina + 5
                                                            o_stamina = o_stamina - 5
                                                            o_health = o_health - dmg['DMG']

                                                        elif dmg['ELEMENT'] == life_element:
                                                            t_health = t_health + (dmg['DMG'] * .15)
                                                            o_health = o_health - dmg['DMG']

                                                        elif dmg['ELEMENT'] == psychic_element:
                                                            o_defense = o_defense - (dmg['DMG'] * .08)
                                                            o_attack = o_attack - (dmg['DMG'] * .08)
                                                            o_health = o_health - dmg['DMG']

                                                        elif dmg['ELEMENT'] == fire_element:
                                                            t_burn_dmg = t_burn_dmg + round(dmg['DMG'] * .20)
                                                            o_health = o_health - dmg['DMG']


                                                        elif dmg['ELEMENT'] == electric_element:
                                                            t_shock_buff = t_shock_buff +  (dmg['DMG'] * .07)
                                                            o_health = o_health - dmg['DMG']

                                                        elif dmg['ELEMENT'] == poison_element:
                                                            if t_poison_dmg <= 100:
                                                                t_poison_dmg = t_poison_dmg + 8
                                                            o_health = o_health - dmg['DMG']
    
                                                        elif dmg['ELEMENT'] == ice_element:
                                                            t_ice_counter = t_ice_counter + 1
                                                            if t_ice_counter == 3:
                                                                t_freeze_enh = True
                                                                t_ice_counter = 0
                                                            o_health = o_health - dmg['DMG']

                                                        elif dmg['ELEMENT'] == bleed_element:
                                                            t_bleed_counter = t_bleed_counter + 1
                                                            if t_bleed_counter == 5:
                                                                t_bleed_hit = True
                                                                t_bleed_counter = 0
                                                            o_health = o_health - dmg['DMG']
                                                            
                                                        elif dmg['ELEMENT'] == gravity_element:
                                                            t_gravity_hit = True
                                                            o_health = o_health - dmg['DMG']
                                                        
                                                        else:
                                                            o_health = o_health - dmg['DMG']

                                                        embedVar = discord.Embed(title=f"{dmg['MESSAGE']}", colour=embed_color_t)  
                                                        previous_moves.append(f"(**{turn_total}**) **{t_card}**: {dmg['MESSAGE']}")  
                                                        if tarm_siphon_active:
                                                            siphon_damage = (dmg['DMG'] * .10) + tsiphon_value
                                                            t_health = round(t_health + siphon_damage)
                                                            if t_health >= t_max_health:
                                                                t_health = t_max_health
                                                                previous_moves.append(f"(**{turn_total}**) **{t_card}**: 💉 Siphoned **Full Health!**")
                                                            else:
                                                                previous_moves.append(f"(**{turn_total}**) **{t_card}**: 💉 Siphoned **{round(siphon_damage)}** Health!")    
                                                        if oarm_barrier_active and dmg['ELEMENT'] != psychic_element:
                                                            tarm_barrier_active=False
                                                            embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                            previous_moves.append(f"(**{turn_total}**) **{t_card}**'s 💠 Barrier Disabled!")
                                                    if o_health <= 0:
                                                        if o_final_stand==True:
                                                            if o_universe == "Dragon Ball Z":
                                                                embedVar = discord.Embed(title=f"{o_card}'s LAST STAND", description=f"{o_card} FINDS RESOLVE", colour=0xe91e63)
                                                                embedVar.add_field(name=f"**{o_card}** Resolved and continues to fight", value="All stats & stamina increased")
                                                                previous_moves.append(f"(**{turn_total}**) **{o_card}** 🩸 Transformation: Last Stand!!!")
                                                                if oarm_barrier_active and dmg['ELEMENT'] != psychic_element:
                                                                    tarm_barrier_active=False
                                                                    embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}**'s 💠 Barrier Disabled!") 
                                                                o_health = int(.75 * (o_attack + o_defense))
                                                                
                                                                o_stamina = 100
                                                                o_used_resolve = True
                                                                o_final_stand = False
                                                                o_used_focus = True
                                                                t_stamina = t_stamina - int(dmg['STAMINA_USED'])
                                                                turn_total = turn_total + 1
                                                                turn = 0
                                                        else:
                                                            o_health = 0
                                                            t_stamina = t_stamina - int(dmg['STAMINA_USED'])
                                                            turn_total = turn_total + 1
                                                    else:
                                                        t_stamina = t_stamina - int(dmg['STAMINA_USED'])
                                                        turn_total = turn_total + 1
                                                        turn = 0

                                            else:
                                                previous_moves.append(f"(**{turn_total}**) **{t_card}** not enough Stamina to use this move") 
                                                turn = 1
                        # End the match
                        else:
                            # Player 1 Turn Start
                            if turn == 0:
                                if t_bleed_hit:
                                    t_bleed_hit = False
                                    bleed_dmg = 5 * turn_total
                                    o_health = o_health - bleed_dmg
                                    previous_moves.append(f"🩸 **{o_card}** shredded for **{round(bleed_dmg)}** bleed dmg...")

                                if t_burn_dmg > 3:
                                    o_health = o_health - t_burn_dmg
                                    previous_moves.append(f"🔥 **{o_card}** burned for **{round(t_burn_dmg)}** dmg...")
                                if t_freeze_enh:
                                    previous_moves.append(f"❄️ **{o_card}** has been frozen for a turn...")
                                    turn_total = turn_total + 1
                                    turn = 1
                                    continue
                                if t_poison_dmg:
                                    o_health = o_health - t_poison_dmg
                                    previous_moves.append(f"🧪 **{o_card}** poisoned for **{t_poison_dmg}** dmg...")
                                    
                                if o_gravity_hit:
                                    o_gravity_hit = False
                                t_burn_dmg = round(t_burn_dmg / 2)
                                o_freeze_enh = False

                                # if previous_moves:
                                #     previous_moves_len = len(previous_moves)
                                #     # print(f"LIST LEN: {previous_moves_len}")
                                #     if previous_moves_len >= 5:
                                #         previous_moves = previous_moves[4:]
                                #     previous_moves_into_embed = "\n\n".join(previous_moves)

                                # await asyncio.sleep(1)
                                if o_title_passive_type:
                                    if o_title_passive_type == "HLT":
                                        o_health = round(o_health + ((o_title_passive_value / 100) * o_health))
                                    if o_title_passive_type == "LIFE":
                                        if o_max_health != o_health:
                                            t_health = round(t_health - ((o_title_passive_value / 100) * t_health))
                                            o_health = round(o_health + ((o_title_passive_value / 100) * t_health))
                                    if o_title_passive_type == "ATK":
                                        o_attack = o_attack + o_title_passive_value
                                    if o_title_passive_type == "DEF":
                                        o_defense = o_defense + o_title_passive_value
                                    if o_title_passive_type == "STAM":
                                        if o_stamina > 15:
                                            o_stamina = o_stamina + o_title_passive_value
                                    if o_title_passive_type == "DRAIN":
                                        if o_stamina > 15:
                                            t_stamina = t_stamina - o_title_passive_value
                                            o_stamina = o_stamina + o_title_passive_value
                                    if o_title_passive_type == "FLOG":
                                        t_attack = round(t_attack - ((o_title_passive_value / 100) * t_attack))
                                        o_attack = round(o_attack + ((o_title_passive_value / 100) * t_attack))
                                    if o_title_passive_type == "WITHER":
                                        t_defense = round(t_defense - ((o_title_passive_value / 100) * t_defense))
                                        o_defense = round(o_defense + ((o_title_passive_value / 100) * t_defense))
                                    if o_title_passive_type == "RAGE":
                                        o_defense = round(o_defense - ((o_title_passive_value / 100) * o_defense))
                                        o_attack = round(o_attack + ((o_title_passive_value / 100) * o_defense))
                                    if o_title_passive_type == "BRACE":
                                        o_defense = round(o_defense + ((o_title_passive_value / 100) * o_attack))
                                        o_attack = round(o_attack - ((o_title_passive_value / 100) * o_attack))
                                    if o_title_passive_type == "BZRK":
                                        o_health = round(o_health - ((o_title_passive_value / 100) * o_health))
                                        o_attack = round(o_attack + ((o_title_passive_value / 100) * o_health))
                                    if o_title_passive_type == "CRYSTAL":
                                        o_health = round(o_health - ((o_title_passive_value / 100) * o_health))
                                        o_defense = round(o_defense + ((o_title_passive_value / 100) * o_health))
                                    if o_title_passive_type == "FEAR":
                                        o_health = o_health - o_title_passive_value
                                        t_defense = t_defense - (o_title_passive_value / 2)
                                        t_attack = t_attack - (o_title_passive_value / 2)
                                    if o_title_passive_type == "GROWTH":
                                        o_health = o_health - o_title_passive_value
                                        o_defense = o_defense + (o_title_passive_value / 2)
                                        o_attack = o_attack + (o_title_passive_value / 2)
                                    if o_title_passive_type == "SLOW":
                                        if turn_total != 0:
                                            turn_total = turn_total - 1
                                    if o_title_passive_type == "HASTE":
                                        turn_total = turn_total + 1
                                    if o_title_passive_type == "STANCE":
                                        tempattack = o_attack + o_title_passive_value
                                        o_attack = o_defense
                                        o_defense = tempattack
                                    if o_title_passive_type == "CONFUSE":
                                        tempattack = t_attack - o_title_passive_value
                                        t_attack = t_defense
                                        t_defense = tempattack
                                    if o_title_passive_type == "BLINK":
                                        o_stamina = o_stamina - o_title_passive_value
                                        t_stamina = t_stamina + o_title_passive_value
                                if o_card_passive_type:
                                    o_value_for_passive = o_card_tier * .5
                                    o_flat_for_passive = 10 * (o_card_tier * .5)
                                    o_stam_for_passive = 5 * (o_card_tier * .5)
                                    if o_card_passive_type == "HLT":
                                        o_health = round(round(o_health + ((o_value_for_passive / 100) * o_health)))
                                    if o_card_passive_type == "LIFE":
                                        if o_max_health != o_health:
                                            t_health = round(t_health - ((o_value_for_passive / 100) * t_health))
                                            o_health = round(o_health + ((o_value_for_passive / 100) * t_health))
                                    if o_card_passive_type == "ATK":
                                        o_attack = o_attack + o_flat_for_passive
                                    if o_card_passive_type == "DEF":
                                        o_defense = o_defense + o_flat_for_passive
                                    if o_card_passive_type == "STAM":
                                        if o_stamina > 15:
                                            o_stamina = o_stamina + o_stam_for_passive
                                    if o_card_passive_type == "DRAIN":
                                        if o_stamina > 15:
                                            t_stamina = t_stamina - o_stam_for_passive
                                            o_stamina = o_stamina + o_stam_for_passive
                                    if o_card_passive_type == "FLOG":
                                        t_attack = round(t_attack - ((o_value_for_passive / 100) * t_attack))
                                        o_attack = round(o_attack + ((o_value_for_passive / 100) * t_attack))
                                    if o_card_passive_type == "WITHER":
                                        t_defense = round(t_defense - ((o_value_for_passive / 100) * t_defense))
                                        o_defense = round(o_defense + ((o_value_for_passive / 100) * t_defense))
                                    if o_card_passive_type == "RAGE":
                                        o_defense = round(o_defense - ((o_value_for_passive / 100) * o_defense))
                                        o_attack = round(o_attack + ((o_value_for_passive / 100) * o_defense))
                                    if o_card_passive_type == "BRACE":
                                        o_defense = round(o_defense + ((o_value_for_passive / 100) * o_attack))
                                        o_attack = round(o_attack - ((o_value_for_passive / 100) * o_attack))
                                    if o_card_passive_type == "BZRK":
                                        o_health = round(o_health - ((o_value_for_passive / 100) * o_health))
                                        o_attack = round(o_attack + ((o_value_for_passive / 100) * o_health))
                                    if o_card_passive_type == "CRYSTAL":
                                        o_health = round(o_health - ((o_value_for_passive / 100) * o_health))
                                        o_defense = round(o_defense + ((o_value_for_passive / 100) * o_health))
                                    if o_card_passive_type == "FEAR":
                                        o_health = o_health - o_flat_for_passive
                                        t_defense = t_defense - (o_flat_for_passive / 2)
                                        t_attack = t_attack - (o_flat_for_passive / 2)
                                    if o_card_passive_type == "GROWTH":
                                        o_health = o_health - o_flat_for_passive
                                        o_defense = o_defense + (o_flat_for_passive / 2)
                                        o_attack = o_attack + (o_flat_for_passive / 2)
                                    if o_card_passive_type == "SLOW":
                                        if turn_total != 0:
                                            turn_total = turn_total - 1
                                    if o_card_passive_type == "HASTE":
                                        turn_total = turn_total + 1
                                    if o_card_passive_type == "STANCE":
                                        tempattack = o_attack + o_flat_for_passive
                                        o_attack = o_defense
                                        o_defense = tempattack
                                    if o_card_passive_type == "CONFUSE":
                                        tempattack = t_attack - o_flat_for_passive
                                        t_attack = t_defense
                                        t_defense = tempattack
                                    if o_card_passive_type == "BLINK":
                                        o_stamina = o_stamina - o_stam_for_passive
                                        t_stamina = t_stamina + o_stam_for_passive

                                if o_block_used == True:
                                    o_defense = int(o_defense / 2)
                                    o_block_used = False
                                if o_defend_used == True:
                                    o_defense = int(o_defense / 2)
                                    o_defend_used = False
                                if o_universe == "Death Note" and turn_total == 0:
                                    embedVar = discord.Embed(title=f"{o_card} Scheduled Death 📓",
                                                            description=f"**{o_card} says**\nYou will die in 50  turns...",
                                                            colour=0xe91e63)
                                    
                                    previous_moves.append(f"(**{turn_total}**) **{o_card}** 🩸 Scheduled Death 📓")
                                
                                if mode in B_modes:
                                    embedVar = discord.Embed(title=f"**{t_card}** Boss of `{t_universe}`",
                                                            description=f"*{t_description}*", colour=0xe91e63)
                                    embedVar.add_field(name=f"{t_arena}", value=f"{t_arenades}")
                                    embedVar.add_field(name=f"Entering the {t_arena}", value=f"{t_entrance}", inline=False)
                                    embedVar.set_footer(text=f"{t_card} waits for you to strike....")
                                
                                if mode in co_op_modes:
                                    if c_universe == "Death Note" and turn_total == 0:
                                        embedVar = discord.Embed(title=f"{c_card} Scheduled Death 📓",
                                                                description=f"**{c_card} says**\nYou will die in 50  turns...",
                                                                colour=0xe91e63)
                                        
                                        previous_moves.append(f"(**{turn_total}**) 🩸 {c_card} Scheduled Death 📓")
                                if t_universe == 'Death Note' and turn_total == 0:
                                    embedVar = discord.Embed(title=f"{o_card} Scheduled Death 📓",
                                                            description=f"**{t_card} says**\nYou will die in 50  turns...",
                                                            colour=0xe91e63)
                                    
                                    previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 Scheduled Death 📓")
                                
                                if o_attack <= 25:
                                    o_attack = 25
                                if o_defense <= 30:
                                    o_defense = 30
                                if o_attack >= 9999:
                                    o_attack = 9999
                                if o_defense >= 9999:
                                    o_defense = 9999
                                if o_health >= o_max_health:
                                    o_health = o_max_health

                                # Tutorial Instructions
                                if turn_total == 0:
                                    if mode in B_modes:
                                        embedVar = discord.Embed(title=f"**{t_card}** Boss of `{t_universe}`",
                                                                description=f"*{t_description}*", colour=0xe91e63)
                                        embedVar.add_field(name=f"{t_arena}", value=f"{t_arenades}")
                                        embedVar.add_field(name=f"Entering the {t_arena}", value=f"{t_entrance}", inline=False)
                                        embedVar.set_footer(text=f"{t_card} waits for you to strike....")
                                        # await asyncio.sleep(2)
                                    elif mode in co_op_modes and mode not in B_modes:
                                        embedVar = discord.Embed(
                                            title=f"**{o_card}** & **{c_card}** 🆚 **{t_card}** has begun! {lineup}\n{t_universe} {mode} Battle",
                                            description=f"`{o_card} Says:`\n{o_greeting_description}", colour=0xe91e63)
                                        title = f"**{o_card}** & **{c_card}** 🆚 **{t_card}** has begun! {lineup}\n{t_universe} {mode} Battle"
                                    elif mode in AUTO_BATTLE_modes:
                                        embedVar = discord.Embed(
                                            title=f"**{o_card}** 🆚 **{t_card}** has begun! {lineup}\n{t_universe} {mode} Battle\nThe Result of this Automated Battle will be reported soon.",
                                            colour=0xe91e63)
                                    elif randomized_battle:
                                        embedVar = discord.Embed(
                                            title=f"**{o_card}** 🆚 **{t_card}** has begun!\n{t_universe} {mode} Battle",
                                            description=f"`{o_card} Says:`\n{o_greeting_description}", colour=0xe91e63)
                                        title = f"**{o_card}** 🆚 **{t_card}** has begun!\n{t_universe} {mode} Battle"
                                    else:
                                        embedVar = discord.Embed(
                                            title=f"**{o_card}** 🆚 **{t_card}** has begun!\n{lineup}\n{t_universe} {mode} Battle",
                                            description=f"`{o_card} Says:`\n{o_greeting_description}", colour=0xe91e63)
                                        title = f"**{o_card}** 🆚 **{t_card}** has begun!\n{lineup}\n{t_universe} {mode} Battle"

                                    

                                if o_health <= (o_max_health * .25):
                                    embed_color_o = 0xe74c3c
                                    if o_chainsaw == True:
                                        if o_atk_chainsaw == False:
                                            o_atk_chainsaw = True
                                            o_chainsaw = False
                                            o_defense = o_defense * 2
                                            o_attack = o_attack * 2
                                            o_max_health = o_max_health * 2
                                            embedVar = discord.Embed(title=f"{o_card}'s Devilization",
                                                                    description=f"**{o_card}** Doubles ATK, DEF, and MAX HEALTH.",
                                                                    colour=0xe91e63)
                                            previous_moves.append(f"(**{turn_total}**) **{o_card}** 🩸's Devilization")
                                            

                                elif o_health <= (o_max_health * .50):
                                    embed_color_o = 0xe67e22
                                    if o_chainsaw == True:
                                        if o_atk_chainsaw == False:
                                            o_atk_chainsaw = True
                                            o_chainsaw = False
                                            o_defense = o_defense * 2
                                            o_attack = o_attack * 2
                                            o_max_health = o_max_health * 2
                                            embedVar = discord.Embed(title=f"{o_card}'s Devilization",
                                                                    description=f"**{o_card}** Doubles ATK, DEF, and MAX HEALTH.",
                                                                    colour=0xe91e63)
                                            previous_moves.append(f"(**{turn_total}**) **{o_card}** 🩸's Devilization")
                                            
                                elif o_health <= (o_max_health * .75):
                                    embed_color_o = 0xf1c40f
                                else:
                                    embed_color_o = 0x2ecc71

                                if o_stamina < 10:
                                    o_pet_used = False
                                    o_focus_count = o_focus_count + 1
                                    if mode in B_modes:
                                        embedVar = discord.Embed(title=f"{t_punish}")
                                        embedVar.add_field(name=f"{t_arena}", value=f"{t_world}", inline=False)
                                        embedVar.set_footer(text=f"{t_assault}")
                                        
                                        # await asyncio.sleep(2)
                                    # fortitude or luck is based on health
                                    fortitude = 0.0
                                    low = o_health - (o_health * .90)
                                    if low <=0:
                                        low = 1
                                    high = o_health - (o_health * .80)
                                    fortitude = round(random.randint(int(low), int(high)))

                                    o_stamina = o_focus
                                    o_healthcalc = round(((o_focus * .40) + (fortitude * 1)) / 2)
                                    o_attackcalc = round(.20 * ((o_focus * .15) + round(fortitude * 1)))
                                    o_defensecalc = round(.20 * ((o_focus * .15) + round(fortitude * 1)))
                                    if o_title_passive_type:
                                        if o_title_passive_type == "GAMBLE":
                                            o_healthcalc = o_title_passive_value
                                        if o_title_passive_type == "SOULCHAIN":
                                            o_stamina = o_title_passive_value
                                            t_stamina = o_title_passive_value
                                            if mode in co_op_modes:
                                                c_stmina = o_title_passive_value


                                    if t_title_passive_type:
                                        if t_title_passive_type == "GAMBLE":
                                            o_healthcalc = t_title_passive_value
                                    
                                    if mode in co_op_modes:
                                        if c_title_passive_type:
                                            if c_title_passive_type == "GAMBLE":
                                                o_healthcalc = c_title_passive_value
                                    # check if user is at max health and sets messages and focus health value
                                    o_newhealth = 0
                                    healmessage = ""
                                    messagenumber = 0
                                    if o_universe == "Crown Rift Madness":
                                        healmessage = "yet inner **Madness** drags on..."
                                        messagenumber = 3
                                    else:
                                        if o_health <= o_max_health:
                                            o_newhealth = o_health + o_healthcalc
                                            if o_newhealth > o_max_health:
                                                healmessage = "the injuries dissapeared!"
                                                messagenumber = 1
                                                o_health = o_max_health
                                            else:
                                                healmessage = "regained some vitality."
                                                messagenumber = 2
                                                o_health = o_newhealth
                                        else:
                                            healmessage = f"**{t_card}**'s blows don't appear to have any effect!"
                                            messagenumber = 0
                                    if not o_used_resolve:
                                        o_attack = o_attack + o_attackcalc
                                        o_defense = o_defense + o_defensecalc
                                    o_used_focus = True
                                    previous_moves.append(f"(**{turn_total}**) 🌀 **{o_card}** focused and {healmessage}")
                                    # embedVar = discord.Embed(title=f"{o_card} FOCUSED", description=f"**{o_card} says**\n{o_focus_description}", colour=0xe91e63)
                                    # embedVar.add_field(name=f"{o_card} focused and {healmessage}", value="All stats & stamina increased")
                                    

                                    # Resolve Check and Calculation
                                    if not o_used_resolve and o_used_focus and o_universe == "Digimon":  # Digimon Universal Trait
                                        embedVar = discord.Embed(title=f"{o_card} STRENGTHENED RESOLVE :zap:",
                                                                description=f"**{o_card} says**\n{o_resolve_description}",
                                                                colour=0xe91e63)
                                        embedVar.add_field(name=f"Transformation: Digivolve", value="On Focus you Resolve.")
                                        #previous_moves.append(f"(**{turn_total}**) **{o_card}** 🩸 Transformation: Digivolve")
                                        
                                        # fortitude or luck is based on health
                                        fortitude = 0.0
                                        low = o_health - (o_health * .75)
                                        high = o_health - (o_health * .66)
                                        fortitude = round(random.randint(int(low), int(high)))
                                        # Resolve Scaling
                                        o_resolve_health = round(fortitude + (.5 * o_resolve))
                                        o_resolve_attack = round((.30 * o_defense) * (o_resolve / (.50 * o_defense)))
                                        o_resolve_defense = round((.30 * o_defense) * (o_resolve / (.50 * o_defense)))

                                        o_stamina = o_stamina + o_resolve
                                        o_health = o_health + o_resolve_health
                                        o_attack = round(o_attack + o_resolve_attack)
                                        o_defense = round(o_defense - o_resolve_defense)
                                        o_used_resolve = True
                                        o_pet_used = False
                                        if turn_total <=5:
                                            o_attack = round(o_attack * 2)
                                            o_defense = round(o_defense * 2 )
                                            previous_moves.append(f"(**{turn_total}**) **{o_card}** 🩸 Transformation: Mega Digivolution!!!")
                                        else:
                                            previous_moves.append(f"(**{turn_total}**) **{o_card}** 🩸 Transformation: Digivolve")

                                    elif o_universe == "League Of Legends":
                                        embedVar = discord.Embed(title=f"Turret Shot hits {t_card} for **{60 + turn_total}** Damage 💥",
                                                                colour=0xe91e63)
                                        
                                        t_health = round(t_health - (60 + turn_total))
                                        
                                        previous_moves.append(f"(**{turn_total}**) 🩸 Turret Shot hits **{t_card}** for **{60 + turn_total}** Damage 💥")


                                    elif o_universe == "Dragon Ball Z":
                                        o_health = o_health + t_stamina + turn_total
                                        previous_moves.append(f"(**{turn_total}**) 🩸 Saiyan Spirit... You heal for **{t_stamina + turn_total}** ❤️")


                                    elif o_universe == "Solo Leveling":
                                        embedVar = discord.Embed(
                                            title=f"Ruler's Authority... Opponent loses **{30 + turn_total}** 🛡️ 🔻",
                                            colour=0xe91e63)
                                        
                                        t_defense = round(t_defense - (30 + turn_total))
                                        
                                        previous_moves.append(f"(**{turn_total}**) 🩸 Ruler's Authority... Opponent loses **{30 + turn_total}** 🛡️ 🔻")
                                    
                                    elif o_universe == "Black Clover":
                                        embedVar = discord.Embed(title=f"Mana Zone! **{o_card}** Increased Stamina 🌀",
                                                                colour=0xe91e63)
                                        
                                        o_stamina = 100
                                        ocard_lvl_ap_buff = ocard_lvl_ap_buff + 30

                                        previous_moves.append(f"(**{turn_total}**) 🩸 Mana Zone! **{o_card}** Increased AP & Stamina 🌀")
                                    
                                    elif o_universe == "Death Note":
                                        if turn_total >= 50:
                                            embedVar = discord.Embed(title=f"{t_card}'s' Scheduled Death 📓",
                                                                    description=f"**{o_card} says**\n**Delete**",
                                                                    colour=0xe91e63)
                                            embedVar.add_field(name=f"{t_card} had a heart attack and died",
                                                            value=f"Death....")
                                            
                                            previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 had a heart attack and died")
                                            
                                            t_health = 0

                                    if t_universe == "One Punch Man":
                                        embedVar = discord.Embed(
                                            title=f"Hero Reinforcements! **{o_card}**  Increased Health & Max Health ❤️",
                                            colour=0xe91e63)
                                        
                                        t_health = round(t_health + 100)
                                        t_max_health = round(t_max_health + 100)

                                        previous_moves.append(f"(**{turn_total}**) 🩸 Hero Reinforcements! **{t_card}**  Increased Health & Max Health ❤️")

                                    elif t_universe == "7ds":
                                        embedVar = discord.Embed(title=f"Power Of Friendship! 🧬 **{opet_name}** Rested, **{o_card}** Increased Stamina 🌀",
                                                                colour=0xe91e63)
                                        
                                        t_stamina = t_stamina + 60
                                        t_pet_used = False
                                        
                                        previous_moves.append(f"(**{turn_total}**) 🩸 Power Of Friendship! 🧬 **{tpet_name}** Rested, **{t_card}** Increased Stamina 🌀")
                                    
                                    elif t_universe == "Souls":
                                        embedVar = discord.Embed(
                                            title=f"Combo Recognition! **{t_card}** Increased Attack by **{60 + turn_total}** 🔺 ",
                                            colour=0xe91e63)
                                        
                                        t_attack = round(t_attack + (60 + turn_total))

                                        previous_moves.append(f"(**{turn_total}**) 🩸 Combo Recognition! **{t_card}** Increased Attack by **{60 + turn_total}** 🔺")
                                    
                                    else:
                                        turn_total = turn_total + 1
                                        if o_universe != "Crown Rift Madness":
                                            turn = 1
                                        else:
                                            turn = 0
                                    turn_total = turn_total + 1
                                    if o_universe != "Crown Rift Madness":
                                        turn = 1
                                    else:
                                        turn = 0
                                else:
                                    if mode in AUTO_BATTLE_modes:
                                        # UNIVERSE CARD
                                        ap1 = list(o_1.values())[0] + ocard_lvl_ap_buff + o_shock_buff + o_basic_water_buff
                                        ap2 = list(o_2.values())[0] + ocard_lvl_ap_buff + o_shock_buff + o_special_water_buff
                                        ap3 = list(o_3.values())[0] + ocard_lvl_ap_buff + demon_slayer_buff + o_shock_buff + o_ultimate_water_buff
                                        enh1 = list(o_enhancer.values())[0]
                                        enh_name = list(o_enhancer.values())[2]
                                        pet_enh_name = list(opet_move.values())[2]
                                        pet_msg_on_resolve = ""
                                        # UNIVERSE CARD
                                        if o_universe == "Souls" and o_used_resolve:
                                            player_1_card = showcard(o, oarm,o_max_health, o_health, o_max_stamina, o_stamina,
                                                                    o_used_resolve, otitle, o_used_focus, o_attack, o_defense,
                                                                    turn_total, ap2, ap3, ap3, enh1, enh_name, ocard_lvl, t_defense)
                                        else:
                                            player_1_card = showcard(o, oarm,o_max_health, o_health, o_max_stamina, o_stamina,
                                                                    o_used_resolve, otitle, o_used_focus, o_attack, o_defense,
                                                                    turn_total, ap1, ap2, ap3, enh1, enh_name, ocard_lvl, t_defense)
                                        
                                        embedVar = discord.Embed(title=f"➡️ **Current Turn** {turn_total}", description=textwrap.dedent(f"""\
                                        {previous_moves_into_embed}
                                        
                                        """), color=0xe74c3c)

                                        # embedVar.set_author(name=f"🦾 {oarm_name} - {oarm_passive_type} {oarm_passive_value} {enhancer_suffix_mapping[oarm_passive_type]}\n{pet_msg_on_resolve}\n")
                                        # embedVar.add_field(name=f"➡️ **Current Turn** {turn_total}", value=f"{ctx.author.mention} Select move below!")
                                        await asyncio.sleep(2)
                                        # embedVar.set_image(url="attachment://image.png")
                                        embedVar.set_thumbnail(url=ctx.author.avatar_url)
                                        embedVar.set_footer(
                                            text=f"{t_card}: ❤️{round(t_health)} 🌀{round(t_stamina)} 🗡️{round(t_attack)}/🛡️{round(t_defense)}\n{o_card}: ❤️{round(o_health)} 🌀{round(o_stamina)} 🗡️{round(o_attack)}/🛡️{round(o_defense)}",
                                            icon_url="https://cdn.discordapp.com/emojis/789290881654980659.gif?v=1")
                                        await battle_msg.edit(embed=embedVar, components=[])
                                        # await asyncio.sleep(2)
                                        # battle_msg = await private_channel.send(embed=embedVar, components=components, file=player_1_card)



                                        if o_universe == "Solo Leveling" and not o_swapped:
                                            if temp_tarm_shield_active and not tarm_shield_active:
                                                if oarm_shield_active:
                                                    oshield_value = oshield_value + temp_tshield_value
                                                    previous_moves.append(f"(**{turn_total}**) **{o_card}** 🩸 **ARISE!** *{tarm_name}* is now yours")
                                                    o_swapped = True
                                                elif not oarm_shield_active:
                                                    oarm_shield_active = True
                                                    oshield_value = temp_tshield_value
                                                    previous_moves.append(f"(**{turn_total}**) **{o_card}** 🩸 **ARISE!** *{tarm_name}* is now yours")
                                                    o_swapped = True
                                            elif temp_tarm_barrier_active and not tarm_barrier_active:
                                                if oarm_barrier_active:
                                                    obarrier_count = obarrier_count + temp_tbarrier_count
                                                    previous_moves.append(f"(**{turn_total}**) **{o_card}** 🩸 **ARISE!** *{tarm_name}* is now yours")
                                                    o_swapped = True
                                                elif not oarm_barrier_active:
                                                    oarm_barrier_active = True
                                                    obarrier_count = temp_tbarrier_count
                                                    previous_moves.append(f"(**{turn_total}**) **{o_card}** 🩸 **ARISE!** *{tarm_name}* is now yours")
                                                    o_swapped = True
                                            elif temp_tarm_parry_active and not tarm_parry_active:
                                                if oarm_parry_active:
                                                    oparry_count = oparry_count + temp_tparry_count
                                                    previous_moves.append(f"(**{turn_total}**) **{o_card}** 🩸 **ARISE!** *{tarm_name}* is now yours")
                                                    o_swapped = True
                                                elif not oarm_parry_active:
                                                    oarm_parry_active = True
                                                    oparry_count = temp_tparry_count
                                                    previous_moves.append(f"(**{turn_total}**) **{o_card}** 🩸 **ARISE!** *{tarm_name}* is now yours")
                                                    o_swapped = True
                                        
                                        aiMove = 0
                                        
                                        if o_used_resolve and not o_pet_used and o_stamina >= 30:
                                            aiMove = 6
                                        elif t_enhancer['TYPE'] == "WAVE" and (turn_total % 10 == 0 or turn_total == 0 or turn_total == 1):
                                            if t_stamina >=20:
                                                aiMove =4
                                        elif oarm_barrier_active: #Ai Barrier Checks
                                            if o_stamina >=20: #Stamina Check For Enhancer
                                                aiMove = await ai_enhancer_moves(turn_total,o_used_focus,o_used_resolve,o_pet_used,o_stamina,
                                                                            o_enhancer['TYPE'],o_health,o_max_health,o_attack,
                                                                            o_defense,t_stamina,t_attack,t_defense, t_health)
                                            else:
                                                aiMove = 1
                                        elif t_health <=350: #Killing Blow
                                            if o_enhancer['TYPE'] == "BLAST":
                                                if o_stamina >=20:
                                                    aiMove =4
                                                else:
                                                    aiMove =1
                                            elif o_enhancer['TYPE'] == "WAVE" and (turn_total % 10 == 0 or turn_total == 0 or turn_total == 1):
                                                if o_stamina >=20:
                                                    aiMove =4
                                                else:
                                                    aiMove =1
                                            else:
                                                if o_stamina >= 90:
                                                    aiMove = 1
                                                elif o_stamina >= 80:
                                                    aiMove =3
                                                elif o_stamina >=30:
                                                    aiMove=2
                                                else:
                                                    aiMove=1
                                        elif t_stamina < 10:
                                            if o_enhancer['TYPE'] in Gamble_Enhancer_Check:
                                                if o_stamina >= 20:
                                                    aiMove = 4
                                                else:
                                                    aiMove = 1
                                            else:
                                                aiMove = 1
                                        elif o_health <= (.50 * o_max_health) and o_used_resolve == False and o_used_focus:
                                            aiMove = 5
                                        elif o_stamina >= 160 and (o_health >= t_health):
                                            aiMove = 3
                                        elif o_stamina >= 160:
                                            aiMove = 3
                                        elif o_stamina >= 150 and (o_health >= t_health):
                                            aiMove = 1
                                        elif o_stamina >= 150:
                                            aiMove = 1
                                        elif o_stamina >= 140 and (o_health >= t_health):
                                            aiMove = 1
                                        elif o_stamina >= 140:
                                            aiMove = 3
                                        elif o_stamina >= 130 and (o_health >= t_health):
                                            aiMove = 1
                                        elif o_stamina >= 130:
                                            aiMove = 3
                                        elif o_stamina >= 120 and (o_health >= t_health):
                                            aiMove = 2
                                        elif o_stamina >= 120:
                                            aiMove = 3
                                        elif o_stamina >= 110 and (o_health >= t_health):
                                            aiMove = 1
                                        elif o_stamina >= 110:
                                            aiMove = 2
                                        elif o_stamina >= 100 and (o_health >= t_health):
                                            if o_enhancer['TYPE'] in Gamble_Enhancer_Check or o_enhancer['TYPE'] in Healer_Enhancer_Check:
                                                aiMove = 3
                                            elif o_enhancer['TYPE'] in Support_Enhancer_Check or o_enhancer['TYPE'] in Stamina_Enhancer_Check or o_enhancer['TYPE'] in Turn_Enhancer_Check:
                                                aiMove = 4
                                            else:
                                                aiMove = 1
                                        elif o_stamina >= 100:
                                            aiMove = 1
                                        elif o_stamina >= 90 and (o_health >= t_health):
                                            aiMove = 3
                                        elif o_stamina >= 90:
                                            if o_enhancer['TYPE'] in Gamble_Enhancer_Check:
                                                aiMove = 3
                                            elif o_enhancer['TYPE'] in Support_Enhancer_Check or o_enhancer['TYPE'] in Stamina_Enhancer_Check or o_enhancer['TYPE'] in Sacrifice_Enhancer_Check:
                                                aiMove = 4
                                            else:
                                                aiMove = 1
                                        elif o_stamina >= 80 and (o_health >= t_health):
                                            aiMove = 1
                                        elif o_stamina >= 80:
                                            aiMove = 3
                                        elif o_stamina >= 70 and (o_health >= t_health):
                                            if o_enhancer['TYPE'] in Gamble_Enhancer_Check:
                                                aiMove = 1
                                            else:
                                                aiMove = await ai_enhancer_moves(turn_total,o_used_focus,o_used_resolve,o_pet_used,o_stamina,
                                                                            o_enhancer['TYPE'],o_health,o_max_health,o_attack,
                                                                            o_defense,t_stamina,t_attack,t_defense, t_health)
                                        elif o_stamina >= 70:
                                            aiMove = 1
                                        elif o_stamina >= 60 and (o_health >= t_health):
                                            if o_used_resolve == False and o_used_focus:
                                                aiMove = 5
                                            elif o_used_focus == False:
                                                aiMove = 2
                                            else:
                                                aiMove = 1
                                        elif o_stamina >= 60:
                                            if o_used_resolve == False and o_used_focus:
                                                aiMove = 5
                                            elif o_used_focus == False:
                                                aiMove = 2
                                            else:
                                                aiMove = 1
                                        elif o_stamina >= 50 and (o_health >= t_health):
                                            if o_used_resolve == False and o_used_focus:
                                                aiMove = 5
                                            elif o_used_focus == False:
                                                aiMove = 2
                                            else:
                                                aiMove = 1
                                        elif o_stamina >= 50:
                                            if o_used_resolve == False and o_used_focus:
                                                aiMove = 5
                                            elif o_used_focus == False:
                                                aiMove = 2
                                            elif o_enhancer['TYPE'] in Support_Enhancer_Check or o_enhancer['TYPE'] in Stamina_Enhancer_Check:
                                                aiMove = 4
                                            else:
                                                aiMove = 1
                                        elif o_stamina >= 40 and (o_health >= t_health):
                                            aiMove = 1
                                        elif o_stamina >= 40:
                                            aiMove = 2
                                        elif o_stamina >= 30 and (o_health >= t_health):
                                            if o_enhancer['TYPE'] in Gamble_Enhancer_Check:
                                                aiMove = 1
                                            elif o_enhancer['TYPE'] in Support_Enhancer_Check or o_enhancer['TYPE'] in Stamina_Enhancer_Check:
                                                aiMove = 2
                                            else:
                                                aiMove = await ai_enhancer_moves(turn_total,o_used_focus,o_used_resolve,o_pet_used,o_stamina,
                                                                            o_enhancer['TYPE'],o_health,o_max_health,o_attack,
                                                                            o_defense,t_stamina,t_attack,t_defense, t_health)
                                        elif o_stamina >= 30:
                                            aiMove = 2
                                        elif o_stamina >= 20 and (o_health >= t_health):
                                            aiMove = 1
                                        elif o_stamina >= 20:
                                            if o_enhancer['TYPE'] in Gamble_Enhancer_Check:
                                                aiMove = 1
                                            elif o_enhancer['TYPE'] in Support_Enhancer_Check or o_enhancer['TYPE'] in Stamina_Enhancer_Check:
                                                aiMove = 1
                                            else:
                                                aiMove = 4
                                        elif o_stamina >= 10:
                                            aiMove = 1
                                        else:
                                            aiMove = 0

                                        # Make sure user is responding with move

                                        if aiMove == 1:
                                            if o_universe == "Souls" and o_used_resolve:
                                                dmg = damage_cal(t_opponent_affinities, special_attack_name, omove2_element, o_universe, o_card, o_2, o_attack, o_defense, t_defense, o_stamina,
                                                                o_enhancer_used, o_health, t_health, t_stamina, o_max_health,
                                                                t_attack, o_special_move_description, turn_total,
                                                                ocard_lvl_ap_buff, o_1)                                                
                                            else:
                                                dmg = damage_cal(t_opponent_affinities, basic_attack_name, omove1_element, o_universe, o_card, o_1, o_attack, o_defense, t_defense, o_stamina,
                                                                o_enhancer_used, o_health, t_health, t_stamina, o_max_health,
                                                                t_attack, o_special_move_description, turn_total,
                                                                ocard_lvl_ap_buff, None)
                                        elif aiMove == 2:
                                            if o_universe == "Souls" and o_used_resolve:
                                                dmg = damage_cal(t_opponent_affinities, ultimate_attack_name, omove3_element, o_universe, o_card, o_3, o_attack, o_defense, t_defense, o_stamina,
                                                                o_enhancer_used, o_health, t_health, t_stamina, o_max_health,
                                                                t_attack, o_special_move_description, turn_total,
                                                                ocard_lvl_ap_buff, o_2)                                                
                                            else:
                                                dmg = damage_cal(t_opponent_affinities, special_attack_name, omove2_element, o_universe, o_card, o_2, o_attack, o_defense, t_defense, o_stamina,
                                                                o_enhancer_used, o_health, t_health, t_stamina, o_max_health,
                                                                t_attack, o_special_move_description, turn_total,
                                                                ocard_lvl_ap_buff, None)
                                        elif aiMove == 3:

                                            dmg = damage_cal(t_opponent_affinities, ultimate_attack_name, omove3_element, o_universe, o_card, o_3, o_attack, o_defense, t_defense, o_stamina,
                                                            o_enhancer_used, o_health, t_health, t_stamina, o_max_health,
                                                            t_attack, o_special_move_description, turn_total,
                                                            ocard_lvl_ap_buff, None)
                                        elif aiMove == 4:
                                            o_enhancer_used = True

                                            dmg = damage_cal(t_opponent_affinities, basic_attack_name, omove1_element, o_universe, o_card, o_enhancer, o_attack, o_defense, t_defense,
                                                            o_stamina, o_enhancer_used, o_health, t_health, t_stamina,
                                                            o_max_health, t_attack, o_special_move_description, turn_total,
                                                            ocard_lvl_ap_buff, None)
                                            o_enhancer_used = False
                                        elif aiMove == 5:
                                            # Resolve Check and Calculation
                                            if not o_used_resolve and o_used_focus:
                                                if o_universe == "My Hero Academia":  # My Hero Trait
                                                    # fortitude or luck is based on health
                                                    fortitude = 0.0
                                                    low = o_health - (o_health * .75)
                                                    high = o_health - (o_health * .66)
                                                    fortitude = round(random.randint(int(low), int(high)))
                                                    # Resolve Scaling
                                                    o_resolve_health = round(fortitude + (.5 * o_resolve))
                                                    o_resolve_attack = round(
                                                        (.30 * o_defense) * (o_resolve / (.50 * o_defense)))
                                                    o_resolve_defense = round(
                                                        (.30 * o_defense) * (o_resolve / (.50 * o_defense)))
                                                    ocard_lvl_ap_buff = ocard_lvl_ap_buff + 80 + turn_total

                                                    o_stamina = o_stamina + o_resolve
                                                    o_health = o_health + o_resolve_health
                                                    o_attack = round(o_attack + o_resolve_attack)
                                                    o_defense = round(o_defense - o_resolve_defense)
                                                    o_used_resolve = True
                                                    o_pet_used = False
                                                    embedVar = discord.Embed(title=f"{o_card} PLUS ULTRAAA",
                                                                            description=f"**{o_card} says**\n{o_resolve_description}",
                                                                            colour=0xe91e63)
                                                    embedVar.add_field(name=f"Transformation: Plus Ultra",
                                                                    value="You do not lose a turn after you Resolve.")
                                                    if mode in B_modes:
                                                        embedVar.add_field(name=f"{t_card}'s Rebuke", value=f"{t_rebuke}",
                                                                        inline=False)
                                                        embedVar.set_footer(text=f"{o_card} this is your chance!")
                                                    
                                                    previous_moves.append(f"(**{turn_total}**) **{o_card}** 🩸 Resolved: PLUS ULTRA!")

                                                    turn_total = turn_total + 1
                                                    turn = 0

                                                elif o_universe == "Demon Slayer": 
                                                    # fortitude or luck is based on health
                                                    fortitude = 0.0
                                                    low = o_health - (o_health * .75)
                                                    high = o_health - (o_health * .66)
                                                    fortitude = round(random.randint(int(low), int(high)))
                                                    # Resolve Scaling
                                                    o_resolve_health = round(fortitude + (.5 * o_resolve))
                                                    o_resolve_attack = round(
                                                        (.30 * o_defense) * (o_resolve / (.50 * o_defense)))
                                                    o_resolve_defense = round(
                                                        (.30 * o_defense) * (o_resolve / (.50 * o_defense)))


                                                    o_stamina = o_stamina + o_resolve
                                                    o_health = o_health + o_resolve_health
                                                    o_attack = round(o_attack + o_resolve_attack)
                                                    o_defense = round(o_defense - o_resolve_defense)
                                                    if t_attack > o_attack:
                                                        o_attack = t_attack
                                                    if t_defense > o_defense:
                                                        o_defense = t_defense
                                                    o_used_resolve = True
                                                    o_pet_used = False
                                                    embedVar = discord.Embed(title=f"{o_card} begins Total Concentration Breathing",
                                                                            description=f"**{o_card} says**\n{o_resolve_description}",
                                                                            colour=0xe91e63)
                                                    previous_moves.append(f"(**{turn_total}**) **{o_card}** 🩸 Resolved: Total Concentration Breathing!")
                                                    turn_total = turn_total + 1
                                                    turn = 1

                                                elif o_universe == "Naruto": 
                                                    # fortitude or luck is based on health
                                                    fortitude = 0.0
                                                    low = o_health - (o_health * .75)
                                                    high = o_health - (o_health * .66)
                                                    fortitude = round(random.randint(int(low), int(high)))
                                                    # Resolve Scaling
                                                    o_resolve_health = round(fortitude + (.5 * o_resolve))
                                                    o_resolve_attack = round(
                                                        (.30 * o_defense) * (o_resolve / (.50 * o_defense)))
                                                    o_resolve_defense = round(
                                                        (.30 * o_defense) * (o_resolve / (.50 * o_defense)))

                                                    o_stamina = o_stamina + o_resolve
                                                    o_health = o_health + o_resolve_health
                                                    o_health = o_health + o_naruto_heal_buff
                                                    o_attack = round(o_attack + o_resolve_attack)
                                                    o_defense = round(o_defense - o_resolve_defense)

                                                    o_used_resolve = True
                                                    o_pet_used = False
                                                    embedVar = discord.Embed(title=f"{o_card} Heals from Hashirama Cells",
                                                                            description=f"**{o_card} says**\n{o_resolve_description}",
                                                                            colour=0xe91e63)
                                                    previous_moves.append(f"(**{turn_total}**) **{o_card}** 🩸 Resolved: Hashirama Cells heal you for **{o_naruto_heal_buff}**")
                                                    turn_total = turn_total + 1
                                                    turn = 1




                                                elif o_universe == "Attack On Titan":
                                                    # fortitude or luck is based on health
                                                    fortitude = 0.0
                                                    low = o_health - (o_health * .75)
                                                    high = o_health - (o_health * .66)
                                                    fortitude = round(random.randint(int(low), int(high)))
                                                    # Resolve Scaling
                                                    o_resolve_health = round(fortitude + (.5 * o_resolve))
                                                    o_resolve_attack = round(
                                                        (.30 * o_defense) * (o_resolve / (.50 * o_defense)))
                                                    o_resolve_defense = round(
                                                        (.30 * o_defense) * (o_resolve / (.50 * o_defense)))

                                                    o_stamina = o_stamina + o_resolve
                                                    o_health = o_health + o_resolve_health
                                                    o_attack = round(o_attack + o_resolve_attack)
                                                    o_defense = round(o_defense - o_resolve_defense)
                                                    o_used_resolve = True
                                                    o_pet_used = False
                                                    health_boost = 100 * o_focus_count
                                                    o_health = o_health + health_boost
                                                    embedVar = discord.Embed(title=f"{o_card} Titan Mode",
                                                                            description=f"**{o_card} says**\n{o_resolve_description}",
                                                                            colour=0xe91e63)
                                                    embedVar.add_field(name=f"Transformation Complete",
                                                                    value=f"Health increased by **{health_boost}**!")
                                                    if mode in B_modes:
                                                        embedVar.add_field(name=f"{t_card}'s Rebuke", value=f"{t_rebuke}",
                                                                        inline=False)
                                                        embedVar.set_footer(text=f"{o_card} this is your chance!")

                                                    previous_moves.append(f"(**{turn_total}**) **{o_card}** 🩸 Resolved: Titan Mode")

                                                    turn_total = turn_total + 1
                                                    turn = 1

                                                elif o_universe == "Bleach":  # Bleach Trait
                                                    # fortitude or luck is based on health
                                                    fortitude = 0.0
                                                    low = o_health - (o_health * .75)
                                                    high = o_health - (o_health * .66)
                                                    fortitude = round(random.randint(int(low), int(high)))
                                                    # Resolve Scaling
                                                    o_resolve_health = round(fortitude + (.5 * o_resolve))
                                                    o_resolve_attack = round(
                                                        (.30 * o_defense) * (o_resolve / (.50 * o_defense)))
                                                    o_resolve_defense = round(
                                                        (.30 * o_defense) * (o_resolve / (.50 * o_defense)))

                                                    o_stamina = o_stamina + o_resolve
                                                    o_health = o_health + o_resolve_health
                                                    o_attack = round((o_attack + (2 * o_resolve_attack))* 2)
                                                    o_defense = round(o_defense - o_resolve_defense)
                                                    # if o_defense >= 120:
                                                    # # o_defense = 120
                                                    o_used_resolve = True
                                                    o_pet_used = False
                                                    embedVar = discord.Embed(title=f"{o_card} STRENGTHENED RESOLVE :zap:",
                                                                            description=f"**{o_card} says**\n{o_resolve_description}",
                                                                            colour=0xe91e63)
                                                    embedVar.add_field(name=f"Transformation: Bankai",
                                                                    value="Gain double Attack on Resolve.")
                                                    if mode in B_modes:
                                                        embedVar.add_field(name=f"{t_card}'s Rebuke", value=f"{t_rebuke}",
                                                                        inline=False)
                                                        embedVar.set_footer(text=f"{o_card} this is your chance!")


                                                    previous_moves.append(f"(**{turn_total}**) **{o_card}** 🩸 Resolved: Bankai!")

                                                    turn_total = turn_total + 1
                                                    turn = 1
                                                elif o_universe == "God Of War":  # God Of War Trait
                                                    # fortitude or luck is based on health
                                                    fortitude = 0.0
                                                    low = o_health - (o_health * .75)
                                                    high = o_health - (o_health * .66)
                                                    fortitude = round(random.randint(int(low), int(high)))
                                                    # Resolve Scaling
                                                    o_resolve_health = round(fortitude + (.5 * o_resolve))
                                                    o_resolve_attack = round(
                                                        (.30 * o_defense) * (o_resolve / (.50 * o_defense)))
                                                    o_resolve_defense = round(
                                                        (.30 * o_defense) * (o_resolve / (.50 * o_defense)))

                                                    o_stamina = o_stamina + o_resolve
                                                    o_health = o_max_health
                                                    o_attack = round(o_attack + o_resolve_attack)
                                                    o_defense = round(o_defense - o_resolve_defense)
                                                    o_used_resolve = True
                                                    o_pet_used = False

                                                    if t_gow_resolve:
                                                        previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 Resolved: Ascension!")
                                                    elif not o_gow_resolve:
                                                        o_used_resolve = False
                                                        o_gow_resolve = True
                                                        o_defense = 125
                                                        previous_moves.append(f"(**{turn_total}**) **{o_card}** 🩸 Crushed Blood Orb: Health Refill")
                                                    

                                                    embedVar = discord.Embed(title=f"{o_card} STRENGTHENED RESOLVE :zap:",
                                                                            description=f"**{o_card} says**\n{o_resolve_description}",
                                                                            colour=0xe91e63)
                                                    embedVar.add_field(name=f"Transformation: Ascension",
                                                                    value="On Resolve Refill Health.")
                                                    if mode in B_modes:
                                                        embedVar.add_field(name=f"{t_card}'s Rebuke", value=f"{t_rebuke}",
                                                                        inline=False)
                                                        embedVar.set_footer(text=f"{o_card} this is your chance!")

                                                    
                                                    turn_total = turn_total + 1
                                                    turn = 1
                                                elif o_universe == "Fate":  # Fate Trait
                                                    # fortitude or luck is based on health
                                                    fortitude = 0.0
                                                    low = o_health - (o_health * .75)
                                                    high = o_health - (o_health * .66)
                                                    fortitude = round(random.randint(int(low), int(high)))
                                                    # Resolve Scaling
                                                    o_resolve_health = round(fortitude + (.5 * o_resolve))
                                                    o_resolve_attack = round(
                                                        (.30 * o_defense) * (o_resolve / (.50 * o_defense)))
                                                    o_resolve_defense = round(
                                                        (.30 * o_defense) * (o_resolve / (.50 * o_defense)))

                                                    o_stamina = o_stamina + o_resolve
                                                    o_health = o_health + o_resolve_health
                                                    o_attack = round(o_attack + o_resolve_attack)
                                                    o_defense = round(o_defense - o_resolve_defense)

                                                    embedVar = discord.Embed(title=f"{o_card} STRENGTHENED RESOLVE :zap:",
                                                                            description=f"**{o_card} says**\n{o_resolve_description}",
                                                                            colour=0xe91e63)
                                                    embedVar.add_field(name=f"Transformation: Command Seal",
                                                                    value="On Resolve, Strike with Ultimate, then Focus.")
                                                    if mode in B_modes:
                                                        embedVar.add_field(name=f"{t_card}'s Rebuke", value=f"{t_rebuke}",
                                                                        inline=False)
                                                        embedVar.set_footer(text=f"{o_card} this is your chance!")
                                                    dmg = damage_cal(t_opponent_affinities, ultimate_attack_name, omove3_element, o_universe, o_card, o_3, o_attack, o_defense,
                                                                    t_defense, o_stamina, o_enhancer_used, o_health,
                                                                    t_health, t_stamina, o_max_health, t_attack,
                                                                    o_special_move_description, turn_total,
                                                                    ocard_lvl_ap_buff, None)
                                                    t_health = t_health - dmg['DMG']
                                                    embedVar = discord.Embed(
                                                        title=f"{o_card} STRENGTHENED RESOLVE :zap:\n\n{dmg['MESSAGE']}",
                                                        description=f"**{o_card} says**\n{o_resolve_description}",
                                                        colour=0xe91e63)
                                                    embedVar.add_field(name=f"Transformation: Command Seal",
                                                                    value="On Resolve, Strike with Ultimate, then Focus.")

                                                    previous_moves.append(f"(**{turn_total}**) **{o_card}** 🩸 Resolved: Command Seal!")

                                                    # o_stamina = 0
                                                    o_used_resolve = True
                                                    o_pet_used = False
                                                    turn_total = turn_total + 1
                                                    turn = 1
                                                elif o_universe == "Kanto Region" or o_universe == "Johto Region" or o_universe == "Hoenn Region" or o_universe == "Sinnoh Region" or o_universe == "Kalos Region" or o_universe == "Unova Region" or o_universe == "Alola Region" or o_universe == "Galar Region":  # Pokemon Resolves
                                                    # fortitude or luck is based on health
                                                    fortitude = 0.0
                                                    low = o_health - (o_health * .75)
                                                    high = o_health - (o_health * .66)
                                                    fortitude = round(random.randint(int(low), int(high)))
                                                    # Resolve Scaling
                                                    o_resolve_health = round(fortitude + (.5 * o_resolve))
                                                    o_resolve_attack = round(
                                                        (.30 * o_defense) * (o_resolve / (.50 * o_defense)))
                                                    o_resolve_defense = round(
                                                        (.30 * o_defense) * (o_resolve / (.50 * o_defense)))

                                                    o_stamina = o_stamina + o_resolve
                                                    o_health = o_health + o_resolve_health
                                                    o_attack = round(o_attack + o_resolve_attack)
                                                    o_defense = o_defense * 2
                                                    o_used_resolve = True
                                                    o_pet_used = False
                                                    embedVar = discord.Embed(title=f"{o_card} STRENGTHENED RESOLVE :zap:",
                                                                            description=f"**{o_card} says**\n{o_resolve_description}",
                                                                            colour=0xe91e63)
                                                    embedVar.add_field(name=f"Transformation: Evolution",
                                                                    value="When you Resolve your Defense doubles")
                                                    if mode in B_modes:
                                                        embedVar.add_field(name=f"{t_card}'s Rebuke", value=f"{t_rebuke}",
                                                                        inline=False)
                                                        embedVar.set_footer(text=f"{o_card} this is your chance!")

                                                    if turn_total >= 50:
                                                        o_max_health = o_max_health + 1000
                                                        o_health = o_health + 1000
                                                        previous_moves.append(f"(**{turn_total}**) **{o_card}** 🩸 Resolved: Gigantomax Evolution!!! Gained **1000** HP!!!")
                                                    elif turn_total >= 30:
                                                        o_max_health = o_max_health + 300
                                                        o_health = o_health + 300
                                                        previous_moves.append(f"(**{turn_total}**) **{o_card}** 🩸 Resolved: Mega Evolution!! Gained **300** HP!")
                                                    else:
                                                        previous_moves.append(f"(**{turn_total}**) **{o_card}** 🩸 Resolved: Evolution!")

                                                    turn_total = turn_total + 1
                                                    turn = 1
                                                else:  # Standard Resolve
                                                    # fortitude or luck is based on health
                                                    fortitude = 0.0
                                                    low = o_health - (o_health * .75)
                                                    high = o_health - (o_health * .66)
                                                    fortitude = round(random.randint(int(low), int(high)))
                                                    # Resolve Scaling
                                                    o_resolve_health = round(fortitude + (.5 * o_resolve))
                                                    o_resolve_attack = round(
                                                        (.30 * o_defense) * (o_resolve / (.50 * o_defense)))
                                                    o_resolve_defense = round(
                                                        (.30 * o_defense) * (o_resolve / (.50 * o_defense)))

                                                    o_stamina = o_stamina + o_resolve
                                                    o_health = o_health + o_resolve_health
                                                    o_attack = round(o_attack + o_resolve_attack)
                                                    o_defense = round(o_defense - o_resolve_defense)
                                                    o_used_resolve = True
                                                    o_pet_used = False
                                                    if o_universe == "League Of Legends":
                                                        t_health = t_health - (60 * (o_focus_count + t_focus_count))
                                                        embedVar = discord.Embed(title=f"{o_card} PENTA KILL!",
                                                                                description=f"**{o_card} says**\n{o_resolve_description}",
                                                                                colour=0xe91e63)
                                                        embedVar.add_field(name=f"Nexus Destroyed",
                                                                        value=f"**{o_card}** dealt **{(60 * (o_focus_count + t_focus_count))}** damage.")
                                                    
                                                        previous_moves.append(f"(**{turn_total}**) **{o_card}** 🩸 Resolved: Pentakill! Dealing {(60 * (o_focus_count + t_focus_count))} damage.")
                                                    elif o_universe == "Souls":
                                                        previous_moves.append(f"(**{turn_total}**) **{o_card}** 🩸 Phase 2: Enhanced Moveset!")
                                                    else:
                                                        embedVar = discord.Embed(
                                                            title=f"{o_card} STRENGTHENED RESOLVE :zap:",
                                                            description=f"**{o_card} says**\n{o_resolve_description}",
                                                            colour=0xe91e63)
                                                        embedVar.add_field(name=f"Transformation",
                                                                        value="All stats & stamina greatly increased")
                                                        previous_moves.append(f"(**{turn_total}**) ⚡ **{o_card}** Resolved!")

                                                    if mode in B_modes:
                                                        embedVar.add_field(name=f"{t_card}'s Rebuke", value=f"{t_rebuke}",
                                                                        inline=False)
                                                        embedVar.set_footer(text=f"{o_card} this is your chance!")
                                                    # await button_ctx.send(embed=embedVar)
                                                    turn_total = turn_total + 1
                                                    turn = 1
                                            else:
                                                emessage = m.CANNOT_USE_RESOLVE
                                                embedVar = discord.Embed(title=emessage, colour=0xe91e63)
                                                previous_moves.append(f"(**{turn_total}**) **{o_card}** cannot resolve")
                                                turn = 0
                                    
                                        elif aiMove == 6:
                                            # Resolve Check and Calculation
                                            if o_used_resolve and o_used_focus and not o_pet_used:
                                                o_enhancer_used = True
                                                dmg = damage_cal(t_opponent_affinities, basic_attack_name, omove1_element, o_universe, o_card, opet_move, o_attack, o_defense,
                                                                t_defense, o_stamina, o_enhancer_used, o_health, t_health,
                                                                t_stamina, o_max_health, t_attack,
                                                                o_special_move_description, turn_total, ocard_lvl_ap_buff, None)
                                                o_enhancer_used = False
                                                o_pet_used = True
                                                opet_dmg = dmg['DMG']
                                                opet_type = dmg['ENHANCED_TYPE']
                                                if dmg['CAN_USE_MOVE']:
                                                    if opet_type == 'ATK':
                                                        o_attack = round(o_attack + dmg['DMG'])
                                                    elif opet_type == 'DEF':
                                                        o_defense = round(o_defense + dmg['DMG'])
                                                    elif opet_type == 'STAM':
                                                        o_stamina = round(o_stamina + dmg['DMG'])
                                                    elif opet_type == 'HLT':
                                                        o_health = round(o_health + dmg['DMG'])
                                                    elif opet_type == 'LIFE':
                                                        o_health = round(o_health + dmg['DMG'])
                                                        t_health = round(t_health - dmg['DMG'])
                                                    elif opet_type == 'DRAIN':
                                                        o_stamina = round(o_stamina + dmg['DMG'])
                                                        t_stamina = round(t_stamina - dmg['DMG'])
                                                    elif opet_type == 'FLOG':
                                                        o_attack = round(o_attack + dmg['DMG'])
                                                        t_attack = round(t_attack - dmg['DMG'])
                                                    elif opet_type == 'WITHER':
                                                        o_defense = round(o_defense + dmg['DMG'])
                                                        t_defense = round(t_defense - dmg['DMG'])
                                                    elif opet_type == 'RAGE':
                                                        o_defense = round(o_defense - dmg['DMG'])
                                                        o_attack = round(o_attack + dmg['DMG'])
                                                    elif opet_type == 'BRACE':
                                                        o_defense = round(o_defense + dmg['DMG'])
                                                        o_attack = round(o_attack - dmg['DMG'])
                                                    elif opet_type == 'BZRK':
                                                        o_health = round(o_health - dmg['DMG'])
                                                        o_attack = round(o_attack + dmg['DMG'])
                                                    elif opet_type == 'CRYSTAL':
                                                        o_health = round(o_health - dmg['DMG'])
                                                        o_defense = round(o_defense + dmg['DMG'])
                                                    elif opet_type == 'GROWTH':
                                                        o_max_health = round(o_max_health - dmg['DMG'])
                                                        o_defense = round(o_defense + (dmg['DMG'] * .5))
                                                        o_attack = round(o_attack + (dmg['DMG'] * .5))
                                                    elif opet_type == 'STANCE':
                                                        tempattack = dmg['DMG']
                                                        o_attack = o_defense
                                                        o_defense = tempattack
                                                    elif opet_type == 'CONFUSE':
                                                        tempattack = dmg['DMG']
                                                        t_attack = t_defense
                                                        t_defense = tempattack
                                                    elif opet_type == 'BLINK':
                                                        o_stamina = round(o_stamina - dmg['DMG'])
                                                        t_stamina = round(t_stamina + dmg['DMG'])
                                                    elif opet_type == 'SLOW':
                                                        tempstam = round(t_stamina + dmg['DMG'])
                                                        o_stamina = round(o_stamina - dmg['DMG'])
                                                        t_stamina = o_stamina
                                                        o_stamina = tempstam
                                                    elif opet_type == 'HASTE':
                                                        tempstam = round(t_stamina - dmg['DMG'])
                                                        o_stamina = round(o_stamina + dmg['DMG'])
                                                        t_stamina = o_stamina
                                                        o_stamina = tempstam
                                                    elif opet_type == 'SOULCHAIN':
                                                        o_stamina = round(dmg['DMG'])
                                                        t_stamina = o_stamina
                                                    elif opet_type == 'GAMBLE':
                                                        o_health = round(dmg['DMG'])
                                                        t_health = o_health
                                                    elif opet_type == 'FEAR':
                                                        o_max_health = round(o_max_health - dmg['DMG'])
                                                        t_defense = round(t_defense - (dmg['DMG'] * .5))
                                                        t_attack = round(t_attack - (dmg['DMG'] * .5))
                                                    elif opet_type == 'WAVE':
                                                        t_health = round(t_health - dmg['DMG'])
                                                    elif opet_type == 'BLAST':
                                                        if dmg['DMG'] >= 100:
                                                            dmg['DMG'] = 100
                                                        t_health = round(t_health - dmg['DMG'])
                                                    elif opet_type == 'CREATION':
                                                        o_max_health = round(o_max_health + dmg['DMG'])
                                                        o_health = round(o_health + dmg['DMG'])
                                                    elif opet_type == 'DESTRUCTION':
                                                        if dmg['DMG'] >= 100:
                                                            dmg['DMG'] = 100
                                                        t_max_health = round(t_max_health - dmg['DMG'])
                                                        if t_max_health <=1:
                                                            t_max_health = 1


                                                    o_stamina = o_stamina - int(dmg['STAMINA_USED'])
                                                    if o_universe == "Persona":
                                                        petdmg = damage_cal(t_opponent_affinities, basic_attack_name, omove1_element, o_universe, o_card, o_1, o_attack, o_defense,
                                                                            t_defense, o_stamina, o_enhancer_used, o_health,
                                                                            t_health, t_stamina, o_max_health, t_attack,
                                                                            o_special_move_description, turn_total,
                                                                            ocard_lvl_ap_buff, None)
                                                        t_health = t_health - petdmg['DMG']

                                                        previous_moves.append(f"(**{turn_total}**) **Persona!** 🩸 : **{opet_name}** was summoned from **{o_card}'s** soul dealing **{petdmg['DMG']}** damage!\n**{t_card}** summon disabled!")
                                                        t_pet_used = True
                                                    else:
                                                        previous_moves.append(f"(**{turn_total}**) **{o_card}** Summoned 🧬 **{opet_name}**: {dmg['MESSAGE']}")
                                                    turn = 0
                                                else:
                                                    previous_moves.append(f"(**{turn_total}**) 🧬 **{opet_name}** needs a turn to rest...")
                                                    turn = 0
                                            else:
                                                previous_moves.append(f"(**{turn_total}**) 🧬 **{opet_name}** needs a turn to rest...")
                                                turn = 0
                                        
                                        if aiMove == 0:
                                            block_message = ""
                                            if o_universe == "Persona":
                                                if mode in co_op_modes:
                                                    block_message = f"**Confidant Block!*** 🩸: **{o_card}**: Defended 🛡️ **{c_card}**"
                                                    o_defend_used = True
                                                else:
                                                    block_message = f"**Confidant Block!*** 🩸: **{o_card}** Blocked 🛡️"
                                                    o_block_used = True
                                                o_defense = round(o_defense * 2)

                                                previous_moves.append(f"(**{turn_total}**) {block_message}")
                                                turn_total = turn_total + 1
                                                turn = 1

                                            elif o_stamina >= 20:

                                                if o_universe == "Attack On Titan":
                                                    previous_moves.append(f"(**{turn_total}**) **Rally** 🩸 ! **{o_card}** Increased Max Health ❤️")
                                                    o_max_health = round(o_max_health + 100)
                                                    o_health = o_health + 100

                                                if o_universe == "Bleach":
                                                    dmg = damage_cal(t_opponent_affinities, basic_attack_name, omove1_element, o_universe, o_card, o_1, o_attack, o_defense, t_defense, o_stamina,
                                                                    o_enhancer_used, o_health, t_health, t_stamina, o_max_health,
                                                                    t_attack, o_special_move_description, turn_total,
                                                                    ocard_lvl_ap_buff, None)
                                                    previous_moves.append(f"(**{turn_total}**) **{o_card}** Exerted their 🩸 Spiritual Pressure - {dmg['MESSAGE']}")
                                                    if dmg['REPEL']:
                                                        o_health = o_health - dmg['DMG']
                                                    elif dmg['ABSORB']:
                                                        t_health = t_health + dmg['DMG']
                                                    elif dmg['ELEMENT'] == water_element:
                                                        if omove1_element == water_element:
                                                            o_basic_water_buff = o_basic_water_buff + 25
                                                        if omove2_element == water_element:
                                                            o_special_water_buff = o_special_water_buff + 25
                                                        if omove3_element == water_element:
                                                            o_ultimate_water_buff = o_ultimate_water_buff + 25
                                                        t_health = t_health - dmg['DMG']
                                                        

                                                    elif dmg['ELEMENT'] == time_element:
                                                        o_stamina = 0
                                                        t_health = t_health - dmg['DMG']

                                                    elif dmg['ELEMENT'] == earth_element:
                                                        o_defense = o_defense + (dmg['DMG'] * .20)
                                                        t_health = t_health - dmg['DMG']

                                                    elif dmg['ELEMENT'] == death_element:
                                                        t_max_health = t_max_health - (dmg['DMG'] * .07)
                                                        t_health = t_health - dmg['DMG']

                                                    elif dmg['ELEMENT'] == light_element:
                                                        o_stamina = round(o_stamina + (dmg['STAMINA_USED'] / 2))
                                                        t_health = t_health - dmg['DMG']

                                                    elif dmg['ELEMENT'] == dark_element:
                                                        o_stamina = o_stamina + 5
                                                        t_stamina = t_stamina - 5
                                                        t_health = t_health - dmg['DMG']

                                                    elif dmg['ELEMENT'] == life_element:
                                                        o_health = o_health + (dmg['DMG'] * .15)
                                                        t_health = t_health - dmg['DMG']

                                                    elif dmg['ELEMENT'] == recoil_element:
                                                        o_health = o_health - (dmg['DMG'] * .25)
                                                        t_health = t_health - dmg['DMG']


                                                    elif dmg['ELEMENT'] == psychic_element:
                                                        t_defense = t_defense - (dmg['DMG'] * .08)
                                                        t_attack = t_attack - (dmg['DMG'] * .08)
                                                        t_health = t_health - dmg['DMG']

                                                    elif dmg['ELEMENT'] == fire_element:
                                                        o_burn_dmg = o_burn_dmg + round(dmg['DMG'] * .20)
                                                        t_health = t_health - dmg['DMG']


                                                    elif dmg['ELEMENT'] == electric_element:
                                                        o_shock_buff = o_shock_buff +  (dmg['DMG'] * .07)
                                                        t_health = t_health - dmg['DMG']

                                                    elif dmg['ELEMENT'] == poison_element:
                                                        if o_poison_dmg <= 100:
                                                            o_poison_dmg = o_poison_dmg + 8
                                                        t_health = t_health - dmg['DMG']

                                                    elif dmg['ELEMENT'] == ice_element:
                                                        o_ice_counter = o_ice_counter + 1
                                                        if o_ice_counter == 3:
                                                            o_freeze_enh = True
                                                            o_ice_counter = 0
                                                        t_health = t_health - dmg['DMG']

                                                    elif dmg['ELEMENT'] == bleed_element:
                                                        o_bleed_counter = o_bleed_counter + 1
                                                        if o_bleed_counter == 5:
                                                            o_bleed_hit = True
                                                            o_bleed_counter = 0
                                                        t_health = t_health - dmg['DMG']
                                                        
                                                    elif dmg['ELEMENT'] == gravity_element:
                                                        o_gravity_hit = True
                                                        t_health = t_health - dmg['DMG']
                                                    
                                                    else:
                                                        t_health = t_health - dmg['DMG']

                                                if mode in co_op_modes:
                                                    block_message = f"**{o_card}**: Defended 🛡️ **{c_card}**"
                                                    o_defend_used = True
                                                else:
                                                    block_message = f"**{o_card}** Blocked 🛡️"
                                                    o_block_used = True
                                                o_stamina = o_stamina - 20
                                                o_defense = round(o_defense * 2)

                                                previous_moves.append(f"(**{turn_total}**) {block_message}")
                                                turn_total = turn_total + 1
                                                turn = 1
                                            else:
                                                previous_moves.append(f"(**{turn_total}**) **{o_card}** is too tired to block.")
                                                turn = 0
                                        
                                        if aiMove != 5 and aiMove != 6 and aiMove != 0:
                                            # If you have enough stamina for move, use it
                                            if dmg['CAN_USE_MOVE']:
                                                if dmg['ENHANCE']:
                                                    enh_type = dmg['ENHANCED_TYPE']

                                                    if enh_type == 'ATK':
                                                        o_attack = round(o_attack + dmg['DMG'])
                                                    elif enh_type == 'DEF':
                                                        o_defense = round(o_defense + dmg['DMG'])
                                                    elif enh_type == 'STAM':
                                                        o_stamina = round(o_stamina + dmg['DMG'])
                                                    elif enh_type == 'HLT':
                                                        o_health = round(o_health + dmg['DMG'])
                                                    elif enh_type == 'LIFE':
                                                        o_health = round(o_health + dmg['DMG'])
                                                        t_health = round(t_health - dmg['DMG'])
                                                    elif enh_type == 'DRAIN':
                                                        o_stamina = round(o_stamina + dmg['DMG'])
                                                        t_stamina = round(t_stamina - dmg['DMG'])
                                                    elif enh_type == 'FLOG':
                                                        o_attack = round(o_attack + dmg['DMG'])
                                                        t_attack = round(t_attack - dmg['DMG'])
                                                    elif enh_type == 'WITHER':
                                                        o_defense = round(o_defense + dmg['DMG'])
                                                        t_defense = round(t_defense - dmg['DMG'])
                                                    elif enh_type == 'RAGE':
                                                        o_defense = round(o_defense - dmg['DMG'])
                                                        o_attack = round(o_attack + dmg['DMG'])
                                                    elif enh_type == 'BRACE':
                                                        o_defense = round(o_defense + dmg['DMG'])
                                                        o_attack = round(o_attack - dmg['DMG'])
                                                    elif enh_type == 'BZRK':
                                                        o_health = round(o_health - dmg['DMG'])
                                                        o_attack = round(o_attack + dmg['DMG'])
                                                    elif enh_type == 'CRYSTAL':
                                                        o_health = round(o_health - dmg['DMG'])
                                                        o_defense = round(o_defense + dmg['DMG'])
                                                    elif enh_type == 'GROWTH':
                                                        o_max_health = round(o_max_health - dmg['DMG'])
                                                        o_defense = round(o_defense + (dmg['DMG'] * .5))
                                                        o_attack = round(o_attack + (dmg['DMG'] * .5))
                                                    elif enh_type == 'STANCE':
                                                        tempattack = dmg['DMG']
                                                        o_attack = o_defense
                                                        o_defense = tempattack
                                                    elif enh_type == 'CONFUSE':
                                                        tempattack = dmg['DMG']
                                                        t_attack = t_defense
                                                        t_defense = tempattack
                                                    elif enh_type == 'BLINK':
                                                        o_stamina = round(o_stamina - dmg['DMG'])
                                                        t_stamina = round(t_stamina + dmg['DMG'])
                                                    elif enh_type == 'SLOW':
                                                        tempstam = round(t_stamina + dmg['DMG'])
                                                        o_stamina = round(o_stamina - dmg['DMG'])
                                                        t_stamina = o_stamina
                                                        o_stamina = tempstam
                                                    elif enh_type == 'HASTE':
                                                        tempstam = round(t_stamina - dmg['DMG'])
                                                        o_stamina = round(o_stamina + dmg['DMG'])
                                                        t_stamina = o_stamina
                                                        o_stamina = tempstam
                                                    elif enh_type == 'SOULCHAIN':
                                                        o_stamina = round(dmg['DMG'])
                                                        t_stamina = o_stamina
                                                    elif enh_type == 'GAMBLE':
                                                        if mode in D_modes:
                                                            t_health = round(dmg['DMG']) * 2
                                                            o_health = round(dmg['DMG'])
                                                        elif mode in B_modes:
                                                            t_health = round(dmg['DMG']) * 3
                                                            o_health = round(dmg['DMG'])
                                                        else:
                                                            t_health = round(dmg['DMG'])
                                                            o_health = round(dmg['DMG'])
                                                    elif enh_type == 'FEAR':
                                                        o_max_health = round(o_max_health - dmg['DMG'])
                                                        t_defense = round(t_defense - (dmg['DMG'] * .5))
                                                        t_attack = round(t_attack - (dmg['DMG'] * .5))
                                                    elif enh_type == 'WAVE':
                                                        t_health = round(t_health - dmg['DMG'])
                                                    elif enh_type == 'BLAST':
                                                        t_health = round(t_health - dmg['DMG'])
                                                    elif enh_type == 'CREATION':
                                                        o_max_health = round(o_max_health + dmg['DMG'])
                                                        o_health = round(o_health + dmg['DMG'])
                                                    elif enh_type == 'DESTRUCTION':
                                                        t_max_health = round(t_max_health - dmg['DMG'])
                                                        # o_max_health = round(o_max_health - dmg['DMG'])
                                                        if t_max_health <=1:
                                                            t_max_health = 1
                                                        # if o_max_health <=1:
                                                        #     o_max_health = 1

                                                    if enh_type in Stamina_Enhancer_Check or enh_type in Time_Enhancer_Check or enh_type in Control_Enhancer_Check:
                                                        o_stamina = o_stamina
                                                    else:
                                                        o_stamina = o_stamina - int(dmg['STAMINA_USED'])

                                                    embedVar = discord.Embed(title=f"{dmg['MESSAGE']}",
                                                                            colour=embed_color_o)
                                                    previous_moves.append(f"(**{turn_total}**) **{o_card}**: 🦠 {dmg['MESSAGE']}")
                                                    turn_total = turn_total + 1
                                                    turn = 1
                                                    # await button_ctx.defer(ignore=True)
                                                elif dmg['DMG'] == 0:
                                                    o_stamina = o_stamina - int(dmg['STAMINA_USED'])

                                                    embedVar = discord.Embed(title=f"{dmg['MESSAGE']}", colour=embed_color_o)
                                                    if oarm_barrier_active and dmg['ELEMENT'] != psychic_element:
                                                        oarm_barrier_active=False
                                                        embedVar.add_field(name=f"{o_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                        previous_moves.append(f"(**{turn_total}**) **{o_card}**'s 💠 Barrier Disabled!")
                                                    previous_moves.append(f"(**{turn_total}**) **{o_card}**: {dmg['MESSAGE']}")
                                                    turn_total = turn_total + 1
                                                    turn = 1
                                                else:
                                                    if t_universe == "Naruto" and t_stamina < 10:
                                                        t_stored_damage = round(dmg['DMG'])
                                                        t_naruto_heal_buff = t_naruto_heal_buff + t_stored_damage
                                                        t_health = t_health 
                                                        embedVar = discord.Embed(title=f"{t_card}: Substitution Jutsu", description=f"{o_card} strikes a log", colour=0xe91e63)
                                                        if oarm_barrier_active and dmg['ELEMENT'] != psychic_element:
                                                            oarm_barrier_active=False
                                                            embedVar.add_field(name=f"{o_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                            previous_moves.append(f"(**{turn_total}**) **{o_card}**'s 💠 Barrier Disabled!")

                                                        previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸: Substitution Jutsu")
                                                        if not t_used_resolve:
                                                            previous_moves.append(f"(**{turn_total}**) 🩸**{t_stored_damage}** Hasirama Cells stored. 🩸**{t_naruto_heal_buff}** total stored.")
                                                    elif tarm_shield_active and dmg['ELEMENT'] != dark_element:

                                                        if tshield_value > 0:
                                                            tshield_value = tshield_value - dmg['DMG']
                                                            t_health = t_health 
                                                            if tshield_value <=0:
                                                                embedVar = discord.Embed(title=f"{t_card}'s' **Shield** Shattered!", description=f"{o_card} breaks the **Shield**!", colour=0xe91e63)
                                                                previous_moves.append(f"(**{turn_total}**) 🌐**{t_card}**: Shield Shattered!")
                                                                if oarm_barrier_active and dmg['ELEMENT'] != psychic_element:
                                                                    oarm_barrier_active=False
                                                                    embedVar.add_field(name=f"{o_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                    previous_moves.append(f"(**{turn_total}**) **{o_card}**'s 💠 Barrier Disabled!")
                                                                tarm_shield_active = False
                                                            else:
                                                                embedVar = discord.Embed(title=f"{t_card} Activates **Shield** 🌐", description=f"**{o_card}** strikes the Shield 🌐\n**{tshield_value} Shield** Left!", colour=0xe91e63)
                                                                previous_moves.append(f"(**{turn_total}**) **{o_card}** strikes **{t_card}**'s Shield 🌐\n**{tshield_value} Shield** Left!")
                                                                if oarm_barrier_active and dmg['ELEMENT'] != psychic_element:
                                                                    oarm_barrier_active=False
                                                                    embedVar.add_field(name=f"{o_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                    previous_moves.append(f"(**{turn_total}**) **{o_card}**'s 💠 Barrier Disabled!")

                                                    elif tarm_barrier_active and dmg['ELEMENT'] != psychic_element:
                                                        if tbarrier_count >1:
                                                            t_health = t_health 
                                                            embedVar = discord.Embed(title=f"{t_card} Activates **Barrier** 💠", description=f"{o_card}'s attack **Nullified**!\n **{tbarrier_count - 1} Barriers** remain!", colour=0xe91e63)
                                                            previous_moves.append(f"(**{turn_total}**) **{t_card}** Activates Barrier 💠 {o_card}'s attack **Nullified**!\n **{tbarrier_count - 1} Barriers** remain!")
                                                            if oarm_barrier_active and dmg['ELEMENT'] != psychic_element:
                                                                oarm_barrier_active=False
                                                                embedVar.add_field(name=f"{o_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                previous_moves.append(f"(**{turn_total}**) **{o_card}**'s 💠 Barrier Disabled!")
                                                            tbarrier_count = tbarrier_count - 1
                                                        elif tbarrier_count==1:
                                                            embedVar = discord.Embed(title=f"{t_card}'s **Barrier** Broken!", description=f"{o_card} destroys the **Barrier**", colour=0xe91e63)
                                                            previous_moves.append(f"(**{turn_total}**) **{t_card}**'s Barrier Broken!")
                                                            tbarrier_count = tbarrier_count - 1
                                                            if oarm_barrier_active and dmg['ELEMENT'] != psychic_element:
                                                                oarm_barrier_active=False
                                                                embedVar.add_field(name=f"{o_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                previous_moves.append(f"(**{turn_total}**) **{o_card}**'s 💠 Barrier Disabled!")
                                                            tarm_barrier_active = False
                                                    elif tarm_parry_active and dmg['ELEMENT'] != earth_element:
                                                        if tparry_count > 1:
                                                            t_health = t_health
                                                            tparry_damage = round(dmg['DMG'])
                                                            t_health = round(t_health - (tparry_damage * .75))
                                                            o_health = round(o_health - (tparry_damage * .25))
                                                            tparry_count = tparry_count - 1
                                                            embedVar = discord.Embed(title=f"{t_card} Activates **Parry** 🔄", description=f"{o_card} takes {round(tparry_damage * .25)}! DMG\n **{tparry_count} Parries** to go!!", colour=0xe91e63)
                                                            previous_moves.append(f"(**{turn_total}**) **{t_card}** Activates Parry 🔄  {o_card} takes {round(tparry_damage * .25)}! DMG\n **{tparry_count} Parries** to go!!")
                                                            if oarm_barrier_active and dmg['ELEMENT'] != psychic_element:
                                                                oarm_barrier_active=False
                                                                embedVar.add_field(name=f"{o_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                previous_moves.append(f"(**{turn_total}**) **{o_card}**'s 💠 Barrier Disabled!")
                                                            
                                                        elif tparry_count==1:
                                                            t_health = t_health
                                                            tparry_damage = round(dmg['DMG'])
                                                            t_health = round(t_health - (tparry_damage * .75))
                                                            o_health = round(o_health - (tparry_damage * .25))
                                                            embedVar = discord.Embed(title=f"{t_card} **Parry** Penetrated!!", description=f"{o_card} takes {round(tparry_damage * .25)}! DMG and breaks the **Parry**", colour=0xe91e63)
                                                            previous_moves.append(f"(**{turn_total}**) **{t_card}** Parry Penetrated! **{o_card}** takes **{round(tparry_damage * .25)}**! DMG and breaks the **Parry**")
                                                            tparry_count = tparry_count - 1
                                                            if oarm_barrier_active and dmg['ELEMENT'] != psychic_element:
                                                                oarm_barrier_active=False
                                                                embedVar.add_field(name=f"{o_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                previous_moves.append(f"(**{turn_total}**) **{o_card}**'s 💠 Barrier Disabled!")
                                                            tarm_parry_active = False
                                                    else:
                                                        if dmg['REPEL']:
                                                            o_health = o_health - int(dmg['DMG'])
                                                        elif dmg['ABSORB']:
                                                            t_health = t_health + int(dmg['DMG'])
                                                        elif dmg['ELEMENT'] == water_element:
                                                            if omove1_element == water_element:
                                                                o_basic_water_buff = o_basic_water_buff + 25
                                                            if omove2_element == water_element:
                                                                o_special_water_buff = o_special_water_buff + 25
                                                            if omove3_element == water_element:
                                                                o_ultimate_water_buff = o_ultimate_water_buff + 25
                                                            t_health = t_health - dmg['DMG']
                                                            

                                                        elif dmg['ELEMENT'] == time_element:
                                                            o_stamina = 0
                                                            t_health = t_health - dmg['DMG']

                                                        elif dmg['ELEMENT'] == earth_element:
                                                            o_defense = o_defense + (dmg['DMG'] * .20)
                                                            t_health = t_health - dmg['DMG']

                                                        elif dmg['ELEMENT'] == death_element:
                                                            t_max_health = t_max_health - (dmg['DMG'] * .07)
                                                            t_health = t_health - dmg['DMG']

                                                        elif dmg['ELEMENT'] == light_element:
                                                            o_stamina = round(o_stamina + (dmg['STAMINA_USED'] / 2))
                                                            t_health = t_health - dmg['DMG']

                                                        elif dmg['ELEMENT'] == dark_element:
                                                            o_stamina = o_stamina + 5
                                                            t_stamina = t_stamina - 5
                                                            t_health = t_health - dmg['DMG']

                                                        elif dmg['ELEMENT'] == life_element:
                                                            o_health = o_health + (dmg['DMG'] * .15)
                                                            t_health = t_health - dmg['DMG']

                                                        elif dmg['ELEMENT'] == recoil_element:
                                                            o_health = o_health - (dmg['DMG'] * .25)
                                                            t_health = t_health - dmg['DMG']


                                                        elif dmg['ELEMENT'] == psychic_element:
                                                            t_defense = t_defense - (dmg['DMG'] * .08)
                                                            t_attack = t_attack - (dmg['DMG'] * .08)
                                                            t_health = t_health - dmg['DMG']

                                                        elif dmg['ELEMENT'] == fire_element:
                                                            o_burn_dmg = o_burn_dmg + round(dmg['DMG'] * .20)
                                                            t_health = t_health - dmg['DMG']


                                                        elif dmg['ELEMENT'] == electric_element:
                                                            o_shock_buff = o_shock_buff +  (dmg['DMG'] * .07)
                                                            t_health = t_health - dmg['DMG']

                                                        elif dmg['ELEMENT'] == poison_element:
                                                            if o_poison_dmg <= 100:
                                                                o_poison_dmg = o_poison_dmg + 8
                                                            t_health = t_health - dmg['DMG']

                                                        elif dmg['ELEMENT'] == ice_element:
                                                            o_ice_counter = o_ice_counter + 1
                                                            if o_ice_counter == 3:
                                                                o_freeze_enh = True
                                                                o_ice_counter = 0
                                                            t_health = t_health - dmg['DMG']

                                                        elif dmg['ELEMENT'] == bleed_element:
                                                            o_bleed_counter = o_bleed_counter + 1
                                                            if o_bleed_counter == 5:
                                                                o_bleed_hit = True
                                                                o_bleed_counter = 0
                                                            t_health = t_health - dmg['DMG']
                                                            
                                                        elif dmg['ELEMENT'] == gravity_element:
                                                            o_gravity_hit = True
                                                            t_health = t_health - dmg['DMG']
                                                        
                                                        else:
                                                            t_health = t_health - dmg['DMG']
                                                        previous_moves.append(f"(**{turn_total}**) **{o_card}**: {dmg['MESSAGE']}")
                                                        embedVar = discord.Embed(title=f"{dmg['MESSAGE']}", colour=embed_color_o)
                                                        if oarm_siphon_active:
                                                            siphon_damage = (dmg['DMG'] * .10) + osiphon_value
                                                            o_health = round(o_health + siphon_damage)
                                                            if o_health >= o_max_health:
                                                                o_health = o_max_health
                                                                previous_moves.append(f"(**{turn_total}**) **{o_card}**: 💉 Siphoned **Full Health!**")
                                                            else:
                                                                previous_moves.append(f"(**{turn_total}**) **{o_card}**: 💉 Siphoned **{round(siphon_damage)}** Health!")
                                                        if oarm_barrier_active and dmg['ELEMENT'] != psychic_element:
                                                            oarm_barrier_active=False
                                                            embedVar.add_field(name=f"{o_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                            previous_moves.append(f"(**{turn_total}**) **{o_card}**'s 💠 Barrier Disabled!")
                                                    if t_health <= 0:
                                                        if t_final_stand==True:
                                                            if t_universe == "Dragon Ball Z":
                                                                embedVar = discord.Embed(title=f"{t_card}'s LAST STAND", description=f"{t_card} FINDS RESOLVE", colour=0xe91e63)
                                                                embedVar.add_field(name=f"**{t_card}** Resolved and continues to fight", value="All stats & stamina increased")
                                                                if oarm_barrier_active and dmg['ELEMENT'] != psychic_element:
                                                                    oarm_barrier_active=False
                                                                    embedVar.add_field(name=f"{o_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                    previous_moves.append(f"(**{turn_total}**) **{o_card}**'s 💠 Barrier Disabled!")
                                                                previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 Transformation: Last Stand!!!")
                                                                t_health = int(.75 * (t_attack + t_defense))
                                                                
                                                                t_used_resolve = True
                                                                t_used_focus = True
                                                                t_final_stand = False
                                                                o_stamina = o_stamina - dmg['STAMINA_USED']
                                                                turn_total = turn_total + 1
                                                                turn = 1
                                                        else:
                                                            t_health = 0
                                                            o_stamina = o_stamina - dmg['STAMINA_USED']
                                                            turn_total = turn_total + 1
                                                    else:
                                                        o_stamina = o_stamina - dmg['STAMINA_USED']
                                                        turn_total = turn_total + 1
                                                        turn = 1
                                            else:
                                                previous_moves.append(f"(**{turn_total}**) **{o_card}**: Not enough Stamina to use this ability.")
                                                turn = 0
                                    else:
                                        # UNIVERSE CARD
                                        ap1 = list(o_1.values())[0] + ocard_lvl_ap_buff + o_shock_buff + o_basic_water_buff
                                        ap2 = list(o_2.values())[0] + ocard_lvl_ap_buff + o_shock_buff + o_special_water_buff
                                        ap3 = list(o_3.values())[0] + ocard_lvl_ap_buff + demon_slayer_buff + o_shock_buff + o_ultimate_water_buff
                                        enh1 = list(o_enhancer.values())[0]
                                        enh_name = list(o_enhancer.values())[2]
                                        pet_enh_name = list(opet_move.values())[2]
                                        pet_msg_on_resolve = ""

                                        # UNIVERSE CARD
                                        if o_universe == "Souls" and o_used_resolve:
                                            player_1_card = showcard(o, oarm,o_max_health, o_health, o_max_stamina, o_stamina,
                                                                    o_used_resolve, otitle, o_used_focus, o_attack, o_defense,
                                                                    turn_total, ap2, ap3, ap3, enh1, enh_name, ocard_lvl, t_defense)
                                        else:
                                            player_1_card = showcard(o, oarm,o_max_health, o_health, o_max_stamina, o_stamina,
                                                                    o_used_resolve, otitle, o_used_focus, o_attack, o_defense,
                                                                    turn_total, ap1, ap2, ap3, enh1, enh_name, ocard_lvl, t_defense)

                                        if o_universe == "Solo Leveling" and not o_swapped:
                                            if temp_tarm_shield_active and not tarm_shield_active:
                                                if oarm_shield_active:
                                                    oshield_value = oshield_value + temp_tshield_value
                                                    previous_moves.append(f"(**{turn_total}**) **{o_card}** 🩸 **ARISE!** *{tarm_name}* is now yours")
                                                    o_swapped = True
                                                elif not oarm_shield_active:
                                                    oarm_shield_active = True
                                                    oshield_value = temp_tshield_value
                                                    previous_moves.append(f"(**{turn_total}**) **{o_card}** 🩸 **ARISE!** *{tarm_name}* is now yours")
                                                    o_swapped = True
                                            elif temp_tarm_barrier_active and not tarm_barrier_active:
                                                if oarm_barrier_active:
                                                    obarrier_count = obarrier_count + temp_tbarrier_count
                                                    previous_moves.append(f"(**{turn_total}**) **{o_card}** 🩸 **ARISE!** *{tarm_name}* is now yours")
                                                    o_swapped = True
                                                elif not oarm_barrier_active:
                                                    oarm_barrier_active = True
                                                    obarrier_count = temp_tbarrier_count
                                                    previous_moves.append(f"(**{turn_total}**) **{o_card}** 🩸 **ARISE!** *{tarm_name}* is now yours")
                                                    o_swapped = True
                                            elif temp_tarm_parry_active and not tarm_parry_active:
                                                if oarm_parry_active:
                                                    oparry_count = oparry_count + temp_tparry_count
                                                    previous_moves.append(f"(**{turn_total}**) **{o_card}** 🩸 **ARISE!** *{tarm_name}* is now yours")
                                                    o_swapped = True
                                                elif not oarm_parry_active:
                                                    oarm_parry_active = True
                                                    oparry_count = temp_tparry_count
                                                    previous_moves.append(f"(**{turn_total}**) **{o_card}** 🩸 **ARISE!** *{tarm_name}* is now yours")
                                                    o_swapped = True
                                   

                                        # await private_channel.send(file=player_1_card)

                                        # Configure options which are buttons used to play
                                        main_options = ["1", "2", "3", "4"]
                                        if o_used_focus and o_used_resolve:
                                            if mode in co_op_modes:
                                                options = ["q", "Q", "0", "1", "2", "3", "4", "6", "7", "8", "9", "s"]
                                            else:
                                                options = ["q", "Q", "0", "1", "2", "3", "4", "6", "s"]

                                        elif o_used_focus and not o_used_resolve:
                                            if mode in co_op_modes:
                                                options = ["q", "Q", "0", "1", "2", "3", "4", "5", "7", "8", "9", "s"]
                                            else:
                                                options = ["q", "Q", "0", "1", "2", "3", "4", "5", "s"]

                                        else:
                                            if mode in co_op_modes:
                                                options = ["q", "Q", "0", "1", "2", "3", "4", "7", "8", "9", "s"]
                                            else:
                                                options = ["q", "Q", "0", "1", "2", "3", "4", "s"]

                                        battle_buttons = []
                                        util_buttons = [
                                            manage_components.create_button(
                                                style=ButtonStyle.grey,
                                                label="Quit | /ff",
                                                custom_id="q"
                                            ),
                                        ]
                                        if o_stamina >= 10:
                                            battle_buttons.append(
                                                manage_components.create_button(
                                                    style=ButtonStyle.green,
                                                    label=f"{o_basic_emoji} 10",
                                                    custom_id="1"
                                                )
                                            )

                                        if o_stamina >= 30:
                                            battle_buttons.append(
                                                manage_components.create_button(
                                                    style=ButtonStyle.green,
                                                    label=f"{o_super_emoji} 30",
                                                    custom_id="2"
                                                )
                                            )


                                        if o_stamina >= 80:
                                            battle_buttons.append(
                                                manage_components.create_button(
                                                    style=ButtonStyle.green,
                                                    label=f"{o_ultimate_emoji} 80",
                                                    custom_id="3"
                                                )
                                            )

                                        if o_stamina >= 20:
                                            battle_buttons.append(
                                                manage_components.create_button(
                                                    style=ButtonStyle.blue,
                                                    label=f"🦠 20",
                                                    custom_id="4"
                                                )
                                            )

                                            if t_gravity_hit == False:
                                                util_buttons.append(
                                                    manage_components.create_button(
                                                        style=ButtonStyle.grey,
                                                        label="Block 20",
                                                        custom_id="0"
                                                    )
                                                )

                                        if not randomized_battle and difficulty == "NORMAL" and mode != "ABYSS" or mode !="ABYSS" and mode != "SCENARIO":
                                                util_buttons.append(             
                                                    manage_components.create_button(
                                                    style=ButtonStyle.red,
                                                    label=f"Save",
                                                    custom_id="s"
                                                )
                                            )

                                        if mode in ai_co_op_modes:
                                            coop_util_buttons = [
                                                manage_components.create_button(
                                                    style=ButtonStyle.blue,
                                                    label="Assist Companion 20",
                                                    custom_id="7"
                                                ),
                                                manage_components.create_button(
                                                    style=ButtonStyle.blue,
                                                    label="Request Assistance",
                                                    custom_id="8"
                                                ),
                                                manage_components.create_button(
                                                    style=ButtonStyle.blue,
                                                    label="Request Block",
                                                    custom_id="9"
                                                ),
                                            ]
                                        
                                        elif mode in co_op_modes and mode not in ai_co_op_modes:
                                            coop_util_buttons = [
                                                manage_components.create_button(
                                                    style=ButtonStyle.blue,
                                                    label="Assist Companion 20",
                                                    custom_id="7"
                                                )
                                            ]

                                        if o_used_focus and o_used_resolve and not o_pet_used:
                                            util_buttons.append(
                                                manage_components.create_button(
                                                    style=ButtonStyle.green,
                                                    label="🧬",
                                                    custom_id="6"
                                                )
                                            )

                                        if o_used_focus and not o_used_resolve:
                                            util_buttons.append(
                                                manage_components.create_button(
                                                    style=ButtonStyle.green,
                                                    label="⚡Resolve!",
                                                    custom_id="5"
                                                )
                                            )

                                        battle_action_row = manage_components.create_actionrow(*battle_buttons)
                                        util_action_row = manage_components.create_actionrow(*util_buttons)
                                        if mode in co_op_modes:
                                            coop_util_action_row = manage_components.create_actionrow(*coop_util_buttons)
                                        
                                        if mode in co_op_modes:    
                                            carm_message = ""
                                            if carm_barrier_active:
                                                carm_message = f"💠{cbarrier_count}"
                                            elif carm_shield_active:
                                                carm_message = f"🌐{cshield_value}"
                                            elif carm_parry_active:
                                                carm_message = f"🔄{cparry_count}"


                                        # carm_message = ""
                            
                                        companion_stats = ""
                                        if mode in co_op_modes:
                                            if carm_barrier_active:
                                                carm_message = f"💠{cbarrier_count}"
                                            elif carm_shield_active:
                                                carm_message = f"🌐{cshield_value}"
                                            elif carm_parry_active:
                                                carm_message = f"🔄{cparry_count}"
                                            components = [battle_action_row, util_action_row, coop_util_action_row]
                                            companion_stats = f"\n{c_card}: ❤️{round(c_health)} 🌀{round(c_stamina)} 🗡️{round(c_attack)}/🛡️{round(c_defense)} {carm_message}"
                                        else:
                                            components = [battle_action_row, util_action_row]

                                        if o_used_resolve:
                                            pet_msg_on_resolve = f"🧬 {enhancer_mapping[pet_enh_name]}"
                                        tarm_message = ""
                                        if tarm_barrier_active:
                                            tarm_message = f"💠{tbarrier_count}"
                                        elif tarm_shield_active:
                                            tarm_message = f"🌐{tshield_value}"
                                        elif tarm_parry_active:
                                            tarm_message = f"🔄{tparry_count}"
                                        if oarm_passive_type == "BARRIER":
                                            if oarm_barrier_active:
                                                oarm_passive_value = f"{obarrier_count}"
                                            else:
                                                oarm_passive_value = 0
                                        elif oarm_passive_type == "SHIELD":
                                            if oarm_shield_active:
                                                oarm_passive_value = f"{oshield_value}"
                                            else:
                                                oarm_passive_value = 0
                                        elif oarm_passive_type == "PARRY":
                                            if oarm_parry_active:
                                                oarm_passive_value = f"{oparry_count}"
                                            else:
                                                oarm_passive_value = 0
                                        embedVar = discord.Embed(title=f"", description=textwrap.dedent(f"""\
                                        {previous_moves_into_embed}
                                        
                                        """), color=0xe74c3c)
                                        embedVar.set_author(name=f"🦾 {oarm_name} - {oarm_passive_type} {oarm_passive_value} {enhancer_suffix_mapping[oarm_passive_type]}\n{pet_msg_on_resolve}\n")
                                        embedVar.add_field(name=f"➡️ **Current Turn** {turn_total}", value=f"{ctx.author.mention} Select move below!")
                                        # await asyncio.sleep(2)
                                        embedVar.set_image(url="attachment://image.png")
                                        embedVar.set_thumbnail(url=ctx.author.avatar_url)
                                        embedVar.set_footer(
                                            text=f"{t_card}: ❤️{round(t_health)} 🌀{round(t_stamina)} 🗡️{round(t_attack)}/🛡️{round(t_defense)} {tarm_message}{companion_stats}",
                                            icon_url="https://cdn.discordapp.com/emojis/789290881654980659.gif?v=1")
                                        await battle_msg.delete(delay=2)
                                        await asyncio.sleep(2)
                                        battle_msg = await private_channel.send(embed=embedVar, components=components, file=player_1_card)

                                        # Make sure user is responding with move
                                        def check(button_ctx):
                                            return button_ctx.author == user1 and button_ctx.custom_id in options

                                        try:
                                            button_ctx: ComponentContext = await manage_components.wait_for_component(self.bot,
                                                                                                                    components=components,
                                                                                                                    timeout=120,
                                                                                                                    check=check)
                                            if button_ctx.custom_id == "s":
                                                try:
                                                    o_health = 0
                                                    await save_spot(self, ctx, universe, mode, currentopponent)
                                                    await battle_msg.delete(delay=1)
                                                    await asyncio.sleep(1)
                                                    battle_msg = await private_channel.send(content="Game Saved!")
                                                    return
                                                except Exception as ex:
                                                    trace = []
                                                    tb = ex.__traceback__
                                                    while tb is not None:
                                                        trace.append({
                                                            "filename": tb.tb_frame.f_code.co_filename,
                                                            "name": tb.tb_frame.f_code.co_name,
                                                            "lineno": tb.tb_lineno
                                                        })
                                                        tb = tb.tb_next
                                                    print(str({
                                                        'type': type(ex).__name__,
                                                        'message': str(ex),
                                                        'trace': trace
                                                    }))
                                                    guild = self.bot.get_guild(main.guild_id)
                                                    channel = guild.get_channel(main.guild_channel)
                                                    await channel.send(f"'PLAYER': **{str(ctx.author)}**, 'GUILD': **{str(ctx.author.guild)}**, TYPE: {type(ex).__name__}, MESSAGE: {str(ex)}, TRACE: {trace}")

                                                    

                                            # calculate data based on selected move
                                            if button_ctx.custom_id == "q" or button_ctx.custom_id == "Q":
                                                o_health = 0
                                                previous_moves.append(f"(**{turn_total}**) 💨 **{o_card}** Fled...")
                                                await battle_msg.delete(delay=1)
                                                await asyncio.sleep(1)
                                                battle_msg = await private_channel.send(content=f"{ctx.author.mention} has fled.")
                                                #return
                                            
                                            if button_ctx.custom_id == "1":
                                                if o_universe == "Souls" and o_used_resolve:
                                                    dmg = damage_cal(t_opponent_affinities, special_attack_name, omove2_element, o_universe, o_card, o_2, o_attack, o_defense, t_defense, o_stamina,
                                                                    o_enhancer_used, o_health, t_health, t_stamina, o_max_health,
                                                                    t_attack, o_special_move_description, turn_total,
                                                                    ocard_lvl_ap_buff, o_1)                                                
                                                else:
                                                    dmg = damage_cal(t_opponent_affinities, basic_attack_name, omove1_element, o_universe, o_card, o_1, o_attack, o_defense, t_defense,
                                                                    o_stamina, o_enhancer_used, o_health, t_health, t_stamina,
                                                                    o_max_health, t_attack, o_special_move_description, turn_total,
                                                                    ocard_lvl_ap_buff, None)
                                            elif button_ctx.custom_id == "2":
                                                if o_universe == "Souls" and o_used_resolve:
                                                    dmg = damage_cal(t_opponent_affinities, ultimate_attack_name, omove3_element, o_universe, o_card, o_3, o_attack, o_defense, t_defense, o_stamina,
                                                                    o_enhancer_used, o_health, t_health, t_stamina, o_max_health,
                                                                    t_attack, o_special_move_description, turn_total,
                                                                    ocard_lvl_ap_buff, o_2)                                                
                                                else:
                                                    dmg = damage_cal(t_opponent_affinities, special_attack_name, omove2_element, o_universe, o_card, o_2, o_attack, o_defense, t_defense,
                                                                    o_stamina, o_enhancer_used, o_health, t_health, t_stamina,
                                                                    o_max_health, t_attack, o_special_move_description, turn_total,
                                                                    ocard_lvl_ap_buff, None)
                                            elif button_ctx.custom_id == "3":

                                                dmg = damage_cal(t_opponent_affinities, ultimate_attack_name, omove3_element, o_universe, o_card, o_3, o_attack, o_defense, t_defense,
                                                                o_stamina, o_enhancer_used, o_health, t_health, t_stamina,
                                                                o_max_health, t_attack, o_special_move_description, turn_total,
                                                                ocard_lvl_ap_buff, None)
                                                if o_gif != "N/A" and not operformance:
                                                    # await button_ctx.defer(ignore=True)
                                                    await battle_msg.delete(delay=None)
                                                    # await asyncio.sleep(1)
                                                    battle_msg = await private_channel.send(f"{o_gif}")
                                                    
                                                    await asyncio.sleep(2)
                                            elif button_ctx.custom_id == "4":
                                                o_enhancer_used = True

                                                dmg = damage_cal(t_opponent_affinities, basic_attack_name, omove1_element, o_universe, o_card, o_enhancer, o_attack, o_defense, t_defense,
                                                                o_stamina, o_enhancer_used, o_health, t_health, t_stamina,
                                                                o_max_health, t_attack, o_special_move_description, turn_total,
                                                                ocard_lvl_ap_buff, None)
                                                o_enhancer_used = False
                                            elif button_ctx.custom_id == "5":
                                                # Resolve Check and Calculation
                                                if not o_used_resolve and o_used_focus:
                                                    if o_universe == "My Hero Academia":  # My Hero Trait
                                                        # fortitude or luck is based on health
                                                        fortitude = 0.0
                                                        low = o_health - (o_health * .75)
                                                        high = o_health - (o_health * .66)
                                                        fortitude = round(random.randint(int(low), int(high)))
                                                        # Resolve Scaling
                                                        o_resolve_health = round(fortitude + (.5 * o_resolve))
                                                        o_resolve_attack = round(
                                                            (.30 * o_defense) * (o_resolve / (.50 * o_defense)))
                                                        o_resolve_defense = round(
                                                            (.30 * o_defense) * (o_resolve / (.50 * o_defense)))
                                                        ocard_lvl_ap_buff = ocard_lvl_ap_buff + 80 + turn_total

                                                        o_stamina = o_stamina + o_resolve
                                                        o_health = o_health + o_resolve_health
                                                        o_attack = round(o_attack + o_resolve_attack)
                                                        o_defense = round(o_defense - o_resolve_defense)
                                                        o_used_resolve = True
                                                        o_pet_used = False
                                                        embedVar = discord.Embed(title=f"{o_card} PLUS ULTRAAA",
                                                                                description=f"**{o_card} says**\n{o_resolve_description}",
                                                                                colour=0xe91e63)
                                                        embedVar.add_field(name=f"Transformation: Plus Ultra",
                                                                        value="You do not lose a turn after you Resolve.")
                                                        if mode in B_modes:
                                                            embedVar.add_field(name=f"{t_card}'s Rebuke", value=f"{t_rebuke}",
                                                                            inline=False)
                                                            embedVar.set_footer(text=f"{o_card} this is your chance!")
                                                        
                                                        previous_moves.append(f"(**{turn_total}**) **{o_card}** 🩸 Resolved: PLUS ULTRA!")
                                                        await button_ctx.defer(ignore=True)

                                                        turn_total = turn_total + 1
                                                        turn = 0

                                                    elif o_universe == "Demon Slayer": 
                                                        # fortitude or luck is based on health
                                                        fortitude = 0.0
                                                        low = o_health - (o_health * .75)
                                                        high = o_health - (o_health * .66)
                                                        fortitude = round(random.randint(int(low), int(high)))
                                                        # Resolve Scaling
                                                        o_resolve_health = round(fortitude + (.5 * o_resolve))
                                                        o_resolve_attack = round(
                                                            (.30 * o_defense) * (o_resolve / (.50 * o_defense)))
                                                        o_resolve_defense = round(
                                                            (.30 * o_defense) * (o_resolve / (.50 * o_defense)))


                                                        o_stamina = o_stamina + o_resolve
                                                        o_health = o_health + o_resolve_health
                                                        o_attack = round(o_attack + o_resolve_attack)
                                                        o_defense = round(o_defense - o_resolve_defense)
                                                        if t_attack > o_attack:
                                                            o_attack = t_attack
                                                        if t_defense > o_defense:
                                                            o_defense = t_defense
                                                        o_used_resolve = True
                                                        o_pet_used = False
                                                        embedVar = discord.Embed(title=f"{o_card} begins Total Concentration Breathing",
                                                                                description=f"**{o_card} says**\n{o_resolve_description}",
                                                                                colour=0xe91e63)
                                                        previous_moves.append(f"(**{turn_total}**) **{o_card}** 🩸 Resolved: Total Concentration Breathing!")
                                                        await button_ctx.defer(ignore=True)
                                                        turn_total = turn_total + 1
                                                        turn = 1

                                                    elif o_universe == "Naruto": 
                                                        # fortitude or luck is based on health
                                                        fortitude = 0.0
                                                        low = o_health - (o_health * .75)
                                                        high = o_health - (o_health * .66)
                                                        fortitude = round(random.randint(int(low), int(high)))
                                                        # Resolve Scaling
                                                        o_resolve_health = round(fortitude + (.5 * o_resolve))
                                                        o_resolve_attack = round(
                                                            (.30 * o_defense) * (o_resolve / (.50 * o_defense)))
                                                        o_resolve_defense = round(
                                                            (.30 * o_defense) * (o_resolve / (.50 * o_defense)))

                                                        o_stamina = o_stamina + o_resolve
                                                        o_health = o_health + o_resolve_health
                                                        o_health = o_health + o_naruto_heal_buff
                                                        o_attack = round(o_attack + o_resolve_attack)
                                                        o_defense = round(o_defense - o_resolve_defense)

                                                        o_used_resolve = True
                                                        o_pet_used = False
                                                        embedVar = discord.Embed(title=f"{o_card} Heals from Hashirama Cells",
                                                                                description=f"**{o_card} says**\n{o_resolve_description}",
                                                                                colour=0xe91e63)
                                                        previous_moves.append(f"(**{turn_total}**) **{o_card}** 🩸 Resolved: Hashirama Cells heal you for **{o_naruto_heal_buff}**")
                                                        await button_ctx.defer(ignore=True)
                                                        turn_total = turn_total + 1
                                                        turn = 1




                                                    elif o_universe == "Attack On Titan":
                                                        # fortitude or luck is based on health
                                                        fortitude = 0.0
                                                        low = o_health - (o_health * .75)
                                                        high = o_health - (o_health * .66)
                                                        fortitude = round(random.randint(int(low), int(high)))
                                                        # Resolve Scaling
                                                        o_resolve_health = round(fortitude + (.5 * o_resolve))
                                                        o_resolve_attack = round(
                                                            (.30 * o_defense) * (o_resolve / (.50 * o_defense)))
                                                        o_resolve_defense = round(
                                                            (.30 * o_defense) * (o_resolve / (.50 * o_defense)))

                                                        o_stamina = o_stamina + o_resolve
                                                        o_health = o_health + o_resolve_health
                                                        o_attack = round(o_attack + o_resolve_attack)
                                                        o_defense = round(o_defense - o_resolve_defense)
                                                        o_used_resolve = True
                                                        o_pet_used = False
                                                        health_boost = 100 * o_focus_count
                                                        o_health = o_health + health_boost
                                                        embedVar = discord.Embed(title=f"{o_card} Titan Mode",
                                                                                description=f"**{o_card} says**\n{o_resolve_description}",
                                                                                colour=0xe91e63)
                                                        embedVar.add_field(name=f"Transformation Complete",
                                                                        value=f"Health increased by **{health_boost}**!")
                                                        if mode in B_modes:
                                                            embedVar.add_field(name=f"{t_card}'s Rebuke", value=f"{t_rebuke}",
                                                                            inline=False)
                                                            embedVar.set_footer(text=f"{o_card} this is your chance!")

                                                        previous_moves.append(f"(**{turn_total}**) **{o_card}** 🩸 Resolved: Titan Mode")
                                                        await button_ctx.defer(ignore=True)

                                                        turn_total = turn_total + 1
                                                        turn = 1

                                                    elif o_universe == "Bleach":  # Bleach Trait
                                                        # fortitude or luck is based on health
                                                        fortitude = 0.0
                                                        low = o_health - (o_health * .75)
                                                        high = o_health - (o_health * .66)
                                                        fortitude = round(random.randint(int(low), int(high)))
                                                        # Resolve Scaling
                                                        o_resolve_health = round(fortitude + (.5 * o_resolve))
                                                        o_resolve_attack = round(
                                                            (.30 * o_defense) * (o_resolve / (.50 * o_defense)))
                                                        o_resolve_defense = round(
                                                            (.30 * o_defense) * (o_resolve / (.50 * o_defense)))

                                                        o_stamina = o_stamina + o_resolve
                                                        o_health = o_health + o_resolve_health
                                                        o_attack = round((o_attack + (2 * o_resolve_attack))* 2)
                                                        o_defense = round(o_defense - o_resolve_defense)
                                                        # if o_defense >= 120:
                                                        # # o_defense = 120
                                                        o_used_resolve = True
                                                        o_pet_used = False
                                                        embedVar = discord.Embed(title=f"{o_card} STRENGTHENED RESOLVE :zap:",
                                                                                description=f"**{o_card} says**\n{o_resolve_description}",
                                                                                colour=0xe91e63)
                                                        embedVar.add_field(name=f"Transformation: Bankai",
                                                                        value="Gain double Attack on Resolve.")
                                                        if mode in B_modes:
                                                            embedVar.add_field(name=f"{t_card}'s Rebuke", value=f"{t_rebuke}",
                                                                            inline=False)
                                                            embedVar.set_footer(text=f"{o_card} this is your chance!")


                                                        previous_moves.append(f"(**{turn_total}**) **{o_card}** 🩸 Resolved: Bankai!")
                                                        await button_ctx.defer(ignore=True)

                                                        turn_total = turn_total + 1
                                                        turn = 1
                                                    elif o_universe == "God Of War":  # God Of War Trait
                                                        # fortitude or luck is based on health
                                                        fortitude = 0.0
                                                        low = o_health - (o_health * .75)
                                                        high = o_health - (o_health * .66)
                                                        fortitude = round(random.randint(int(low), int(high)))
                                                        # Resolve Scaling
                                                        o_resolve_health = round(fortitude + (.5 * o_resolve))
                                                        o_resolve_attack = round(
                                                            (.30 * o_defense) * (o_resolve / (.50 * o_defense)))
                                                        o_resolve_defense = round(
                                                            (.30 * o_defense) * (o_resolve / (.50 * o_defense)))

                                                        o_stamina = o_stamina + o_resolve
                                                        o_health = o_max_health
                                                        o_attack = round(o_attack + o_resolve_attack)
                                                        o_defense = round(o_defense - o_resolve_defense)
                                                        o_used_resolve = True
                                                        o_pet_used = False

                                                        if t_gow_resolve:
                                                            previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 Resolved: Ascension!")
                                                        elif not o_gow_resolve:
                                                            o_used_resolve = False
                                                            o_gow_resolve = True
                                                            o_defense = 125
                                                            previous_moves.append(f"(**{turn_total}**) **{o_card}** 🩸 Crushed Blood Orb: Health Refill")
                                                        

                                                        embedVar = discord.Embed(title=f"{o_card} STRENGTHENED RESOLVE :zap:",
                                                                                description=f"**{o_card} says**\n{o_resolve_description}",
                                                                                colour=0xe91e63)
                                                        embedVar.add_field(name=f"Transformation: Ascension",
                                                                        value="On Resolve Refill Health.")
                                                        if mode in B_modes:
                                                            embedVar.add_field(name=f"{t_card}'s Rebuke", value=f"{t_rebuke}",
                                                                            inline=False)
                                                            embedVar.set_footer(text=f"{o_card} this is your chance!")

                                                        
                                                        await button_ctx.defer(ignore=True)

                                                        turn_total = turn_total + 1
                                                        turn = 1
                                                    elif o_universe == "Fate":  # Fate Trait
                                                        # fortitude or luck is based on health
                                                        fortitude = 0.0
                                                        low = o_health - (o_health * .75)
                                                        high = o_health - (o_health * .66)
                                                        fortitude = round(random.randint(int(low), int(high)))
                                                        # Resolve Scaling
                                                        o_resolve_health = round(fortitude + (.5 * o_resolve))
                                                        o_resolve_attack = round(
                                                            (.30 * o_defense) * (o_resolve / (.50 * o_defense)))
                                                        o_resolve_defense = round(
                                                            (.30 * o_defense) * (o_resolve / (.50 * o_defense)))

                                                        o_stamina = o_stamina + o_resolve
                                                        o_health = o_health + o_resolve_health
                                                        o_attack = round(o_attack + o_resolve_attack)
                                                        o_defense = round(o_defense - o_resolve_defense)

                                                        embedVar = discord.Embed(title=f"{o_card} STRENGTHENED RESOLVE :zap:",
                                                                                description=f"**{o_card} says**\n{o_resolve_description}",
                                                                                colour=0xe91e63)
                                                        embedVar.add_field(name=f"Transformation: Command Seal",
                                                                        value="On Resolve, Strike with Ultimate, then Focus.")
                                                        if mode in B_modes:
                                                            embedVar.add_field(name=f"{t_card}'s Rebuke", value=f"{t_rebuke}",
                                                                            inline=False)
                                                            embedVar.set_footer(text=f"{o_card} this is your chance!")
                                                        dmg = damage_cal(t_opponent_affinities, ultimate_attack_name, omove3_element, o_universe, o_card, o_3, o_attack, o_defense,
                                                                        t_defense, o_stamina, o_enhancer_used, o_health,
                                                                        t_health, t_stamina, o_max_health, t_attack,
                                                                        o_special_move_description, turn_total,
                                                                        ocard_lvl_ap_buff, None)
                                                        t_health = t_health - dmg['DMG']
                                                        embedVar = discord.Embed(
                                                            title=f"{o_card} STRENGTHENED RESOLVE :zap:\n\n{dmg['MESSAGE']}",
                                                            description=f"**{o_card} says**\n{o_resolve_description}",
                                                            colour=0xe91e63)
                                                        embedVar.add_field(name=f"Transformation: Command Seal",
                                                                        value="On Resolve, Strike with Ultimate, then Focus.")

                                                        previous_moves.append(f"(**{turn_total}**) **{o_card}** 🩸 Resolved: Command Seal!")
                                                        await button_ctx.defer(ignore=True)

                                                        # o_stamina = 0
                                                        o_used_resolve = True
                                                        o_pet_used = False
                                                        turn_total = turn_total + 1
                                                        turn = 1
                                                    elif o_universe == "Kanto Region" or o_universe == "Johto Region" or o_universe == "Hoenn Region" or o_universe == "Sinnoh Region" or o_universe == "Kalos Region" or o_universe == "Unova Region" or o_universe == "Alola Region" or o_universe == "Galar Region":  # Pokemon Resolves
                                                        # fortitude or luck is based on health
                                                        fortitude = 0.0
                                                        low = o_health - (o_health * .75)
                                                        high = o_health - (o_health * .66)
                                                        fortitude = round(random.randint(int(low), int(high)))
                                                        # Resolve Scaling
                                                        o_resolve_health = round(fortitude + (.5 * o_resolve))
                                                        o_resolve_attack = round(
                                                            (.30 * o_defense) * (o_resolve / (.50 * o_defense)))
                                                        o_resolve_defense = round(
                                                            (.30 * o_defense) * (o_resolve / (.50 * o_defense)))

                                                        o_stamina = o_stamina + o_resolve
                                                        o_health = o_health + o_resolve_health
                                                        o_attack = round(o_attack + o_resolve_attack)
                                                        o_defense = o_defense * 2
                                                        o_used_resolve = True
                                                        o_pet_used = False
                                                        embedVar = discord.Embed(title=f"{o_card} STRENGTHENED RESOLVE :zap:",
                                                                                description=f"**{o_card} says**\n{o_resolve_description}",
                                                                                colour=0xe91e63)
                                                        embedVar.add_field(name=f"Transformation: Evolution",
                                                                        value="When you Resolve your Defense doubles")
                                                        if mode in B_modes:
                                                            embedVar.add_field(name=f"{t_card}'s Rebuke", value=f"{t_rebuke}",
                                                                            inline=False)
                                                            embedVar.set_footer(text=f"{o_card} this is your chance!")

                                                        if turn_total >= 50:
                                                            o_max_health = o_max_health + 1000
                                                            o_health = o_health + 1000
                                                            previous_moves.append(f"(**{turn_total}**) **{o_card}** 🩸 Resolved: Gigantomax Evolution!!! Gained **1000** HP!!!")
                                                        elif turn_total >= 30:
                                                            o_max_health = o_max_health + 300
                                                            o_health = o_health + 300
                                                            previous_moves.append(f"(**{turn_total}**) **{o_card}** 🩸 Resolved: Mega Evolution!! Gained **300** HP!")
                                                        else:
                                                            previous_moves.append(f"(**{turn_total}**) **{o_card}** 🩸 Resolved: Evolution!")
                                                        await button_ctx.defer(ignore=True)

                                                        turn_total = turn_total + 1
                                                        turn = 1
                                                    else:  # Standard Resolve
                                                        # fortitude or luck is based on health
                                                        fortitude = 0.0
                                                        low = o_health - (o_health * .75)
                                                        high = o_health - (o_health * .66)
                                                        fortitude = round(random.randint(int(low), int(high)))
                                                        # Resolve Scaling
                                                        o_resolve_health = round(fortitude + (.5 * o_resolve))
                                                        o_resolve_attack = round(
                                                            (.30 * o_defense) * (o_resolve / (.50 * o_defense)))
                                                        o_resolve_defense = round(
                                                            (.30 * o_defense) * (o_resolve / (.50 * o_defense)))

                                                        o_stamina = o_stamina + o_resolve
                                                        o_health = o_health + o_resolve_health
                                                        o_attack = round(o_attack + o_resolve_attack)
                                                        o_defense = round(o_defense - o_resolve_defense)
                                                        o_used_resolve = True
                                                        o_pet_used = False
                                                        if o_universe == "League Of Legends":
                                                            t_health = t_health - (60 * (o_focus_count + t_focus_count))
                                                            embedVar = discord.Embed(title=f"{o_card} PENTA KILL!",
                                                                                    description=f"**{o_card} says**\n{o_resolve_description}",
                                                                                    colour=0xe91e63)
                                                            embedVar.add_field(name=f"Nexus Destroyed",
                                                                            value=f"**{o_card}** dealt **{(60 * (o_focus_count + t_focus_count))}** damage.")
                                                        
                                                            previous_moves.append(f"(**{turn_total}**) **{o_card}** 🩸 Resolved: Pentakill! Dealing {(60 * (o_focus_count + t_focus_count))} damage.")
                                                            await button_ctx.defer(ignore=True)
                                                        elif o_universe == "Souls":
                                                            previous_moves.append(f"(**{turn_total}**) **{o_card}** 🩸 Phase 2: Enhanced Moveset!")
                                                            await button_ctx.defer(ignore=True)
                                                        else:
                                                            embedVar = discord.Embed(
                                                                title=f"{o_card} STRENGTHENED RESOLVE :zap:",
                                                                description=f"**{o_card} says**\n{o_resolve_description}",
                                                                colour=0xe91e63)
                                                            embedVar.add_field(name=f"Transformation",
                                                                            value="All stats & stamina greatly increased")
                                                            previous_moves.append(f"(**{turn_total}**) ⚡ **{o_card}** Resolved!")
                                                            await button_ctx.defer(ignore=True)

                                                        if mode in B_modes:
                                                            embedVar.add_field(name=f"{t_card}'s Rebuke", value=f"{t_rebuke}",
                                                                            inline=False)
                                                            embedVar.set_footer(text=f"{o_card} this is your chance!")
                                                        # await button_ctx.send(embed=embedVar)
                                                        turn_total = turn_total + 1
                                                        turn = 1
                                                else:
                                                    emessage = m.CANNOT_USE_RESOLVE
                                                    embedVar = discord.Embed(title=emessage, colour=0xe91e63)
                                                    previous_moves.append(f"(**{turn_total}**) **{o_card}** cannot resolve")
                                                    await button_ctx.defer(ignore=True)
                                                    turn = 0
                                            
                                            elif button_ctx.custom_id == "6":
                                                # Resolve Check and Calculation
                                                if o_used_resolve and o_used_focus and not o_pet_used:
                                                    o_enhancer_used = True
                                                    dmg = damage_cal(t_opponent_affinities, basic_attack_name, omove1_element, o_universe, o_card, opet_move, o_attack, o_defense,
                                                                    t_defense, o_stamina, o_enhancer_used, o_health, t_health,
                                                                    t_stamina, o_max_health, t_attack,
                                                                    o_special_move_description, turn_total, ocard_lvl_ap_buff, None)
                                                    o_enhancer_used = False
                                                    o_pet_used = True
                                                    opet_dmg = dmg['DMG']
                                                    opet_type = dmg['ENHANCED_TYPE']
                                                    if dmg['CAN_USE_MOVE']:
                                                        if opet_type == 'ATK':
                                                            o_attack = round(o_attack + dmg['DMG'])
                                                        elif opet_type == 'DEF':
                                                            o_defense = round(o_defense + dmg['DMG'])
                                                        elif opet_type == 'STAM':
                                                            o_stamina = round(o_stamina + dmg['DMG'])
                                                        elif opet_type == 'HLT':
                                                            o_health = round(o_health + dmg['DMG'])
                                                        elif opet_type == 'LIFE':
                                                            o_health = round(o_health + dmg['DMG'])
                                                            t_health = round(t_health - dmg['DMG'])
                                                        elif opet_type == 'DRAIN':
                                                            o_stamina = round(o_stamina + dmg['DMG'])
                                                            t_stamina = round(t_stamina - dmg['DMG'])
                                                        elif opet_type == 'FLOG':
                                                            o_attack = round(o_attack + dmg['DMG'])
                                                            t_attack = round(t_attack - dmg['DMG'])
                                                        elif opet_type == 'WITHER':
                                                            o_defense = round(o_defense + dmg['DMG'])
                                                            t_defense = round(t_defense - dmg['DMG'])
                                                        elif opet_type == 'RAGE':
                                                            o_defense = round(o_defense - dmg['DMG'])
                                                            o_attack = round(o_attack + dmg['DMG'])
                                                        elif opet_type == 'BRACE':
                                                            o_defense = round(o_defense + dmg['DMG'])
                                                            o_attack = round(o_attack - dmg['DMG'])
                                                        elif opet_type == 'BZRK':
                                                            o_health = round(o_health - dmg['DMG'])
                                                            o_attack = round(o_attack + dmg['DMG'])
                                                        elif opet_type == 'CRYSTAL':
                                                            o_health = round(o_health - dmg['DMG'])
                                                            o_defense = round(o_defense + dmg['DMG'])
                                                        elif opet_type == 'GROWTH':
                                                            o_max_health = round(o_max_health - dmg['DMG'])
                                                            o_defense = round(o_defense + (dmg['DMG'] * .5))
                                                            o_attack = round(o_attack + (dmg['DMG'] * .5))
                                                        elif opet_type == 'STANCE':
                                                            tempattack = dmg['DMG']
                                                            o_attack = o_defense
                                                            o_defense = tempattack
                                                        elif opet_type == 'CONFUSE':
                                                            tempattack = dmg['DMG']
                                                            t_attack = t_defense
                                                            t_defense = tempattack
                                                        elif opet_type == 'BLINK':
                                                            o_stamina = round(o_stamina - dmg['DMG'])
                                                            t_stamina = round(t_stamina + dmg['DMG'])
                                                        elif opet_type == 'SLOW':
                                                            tempstam = round(t_stamina + dmg['DMG'])
                                                            o_stamina = round(o_stamina - dmg['DMG'])
                                                            t_stamina = o_stamina
                                                            o_stamina = tempstam
                                                        elif opet_type == 'HASTE':
                                                            tempstam = round(t_stamina - dmg['DMG'])
                                                            o_stamina = round(o_stamina + dmg['DMG'])
                                                            t_stamina = o_stamina
                                                            o_stamina = tempstam
                                                        elif opet_type == 'SOULCHAIN':
                                                            o_stamina = round(dmg['DMG'])
                                                            t_stamina = o_stamina
                                                        elif opet_type == 'GAMBLE':
                                                            o_health = round(dmg['DMG'])
                                                            t_health = o_health
                                                        elif opet_type == 'FEAR':
                                                            o_max_health = round(o_max_health - dmg['DMG'])
                                                            t_defense = round(t_defense - (dmg['DMG'] * .5))
                                                            t_attack = round(t_attack - (dmg['DMG'] * .5))
                                                        elif opet_type == 'WAVE':
                                                            t_health = round(t_health - dmg['DMG'])
                                                        elif opet_type == 'BLAST':
                                                            if dmg['DMG'] >= 100:
                                                                dmg['DMG'] = 100
                                                            t_health = round(t_health - dmg['DMG'])
                                                        elif opet_type == 'CREATION':
                                                            o_max_health = round(o_max_health + dmg['DMG'])
                                                            o_health = round(o_health + dmg['DMG'])
                                                        elif opet_type == 'DESTRUCTION':
                                                            if dmg['DMG'] >= 100:
                                                                dmg['DMG'] = 100
                                                            t_max_health = round(t_max_health - dmg['DMG'])
                                                            if t_max_health <=1:
                                                                t_max_health = 1


                                                        o_stamina = o_stamina - int(dmg['STAMINA_USED'])
                                                        if o_universe == "Persona":
                                                            petdmg = damage_cal(t_opponent_affinities, basic_attack_name, omove1_element, o_universe, o_card, o_1, o_attack, o_defense,
                                                                                t_defense, o_stamina, o_enhancer_used, o_health,
                                                                                t_health, t_stamina, o_max_health, t_attack,
                                                                                o_special_move_description, turn_total,
                                                                                ocard_lvl_ap_buff, None)
                                                            t_health = t_health - petdmg['DMG']

                                                            embedVar = discord.Embed(
                                                                title=f"**PERSONA!**\n{opet_name} was summoned from {o_card}'s soul dealing **{petdmg['DMG']}** damage!!",
                                                                colour=0xe91e63)
                                                            await battle_msg.delete(delay=None)
                                                            if not operformance:
                                                                summon_file = showsummon(opet_image, opet_name, dmg['MESSAGE'], opet_lvl, opet_bond)
                                                                embedVar.set_image(url="attachment://pet.png")
                                                            previous_moves.append(f"(**{turn_total}**) **Persona!** 🩸 : **{opet_name}** was summoned from **{o_card}'s** soul dealing **{petdmg['DMG']}** damage!\n**{t_card}** summon disabled!")
                                                            t_pet_used = True
                                                            # await button_ctx.defer(ignore=True)
                                                            #embedVar.set_image(url="attachment://pet.png")
                                                            
                                                            #previous_moves.append(f"(**{turn_total}**) 🩸 Persona! **{opet_name}** was summoned from **{o_card}**'s soul dealing **{petdmg['DMG']}** damage!")
                                                            
                                                            if not operformance:
                                                                await asyncio.sleep(1)
                                                                battle_msg = await private_channel.send(embed=embedVar, file=summon_file)
                                                                await asyncio.sleep(2)
                                                                await battle_msg.delete(delay=None)
                                                            await button_ctx.defer(ignore=True)
                                                                
                                                            # await button_ctx.send(embed=embedVar, file=summon_file)
                                                        else:
                                                            embedVar = discord.Embed(
                                                                title=f"{o_card} Summoned 🧬 **{opet_name}**",
                                                                colour=0xe91e63)
                                                            await battle_msg.delete(delay=None)
                                                            if not operformance:
                                                                summon_file = showsummon(opet_image, opet_name, dmg['MESSAGE'], opet_lvl, opet_bond)
                                                                embedVar.set_image(url="attachment://pet.png")
                                                                # await asyncio.sleep(2)
                                                                # battle_msg = await private_channel.send(embed=embedVar, file=summon_file)
                                                                # await asyncio.sleep(2)
                                                            #embedVar.set_image(url="attachment://pet.png")
                                                            
                                                            previous_moves.append(f"(**{turn_total}**) **{o_card}** Summoned 🧬 **{opet_name}**: {dmg['MESSAGE']}")
                                                            # await button_ctx.defer(ignore=True)
                                                            # await battle_msg.delete(delay=None)
                                                            if not operformance:
                                                                await asyncio.sleep(1)
                                                                battle_msg = await private_channel.send(embed=embedVar, file=summon_file)
                                                                await asyncio.sleep(2)
                                                                await battle_msg.delete(delay=None)
                                                            # await button_ctx.defer(ignore=True)
                                                            #await battle_msg.delete(delay=None)
                                                        turn = 0
                                                    else:
                                                        previous_moves.append(f"(**{turn_total}**) 🧬 **{opet_name}** needs a turn to rest...")
                                                        await button_ctx.defer(ignore=True)
                                                        turn = 0
                                                else:
                                                    previous_moves.append(f"(**{turn_total}**) 🧬 **{opet_name}** needs a turn to rest...")
                                                    await button_ctx.defer(ignore=True)
                                            
                                            elif mode in co_op_modes:
                                                if button_ctx.custom_id == "7":
                                                    o_enhancer_used = True
                                                    dmg = damage_cal(t_for_c_opponent_affinities, basic_attack_name, omove1_element, o_universe, o_card, o_enhancer, o_attack, o_defense,
                                                                    c_defense, o_stamina, o_enhancer_used, o_health, c_health,
                                                                    c_stamina, o_max_health, c_attack,
                                                                    o_special_move_description, turn_total, ocard_lvl_ap_buff, None)
                                                    o_enhancer_used = False
                                                    comp_dmg = dmg['DMG']
                                                    comp_enh = dmg['ENHANCED_TYPE']
                                                    if dmg['CAN_USE_MOVE']:
                                                        if comp_enh == 'ATK':
                                                            c_attack = round(c_attack + dmg['DMG'])
                                                        elif comp_enh == 'DEF':
                                                            c_defense = round(c_defense + dmg['DMG'])
                                                        elif comp_enh == 'STAM':
                                                            c_stamina = round(c_stamina + dmg['DMG'])
                                                        elif comp_enh == 'HLT':
                                                            c_health = round(c_health + dmg['DMG'])
                                                        elif comp_enh == 'LIFE':
                                                            c_health = round(c_health + dmg['DMG'])
                                                            o_health = round(o_health - dmg['DMG'])
                                                        elif comp_enh == 'DRAIN':
                                                            c_stamina = round(c_stamina + dmg['DMG'])
                                                            o_stamina = round(o_stamina - dmg['DMG'])
                                                        elif comp_enh == 'FLOG':
                                                            c_attack = round(c_attack + dmg['DMG'])
                                                            t_attack = round(o_attack - dmg['DMG'])
                                                        elif comp_enh == 'WITHER':
                                                            c_defense = round(c_defense + dmg['DMG'])
                                                            t_defense = round(o_defense - dmg['DMG'])
                                                        elif comp_enh == 'RAGE':
                                                            c_defense = round(c_defense - dmg['DMG'])
                                                            c_attack = round(c_attack + dmg['DMG'])
                                                        elif comp_enh == 'BRACE':
                                                            c_defense = round(c_defense + dmg['DMG'])
                                                            c_attack = round(c_attack - dmg['DMG'])
                                                        elif comp_enh == 'BZRK':
                                                            c_health = round(c_health - dmg['DMG'])
                                                            c_attack = round(c_attack + dmg['DMG'])
                                                        elif comp_enh == 'CRYSTAL':
                                                            c_health = round(c_health - dmg['DMG'])
                                                            c_defense = round(c_defense + dmg['DMG'])
                                                        elif comp_enh == 'GROWTH':
                                                            c_max_health = round(c_max_health - dmg['DMG'])
                                                            c_defense = round(c_defense + (dmg['DMG'] * .5))
                                                            c_attack = round(c_attack + (dmg['DMG'] * .5))
                                                        elif comp_enh == 'STANCE':
                                                            tempattack = dmg['DMG']
                                                            c_attack = c_defense
                                                            c_defense = tempattack
                                                        elif comp_enh == 'CONFUSE':
                                                            tempattack = dmg['DMG']
                                                            o_attack = o_defense
                                                            o_defense = tempattack
                                                        elif comp_enh == 'BLINK':
                                                            c_stamina = round(c_stamina - dmg['DMG'])
                                                            o_stamina = round(o_stamina + dmg['DMG'])
                                                        elif comp_enh == 'SLOW':
                                                            tempstam = round(o_stamina + dmg['DMG'])
                                                            c_stamina = round(c_stamina - dmg['DMG'])
                                                            o_stamina = c_stamina
                                                            c_stamina = tempstam
                                                        elif comp_enh == 'HASTE':
                                                            tempstam = round(o_stamina - dmg['DMG'])
                                                            c_stamina = round(c_stamina + dmg['DMG'])
                                                            o_stamina = c_stamina
                                                            c_stamina = tempstam
                                                        elif comp_enh == 'SOULCHAIN':
                                                            c_stamina = round(dmg['DMG'])
                                                            o_stamina = c_stamina
                                                        elif comp_enh == 'GAMBLE':
                                                            c_health = round(dmg['DMG'])
                                                            o_health = c_health
                                                        elif comp_enh == 'FEAR':
                                                            c_max_health = round(c_max_health - dmg['DMG'])
                                                            t_defense = round(t_defense - (dmg['DMG'] * .5))
                                                            t_attack = round(t_attack - (dmg['DMG'] * .5))
                                                        elif comp_enh == 'WAVE':
                                                            t_health = round(t_health - dmg['DMG'])
                                                        elif comp_enh == 'BLAST':
                                                            t_health = round(t_health - dmg['DMG'])
                                                        elif comp_enh == 'CREATION':
                                                            c_max_health = round(c_max_health + dmg['DMG'])
                                                            c_health = round(c_health + dmg['DMG'])
                                                        elif comp_enh == 'DESTRUCTION':
                                                            t_max_health = round(t_max_health - dmg['DMG'])
                                                            # c_max_health = round(c_max_health - dmg['DMG'])
                                                            if t_max_health <=1:
                                                                t_max_health = 1
                                                            # if c_max_health <=1:
                                                            #     c_max_health = 1



                                                        if comp_enh in Stamina_Enhancer_Check or comp_enh in Time_Enhancer_Check:
                                                            t_stamina = t_stamina
                                                        else:
                                                            o_stamina = o_stamina - int(dmg['STAMINA_USED'])

                                                        embedVar = discord.Embed(
                                                            title=f"{o_card} ASSISTED {c_card}",
                                                            colour=0xe91e63)
                                                        embedVar.add_field(name=f"{o_card} used {omove_enhanced_text}!",
                                                                        value=f"Enhanced {comp_enh}")
                                                        previous_moves.append(f"(**{turn_total}**) **{o_card}** used {omove_enhanced_text}:👥 Assisting **{c_card}**")
                                                        await button_ctx.defer(ignore=True)
                                                        turn_total = turn_total + 1
                                                        turn = 1
                                                    else:
                                                        previous_moves.append(f"(**{turn_total}**) {o_card} doesn't have enough Stamina to use this move")
                                                        await button_ctx.defer(ignore=True)
                                                        turn = 0
                                                elif button_ctx.custom_id == "8":
                                                    c_enhancer_used = True
                                                    dmg = damage_cal(t_for_c_opponent_affinities, basic_attack_name, cmove1_element, c_universe, c_card, c_enhancer, c_attack, c_defense,
                                                                    o_defense, c_stamina, c_enhancer_used, c_health, o_health,
                                                                    o_stamina, c_max_health, o_attack,
                                                                    c_special_move_description, turn_total, ccard_lvl_ap_buff, None)
                                                    c_enhancer_used = False
                                                    cdmg = dmg['DMG']
                                                    cenh_type = dmg['ENHANCED_TYPE']
                                                    if dmg['CAN_USE_MOVE']:
                                                        if cenh_type == 'ATK':
                                                            o_attack = round(o_attack + dmg['DMG'])
                                                        elif cenh_type == 'DEF':
                                                            o_defense = round(o_defense + dmg['DMG'])
                                                        elif cenh_type == 'STAM':
                                                            o_stamina = round(o_stamina + dmg['DMG'])
                                                        elif cenh_type == 'HLT':
                                                            o_health = round(o_health + dmg['DMG'])
                                                        elif cenh_type == 'LIFE':
                                                            o_health = round(o_health + dmg['DMG'])
                                                            c_health = round(c_health - dmg['DMG'])
                                                        elif cenh_type == 'DRAIN':
                                                            o_stamina = round(o_stamina + dmg['DMG'])
                                                            c_stamina = round(c_stamina - dmg['DMG'])
                                                        elif cenh_type == 'FLOG':
                                                            o_attack = round(o_attack + dmg['DMG'])
                                                            t_attack = round(t_attack - dmg['DMG'])
                                                        elif cenh_type == 'WITHER':
                                                            o_defense = round(o_defense + dmg['DMG'])
                                                            t_defense = round(t_defense - dmg['DMG'])
                                                        elif cenh_type == 'RAGE':
                                                            o_defense = round(o_defense - dmg['DMG'])
                                                            o_attack = round(o_attack + dmg['DMG'])
                                                        elif cenh_type == 'BRACE':
                                                            o_defense = round(o_defense + dmg['DMG'])
                                                            o_attack = round(o_attack - dmg['DMG'])
                                                        elif cenh_type == 'BZRK':
                                                            o_health = round(o_health - dmg['DMG'])
                                                            o_attack = round(o_attack + dmg['DMG'])
                                                        elif cenh_type == 'CRYSTAL':
                                                            o_health = round(o_health - dmg['DMG'])
                                                            o_defense = round(o_defense + dmg['DMG'])
                                                        elif cenh_type == 'GROWTH':
                                                            o_max_health = round(o_max_health - dmg['DMG'])
                                                            o_defense = round(o_defense + (dmg['DMG'] * .5))
                                                            o_attack = round(o_attack + (dmg['DMG'] * .5))
                                                        elif cenh_type == 'STANCE':
                                                            tempattack = dmg['DMG']
                                                            o_attack = o_defense
                                                            o_defense = tempattack
                                                        elif cenh_type == 'CONFUSE':
                                                            tempattack = dmg['DMG']
                                                            c_attack = c_defense
                                                            c_defense = tempattack
                                                        elif cenh_type == 'BLINK':
                                                            o_stamina = round(o_stamina - dmg['DMG'])
                                                            c_stamina = round(c_stamina + dmg['DMG'])
                                                        elif cenh_type == 'SLOW':
                                                            tempstam = round(c_stamina + dmg['DMG'])
                                                            o_stamina = round(o_stamina - dmg['DMG'])
                                                            c_stamina = o_stamina
                                                            o_stamina = tempstam
                                                        elif cenh_type == 'HASTE':
                                                            tempstam = round(c_stamina - dmg['DMG'])
                                                            o_stamina = round(o_stamina + dmg['DMG'])
                                                            c_stamina = o_stamina
                                                            o_stamina = tempstam
                                                        elif cenh_type == 'SOULCHAIN':
                                                            o_stamina = round(dmg['DMG'])
                                                            c_stamina = o_stamina
                                                        elif cenh_type == 'GAMBLE':
                                                            o_health = round(dmg['DMG'])
                                                            c_health = o_health
                                                        elif cenh_type == 'FEAR':
                                                            o_max_health = round(o_max_health - dmg['DMG'])
                                                            t_defense = round(t_defense - (dmg['DMG'] * .5))
                                                            t_attack = round(t_attack - (dmg['DMG'] * .5))
                                                        elif cenh_type == 'WAVE':
                                                            t_health = round(t_health - dmg['DMG'])
                                                        elif cenh_type == 'BLAST':
                                                            t_health = round(t_health - dmg['DMG'])
                                                        elif cenh_type == 'CREATION':
                                                            o_max_health = round(o_max_health + dmg['DMG'])
                                                            o_health = round(o_health + dmg['DMG'])
                                                        elif enh_type == 'DESTRUCTION':
                                                            t_max_health = round(t_max_health - dmg['DMG'])
                                                            # o_max_health = round(o_max_health - dmg['DMG'])
                                                            if t_max_health <=1:
                                                                t_max_health = 1
                                                            # if o_max_health <=1:
                                                            #     o_max_health = 1

                                                        if cenh_type in Stamina_Enhancer_Check or cenh_type in Time_Enhancer_Check:
                                                            t_stamina = t_stamina
                                                        else:
                                                            c_stamina = c_stamina - int(dmg['STAMINA_USED'])

                                                        embedVar = discord.Embed(
                                                            title=f"{c_card} ASSISTED {o_card}",
                                                            colour=0xe91e63)
                                                        embedVar.add_field(name=f"{c_card} used {cmove_enhanced_text}!",
                                                                        value=f"Enhanced {cenh_type}")
                                                        previous_moves.append(f'(**{turn_total}**) **{c_card}** used {cmove_enhanced_text}:👥 Assisting **{o_card}**')
                                                        await button_ctx.defer(ignore=True)
                                                        turn_total = turn_total + 1
                                                        turn = 1
                                                    else:
                                                        previous_moves.append(f"(**{turn_total}**) Not enough Stamina to use this move")
                                                        await button_ctx.defer(ignore=True)
                                                        turn = 0
                                                elif button_ctx.custom_id == "9":
                                                    if c_stamina >= 20:
                                                        c_stamina = c_stamina - 20
                                                        c_block_used = True
                                                        c_defense = round(c_defense * 2)
                                                        embedVar = discord.Embed(
                                                            title=f"**{c_card}** Defended 🛡️ {o_card}",
                                                            colour=0xe91e63)

                                                        previous_moves.append(f"(**{turn_total}**) **{c_card}**: Defended 🛡️ **{o_card}**")
                                                        await button_ctx.defer(ignore=True)
                                                        turn_total = turn_total + 1
                                                        turn = 1
                                                    else:
                                                        previous_moves.append(f"(**{turn_total}**) **{c_card}** is too tired to block")
                                                        await button_ctx.defer(ignore=True)
                                                        turn = 0

                                            if button_ctx.custom_id == "0":
                                                block_message = ""
                                                if o_universe == "Persona":
                                                    if mode in co_op_modes:
                                                        block_message = f"**Confidant Block!*** 🩸: **{o_card}**: Defended 🛡️ **{c_card}**"
                                                        o_defend_used = True
                                                    else:
                                                        block_message = f"**Confidant Block!*** 🩸: **{o_card}** Blocked 🛡️"
                                                        o_block_used = True
                                                    o_defense = round(o_defense * 2)
                                                    embedVar = discord.Embed(title=f"{block_message}", colour=0xe91e63)

                                                    previous_moves.append(f"(**{turn_total}**) {block_message}")
                                                    await button_ctx.defer(ignore=True)
                                                    turn_total = turn_total + 1
                                                    turn = 1

                                                elif o_stamina >= 20:

                                                    if o_universe == "Attack On Titan":
                                                        previous_moves.append(f"(**{turn_total}**) **Rally** 🩸 ! **{o_card}** Increased Max Health ❤️")
                                                        o_max_health = round(o_max_health + 100)
                                                        o_health = o_health + 100

                                                    if o_universe == "Bleach":
                                                        dmg = damage_cal(t_opponent_affinities, basic_attack_name, omove1_element, o_universe, o_card, o_1, o_attack, o_defense, t_defense, o_stamina,
                                                                        o_enhancer_used, o_health, t_health, t_stamina, o_max_health,
                                                                        t_attack, o_special_move_description, turn_total,
                                                                        ocard_lvl_ap_buff, None)
                                                        previous_moves.append(f"(**{turn_total}**) **{o_card}** Exerted their 🩸 Spiritual Pressure - {dmg['MESSAGE']}")
                                                        if dmg['REPEL']:
                                                            o_health = o_health - dmg['DMG']
                                                        elif dmg['ABSORB']:
                                                            t_health = t_health + dmg['DMG']
                                                        elif dmg['ELEMENT'] == water_element:
                                                            if omove1_element == water_element:
                                                                o_basic_water_buff = o_basic_water_buff + 25
                                                            if omove2_element == water_element:
                                                                o_special_water_buff = o_special_water_buff + 25
                                                            if omove3_element == water_element:
                                                                o_ultimate_water_buff = o_ultimate_water_buff + 25
                                                            t_health = t_health - dmg['DMG']
                                                            

                                                        elif dmg['ELEMENT'] == time_element:
                                                            o_stamina = 0
                                                            t_health = t_health - dmg['DMG']

                                                        elif dmg['ELEMENT'] == earth_element:
                                                            o_defense = o_defense + (dmg['DMG'] * .20)
                                                            t_health = t_health - dmg['DMG']

                                                        elif dmg['ELEMENT'] == death_element:
                                                            t_max_health = t_max_health - (dmg['DMG'] * .07)
                                                            t_health = t_health - dmg['DMG']

                                                        elif dmg['ELEMENT'] == light_element:
                                                            o_stamina = round(o_stamina + (dmg['STAMINA_USED'] / 2))
                                                            t_health = t_health - dmg['DMG']

                                                        elif dmg['ELEMENT'] == dark_element:
                                                            o_stamina = o_stamina + 5
                                                            t_stamina = t_stamina - 5
                                                            t_health = t_health - dmg['DMG']

                                                        elif dmg['ELEMENT'] == life_element:
                                                            o_health = o_health + (dmg['DMG'] * .15)
                                                            t_health = t_health - dmg['DMG']

                                                        elif dmg['ELEMENT'] == recoil_element:
                                                            o_health = o_health - (dmg['DMG'] * .25)
                                                            t_health = t_health - dmg['DMG']


                                                        elif dmg['ELEMENT'] == psychic_element:
                                                            t_defense = t_defense - (dmg['DMG'] * .08)
                                                            t_attack = t_attack - (dmg['DMG'] * .08)
                                                            t_health = t_health - dmg['DMG']

                                                        elif dmg['ELEMENT'] == fire_element:
                                                            o_burn_dmg = o_burn_dmg + round(dmg['DMG'] * .20)
                                                            t_health = t_health - dmg['DMG']


                                                        elif dmg['ELEMENT'] == electric_element:
                                                            o_shock_buff = o_shock_buff +  (dmg['DMG'] * .07)
                                                            t_health = t_health - dmg['DMG']

                                                        elif dmg['ELEMENT'] == poison_element:
                                                            if o_poison_dmg <= 100:
                                                                o_poison_dmg = o_poison_dmg + 8
                                                            t_health = t_health - dmg['DMG']

                                                        elif dmg['ELEMENT'] == ice_element:
                                                            o_ice_counter = o_ice_counter + 1
                                                            if o_ice_counter == 3:
                                                                o_freeze_enh = True
                                                                o_ice_counter = 0
                                                            t_health = t_health - dmg['DMG']

                                                        elif dmg['ELEMENT'] == bleed_element:
                                                            o_bleed_counter = o_bleed_counter + 1
                                                            if o_bleed_counter == 5:
                                                                o_bleed_hit = True
                                                                o_bleed_counter = 0
                                                            t_health = t_health - dmg['DMG']
                                                            
                                                        elif dmg['ELEMENT'] == gravity_element:
                                                            o_gravity_hit = True
                                                            t_health = t_health - dmg['DMG']
                                                        
                                                        else:
                                                            t_health = t_health - dmg['DMG']

                                                    if mode in co_op_modes:
                                                        block_message = f"**{o_card}**: Defended 🛡️ **{c_card}**"
                                                        o_defend_used = True
                                                    else:
                                                        block_message = f"**{o_card}** Blocked 🛡️"
                                                        o_block_used = True
                                                    o_stamina = o_stamina - 20
                                                    o_defense = round(o_defense * 2)
                                                    embedVar = discord.Embed(title=f"{block_message}", colour=0xe91e63)

                                                    previous_moves.append(f"(**{turn_total}**) {block_message}")
                                                    await button_ctx.defer(ignore=True)
                                                    turn_total = turn_total + 1
                                                    turn = 1
                                                else:
                                                    previous_moves.append(f"(**{turn_total}**) **{o_card}** is too tired to block.")
                                                    await button_ctx.defer(ignore=True)
                                                    turn = 0

                                            if button_ctx.custom_id in main_options:
                                                # If you have enough stamina for move, use it
                                                if dmg['CAN_USE_MOVE']:
                                                    if dmg['ENHANCE']:
                                                        enh_type = dmg['ENHANCED_TYPE']

                                                        if enh_type == 'ATK':
                                                            o_attack = round(o_attack + dmg['DMG'])
                                                        elif enh_type == 'DEF':
                                                            o_defense = round(o_defense + dmg['DMG'])
                                                        elif enh_type == 'STAM':
                                                            o_stamina = round(o_stamina + dmg['DMG'])
                                                        elif enh_type == 'HLT':
                                                            o_health = round(o_health + dmg['DMG'])
                                                        elif enh_type == 'LIFE':
                                                            o_health = round(o_health + dmg['DMG'])
                                                            t_health = round(t_health - dmg['DMG'])
                                                        elif enh_type == 'DRAIN':
                                                            o_stamina = round(o_stamina + dmg['DMG'])
                                                            t_stamina = round(t_stamina - dmg['DMG'])
                                                        elif enh_type == 'FLOG':
                                                            o_attack = round(o_attack + dmg['DMG'])
                                                            t_attack = round(t_attack - dmg['DMG'])
                                                        elif enh_type == 'WITHER':
                                                            o_defense = round(o_defense + dmg['DMG'])
                                                            t_defense = round(t_defense - dmg['DMG'])
                                                        elif enh_type == 'RAGE':
                                                            o_defense = round(o_defense - dmg['DMG'])
                                                            o_attack = round(o_attack + dmg['DMG'])
                                                        elif enh_type == 'BRACE':
                                                            o_defense = round(o_defense + dmg['DMG'])
                                                            o_attack = round(o_attack - dmg['DMG'])
                                                        elif enh_type == 'BZRK':
                                                            o_health = round(o_health - dmg['DMG'])
                                                            o_attack = round(o_attack + dmg['DMG'])
                                                        elif enh_type == 'CRYSTAL':
                                                            o_health = round(o_health - dmg['DMG'])
                                                            o_defense = round(o_defense + dmg['DMG'])
                                                        elif enh_type == 'GROWTH':
                                                            o_max_health = round(o_max_health - dmg['DMG'])
                                                            o_defense = round(o_defense + (dmg['DMG'] * .5))
                                                            o_attack = round(o_attack + (dmg['DMG'] * .5))
                                                        elif enh_type == 'STANCE':
                                                            tempattack = dmg['DMG']
                                                            o_attack = o_defense
                                                            o_defense = tempattack
                                                        elif enh_type == 'CONFUSE':
                                                            tempattack = dmg['DMG']
                                                            t_attack = t_defense
                                                            t_defense = tempattack
                                                        elif enh_type == 'BLINK':
                                                            o_stamina = round(o_stamina - dmg['DMG'])
                                                            t_stamina = round(t_stamina + dmg['DMG'])
                                                        elif enh_type == 'SLOW':
                                                            tempstam = round(t_stamina + dmg['DMG'])
                                                            o_stamina = round(o_stamina - dmg['DMG'])
                                                            t_stamina = o_stamina
                                                            o_stamina = tempstam
                                                        elif enh_type == 'HASTE':
                                                            tempstam = round(t_stamina - dmg['DMG'])
                                                            o_stamina = round(o_stamina + dmg['DMG'])
                                                            t_stamina = o_stamina
                                                            o_stamina = tempstam
                                                        elif enh_type == 'SOULCHAIN':
                                                            o_stamina = round(dmg['DMG'])
                                                            t_stamina = o_stamina
                                                        elif enh_type == 'GAMBLE':
                                                            if mode in D_modes:
                                                                t_health = round(dmg['DMG']) * 2
                                                                o_health = round(dmg['DMG'])
                                                            elif mode in B_modes:
                                                                t_health = round(dmg['DMG']) * 3
                                                                o_health = round(dmg['DMG'])
                                                            else:
                                                                t_health = round(dmg['DMG'])
                                                                o_health = round(dmg['DMG'])
                                                        elif enh_type == 'FEAR':
                                                            o_max_health = round(o_max_health - dmg['DMG'])
                                                            t_defense = round(t_defense - (dmg['DMG'] * .5))
                                                            t_attack = round(t_attack - (dmg['DMG'] * .5))
                                                        elif enh_type == 'WAVE':
                                                            t_health = round(t_health - dmg['DMG'])
                                                        elif enh_type == 'BLAST':
                                                            t_health = round(t_health - dmg['DMG'])
                                                        elif enh_type == 'CREATION':
                                                            o_max_health = round(o_max_health + dmg['DMG'])
                                                            o_health = round(o_health + dmg['DMG'])
                                                        elif enh_type == 'DESTRUCTION':
                                                            t_max_health = round(t_max_health - dmg['DMG'])
                                                            # o_max_health = round(o_max_health - dmg['DMG'])
                                                            if t_max_health <=1:
                                                                t_max_health = 1
                                                            # if o_max_health <=1:
                                                            #     o_max_health = 1

                                                        if enh_type in Stamina_Enhancer_Check or enh_type in Time_Enhancer_Check or enh_type in Control_Enhancer_Check:
                                                            o_stamina = o_stamina
                                                        else:
                                                            o_stamina = o_stamina - int(dmg['STAMINA_USED'])

                                                        embedVar = discord.Embed(title=f"{dmg['MESSAGE']}",
                                                                                colour=embed_color_o)
                                                        previous_moves.append(f"(**{turn_total}**) **{o_card}**: 🦠 {dmg['MESSAGE']}")
                                                        turn_total = turn_total + 1
                                                        turn = 1
                                                        await button_ctx.defer(ignore=True)
                                                    elif dmg['DMG'] == 0:
                                                        o_stamina = o_stamina - int(dmg['STAMINA_USED'])

                                                        embedVar = discord.Embed(title=f"{dmg['MESSAGE']}", colour=embed_color_o)
                                                        if oarm_barrier_active and dmg['ELEMENT'] != psychic_element:
                                                            oarm_barrier_active=False
                                                            embedVar.add_field(name=f"{o_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                            previous_moves.append(f"(**{turn_total}**) **{o_card}**'s 💠 Barrier Disabled!")
                                                        previous_moves.append(f"(**{turn_total}**) **{o_card}**: {dmg['MESSAGE']}")
                                                        turn_total = turn_total + 1
                                                        turn = 1
                                                        await button_ctx.defer(ignore=True)
                                                    else:
                                                        if t_universe == "Naruto" and t_stamina < 10:
                                                            t_stored_damage = round(dmg['DMG'])
                                                            t_naruto_heal_buff = t_naruto_heal_buff + t_stored_damage
                                                            t_health = t_health 
                                                            embedVar = discord.Embed(title=f"{t_card}: Substitution Jutsu", description=f"{o_card} strikes a log", colour=0xe91e63)
                                                            if oarm_barrier_active and dmg['ELEMENT'] != psychic_element:
                                                                oarm_barrier_active=False
                                                                embedVar.add_field(name=f"{o_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                previous_moves.append(f"(**{turn_total}**) **{o_card}**'s 💠 Barrier Disabled!")

                                                            previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸: Substitution Jutsu")
                                                            if not t_used_resolve:
                                                                previous_moves.append(f"(**{turn_total}**) 🩸**{t_stored_damage}** Hasirama Cells stored. 🩸**{t_naruto_heal_buff}** total stored.")
                                                            if not botActive:
                                                                await button_ctx.defer(ignore=True)
                                                        elif tarm_shield_active and dmg['ELEMENT'] != dark_element:

                                                            if tshield_value > 0:
                                                                tshield_value = tshield_value - dmg['DMG']
                                                                t_health = t_health 
                                                                if tshield_value <=0:
                                                                    embedVar = discord.Embed(title=f"{t_card}'s' **Shield** Shattered!", description=f"{o_card} breaks the **Shield**!", colour=0xe91e63)
                                                                    previous_moves.append(f"(**{turn_total}**) 🌐**{t_card}**: Shield Shattered!")
                                                                    if oarm_barrier_active and dmg['ELEMENT'] != psychic_element:
                                                                        oarm_barrier_active=False
                                                                        embedVar.add_field(name=f"{o_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                        previous_moves.append(f"(**{turn_total}**) **{o_card}**'s 💠 Barrier Disabled!")
                                                                    if not botActive:
                                                                        await button_ctx.defer(ignore=True)
                                                                    tarm_shield_active = False
                                                                else:
                                                                    embedVar = discord.Embed(title=f"{t_card} Activates **Shield** 🌐", description=f"**{o_card}** strikes the Shield 🌐\n**{tshield_value} Shield** Left!", colour=0xe91e63)
                                                                    previous_moves.append(f"(**{turn_total}**) **{o_card}** strikes **{t_card}**'s Shield 🌐\n**{tshield_value} Shield** Left!")
                                                                    if oarm_barrier_active and dmg['ELEMENT'] != psychic_element:
                                                                        oarm_barrier_active=False
                                                                        embedVar.add_field(name=f"{o_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                        previous_moves.append(f"(**{turn_total}**) **{o_card}**'s 💠 Barrier Disabled!")
                                                                    if not botActive:
                                                                        await button_ctx.defer(ignore=True)

                                                        elif tarm_barrier_active and dmg['ELEMENT'] != psychic_element:
                                                            if tbarrier_count >1:
                                                                t_health = t_health 
                                                                embedVar = discord.Embed(title=f"{t_card} Activates **Barrier** 💠", description=f"{o_card}'s attack **Nullified**!\n **{tbarrier_count - 1} Barriers** remain!", colour=0xe91e63)
                                                                previous_moves.append(f"(**{turn_total}**) **{t_card}** Activates Barrier 💠 {o_card}'s attack **Nullified**!\n **{tbarrier_count - 1} Barriers** remain!")
                                                                if oarm_barrier_active and dmg['ELEMENT'] != psychic_element:
                                                                    oarm_barrier_active=False
                                                                    embedVar.add_field(name=f"{o_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                    previous_moves.append(f"(**{turn_total}**) **{o_card}**'s 💠 Barrier Disabled!")
                                                                if not botActive:
                                                                    await button_ctx.defer(ignore=True)
                                                                tbarrier_count = tbarrier_count - 1
                                                            elif tbarrier_count==1:
                                                                embedVar = discord.Embed(title=f"{t_card}'s **Barrier** Broken!", description=f"{o_card} destroys the **Barrier**", colour=0xe91e63)
                                                                previous_moves.append(f"(**{turn_total}**) **{t_card}**'s Barrier Broken!")
                                                                tbarrier_count = tbarrier_count - 1
                                                                if oarm_barrier_active and dmg['ELEMENT'] != psychic_element:
                                                                    oarm_barrier_active=False
                                                                    embedVar.add_field(name=f"{o_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                    previous_moves.append(f"(**{turn_total}**) **{o_card}**'s 💠 Barrier Disabled!")
                                                                if not botActive:
                                                                    await button_ctx.defer(ignore=True)
                                                                tarm_barrier_active = False
                                                        elif tarm_parry_active and dmg['ELEMENT'] != earth_element:
                                                            if tparry_count > 1:
                                                                t_health = t_health
                                                                tparry_damage = round(dmg['DMG'])
                                                                t_health = round(t_health - (tparry_damage * .75))
                                                                o_health = round(o_health - (tparry_damage * .25))
                                                                tparry_count = tparry_count - 1
                                                                embedVar = discord.Embed(title=f"{t_card} Activates **Parry** 🔄", description=f"{o_card} takes {round(tparry_damage * .25)}! DMG\n **{tparry_count} Parries** to go!!", colour=0xe91e63)
                                                                previous_moves.append(f"(**{turn_total}**) **{t_card}** Activates Parry 🔄  {o_card} takes {round(tparry_damage * .25)}! DMG\n **{tparry_count} Parries** to go!!")
                                                                if oarm_barrier_active and dmg['ELEMENT'] != psychic_element:
                                                                    oarm_barrier_active=False
                                                                    embedVar.add_field(name=f"{o_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                    previous_moves.append(f"(**{turn_total}**) **{o_card}**'s 💠 Barrier Disabled!")
                                                                if not botActive:
                                                                    await button_ctx.defer(ignore=True)
                                                                
                                                            elif tparry_count==1:
                                                                t_health = t_health
                                                                tparry_damage = round(dmg['DMG'])
                                                                t_health = round(t_health - (tparry_damage * .75))
                                                                o_health = round(o_health - (tparry_damage * .25))
                                                                embedVar = discord.Embed(title=f"{t_card} **Parry** Penetrated!!", description=f"{o_card} takes {round(tparry_damage * .25)}! DMG and breaks the **Parry**", colour=0xe91e63)
                                                                previous_moves.append(f"(**{turn_total}**) **{t_card}** Parry Penetrated! **{o_card}** takes **{round(tparry_damage * .25)}**! DMG and breaks the **Parry**")
                                                                tparry_count = tparry_count - 1
                                                                if oarm_barrier_active and dmg['ELEMENT'] != psychic_element:
                                                                    oarm_barrier_active=False
                                                                    embedVar.add_field(name=f"{o_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                    previous_moves.append(f"(**{turn_total}**) **{o_card}**'s 💠 Barrier Disabled!")
                                                                if not botActive:
                                                                    await button_ctx.defer(ignore=True)
                                                                tarm_parry_active = False
                                                        else:
                                                            if dmg['REPEL']:
                                                                o_health = o_health - int(dmg['DMG'])
                                                            elif dmg['ABSORB']:
                                                                t_health = t_health + int(dmg['DMG'])
                                                            elif dmg['ELEMENT'] == water_element:
                                                                if omove1_element == water_element:
                                                                    o_basic_water_buff = o_basic_water_buff + 25
                                                                if omove2_element == water_element:
                                                                    o_special_water_buff = o_special_water_buff + 25
                                                                if omove3_element == water_element:
                                                                    o_ultimate_water_buff = o_ultimate_water_buff + 25
                                                                t_health = t_health - dmg['DMG']
                                                                

                                                            elif dmg['ELEMENT'] == time_element:
                                                                o_stamina = 0
                                                                t_health = t_health - dmg['DMG']

                                                            elif dmg['ELEMENT'] == earth_element:
                                                                o_defense = o_defense + (dmg['DMG'] * .20)
                                                                t_health = t_health - dmg['DMG']

                                                            elif dmg['ELEMENT'] == death_element:
                                                                t_max_health = t_max_health - (dmg['DMG'] * .07)
                                                                t_health = t_health - dmg['DMG']

                                                            elif dmg['ELEMENT'] == light_element:
                                                                o_stamina = round(o_stamina + (dmg['STAMINA_USED'] / 2))
                                                                t_health = t_health - dmg['DMG']

                                                            elif dmg['ELEMENT'] == dark_element:
                                                                o_stamina = o_stamina + 5
                                                                t_stamina = t_stamina - 5
                                                                t_health = t_health - dmg['DMG']

                                                            elif dmg['ELEMENT'] == life_element:
                                                                o_health = o_health + (dmg['DMG'] * .15)
                                                                t_health = t_health - dmg['DMG']

                                                            elif dmg['ELEMENT'] == recoil_element:
                                                                o_health = o_health - (dmg['DMG'] * .25)
                                                                t_health = t_health - dmg['DMG']


                                                            elif dmg['ELEMENT'] == psychic_element:
                                                                t_defense = t_defense - (dmg['DMG'] * .08)
                                                                t_attack = t_attack - (dmg['DMG'] * .08)
                                                                t_health = t_health - dmg['DMG']

                                                            elif dmg['ELEMENT'] == fire_element:
                                                                o_burn_dmg = o_burn_dmg + round(dmg['DMG'] * .20)
                                                                t_health = t_health - dmg['DMG']


                                                            elif dmg['ELEMENT'] == electric_element:
                                                                o_shock_buff = o_shock_buff +  (dmg['DMG'] * .07)
                                                                t_health = t_health - dmg['DMG']

                                                            elif dmg['ELEMENT'] == poison_element:
                                                                if o_poison_dmg <= 100:
                                                                    o_poison_dmg = o_poison_dmg + 8
                                                                t_health = t_health - dmg['DMG']

                                                            elif dmg['ELEMENT'] == ice_element:
                                                                o_ice_counter = o_ice_counter + 1
                                                                if o_ice_counter == 3:
                                                                    o_freeze_enh = True
                                                                    o_ice_counter = 0
                                                                t_health = t_health - dmg['DMG']

                                                            elif dmg['ELEMENT'] == bleed_element:
                                                                o_bleed_counter = o_bleed_counter + 1
                                                                if o_bleed_counter == 5:
                                                                    o_bleed_hit = True
                                                                    o_bleed_counter = 0
                                                                t_health = t_health - dmg['DMG']
                                                                
                                                            elif dmg['ELEMENT'] == gravity_element:
                                                                o_gravity_hit = True
                                                                t_health = t_health - dmg['DMG']
                                                            
                                                            else:
                                                                t_health = t_health - dmg['DMG']

                                                            previous_moves.append(f"(**{turn_total}**) **{o_card}**: {dmg['MESSAGE']}")
                                                            embedVar = discord.Embed(title=f"{dmg['MESSAGE']}", colour=embed_color_o)
                                                            if oarm_siphon_active:
                                                                siphon_damage = (dmg['DMG'] * .10) + osiphon_value
                                                                o_health = round(o_health + siphon_damage)
                                                                if o_health >= o_max_health:
                                                                    o_health = o_max_health
                                                                    previous_moves.append(f"(**{turn_total}**) **{o_card}**: 💉 Siphoned **Full Health!**")
                                                                else:
                                                                    previous_moves.append(f"(**{turn_total}**) **{o_card}**: 💉 Siphoned **{round(siphon_damage)}** Health!")
                                                                await button_ctx.defer(ignore=True)
                                                            if oarm_barrier_active and dmg['ELEMENT'] != psychic_element:
                                                                oarm_barrier_active=False
                                                                embedVar.add_field(name=f"{o_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                previous_moves.append(f"(**{turn_total}**) **{o_card}**'s 💠 Barrier Disabled!")
                                                            if not botActive:
                                                                await button_ctx.defer(ignore=True)
                                                        if t_health <= 0:
                                                            if t_final_stand==True:
                                                                if t_universe == "Dragon Ball Z":
                                                                    embedVar = discord.Embed(title=f"{t_card}'s LAST STAND", description=f"{t_card} FINDS RESOLVE", colour=0xe91e63)
                                                                    embedVar.add_field(name=f"**{t_card}** Resolved and continues to fight", value="All stats & stamina increased")
                                                                    if oarm_barrier_active and dmg['ELEMENT'] != psychic_element:
                                                                        oarm_barrier_active=False
                                                                        embedVar.add_field(name=f"{o_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                        previous_moves.append(f"(**{turn_total}**) **{o_card}**'s 💠 Barrier Disabled!")
                                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 Transformation: Last Stand!!!")
                                                                    if not botActive:
                                                                        await button_ctx.defer(ignore=True)
                                                                    t_health = int(.75 * (t_attack + t_defense))
                                                                    
                                                                    t_used_resolve = True
                                                                    t_used_focus = True
                                                                    t_final_stand = False
                                                                    o_stamina = o_stamina - dmg['STAMINA_USED']
                                                                    turn_total = turn_total + 1
                                                                    turn = 1
                                                            else:
                                                                t_health = 0
                                                                o_stamina = o_stamina - dmg['STAMINA_USED']
                                                                turn_total = turn_total + 1
                                                                # if botActive:
                                                                #     await button_ctx.defer(ignore=True)
                                                        else:
                                                            o_stamina = o_stamina - dmg['STAMINA_USED']
                                                            turn_total = turn_total + 1
                                                            turn = 1
                                                            #if botActive:
                                                                #await button_ctx.defer(ignore=True)
                                                else:
                                                    previous_moves.append(f"(**{turn_total}**) **{o_card}**: Not enough Stamina to use this ability.")
                                                    # embedVar = discord.Embed(title=emessage,
                                                    #                         description=f"Use abilities to Increase `STAM` or enter `FOCUS STATE`!",
                                                    #                         colour=0xe91e63)
                                                    turn = 0
                                                    await button_ctx.defer(ignore=True)
                                        except asyncio.TimeoutError:
                                            if mode != "ABYSS" and mode != "SCENARIO":
                                                await save_spot(self, ctx, universe, mode, currentopponent)
                                                await ctx.author.send(f"{ctx.author.mention} your game timed out. Your channel has been closed but your spot in the tales has been saved where you last left off.")
                                                await ctx.send(f"{ctx.author.mention} your game timed out. Your channel has been closed but your spot in the tales has been saved where you last left off.")
                                            else:
                                                await ctx.author.send(f"{ctx.author.mention} your game timed out. Your channel has been closed and your Abyss Floor was Reset.") #Findme
                                                await ctx.send(f"{ctx.author.mention} your game timed out. Your channel has been closed and your Abyss Floor was Reset.")
                                            # await discord.TextChannel.delete(private_channel, reason=None)
                                            previous_moves.append(f"(**{turn_total}**) 💨 **{o_card}** Fled...")
                                            o_health=0
                                        except Exception as ex:
                                            trace = []
                                            tb = ex.__traceback__
                                            while tb is not None:
                                                trace.append({
                                                    "filename": tb.tb_frame.f_code.co_filename,
                                                    "name": tb.tb_frame.f_code.co_name,
                                                    "lineno": tb.tb_lineno
                                                })
                                                tb = tb.tb_next
                                            print(str({
                                                'type': type(ex).__name__,
                                                'message': str(ex),
                                                'trace': trace
                                            }))
                                            guild = self.bot.get_guild(main.guild_id)
                                            channel = guild.get_channel(main.guild_channel)
                                            await channel.send(f"'PLAYER': **{str(ctx.author)}**, 'GUILD': **{str(ctx.author.guild)}**, TYPE: {type(ex).__name__}, MESSAGE: {str(ex)}, TRACE: {trace}")

                            
                            elif turn == 1:
                                if o_bleed_hit:
                                    o_bleed_hit = False
                                    bleed_dmg = 5 * turn_total
                                    t_health = t_health - bleed_dmg
                                    previous_moves.append(f"🩸 **{t_card}** shredded for **{round(bleed_dmg)}** bleed dmg...")
                                if o_burn_dmg > 3:
                                    t_health = t_health - o_burn_dmg
                                    previous_moves.append(f"🔥 **{t_card}** burned for **{round(o_burn_dmg)}** dmg...")
                                if o_freeze_enh:
                                    previous_moves.append(f"❄️ **{t_card}** has been frozen for a turn...")
                                    turn_total = turn_total + 1
                                    if mode in co_op_modes:
                                        turn = 2
                                        continue
                                    else:
                                        turn = 0
                                        continue
                                if o_poison_dmg:
                                    t_health = t_health - o_poison_dmg
                                    previous_moves.append(f"🧪 **{t_card}** poisoned for **{o_poison_dmg}** dmg...")

                                if t_gravity_hit:
                                    t_gravity_hit = False
                                
                                o_burn_dmg = round(o_burn_dmg / 2)
                                t_freeze_enh = False

                                if t_title_passive_type:
                                    if t_title_passive_type == "HLT":
                                        t_health = round(t_health + ((t_title_passive_value / 100) * t_health))
                                    if t_title_passive_type == "LIFE":
                                        if t_max_health != o_health:
                                            o_health = round(o_health - ((t_title_passive_value / 100) * o_health))
                                            t_health = round(t_health + ((t_title_passive_value / 100) * o_health))
                                    if t_title_passive_type == "ATK":
                                        t_attack = t_attack + t_title_passive_value
                                    if t_title_passive_type == "DEF":
                                        t_defense = t_defense + t_title_passive_value
                                    if t_title_passive_type == "STAM":
                                        if t_stamina > 15:
                                            t_stamina = t_stamina + t_title_passive_value
                                    if t_title_passive_type == "DRAIN":
                                        if t_stamina > 15:
                                            t_stamina = t_stamina + t_title_passive_value
                                            o_stamina = o_stamina - t_title_passive_value
                                    if t_title_passive_type == "FLOG":
                                        t_attack = round(t_attack + ((t_title_passive_value / 100) * o_attack))
                                        o_attack = round(o_attack - ((t_title_passive_value / 100) * o_attack))
                                    if t_title_passive_type == "WITHER":
                                        t_defense = round(t_defense + ((t_title_passive_value / 100) * o_defense))
                                        o_defense = round(o_defense - ((t_title_passive_value / 100) * o_defense))
                                    if t_title_passive_type == "RAGE":
                                        t_defense = round(t_defense - ((t_title_passive_value / 100) * t_defense))
                                        t_attack = round(t_attack + ((t_title_passive_value / 100) * t_defense))
                                    if t_title_passive_type == "BRACE":
                                        t_defense = round(t_defense + ((t_title_passive_value / 100) * t_attack))
                                        t_attack = round(t_attack - ((t_title_passive_value / 100) * t_attack))
                                    if t_title_passive_type == "BZRK":
                                        t_health = round(t_health - ((t_title_passive_value / 100) * t_health))
                                        t_attack = round(t_attack + ((t_title_passive_value / 100) * t_health))
                                    if t_title_passive_type == "CRYSTAL":
                                        t_health = round(t_health - ((t_title_passive_value / 100) * t_health))
                                        t_defense = round(t_defense + ((t_title_passive_value / 100) * t_health))
                                    if t_title_passive_type == "FEAR":
                                        t_health = t_health - t_title_passive_value
                                        o_defense = o_defense - (t_title_passive_value / 2)
                                        o_attack = o_attack - (t_title_passive_value / 2)
                                    if t_title_passive_type == "GROWTH":
                                        t_health = t_health - t_title_passive_value
                                        t_defense = t_defense + (t_title_passive_value / 2)
                                        t_attack = t_attack + (t_title_passive_value / 2)
                                    if t_title_passive_type == "SLOW":
                                        if turn_total != 0:
                                            turn_total = turn_total - 1
                                    if t_title_passive_type == "HASTE":
                                        turn_total = turn_total + 1
                                    if t_title_passive_type == "STANCE":
                                        tempattack = t_attack + t_title_passive_value
                                        t_attack = t_defense
                                        t_defense = tempattack
                                    if t_title_passive_type == "CONFUSE":
                                        tempattack = o_attack - t_title_passive_value
                                        o_attack = o_defense
                                        o_defense = tempattack
                                    if t_title_passive_type == "BLINK":
                                        o_stamina = o_stamina + t_title_passive_value
                                        t_stamina = t_stamina - t_title_passive_value
                                if t_card_passive_type:
                                    t_value_for_passive = t_card_tier * .5
                                    t_flao_for_passive = 10 * (t_card_tier * .5)
                                    t_stam_for_passive = 5 * (t_card_tier * .5)
                                    if t_card_passive_type == "HLT":
                                        t_health = round(round(t_health + ((t_value_for_passive / 100) * t_health)))
                                    if t_card_passive_type == "LIFE":
                                        if t_mao_health != t_health:
                                            o_health = round(o_health - ((t_value_for_passive / 100) * o_health))
                                            t_health = round(t_health + ((t_value_for_passive / 100) * o_health))
                                    if t_card_passive_type == "ATK":
                                        t_attack = t_attack + t_flao_for_passive
                                    if t_card_passive_type == "DEF":
                                        t_defense = t_defense + t_flao_for_passive
                                    if t_card_passive_type == "STAM":
                                        if t_stamina > 15:
                                            t_stamina = t_stamina + t_stam_for_passive
                                    if t_card_passive_type == "DRAIN":
                                        if t_stamina > 15:
                                            o_stamina = o_stamina - t_stam_for_passive
                                            t_stamina = t_stamina + t_stam_for_passive
                                    if t_card_passive_type == "FLOG":
                                        o_attack = round(o_attack - ((t_value_for_passive / 100) * o_attack))
                                        t_attack = round(t_attack + ((t_value_for_passive / 100) * o_attack))
                                    if t_card_passive_type == "WITHER":
                                        o_defense = round(o_defense - ((t_value_for_passive / 100) * o_defense))
                                        t_defense = round(t_defense + ((t_value_for_passive / 100) * o_defense))
                                    if t_card_passive_type == "RAGE":
                                        t_defense = round(t_defense - ((t_value_for_passive / 100) * t_defense))
                                        t_attack = round(t_attack + ((t_value_for_passive / 100) * t_defense))
                                    if t_card_passive_type == "BRACE":
                                        t_defense = round(t_defense + ((t_value_for_passive / 100) * t_attack))
                                        t_attack = round(t_attack - ((t_value_for_passive / 100) * t_attack))
                                    if t_card_passive_type == "BZRK":
                                        t_health = round(t_health - ((t_value_for_passive / 100) * t_health))
                                        t_attack = round(t_attack + ((t_value_for_passive / 100) * t_health))
                                    if t_card_passive_type == "CRYSTAL":
                                        t_health = round(t_health - ((t_value_for_passive / 100) * t_health))
                                        t_defense = round(t_defense + ((t_value_for_passive / 100) * t_health))
                                    if t_card_passive_type == "FEAR":
                                        t_health = t_health - t_flao_for_passive
                                        o_defense = o_defense - (t_flao_for_passive / 2)
                                        o_attack = o_attack - (t_flao_for_passive / 2)
                                    if t_card_passive_type == "GROWTH":
                                        t_health = t_health - t_flao_for_passive
                                        t_defense = t_defense + (t_flao_for_passive / 2)
                                        t_attack = t_attack + (t_flao_for_passive / 2)
                                    if t_card_passive_type == "SLOW":
                                        if turn_total != 0:
                                            turn_total = turn_total - 1
                                    if t_card_passive_type == "HASTE":
                                        turn_total = turn_total + 1
                                    if t_card_passive_type == "STANCE":
                                        tempattack = t_attack + t_flao_for_passive
                                        t_attack = t_defense
                                        t_defense = tempattack
                                    if t_card_passive_type == "CONFUSE":
                                        tempattack = o_attack - t_flao_for_passive
                                        o_attack = o_defense
                                        o_defense = tempattack
                                    if t_card_passive_type == "BLINK":
                                        t_stamina = t_stamina - t_stam_for_passive
                                        o_stamina = o_stamina + t_stam_for_passive

                                # if previous_moves:
                                #     previous_moves_len = len(previous_moves)
                                #     # print(f"LIST LEN: {previous_moves_len}")
                                #     if previous_moves_len >= 5:
                                #         previous_moves = previous_moves[4:]
                                #     previous_moves_into_embed = "\n\n".join(previous_moves)
                                if o_universe == "Death Note" and turn_total == 0:
                                    embedVar = discord.Embed(title=f"{o_card} Scheduled Death 📓",
                                                            description=f"**{o_card} says**\nYou will die in 50  turns...",
                                                            colour=0xe91e63)
                                    previous_moves.append(f"(**{turn_total}**) **{o_card}** 🩸 Scheduled Death 📓")
                                if t_universe == 'Death Note' and turn_total == 0:
                                    embedVar = discord.Embed(title=f"{o_card} Scheduled Death 📓",
                                                            description=f"**{t_card} says**\nYou will die in 50  turns...",
                                                            colour=0xe91e63)
                                    previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 Scheduled Death 📓")
                                if turn_total == 1 and botActive and mode in B_modes:
                                    embedVar = discord.Embed(title=f"**{t_card}** Says : ", description=f"{t_welcome}",
                                                            colour=0xe91e63)
                                    embedVar.add_field(name=f"**{o_card}** Braces: ", value=f"{t_feeling}")
                                    embedVar.set_footer(text=f"{t_card} begins his assault")
                                    await private_channel.send(embed=embedVar)
                                    await asyncio.sleep(2)
                                                               
                                if t_block_used == True:
                                    t_block_used = False
                                    t_defense = int(t_defense / 2)
                                if t_attack <= 25:
                                    t_attack = 25
                                if t_defense <= 30:
                                    t_defense = 30
                                if t_attack >= 9999:
                                    t_attack = 9999
                                if t_defense >= 9999:
                                    t_defense = 9999
                                if t_health >= t_max_health:
                                    t_health = t_max_health
                                # o_pet_used = True
                                if t_health <= (t_max_health * .25):
                                    embed_color_t = 0xe74c3c
                                    if t_chainsaw == True:
                                        if t_atk_chainsaw == False:
                                            t_atk_chainsaw = True
                                            t_chainsaw = False
                                            t_defense = t_defense * 2
                                            t_attack = t_attack * 2
                                            t_max_health = t_max_health * 2
                                            embedVar = discord.Embed(title=f"{t_card}'s Devilization",
                                                                    description=f"**{t_card}** Doubles Stats", colour=0xe91e63)
                                            
                                            previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸's Devilization")
                                elif t_health <= (t_max_health * .50):
                                    embed_color_t = 0xe67e22
                                    if t_chainsaw == True:
                                        if t_atk_chainsaw == False:
                                            t_atk_chainsaw = True
                                            t_chainsaw = False
                                            t_defense = t_defense * 2
                                            t_attack = t_attack * 2
                                            t_max_health = t_max_health * 2
                                            embedVar = discord.Embed(title=f"{t_card}'s Devilization",
                                                                    description=f"**{t_card}** Doubles Stats", colour=0xe91e63)
                                            
                                            previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸's Devilization")
                                elif t_health <= (t_max_health * .75):
                                    embed_color_t = 0xf1c40f
                                else:
                                    embed_color_t = 0x2ecc71

                                # Focus
                                if t_stamina < 10:
                                    t_pet_used = False
                                    t_focus_count = t_focus_count + 1

                                    # o_pet_used = True
                                    fortitude = 0.0
                                    low = t_health - (t_health * .90)
                                    if low <= 0:
                                        low = 1
                                    high = t_health - (t_health * .80)
                                    fortitude = round(random.randint(int(low), int(high)))

                                    t_stamina = t_focus
                                    t_healthcalc = round(((t_focus * .40) + (fortitude * 1)) / 2)
                                    t_attackcalc = round(.20 * ((t_focus * .15) + round(fortitude * 1)))
                                    t_defensecalc = round(.20 * ((t_focus * .10) + round(fortitude * 1)))
                                    t_newhealth = 0
                                    healmessage = ""
                                    messagenumber = 0

                                    if t_title_passive_type:
                                        if t_title_passive_type == "GAMBLE":
                                            t_healthcalc = t_title_passive_value
                                        if t_title_passive_type == "SOULCHAIN":
                                            o_stamina = t_title_passive_value
                                            t_stamina = t_title_passive_value
                                            if mode in co_op_modes:
                                                c_stmina = t_title_passive_value


                                    if o_title_passive_type:
                                        if o_title_passive_type == "GAMBLE":
                                            t_healthcalc = o_title_passive_value
                                    
                                    if mode in co_op_modes:
                                        if c_title_passive_type:
                                            if c_title_passive_type == "GAMBLE":
                                                t_healthcalc = c_title_passive_value

                                    if t_universe == "Crown Rift Madness":
                                        healmessage = "yet inner **Madness** drags on..."
                                        messagenumber = 3
                                    else:
                                        if t_health <= t_max_health:
                                            t_newhealth = t_health + t_healthcalc
                                            if t_newhealth > t_max_health:
                                                healmessage = f"recovered!"
                                                messagenumber = 1
                                                t_health = t_max_health
                                            else:
                                                healmessage = f"stopped the bleeding..."
                                                messagenumber = 2
                                                t_health = t_newhealth
                                        else:
                                            healmessage = f"hasn't been touched..."
                                            messagenumber = 0
                                    if not t_used_resolve:
                                        t_attack = t_attack + t_attackcalc
                                        t_defense = t_defense + t_defensecalc
                                    t_used_focus = True
                                    # if mode not in AUTO_BATTLE_modes:
                                    if mode in B_modes:
                                        embedVar = discord.Embed(title=f"**{t_card}** Enters Focus State",
                                                                description=f"{t_powerup}", colour=0xe91e63)
                                        embedVar.add_field(name=f"A great aura starts to envelop **{t_card}** ",
                                                        value=f"{t_aura}")
                                        embedVar.set_footer(text=f"{t_card} Says: 'Now, are you ready for a real fight?'")
                                        
                                        previous_moves.append(f"(**{turn_total}**) 🌀 **{t_card}** focused and {healmessage}")
                                        # await asyncio.sleep(2)
                                    else:
                                        embedVar = discord.Embed(title=f"{t_card} FOCUSED",
                                                                description=f"**{t_card} says**\n{t_focus_description}",
                                                                colour=0xe91e63)
                                        embedVar.add_field(name=f"{t_card} focused and {healmessage}",
                                                        value="All stats & stamina increased")
                                        
                                        previous_moves.append(f"(**{turn_total}**) 🌀 **{t_card}** focused and {healmessage}")
                                    if not t_used_resolve and t_used_focus and t_universe == "Digimon":  # Digimon Universal Trait
                                        # fortitude or luck is based on health
                                        fortitude = 0.0
                                        low = t_health - (t_health * .75)
                                        high = t_health - (t_health * .66)
                                        fortitude = round(random.randint(int(low), int(high)))
                                        # Resolve Scaling
                                        t_resolve_health = round(fortitude + (.5 * t_resolve))
                                        t_resolve_attack = round((.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                        t_resolve_defense = round((.30 * t_defense) * (t_resolve / (.50 * t_defense)))

                                        t_stamina = t_stamina + t_resolve
                                        t_health = t_health + t_resolve_health
                                        t_attack = round(t_attack + t_resolve_attack)
                                        t_defense = round(t_defense - t_resolve_defense)
                                        t_used_resolve = True

                                        embedVar = discord.Embed(title=f"{t_card} STRENGTHENED RESOLVE :zap:",
                                                                description=f"**{t_card} says**\n{t_resolve_description}",
                                                                colour=0xe91e63)
                                        embedVar.add_field(name=f"Transformation: Digivolve", value="On Focus you Resolve.")
                                        if turn_total <=5:
                                            t_attack = round(t_attack * 2)
                                            t_defense = round(t_defense * 2 )
                                            previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 Transformation: Mega Digivolution!!!")
                                        else:
                                            previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 Transformation: Digivolve")
                                        if mode in B_modes:
                                            embedVar = discord.Embed(title=f"(**{turn_total}**) :zap: **{t_card}** Resolved!", description=f"{t_rmessage}",
                                                                    colour=0xe91e63)
                                            embedVar.set_footer(text=f"{o_card} this will not be easy...")
                                            await private_channel.send(embed=embedVar)
                                            await asyncio.sleep(2)

                                    elif t_universe == "League Of Legends":
                                        embedVar = discord.Embed(title=f"Turret Shot hits {o_card} for **{60 + turn_total}** Damage 💥",
                                                                colour=0xe91e63)
                                        previous_moves.append(f"(**{turn_total}**) 🩸 Turret Shot hits **{o_card}** for **{60 + turn_total}** Damage 💥")
                                        o_health = round(o_health - (60 + turn_total))

                                    elif t_universe == "Dragon Ball Z":
                                        t_health = t_health + o_stamina + turn_total
                                        previous_moves.append(f"(**{turn_total}**) 🩸 Saiyan Spirit... You heal for **{o_stamina + turn_total}** ❤️")


                                    elif t_universe == "Solo Leveling":
                                        embedVar = discord.Embed(
                                            title=f"Ruler's Authority... {o_card} loses **{30 + turn_total}** 🛡️ 🔻",
                                            colour=0xe91e63)
                                        previous_moves.append(f"(**{turn_total}**) 🩸 Ruler's Authority... {o_card} loses **{30 + turn_total}** 🛡️ 🔻")
                                        o_defense = round(o_defense - (30 + turn_total))

                                    elif t_universe == "Black Clover":
                                        embedVar = discord.Embed(title=f"Mana Zone! **{t_card}** Increased Stamina 🌀",
                                                                colour=0xe91e63)
                                        previous_moves.append(f"(**{turn_total}**) 🩸 Mana Zone! **{t_card}** Increased AP & Stamina 🌀")
                                        t_stamina = 100
                                        tcard_lvl_ap_buff = tcard_lvl_ap_buff + 30
                                    elif t_universe == "Death Note":
                                        if turn_total >= 50:
                                            embedVar = discord.Embed(title=f"{o_card}'s' Scheduled Death 📓",
                                                                    description=f"**{t_card} says**\n**Delete**",
                                                                    colour=0xe91e63)
                                            embedVar.add_field(name=f"{o_card} had a heart attack and died", value=f"Death....")
                                            previous_moves.append(f"(**{turn_total}**) **{o_card}** 🩸 had a heart attack and died")
                                            o_health = 0

                                    if o_universe == "One Punch Man":
                                        embedVar = discord.Embed(title=f"Hero Reinforcements! **{t_card}** Increased Health!  ❤️",
                                                                colour=0xe91e63)
                                        previous_moves.append(f"(**{turn_total}**) Hero Reinforcements! **{o_card}** Increased Health!  ❤️")
                                        o_health = round(o_health + 100)
                                        o_max_health = round(o_max_health + 100)

                                    elif o_universe == "7ds":
                                        embedVar = discord.Embed(title=f"Power Of Friendship! 🧬 **{opet_name}** Rested, **{o_card}** Increased Stamina 🌀",
                                                                colour=0xe91e63)
                                        previous_moves.append(f"(**{turn_total}**) 🩸 Power Of Friendship! 🧬 **{opet_name}** Rested, **{o_card}** Increased Stamina 🌀")
                                        o_stamina = o_stamina + 60
                                        o_pet_used = False

                                    elif o_universe == "Souls":
                                        embedVar = discord.Embed(
                                            title=f"Combo Recognition! **{t_card}** Increased Attack by **{60 + turn_total}** 🔺 ",
                                            colour=0xe91e63)
                                        previous_moves.append(f"(**{turn_total}**) 🩸 Combo Recognition! **{o_card}** Increased Attack by **{60 + turn_total}** 🔺")
                                        o_attack = round(o_attack + (60 + turn_total))

                                    else:
                                        turn_total = turn_total + 1
                                        if t_universe != "Crown Rift Madness":
                                            if mode in co_op_modes:
                                                turn = 2
                                            else:
                                                turn = 0
                                        else:
                                            turn = 1
                                    turn_total = turn_total + 1
                                    if t_universe != "Crown Rift Madness":
                                        if mode in co_op_modes:
                                            turn = 2
                                        else:
                                            turn = 0
                                    else:
                                        turn = 1
                                else:
                                    if t_universe == "Solo Leveling" and not t_swapped:
                                        if temp_oarm_shield_active and not oarm_shield_active:
                                            if tarm_shield_active:
                                                tshield_value = tshield_value + temp_oshield_value
                                                previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 **ARISE!** *{oarm_name}* is now yours")
                                                t_swapped = True
                                            elif not tarm_shield_active:
                                                tarm_shield_active = True
                                                tshield_value = temp_oshield_value
                                                previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 **ARISE!** *{oarm_name}* is now yours")
                                                t_swapped = True
                                        elif temp_oarm_barrier_active and not oarm_barrier_active:
                                            if tarm_barrier_active:
                                                tbarrier_count = tbarrier_count + temp_obarrier_count
                                                previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 **ARISE!** *{oarm_name}* is now yours")
                                                t_swapped = True
                                            elif not tarm_barrier_active:
                                                tarm_barrier_active = True
                                                tbarrier_count = temp_obarrier_count
                                                previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 **ARISE!** *{oarm_name}* is now yours")
                                                t_swapped = True
                                        elif temp_oarm_parry_active and not oarm_parry_active:
                                            if tarm_parry_active:
                                                tparry_count = tparry_count + temp_oparry_count
                                                previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 **ARISE!** *{oarm_name}* is now yours")
                                                t_swapped = True
                                            elif not tarm_parry_active:
                                                tarm_parry_active = True
                                                tparry_count = temp_oparry_count
                                                previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 **ARISE!** *{oarm_name}* is now yours")
                                                t_swapped = True
                                                                  
                                    embedVar = discord.Embed(title=f"➡️ **Opponent Turn** {turn_total}", description=textwrap.dedent(f"""\
                                    {previous_moves_into_embed}
                                    
                                    """), color=0xe74c3c)
                                    embedVar.set_footer(
                                        text=f"{t_card}: ❤️{round(t_health)} 🌀{round(t_stamina)} 🗡️{round(t_attack)}/🛡️{round(t_defense)}\n{o_card}: ❤️{round(o_health)} 🌀{round(o_stamina)} 🗡️{round(o_attack)}/🛡️{round(o_defense)}",
                                        icon_url="https://cdn.discordapp.com/emojis/789290881654980659.gif?v=1")


                                    # UNIVERSE CARD
                                    # Turn Selector is for determining if in co-op or not, swapping turns after using moves
                                    turn_selector = 0
                                    if mode in co_op_modes:
                                        turn_selector = 2
                                    else:
                                        turn_selector = 0
                                    if mode not in AUTO_BATTLE_modes:
                                        tap1 = list(t_1.values())[0] + tcard_lvl_ap_buff + corruption_ap_buff + t_shock_buff + t_basic_water_buff
                                        tap2 = list(t_2.values())[0] + tcard_lvl_ap_buff + corruption_ap_buff + t_shock_buff + t_special_water_buff
                                        tap3 = list(t_3.values())[0] + tcard_lvl_ap_buff + tdemon_slayer_buff + corruption_ap_buff + t_shock_buff + t_ultimate_water_buff
                                        tenh1 = list(t_enhancer.values())[0]
                                        tenh_name = list(t_enhancer.values())[2]
                                        tpet_enh_name = list(tpet_move.values())[2]
                                        tpet_msg_on_resolve = ""
                                        # UNIVERSE CARD

                                        if t_universe == "Souls" and t_used_resolve:
                                            player_2_card = showcard(t, tarm,t_max_health, t_health, t_max_stamina, t_stamina,
                                                                t_used_resolve, ttitle, t_used_focus, t_attack, t_defense,
                                                                turn_total, tap2, tap3, tap3, tenh1, tenh_name, tcard_lvl, o_defense)
                                        else:
                                            player_2_card = showcard(t, tarm,t_max_health, t_health, t_max_stamina, t_stamina,
                                                                    t_used_resolve, ttitle, t_used_focus, t_attack, t_defense,
                                                                    turn_total, tap1, tap2, tap3, tenh1, tenh_name, tcard_lvl, o_defense)
                                            
                                        if t_universe == "Solo Leveling" and not t_swapped:
                                            if temp_oarm_shield_active and not oarm_shield_active:
                                                if tarm_shield_active:
                                                    tshield_value = tshield_value + temp_oshield_value
                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 **ARISE!** *{oarm_name}* is now yours")
                                                    t_swapped = True
                                                elif not tarm_shield_active:
                                                    tarm_shield_active = True
                                                    tshield_value = temp_oshield_value
                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 **ARISE!** *{oarm_name}* is now yours")
                                                    t_swapped = True
                                            elif temp_oarm_barrier_active and not oarm_barrier_active:
                                                if tarm_barrier_active:
                                                    tbarrier_count = tbarrier_count + temp_obarrier_count
                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 **ARISE!** *{oarm_name}* is now yours")
                                                    t_swapped = True
                                                elif not tarm_barrier_active:
                                                    tarm_barrier_active = True
                                                    tbarrier_count = temp_obarrier_count
                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 **ARISE!** *{oarm_name}* is now yours")
                                                    t_swapped = True
                                            elif temp_oarm_parry_active and not oarm_parry_active:
                                                if tarm_parry_active:
                                                    tparry_count = tparry_count + temp_oparry_count
                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 **ARISE!** *{oarm_name}* is now yours")
                                                    t_swapped = True
                                                elif not tarm_parry_active:
                                                    tarm_parry_active = True
                                                    tparry_count = temp_oparry_count
                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 **ARISE!** *{oarm_name}* is now yours")
                                                    t_swapped = True
                                        
                                        tembedVar = discord.Embed(title=f"_Turn_ {turn_total}", description=textwrap.dedent(f"""\
                                        {previous_moves_into_embed}
                                        """), color=0xe74c3c)
                                        tembedVar.set_image(url="attachment://image.png")
                                        await battle_msg.delete(delay=None)
                                        # await asyncio.sleep(2)
                                        battle_msg = await private_channel.send(embed=tembedVar, file=player_2_card)
                                    
                                    if mode in AUTO_BATTLE_modes:
                                        await asyncio.sleep(2)
                                        embedVar.set_thumbnail(url=ctx.author.avatar_url)
                                        await battle_msg.edit(embed=embedVar, components=[])


                                    aiMove = 0
                                    
                                    if t_used_resolve and not t_pet_used and t_stamina >= 30:
                                        aiMove = 6
                                    elif t_enhancer['TYPE'] == "WAVE" and (turn_total % 10 == 0 or turn_total == 0 or turn_total == 1):
                                        if t_stamina >=20:
                                            aiMove =4
                                    elif tarm_barrier_active: #Ai Barrier Checks
                                        if t_stamina >=20: #Stamina Check For Enhancer
                                            aiMove = await ai_enhancer_moves(turn_total,t_used_focus,t_used_resolve,t_pet_used,t_stamina,
                                                                        t_enhancer['TYPE'],t_health,t_max_health,t_attack,
                                                                        t_defense,o_stamina,o_attack,o_defense, o_health)
                                        else:
                                            aiMove = 1
                                    elif o_health <=350: #Killing Blow
                                        if t_enhancer['TYPE'] == "BLAST":
                                            if t_stamina >=20:
                                                aiMove =4
                                            else:
                                                aiMove =1
                                        elif t_enhancer['TYPE'] == "WAVE" and (turn_total % 10 == 0 or turn_total == 0 or turn_total == 1):
                                            if t_stamina >=20:
                                                aiMove =4
                                            else:
                                                aiMove =1
                                        else:
                                            if t_stamina >= 90:
                                                aiMove = 1
                                            elif t_stamina >= 80:
                                                aiMove =3
                                            elif t_stamina >=30:
                                                aiMove=2
                                            else:
                                                aiMove=1
                                    elif o_stamina < 10:
                                        if t_enhancer['TYPE'] in Gamble_Enhancer_Check:
                                            if t_stamina >= 20:
                                                aiMove = 4
                                            else:
                                                aiMove = 1
                                        else:
                                            aiMove = 1
                                    elif t_health <= (.50 * t_max_health) and t_used_resolve == False and t_used_focus:
                                        aiMove = 5
                                    elif t_stamina >= 160 and (t_health >= o_health):
                                        aiMove = 3
                                    elif t_stamina >= 160:
                                        aiMove = 3
                                    elif t_stamina >= 150 and (t_health >= o_health):
                                        aiMove = 1
                                    elif t_stamina >= 150:
                                        aiMove = 1
                                    elif t_stamina >= 140 and (t_health >= o_health):
                                        aiMove = 1
                                    elif t_stamina >= 140:
                                        aiMove = 3
                                    elif t_stamina >= 130 and (t_health >= o_health):
                                        aiMove = 1
                                    elif t_stamina >= 130:
                                        aiMove = 3
                                    elif t_stamina >= 120 and (t_health >= o_health):
                                        aiMove = 2
                                    elif t_stamina >= 120:
                                        aiMove = 3
                                    elif t_stamina >= 110 and (t_health >= o_health):
                                        aiMove = 1
                                    elif t_stamina >= 110:
                                        aiMove = 2
                                    elif t_stamina >= 100 and (t_health >= o_health):
                                        if t_enhancer['TYPE'] in Gamble_Enhancer_Check or t_enhancer['TYPE'] in Healer_Enhancer_Check:
                                            aiMove = 3
                                        elif t_enhancer['TYPE'] in Support_Enhancer_Check or t_enhancer[
                                            'TYPE'] in Stamina_Enhancer_Check or t_enhancer['TYPE'] in Turn_Enhancer_Check:
                                            aiMove = 4
                                        else:
                                            aiMove = 1
                                    elif t_stamina >= 100:
                                        aiMove = 1
                                    elif t_stamina >= 90 and (t_health >= o_health):
                                        aiMove = 3
                                    elif t_stamina >= 90:
                                        if t_enhancer['TYPE'] in Gamble_Enhancer_Check:
                                            aiMove = 3
                                        elif t_enhancer['TYPE'] in Support_Enhancer_Check or t_enhancer['TYPE'] in Stamina_Enhancer_Check or t_enhancer['TYPE'] in Sacrifice_Enhancer_Check:
                                            aiMove = 4
                                        else:
                                            aiMove = 1
                                    elif t_stamina >= 80 and (t_health >= o_health):
                                        aiMove = 1
                                    elif t_stamina >= 80:
                                        aiMove = 3
                                    elif t_stamina >= 70 and (t_health >= o_health):
                                        if t_enhancer['TYPE'] in Gamble_Enhancer_Check:
                                            aiMove = 1
                                        else:
                                            aiMove = await ai_enhancer_moves(turn_total,t_used_focus,t_used_resolve,t_pet_used,t_stamina,
                                                                        t_enhancer['TYPE'],t_health,t_max_health,t_attack,
                                                                        t_defense,o_stamina,o_attack,o_defense, o_health)
                                    elif t_stamina >= 70:
                                        aiMove = 1
                                    elif t_stamina >= 60 and (t_health >= o_health):
                                        if t_used_resolve == False and t_used_focus:
                                            aiMove = 5
                                        elif t_used_focus == False:
                                            aiMove = 2
                                        else:
                                            aiMove = 1
                                    elif t_stamina >= 60:
                                        if t_used_resolve == False and t_used_focus:
                                            aiMove = 5
                                        elif t_used_focus == False:
                                            aiMove = 2
                                        else:
                                            aiMove = 1
                                    elif t_stamina >= 50 and (t_health >= o_health):
                                        if t_used_resolve == False and t_used_focus:
                                            aiMove = 5
                                        elif t_used_focus == False:
                                            aiMove = 2
                                        else:
                                            aiMove = 1
                                    elif t_stamina >= 50:
                                        if t_used_resolve == False and t_used_focus:
                                            aiMove = 5
                                        elif t_used_focus == False:
                                            aiMove = 2
                                        elif t_enhancer['TYPE'] in Support_Enhancer_Check or t_enhancer['TYPE'] in Stamina_Enhancer_Check:
                                            aiMove = 4
                                        else:
                                            aiMove = 1
                                    elif t_stamina >= 40 and (t_health >= o_health):
                                        aiMove = 1
                                    elif t_stamina >= 40:
                                        aiMove = 2
                                    elif t_stamina >= 30 and (t_health >= o_health):
                                        if t_enhancer['TYPE'] in Gamble_Enhancer_Check:
                                            aiMove = 1
                                        elif t_enhancer['TYPE'] in Support_Enhancer_Check or t_enhancer['TYPE'] in Stamina_Enhancer_Check:
                                            aiMove = 2
                                        else:
                                            aiMove = await ai_enhancer_moves(turn_total,t_used_focus,t_used_resolve,t_pet_used,t_stamina,
                                                                        t_enhancer['TYPE'],t_health,t_max_health,t_attack,
                                                                        t_defense,o_stamina,o_attack,o_defense, o_health)
                                    elif t_stamina >= 30:
                                        aiMove = 2
                                    elif t_stamina >= 20 and (t_health >= o_health):
                                        aiMove = 1
                                    elif t_stamina >= 20:
                                        if t_enhancer['TYPE'] in Gamble_Enhancer_Check:
                                            aiMove = 1
                                        elif t_enhancer['TYPE'] in Support_Enhancer_Check or t_enhancer['TYPE'] in Stamina_Enhancer_Check:
                                            aiMove = 1
                                        else:
                                            aiMove = 4
                                    elif t_stamina >= 10:
                                        aiMove = 1
                                    else:
                                        aiMove = 0
                                    
                                    t_special_move_description = " "
                                    if int(aiMove) == 0:
                                        t_health = 0
                                    if int(aiMove) == 1:                                    
                                        if c_block_used == True:
                                            if t_universe == "Souls" and t_used_resolve:
                                                dmg = damage_cal(c_opponent_affinities, special_attack_name, tmove2_element, t_universe, t_card, t_2, t_attack, t_defense, c_defense, t_stamina,
                                                                t_enhancer_used, t_health, c_health, c_stamina, t_max_health,
                                                                c_attack, t_special_move_description, turn_total,
                                                                tcard_lvl_ap_buff, t_1)
                                            else:
                                                dmg = damage_cal(c_opponent_affinities, basic_attack_name, tmove1_element, t_universe, t_card, t_1, t_attack, t_defense, c_defense, t_stamina,
                                                                t_enhancer_used, t_health, c_health, c_stamina, t_max_health,
                                                                c_attack, t_special_move_description, turn_total,
                                                                tcard_lvl_ap_buff, None)
                                        else:
                                            if t_universe == "Souls" and t_used_resolve:
                                                dmg = damage_cal(o_opponent_affinities, special_attack_name, tmove2_element, t_universe, t_card, t_2, t_attack, t_defense, o_defense, t_stamina,
                                                                t_enhancer_used, t_health, o_health, o_stamina, t_max_health,
                                                                o_attack, t_special_move_description, turn_total,
                                                                tcard_lvl_ap_buff, t_1)
                                            else:
                                                dmg = damage_cal(o_opponent_affinities, basic_attack_name, tmove1_element, t_universe, t_card, t_1, t_attack, t_defense, o_defense, t_stamina,
                                                                t_enhancer_used, t_health, o_health, o_stamina, t_max_health,
                                                                o_attack, t_special_move_description, turn_total,
                                                                tcard_lvl_ap_buff, None)
                                    elif int(aiMove) == 2:

                                        if c_block_used == True:
                                            if t_universe == "Souls" and t_used_resolve:
                                                dmg = damage_cal(c_opponent_affinities, ultimate_attack_name, tmove3_element, t_universe, t_card, t_3, t_attack, t_defense, c_defense, t_stamina,
                                                                t_enhancer_used, t_health, c_health, c_stamina, t_max_health,
                                                                c_attack, t_special_move_description, turn_total,
                                                                tcard_lvl_ap_buff, t_2)
                                            else:
                                                dmg = damage_cal(c_opponent_affinities, special_attack_name, tmove2_element, t_universe, t_card, t_2, t_attack, t_defense, c_defense, t_stamina,
                                                                t_enhancer_used, t_health, c_health, c_stamina, t_max_health,
                                                                c_attack, t_special_move_description, turn_total,
                                                                tcard_lvl_ap_buff, None)
                                        else:
                                            if t_universe == "Souls" and t_used_resolve:
                                                dmg = damage_cal(o_opponent_affinities, ultimate_attack_name, tmove3_element, t_universe, t_card, t_3, t_attack, t_defense, o_defense, t_stamina,
                                                                t_enhancer_used, t_health, o_health, o_stamina, t_max_health,
                                                                o_attack, t_special_move_description, turn_total,
                                                                tcard_lvl_ap_buff, t_2)
                                            else:
                                                dmg = damage_cal(o_opponent_affinities, special_attack_name, tmove2_element, t_universe, t_card, t_2, t_attack, t_defense, o_defense, t_stamina,
                                                                t_enhancer_used, t_health, o_health, o_stamina, t_max_health,
                                                                o_attack, t_special_move_description, turn_total,
                                                                tcard_lvl_ap_buff, None)
                                    elif int(aiMove) == 3:

                                        if c_block_used == True:
                                            dmg = damage_cal(c_opponent_affinities, ultimate_attack_name, tmove3_element, t_universe, t_card, t_3, t_attack, t_defense, c_defense, t_stamina,
                                                            t_enhancer_used, t_health, c_health, c_stamina, t_max_health,
                                                            c_attack, t_special_move_description, turn_total,
                                                            tcard_lvl_ap_buff, None)
                                        else:
                                            dmg = damage_cal(o_opponent_affinities, ultimate_attack_name, tmove3_element, t_universe, t_card, t_3, t_attack, t_defense, o_defense, t_stamina,
                                                            t_enhancer_used, t_health, o_health, o_stamina, t_max_health,
                                                            o_attack, t_special_move_description, turn_total,
                                                            tcard_lvl_ap_buff, None)
                                        if mode not in AUTO_BATTLE_modes:
                                            if t_gif != "N/A"  and not operformance:
                                                await battle_msg.delete(delay=2)
                                                await asyncio.sleep(2)
                                                battle_msg = await private_channel.send(f"{t_gif}")
                                                await asyncio.sleep(2)
                                    elif int(aiMove) == 4:

                                        t_enhancer_used = True
                                        if c_block_used == True:
                                            dmg = damage_cal(o_opponent_affinities, basic_attack_name, tmove1_element, t_universe, t_card, t_enhancer, t_attack, t_defense, c_defense,
                                                            t_stamina, t_enhancer_used, t_health, c_health, c_stamina,
                                                            t_max_health, c_attack, t_special_move_description, turn_total,
                                                            tcard_lvl_ap_buff, None)
                                        else:
                                            dmg = damage_cal(o_opponent_affinities, basic_attack_name, tmove1_element, t_universe, t_card, t_enhancer, t_attack, t_defense, o_defense,
                                                            t_stamina, t_enhancer_used, t_health, o_health, o_stamina,
                                                            t_max_health, o_attack, t_special_move_description, turn_total,
                                                            tcard_lvl_ap_buff, None)
                                        t_enhancer_used = False
                                    elif int(aiMove) == 5:
                                        if not t_used_resolve and t_used_focus:
                                            if mode in B_modes:
                                                embedVar = discord.Embed(title=f":zap: **{t_card}** Resolved!",
                                                                        description=f"{t_rmessage}", colour=0xe91e63)
                                                embedVar.set_footer(text=f"{o_card} this will not be easy...")
                                                await private_channel.send(embed=embedVar)
                                                await asyncio.sleep(2)

                                            if t_universe == "My Hero Academia":  # My hero TRait
                                                # fortitude or luck is based on health
                                                fortitude = 0.0
                                                low = t_health - (t_health * .75)
                                                high = t_health - (t_health * .66)
                                                fortitude = round(random.randint(int(low), int(high)))
                                                # Resolve Scaling
                                                t_resolve_health = round(fortitude + (.5 * t_resolve))
                                                t_resolve_attack = round((.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                                t_resolve_defense = round((.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                                tcard_lvl_ap_buff = tcard_lvl_ap_buff + 80 + turn_total

                                                t_stamina = t_stamina + t_resolve
                                                t_health = t_health + t_resolve_health
                                                t_attack = round(t_attack + t_resolve_attack)
                                                t_defense = round(t_defense - t_resolve_defense)
                                                t_used_resolve = True
                                                t_pet_used = False
                                                previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 Resolved: PLUS ULTRA!")
                                                turn_total = turn_total + 1
                                                turn = 1

                                            elif t_universe == "Demon Slayer": 
                                                # fortitude or luck is based on health
                                                fortitude = 0.0
                                                low = t_health - (t_health * .75)
                                                high = t_health - (t_health * .66)
                                                fortitude = round(random.randint(int(low), int(high)))
                                                # Resolve Scaling
                                                t_resolve_health = round(fortitude + (.5 * t_resolve))
                                                t_resolve_attack = round(
                                                    (.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                                t_resolve_defense = round(
                                                    (.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                                

                                                t_stamina = t_stamina + t_resolve
                                                t_health = t_health + t_resolve_health
                                                t_attack = round(t_attack + t_resolve_attack)
                                                t_defense = round(t_defense - t_resolve_defense)
                                                if o_attack > t_attack:
                                                    t_attack = o_attack
                                                if o_defense > t_defense:
                                                    t_defense = o_defense
                                                t_used_resolve = True
                                                t_pet_used = False
                                                previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 Resolved: Total Concentration Breathing!")

                                                turn_total = turn_total + 1
                                                turn = turn_selector

                                            elif t_universe == "Naruto": 
                                                # fortitude or luck is based on health
                                                fortitude = 0.0
                                                low = t_health - (t_health * .75)
                                                high = t_health - (t_health * .66)
                                                fortitude = round(random.randint(int(low), int(high)))
                                                # Resolve Scaling
                                                t_resolve_health = round(fortitude + (.5 * t_resolve))
                                                t_resolve_attack = round(
                                                    (.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                                t_resolve_defense = round(
                                                    (.30 * t_defense) * (t_resolve / (.50 * t_defense)))

                                                t_stamina = t_stamina + t_resolve
                                                t_health = t_health + t_resolve_health
                                                t_health = t_health + t_naruto_heal_buff
                                                t_attack = round(t_attack + t_resolve_attack)
                                                t_defense = round(t_defense - t_resolve_defense)
                                                t_used_resolve = True
                                                t_pet_used = False
                                                previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 Resolved: Hashirama Cells heal you for **{t_naruto_heal_buff}**")
                                               
                                                turn_total = turn_total + 1
                                                turn = 0



                                            elif t_universe == "Attack On Titan":
                                                # fortitude or luck is based on health
                                                fortitude = 0.0
                                                low = t_health - (t_health * .75)
                                                high = t_health - (t_health * .66)
                                                fortitude = round(random.randint(int(low), int(high)))
                                                # Resolve Scaling
                                                t_resolve_health = round(fortitude + (.5 * t_resolve))
                                                t_resolve_attack = round((.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                                t_resolve_defense = round((.30 * t_defense) * (t_resolve / (.50 * t_defense)))

                                                t_stamina = t_stamina + t_resolve
                                                t_health = t_health + t_resolve_health
                                                t_attack = round(t_attack + t_resolve_attack)
                                                t_defense = round(t_defense - t_resolve_defense)
                                                t_used_resolve = True
                                                t_pet_used = False
                                                health_boost = 100 * t_focus_count
                                                t_health = t_health + health_boost
                                                previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 Resolved: Titan Mode")

                                                turn_total = turn_total + 1
                                                turn = turn_selector
                                            elif t_universe == "Bleach":  # Bleach Trai
                                                # fortitude or luck is based on health
                                                fortitude = 0.0
                                                low = t_health - (t_health * .75)
                                                high = t_health - (t_health * .66)
                                                fortitude = round(random.randint(int(low), int(high)))
                                                # Resolve Scaling
                                                t_resolve_health = round(fortitude + (.5 * t_resolve))
                                                t_resolve_attack = round((.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                                t_resolve_defense = round((.30 * t_defense) * (t_resolve / (.50 * t_defense)))

                                                t_stamina = t_stamina + t_resolve
                                                t_health = t_health + t_resolve_health
                                                t_attack = round((t_attack + (2 * t_resolve_attack))*2 )
                                                t_defense = round(t_defense - t_resolve_defense)
                                                # if t_defense >= 120:
                                                # t_defense = 120
                                                t_used_resolve = True
                                                t_pet_used = False
                                                previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 Resolved: Bankai!")
                                                turn_total = turn_total + 1
                                                turn = turn_selector
                                            elif t_universe == "God Of War":  # God Of War Trait
                                                # fortitude or luck is based on health
                                                fortitude = 0.0
                                                low = t_health - (t_health * .75)
                                                high = t_health - (t_health * .66)
                                                fortitude = round(random.randint(int(low), int(high)))
                                                # Resolve Scaling
                                                t_resolve_health = round(fortitude + (.5 * t_resolve))
                                                t_resolve_attack = round((.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                                t_resolve_defense = round((.30 * t_defense) * (t_resolve / (.50 * t_defense)))

                                                t_stamina = t_stamina + t_resolve
                                                t_health = t_max_health
                                                t_attack = round(t_attack + t_resolve_attack)
                                                t_defense = round(t_defense - t_resolve_defense)
                                                t_used_resolve = True
                                                t_pet_used = False

                                                if t_gow_resolve:
                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 Resolved: Ascension!")
                                                elif not t_gow_resolve:
                                                    t_used_resolve = False
                                                    t_gow_resolve = True
                                                    t_defense = 125
                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 Crushed Blood Orb: Health Refill")
                                                
                                                    
                                                turn_total = turn_total + 1
                                                turn = turn_selector
                                            elif t_universe == "Fate":  # Fate Trait
                                                # fortitude or luck is based on health
                                                fortitude = 0.0
                                                low = t_health - (t_health * .75)
                                                high = t_health - (t_health * .66)
                                                fortitude = round(random.randint(int(low), int(high)))
                                                # Resolve Scaling
                                                t_resolve_health = round(fortitude + (.5 * t_resolve))
                                                t_resolve_attack = round((.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                                t_resolve_defense = round((.30 * t_defense) * (t_resolve / (.50 * t_defense)))

                                                t_stamina = t_stamina + t_resolve
                                                t_health = t_health + t_resolve_health
                                                t_attack = round(t_attack + t_resolve_attack)
                                                t_defense = round(t_defense - t_resolve_defense)
                                                t_used_resolve = True
                                                previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 Resolved: Command Seal! {dmg['MESSAGE']}")
                                                if c_block_used == True:
                                                    dmg = damage_cal(o_opponent_affinities, ultimate_attack_name, tmove3_element, t_universe, t_card, t_3, t_attack, t_defense, c_defense,
                                                                    t_stamina, t_enhancer_used, t_health, c_health, c_stamina,
                                                                    t_max_health, c_attack, t_special_move_description,
                                                                    turn_total, tcard_lvl_ap_buff, None)
                                                    c_health = c_health - int(dmg['DMG'])
                                                else:
                                                    dmg = damage_cal(o_opponent_affinities, ultimate_attack_name, tmove3_element, t_universe, t_card, t_3, t_attack, t_defense, o_defense,
                                                                    t_stamina, t_enhancer_used, t_health, o_health, o_stamina,
                                                                    t_max_health, o_attack, t_special_move_description,
                                                                    turn_total, tcard_lvl_ap_buff, None)
                                                    o_health = o_health - int(dmg['DMG'])
                                                t_pet_used = False

                                                previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 Resolved: Command Seal! {dmg['MESSAGE']}")
                                                    #previous_moves.append(f"(**{turn_total}**) 🩸  {dmg['MESSAGE']}")
                                                # t_stamina = 0
                                                turn_total = turn_total + 1
                                                turn = turn_selector
                                            elif t_universe == "Kanto Region" or t_universe == "Johto Region" or t_universe == "Hoenn Region" or t_universe == "Sinnoh Region" or t_universe == "Kalos Region" or t_universe == "Unova Region" or t_universe == "Alola Region" or t_universe == "Galar Region":  # Pokemon Resolves
                                                # fortitude or luck is based on health
                                                fortitude = 0.0
                                                low = t_health - (t_health * .75)
                                                high = t_health - (t_health * .66)
                                                fortitude = round(random.randint(int(low), int(high)))
                                                # Resolve Scaling
                                                t_resolve_health = round(fortitude + (.5 * t_resolve))
                                                t_resolve_attack = round((.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                                t_resolve_defense = round((.30 * t_defense) * (t_resolve / (.50 * t_defense)))

                                                t_stamina = t_stamina + t_resolve
                                                t_health = t_health + t_resolve_health
                                                t_attack = round(t_attack + t_resolve_attack)
                                                t_defense = round(t_defense) * 2
                                                t_used_resolve = True
                                                t_pet_used = False

                                                if turn_total >= 50:
                                                    t_max_health = t_max_health + 1000
                                                    t_health = t_health + 1000
                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 Resolved: Gigantomax Evolution!!! Gained **1000** HP!!!")
                                                elif turn_total >= 30:
                                                    t_max_health = t_max_health + 300
                                                    t_health = t_health + 300
                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 Resolved: Mega Evolution!! Gained **300** HP!")
                                                else:
                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 Resolved: Evolution!")
                                                turn_total = turn_total + 1
                                                turn = turn_selector
                                            else:
                                                # fortitude or luck is based on health
                                                fortitude = 0.0
                                                low = t_health - (t_health * .75)
                                                high = t_health - (t_health * .66)
                                                fortitude = round(random.randint(int(low), int(high)))
                                                # Resolve Scaling
                                                t_resolve_health = round(fortitude + (.5 * t_resolve))
                                                t_resolve_attack = round((.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                                t_resolve_defense = round((.30 * t_defense) * (t_resolve / (.50 * t_defense)))

                                                t_stamina = t_stamina + t_resolve
                                                t_health = t_health + t_resolve_health
                                                t_attack = round(t_attack + t_resolve_attack)
                                                t_defense = round(t_defense - t_resolve_defense)
                                                t_used_resolve = True
                                                t_pet_used = False

                                                if t_universe == "League Of Legends":
                                                    if c_block_used == True:
                                                        c_health = c_health - (60 * (c_focus_count + t_focus_count))
                                                        embedVar = discord.Embed(title=f"{t_card} PENTA KILL!",
                                                                                description=f"**{t_card} says**\n{t_resolve_description}",
                                                                                colour=0xe91e63)
                                                        embedVar.add_field(name=f"Nexus Destroyed",
                                                                        value=f"**{t_card}** dealt **{(60 * (c_focus_count + t_focus_count))}** damage.")
                                                        previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 Resolved: Pentakill! Dealing {(60 * (c_focus_count + t_focus_count))} damage.")
                                                    else:
                                                        o_health = o_health - (60 * (o_focus_count + t_focus_count))
                                                        embedVar = discord.Embed(title=f"{t_card} PENTA KILL!",
                                                                                description=f"**{t_card} says**\n{t_resolve_description}",
                                                                                colour=0xe91e63)
                                                        embedVar.add_field(name=f"Nexus Destroyed",
                                                                        value=f"**{t_card}** dealt **{(60 * (o_focus_count + t_focus_count))}** damage.")
                                                        previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 Resolved: Pentakill! Dealing {(60 * (o_focus_count + t_focus_count))} damage.")
                                                elif t_universe == "Souls":
                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 Phase 2: Enhanced Moveset!")
                                                    
                                                else:
                                                    embedVar = discord.Embed(title=f"{t_card} STRENGTHENED RESOLVE :zap:",
                                                                            description=f"**{t_card} says**\n{t_resolve_description}",
                                                                            colour=0xe91e63)
                                                    embedVar.add_field(name=f"Transformation",
                                                                    value="All stats & stamina greatly increased")
                                                    previous_moves.append(f"(**{turn_total}**) ⚡ **{t_card}** Resolved!")
                                                turn_total = turn_total + 1
                                                turn = turn_selector
                                        else:
                                            previous_moves.append(f"(**{turn_total}**) {t_card} cannot resolve!")
                                            turn = 1
                                    elif int(aiMove) == 6:
                                        # Resolve Check and Calculation
                                        if t_used_resolve and t_used_focus and not t_pet_used:
                                            if mode in co_op_modes:
                                                if c_block_used == True:
                                                    t_enhancer_used = True
                                                    dmg = damage_cal(o_opponent_affinities, basic_attack_name, tmove1_element, t_universe, t_card, tpet_move, t_attack, t_defense,
                                                                    c_defense, t_stamina, t_enhancer_used, t_health, c_health,
                                                                    c_stamina, t_max_health, c_attack,
                                                                    t_special_move_description, turn_total, tcard_lvl_ap_buff, None)
                                                    t_enhancer_used = False
                                                    t_pet_used = True
                                                    tpet_dmg = dmg['DMG']
                                                    tpet_type = dmg['ENHANCED_TYPE']
                                                    if dmg['CAN_USE_MOVE']:
                                                        if tpet_type == 'ATK':
                                                            t_attack = round(t_attack + dmg['DMG'])
                                                        elif tpet_type == 'DEF':
                                                            t_defense = round(t_defense + dmg['DMG'])
                                                        elif tpet_type == 'STAM':
                                                            t_stamina = round(t_stamina + dmg['DMG'])
                                                        elif tpet_type == 'HLT':
                                                            t_health = round(t_health + dmg['DMG'])
                                                        elif tpet_type == 'LIFE':
                                                            t_health = round(t_health + dmg['DMG'])
                                                            c_health = round(c_health - dmg['DMG'])
                                                        elif tpet_type == 'DRAIN':
                                                            t_stamina = round(t_stamina + dmg['DMG'])
                                                            c_stamina = round(c_stamina - dmg['DMG'])
                                                        elif tpet_type == 'FLOG':
                                                            t_attack = round(t_attack + dmg['DMG'])
                                                            c_attack = round(c_attack - dmg['DMG'])
                                                        elif tpet_type == 'WITHER':
                                                            t_defense = round(t_defense + dmg['DMG'])
                                                            c_defense = round(c_defense - dmg['DMG'])
                                                        elif tpet_type == 'RAGE':
                                                            t_defense = round(t_defense - dmg['DMG'])
                                                            t_attack = round(t_attack + dmg['DMG'])
                                                        elif tpet_type == 'BRACE':
                                                            t_defense = round(t_defense + dmg['DMG'])
                                                            t_attack = round(t_attack - dmg['DMG'])
                                                        elif tpet_type == 'BZRK':
                                                            t_health = round(t_health - dmg['DMG'])
                                                            t_attack = round(t_attack + dmg['DMG'])
                                                        elif tpet_type == 'CRYSTAL':
                                                            t_health = round(t_health - dmg['DMG'])
                                                            t_defense = round(t_defense + dmg['DMG'])
                                                        elif tpet_type == 'GROWTH':
                                                            t_max_health = round(t_max_health - dmg['DMG'])
                                                            t_defense = round(t_defense + (dmg['DMG'] * .5))
                                                            t_attack = round(t_attack + (dmg['DMG'] * .5))
                                                        elif tpet_type == 'STANCE':
                                                            tempattack = dmg['DMG']
                                                            t_attack = t_defense
                                                            t_defense = tempattack
                                                        elif tpet_type == 'CONFUSE':
                                                            tempattack = dmg['DMG']
                                                            c_attack = c_defense
                                                            c_defense = tempattack
                                                        elif tpet_type == 'BLINK':
                                                            t_stamina = round(t_stamina - dmg['DMG'])
                                                            c_stamina = round(c_stamina + dmg['DMG'])
                                                        elif tpet_type == 'SLOW':
                                                            tempstam = round(c_stamina + dmg['DMG'])
                                                            t_stamina = round(t_stamina - dmg['DMG'])
                                                            c_stamina = t_stamina
                                                            t_stamina = tempstam
                                                        elif tpet_type == 'HASTE':
                                                            tempstam = round(c_stamina - dmg['DMG'])
                                                            t_stamina = round(t_stamina + dmg['DMG'])
                                                            c_stamina = t_stamina
                                                            t_stamina = tempstam
                                                        elif tpet_type == 'SOULCHAIN':
                                                            t_stamina = round(dmg['DMG'])
                                                            c_stamina = t_stamina
                                                        elif tpet_type == 'GAMBLE':
                                                            t_health = round(dmg['DMG'])
                                                            c_health = t_health
                                                        elif tpet_type == 'FEAR':
                                                            t_max_health = round(t_max_health - dmg['DMG'])
                                                            c_defense = round(c_defense - (dmg['DMG'] * .5))
                                                            c_attack = round(c_attack - (dmg['DMG'] * .5))
                                                        elif tpet_type == 'WAVE':
                                                            c_health = round(c_health - dmg['DMG'])
                                                        elif tpet_type == 'BLAST':
                                                            if dmg['DMG'] >= 100:
                                                                dmg['DMG'] = 100
                                                            c_health = round(c_health - dmg['DMG'])
                                                        elif tpet_type == 'CREATION':
                                                            t_max_health = round(t_max_health + dmg['DMG'])
                                                            t_health = round(t_health + dmg['DMG'])
                                                        elif tpet_type == 'DESTRUCTION':
                                                            if dmg['DMG'] >= 100:
                                                                dmg['DMG'] = 100
                                                            c_max_health = round(c_max_health - dmg['DMG'])
                                                            if c_max_health <=1:
                                                                c_max_health = 1
                                                        t_stamina = t_stamina - int(dmg['STAMINA_USED'])
                                                        if t_universe == "Persona":
                                                            petdmg = damage_cal(o_opponent_affinities, basic_attack_name, tmove1_element, t_universe, t_card, t_1, t_attack,
                                                                                t_defense, c_defense, t_stamina,
                                                                                t_enhancer_used, t_health, c_health,
                                                                                c_stamina, t_max_health, c_attack,
                                                                                t_special_move_description, turn_total,
                                                                                tcard_lvl_ap_buff, None)

                                                            c_health = c_health - petdmg['DMG']
                                                            
                                                            embedVar = discord.Embed(
                                                                title=f"**PERSONA!**\n{tpet_name} was summoned from {t_card}'s soul dealing **{petdmg['DMG']}** damage!!",
                                                                colour=0xe91e63)
                                                            if mode not in AUTO_BATTLE_modes:
                                                                await battle_msg.delete(delay=2)
                                                                if not operformance:
                                                                    tsummon_file = showsummon(tpet_image, tpet_name, dmg['MESSAGE'], tpet_lvl, tpet_bond)
                                                                    embedVar.set_image(url="attachment://pet.png")
                                                                    await asyncio.sleep(2)
                                                                    battle_msg = await private_channel.send(embed=embedVar, file=tsummon_file)
                                                                    await asyncio.sleep(2)
                                                                    await battle_msg.delete(delay=2)
                                                            #embedVar.set_image(url="attachment://pet.png")
                                                            previous_moves.append(f"(**{turn_total}**) **Persona!** 🩸 : **{tpet_name}** was summoned from **{t_card}'s** soul dealing **{petdmg['DMG']}** damage!\n**{c_card}** summon disabled!")
                                                            c_pet_used = True
                                                            
                                                        else:
                                                            if mode not in AUTO_BATTLE_modes:
                                                                await battle_msg.delete(delay=2)
                                                            if not operformance:
                                                                tsummon_file = showsummon(tpet_image, tpet_name, dmg['MESSAGE'], tpet_lvl, tpet_bond)
                                                                
                                                                
                                                            
                                                            

                                                            embedVar.set_image(url="attachment://pet.png")
                                                            
                                                            previous_moves.append(f"(**{turn_total}**) **{t_card}** Summoned 🧬 **{tpet_name}**: {dmg['MESSAGE']}")


                                                            #await battle_msg.delete(delay=2)
                                                            
                                                            # if not operformance:
                                                            #     await asyncio.sleep(2)
                                                            #     battle_msg = await private_channel.send(embed=embedVar, file=tsummon_file)
                                                            #     await asyncio.sleep(2)                                                    
                                                            #     await battle_msg.delete(delay=2)

                                                        # if t_universe == "Persona":
                                                        #     petdmg = damage_cal(o_opponent_affinities, basic_attack_name, tmove1_element, t_universe, t_card, t_1, t_attack, t_defense,
                                                        #                         c_defense, t_stamina, t_enhancer_used, t_health,
                                                        #                         c_health, c_stamina, t_max_health, c_attack,
                                                        #                         t_special_move_description, turn_total,
                                                        #                         tcard_lvl_ap_buff, None)

                                                        turn = turn_selector
                                                    else:
                                                        # if mode not in AUTO_BATTLE_modes:
                                                        previous_moves.append(f"(**{turn_total}**) {t_card} Could not summon 🧬 **{tpet_name}**. Needs rest")
                                                            # await private_channel.send(f"{tpet_name} needs a turn to rest...")
                                                        turn = 1
                                                else:
                                                    t_enhancer_used = True
                                                    dmg = damage_cal(o_opponent_affinities, basic_attack_name, tmove1_element, t_universe, t_card, tpet_move, t_attack, t_defense,
                                                                    o_defense, t_stamina, t_enhancer_used, t_health, o_health,
                                                                    o_stamina, t_max_health, o_attack,
                                                                    t_special_move_description, turn_total, tcard_lvl_ap_buff, None)
                                                    t_enhancer_used = False
                                                    t_pet_used = True
                                                    tpet_dmg = dmg['DMG']
                                                    tpet_type = dmg['ENHANCED_TYPE']
                                                    if dmg['CAN_USE_MOVE']:
                                                        if tpet_type == 'ATK':
                                                            t_attack = round(t_attack + dmg['DMG'])
                                                        elif tpet_type == 'DEF':
                                                            t_defense = round(t_defense + dmg['DMG'])
                                                        elif tpet_type == 'STAM':
                                                            t_stamina = round(t_stamina + dmg['DMG'])
                                                        elif tpet_type == 'HLT':
                                                            t_health = round(t_health + dmg['DMG'])
                                                        elif tpet_type == 'LIFE':
                                                            t_health = round(t_health + dmg['DMG'])
                                                            o_health = round(o_health - dmg['DMG'])
                                                        elif tpet_type == 'DRAIN':
                                                            t_stamina = round(t_stamina + dmg['DMG'])
                                                            o_stamina = round(o_stamina - dmg['DMG'])
                                                        elif tpet_type == 'FLOG':
                                                            t_attack = round(t_attack + dmg['DMG'])
                                                            o_attack = round(o_attack - dmg['DMG'])
                                                        elif tpet_type == 'WITHER':
                                                            t_defense = round(t_defense + dmg['DMG'])
                                                            o_defense = round(o_defense - dmg['DMG'])
                                                        elif tpet_type == 'RAGE':
                                                            t_defense = round(t_defense - dmg['DMG'])
                                                            t_attack = round(t_attack + dmg['DMG'])
                                                        elif tpet_type == 'BRACE':
                                                            t_defense = round(t_defense + dmg['DMG'])
                                                            t_attack = round(t_attack - dmg['DMG'])
                                                        elif tpet_type == 'BZRK':
                                                            t_health = round(t_health - dmg['DMG'])
                                                            t_attack = round(t_attack + dmg['DMG'])
                                                        elif tpet_type == 'CRYSTAL':
                                                            t_health = round(t_health - dmg['DMG'])
                                                            t_defense = round(t_defense + dmg['DMG'])
                                                        elif tpet_type == 'GROWTH':
                                                            t_max_health = round(t_max_health - dmg['DMG'])
                                                            t_defense = round(t_defense + (dmg['DMG'] * .5))
                                                            t_attack = round(t_attack + (dmg['DMG'] * .5))
                                                        elif tpet_type == 'STANCE':
                                                            tempattack = dmg['DMG']
                                                            t_attack = t_defense
                                                            t_defense = tempattack
                                                        elif tpet_type == 'CONFUSE':
                                                            tempattack = dmg['DMG']
                                                            o_attack = o_defense
                                                            o_defense = tempattack
                                                        elif tpet_type == 'BLINK':
                                                            t_stamina = round(t_stamina - dmg['DMG'])
                                                            o_stamina = round(o_stamina + dmg['DMG'])
                                                        elif tpet_type == 'SLOW':
                                                            tempstam = round(o_stamina + dmg['DMG'])
                                                            t_stamina = round(t_stamina - dmg['DMG'])
                                                            o_stamina = t_stamina
                                                            t_stamina = tempstam
                                                        elif tpet_type == 'HASTE':
                                                            tempstam = round(o_stamina - dmg['DMG'])
                                                            t_stamina = round(t_stamina + dmg['DMG'])
                                                            o_stamina = t_stamina
                                                            t_stamina = tempstam
                                                        elif tpet_type == 'SOULCHAIN':
                                                            t_stamina = round(dmg['DMG'])
                                                            o_stamina = t_stamina
                                                        elif tpet_type == 'GAMBLE':
                                                            t_health = round(dmg['DMG'])
                                                            o_health = t_health
                                                        elif tpet_type == 'FEAR':
                                                            t_max_health = round(t_max_health - dmg['DMG'])
                                                            o_defense = round(o_defense - (dmg['DMG'] * .5))
                                                            o_attack = round(o_attack - (dmg['DMG'] * .5))
                                                        elif tpet_type == 'WAVE':
                                                            o_health = round(o_health - dmg['DMG'])
                                                        elif tpet_type == 'BLAST':
                                                            if dmg['DMG'] >= 100:
                                                                dmg['DMG'] = 100
                                                            o_health = round(o_health - dmg['DMG'])
                                                        elif tpet_type == 'CREATION':
                                                            t_max_health = round(t_max_health + dmg['DMG'])
                                                            t_health = round(t_health + dmg['DMG'])
                                                        elif tpet_type == 'DESTRUCTION':
                                                            if dmg['DMG'] >= 100:
                                                                dmg['DMG'] = 100
                                                            o_max_health = round(o_max_health - dmg['DMG'])
                                                            if o_max_health <=1:
                                                                o_max_health = 1
                                                        t_stamina = t_stamina - int(dmg['STAMINA_USED'])

                                                        
                                                        if t_universe == "Persona":
                                                            petdmg = damage_cal(o_opponent_affinities, basic_attack_name, tmove1_element, t_universe, t_card, t_1, t_attack,
                                                                                t_defense, c_defense, t_stamina,
                                                                                t_enhancer_used, t_health, c_health,
                                                                                c_stamina, t_max_health, c_attack,
                                                                                t_special_move_description, turn_total,
                                                                                tcard_lvl_ap_buff, None)

                                                            o_health = o_health - petdmg['DMG']

                                                            embedVar = discord.Embed(
                                                                title=f"**PERSONA!**\n{tpet_name} was summoned from {t_card}'s soul dealing **{petdmg['DMG']}** damage!!",
                                                                colour=0xe91e63)
                                                            if mode not in AUTO_BATTLE_modes:
                                                                await battle_msg.delete(delay=2)
                                                            # embedVar.add_field(
                                                            #     name=f"{tpet_name} used **{tpetmove_text}**!",
                                                            #     value=f"{dmg['MESSAGE']}")
                                                            if mode not in AUTO_BATTLE_modes:
                                                                if not operformance:
                                                                    tsummon_file = showsummon(tpet_image, tpet_name, dmg['MESSAGE'], tpet_lvl, tpet_bond)
                                                                    embedVar.set_image(url="attachment://pet.png")
                                                                    await asyncio.sleep(2)
                                                                    battle_msg = await private_channel.send(embed=embedVar, file=tsummon_file)
                                                                    await asyncio.sleep(2)
                                                                    await battle_msg.delete(delay=2)
                                                            #embedVar.set_image(url="attachment://pet.png")
                                                            previous_moves.append(f"(**{turn_total}**) **Persona!** 🩸 : **{tpet_name}** was summoned from **{t_card}'s** soul dealing **{petdmg['DMG']}** damage!\n**{c_card}** summon disabled!")
                                                            c_pet_used = True
                                                            
                                                        else:
                                                            embedVar = discord.Embed(
                                                                title=f"{t_card} Summoned 🧬 **{tpet_name}**",
                                                                colour=0xe91e63)
                                                            if mode not in AUTO_BATTLE_modes:
                                                                await battle_msg.delete(delay=2)
                                                                if not operformance:
                                                                    tsummon_file = showsummon(tpet_image, tpet_name, dmg['MESSAGE'], tpet_lvl, tpet_bond)
                                                                
                                                            embedVar.set_image(url="attachment://pet.png")
                                                            previous_moves.append(f"(**{turn_total}**) **{t_card}** Summoned 🧬 **{tpet_name}**: {dmg['MESSAGE']}")

                                                            #await battle_msg.delete(delay=2)
                                                            if mode not in AUTO_BATTLE_modes:
                                                                if not operformance:
                                                                    await asyncio.sleep(2)
                                                                    battle_msg = await private_channel.send(embed=embedVar, file=tsummon_file)
                                                                    await asyncio.sleep(2)                                                                
                                                                    await battle_msg.delete(delay=2)

                                                        # if t_universe == "Persona":
                                                        #     petdmg = damage_cal(o_opponent_affinities, basic_attack_name, tmove1_element, t_universe, t_card, t_1, t_attack, t_defense,
                                                        #                         c_defense, t_stamina, t_enhancer_used, t_health,
                                                        #                         c_health, c_stamina, t_max_health, c_attack,
                                                        #                         t_special_move_description, turn_total,
                                                        #                         tcard_lvl_ap_buff, None)
                                                        #     o_health = o_health - petdmg['DMG']
                                                        turn = 1
                                                    else:
                                                        previous_moves.append(f"(**{turn_total}**) {t_card} Could not summon 🧬 **{tpet_name}**. Needs rest")
                                                        turn = 1

                                            else:
                                                t_enhancer_used = True
                                                dmg = damage_cal(o_opponent_affinities, basic_attack_name, tmove1_element, t_universe, t_card, tpet_move, t_attack, t_defense, o_defense,
                                                                t_stamina, t_enhancer_used, t_health, o_health, o_stamina,
                                                                t_max_health, o_attack, t_special_move_description, turn_total,
                                                                tcard_lvl_ap_buff, None)
                                                t_enhancer_used = False
                                                t_pet_used = True
                                                tpet_dmg = dmg['DMG']
                                                tpet_type = dmg['ENHANCED_TYPE']
                                                if dmg['CAN_USE_MOVE']:
                                                    if tpet_type == 'ATK':
                                                        t_attack = round(t_attack + dmg['DMG'])
                                                    elif tpet_type == 'DEF':
                                                        t_defense = round(t_defense + dmg['DMG'])
                                                    elif tpet_type == 'STAM':
                                                        t_stamina = round(t_stamina + dmg['DMG'])
                                                    elif tpet_type == 'HLT':
                                                        t_health = round(t_health + dmg['DMG'])
                                                    elif tpet_type == 'LIFE':
                                                        t_health = round(t_health + dmg['DMG'])
                                                        o_health = round(o_health - dmg['DMG'])
                                                    elif tpet_type == 'DRAIN':
                                                        t_stamina = round(t_stamina + dmg['DMG'])
                                                        o_stamina = round(o_stamina - dmg['DMG'])
                                                    elif tpet_type == 'FLOG':
                                                        t_attack = round(t_attack + dmg['DMG'])
                                                        o_attack = round(o_attack - dmg['DMG'])
                                                    elif tpet_type == 'WITHER':
                                                        t_defense = round(t_defense + dmg['DMG'])
                                                        o_defense = round(o_defense - dmg['DMG'])
                                                    elif tpet_type == 'RAGE':
                                                        t_defense = round(t_defense - dmg['DMG'])
                                                        t_attack = round(t_attack + dmg['DMG'])
                                                    elif tpet_type == 'BRACE':
                                                        t_defense = round(t_defense + dmg['DMG'])
                                                        t_attack = round(t_attack - dmg['DMG'])
                                                    elif tpet_type == 'BZRK':
                                                        t_health = round(t_health - dmg['DMG'])
                                                        t_attack = round(t_attack + dmg['DMG'])
                                                    elif tpet_type == 'CRYSTAL':
                                                        t_health = round(t_health - dmg['DMG'])
                                                        t_defense = round(t_defense + dmg['DMG'])
                                                    elif tpet_type == 'GROWTH':
                                                        t_max_health = round(t_max_health - dmg['DMG'])
                                                        t_defense = round(t_defense + (dmg['DMG'] * .5))
                                                        t_attack = round(t_attack + (dmg['DMG'] * .5))
                                                    elif tpet_type == 'STANCE':
                                                        tempattack = dmg['DMG']
                                                        t_attack = t_defense
                                                        t_defense = tempattack
                                                    elif tpet_type == 'CONFUSE':
                                                        tempattack = dmg['DMG']
                                                        o_attack = o_defense
                                                        o_defense = tempattack
                                                    elif tpet_type == 'BLINK':
                                                        t_stamina = round(t_stamina - dmg['DMG'])
                                                        o_stamina = round(o_stamina + dmg['DMG'])
                                                    elif tpet_type == 'SLOW':
                                                        tempstam = round(o_stamina + dmg['DMG'])
                                                        t_stamina = round(t_stamina - dmg['DMG'])
                                                        o_stamina = t_stamina
                                                        t_stamina = tempstam
                                                    elif tpet_type == 'HASTE':
                                                        tempstam = round(o_stamina - dmg['DMG'])
                                                        t_stamina = round(t_stamina + dmg['DMG'])
                                                        o_stamina = t_stamina
                                                        t_stamina = tempstam
                                                    elif tpet_type == 'SOULCHAIN':
                                                        t_stamina = round(dmg['DMG'])
                                                        o_stamina = t_stamina
                                                    elif tpet_type == 'GAMBLE':
                                                        t_health = round(dmg['DMG'])
                                                        o_health = t_health
                                                    elif tpet_type == 'FEAR':
                                                        t_max_health = round(t_max_health - dmg['DMG'])
                                                        o_defense = round(o_defense - (dmg['DMG'] * .5))
                                                        o_attack = round(o_attack - (dmg['DMG'] * .5))
                                                    elif tpet_type == 'WAVE':
                                                        o_health = round(o_health - dmg['DMG'])
                                                    elif tpet_type == 'BLAST':
                                                        if dmg['DMG'] >= 100:
                                                            dmg['DMG'] = 100
                                                        o_health = round(o_health - dmg['DMG'])
                                                    elif tpet_type == 'CREATION':
                                                        t_max_health = round(t_max_health + dmg['DMG'])
                                                        t_health = round(t_health + dmg['DMG'])
                                                    elif tpet_type == 'DESTRUCTION':
                                                        if dmg['DMG'] >= 100:
                                                            dmg['DMG'] = 100
                                                        o_max_health = round(o_max_health - dmg['DMG'])
                                                        if o_max_health <=1:
                                                            o_max_health = 1
                                                    t_stamina = t_stamina - int(dmg['STAMINA_USED'])

                                                    
                                                    if t_universe == "Persona":
                                                        petdmg = damage_cal(o_opponent_affinities, basic_attack_name, tmove1_element, t_universe, t_card, tpet_move, t_attack,
                                                                            t_defense, o_defense, t_stamina,
                                                                            t_enhancer_used, t_health, o_health, o_stamina,
                                                                            t_max_health, o_attack,
                                                                            t_special_move_description, turn_total,
                                                                            tcard_lvl_ap_buff, None)

                                                        o_health = o_health - petdmg['DMG']

                                                        embedVar = discord.Embed(
                                                            title=f"**PERSONA!**\n{tpet_name} was summoned from {t_card}'s soul dealing **{petdmg['DMG']}** damage!!",
                                                            colour=0xe91e63)
                                                        # embedVar.add_field(name=f"{tpet_name} used **{tpetmove_text}**!",
                                                        #         value=f"{dmg['MESSAGE']}")
                                                        if mode not in AUTO_BATTLE_modes:
                                                            await battle_msg.delete(delay=2)
                                                            if not operformance:
                                                                tsummon_file = showsummon(tpet_image, tpet_name, dmg['MESSAGE'], tpet_lvl, tpet_bond)
                                                                embedVar.set_image(url="attachment://pet.png")
                                                                await asyncio.sleep(2)
                                                                battle_msg = await private_channel.send(embed=embedVar, file=tsummon_file)
                                                                await asyncio.sleep(2)
                                                                await battle_msg.delete(delay=2)
                                                        #embedVar.set_image(url="attachment://pet.png")
                                                        previous_moves.append(f"(**{turn_total}**) **Persona!** 🩸 : **{tpet_name}** was summoned from **{t_card}'s** soul dealing **{petdmg['DMG']}** damage!\n**{o_card}** summon disabled!")
                                                        o_pet_used = True
                                                        
                                                    else:
                                                        embedVar = discord.Embed(title=f"{t_card} Summoned 🧬 **{tpet_name}**", colour=0xe91e63)                                                            
                                                        if mode not in AUTO_BATTLE_modes:
                                                            embedVar.set_image(url="attachment://pet.png")
                                                            await battle_msg.delete(delay=2)
                                                            if not operformance:
                                                                tsummon_file = showsummon(tpet_image, tpet_name, dmg['MESSAGE'], tpet_lvl, tpet_bond)
                                                                
                                                        
                                                        previous_moves.append(f"(**{turn_total}**) **{t_card}** Summoned 🧬 **{tpet_name}**: {dmg['MESSAGE']}")
                                                
                                                        #await battle_msg.delete(delay=2)
                                                        if mode not in AUTO_BATTLE_modes:
                                                            if not operformance:
                                                                await asyncio.sleep(2)
                                                                battle_msg = await private_channel.send(embed=embedVar, file=tsummon_file)
                                                                await asyncio.sleep(2)
                                                                await battle_msg.delete(delay=2)

                                                    turn = 1
                                                else:
                                                    previous_moves.append(f"(**{turn_total}**) {t_card} Could not summon 🧬 **{tpet_name}**. Needs rest")
                                                    turn = 1
                                        else:
                                            previous_moves.append(f"(**{turn_total}**) {t_card} Could not summon 🧬 **{tpet_name}**. Needs rest")
                                    elif int(aiMove) == 7:
                                        if t_universe == "Persona":
                                            block_message = f"**Confidant Block!*** 🩸: **{t_card}** Blocked 🛡️"
                                            t_block_used = True
                                            t_defense = round(t_defense * 2)

                                            previous_moves.append(block_message)
                                            # await button_ctx.defer(ignore=True)
                                            turn_total = turn_total + 1
                                            turn = 0

                                        if t_stamina >= 20:
                                            if t_universe == "Attack On Titan":
                                                previous_moves.append(f"(**{turn_total}**) **Rally** 🩸 ! **{t_card}** Increased Max Health ❤️")
                                                t_max_health = round(t_max_health + 100)
                                                t_health = t_health + 100

                                            if t_universe == "Bleach":
                                                dmg = damage_cal(o_opponent_affinities, basic_attack_name, tmove1_element, t_universe, t_card, t_1, t_attack, t_defense, o_defense,
                                                                t_stamina, t_enhancer_used, t_health, o_health, o_stamina,
                                                                t_max_health, o_attack, t_special_move_description, turn_total,
                                                                tcard_lvl_ap_buff, None)
                                                previous_moves.append(f"(**{turn_total}**) **{t_card}** Exerted their 🩸 Spiritual Pressure - {dmg['MESSAGE']}")
                                                if dmg['REPEL']:
                                                    t_health = t_health - dmg['DMG']
                                                elif dmg['ABSORB']:
                                                    o_health = o_health + dmg['DMG']
                                                elif dmg['ELEMENT'] == water_element:
                                                    if tmove1_element == water_element:
                                                        t_basic_water_buff = t_basic_water_buff + 25
                                                    if tmove2_element == water_element:
                                                        t_special_water_buff = t_special_water_buff + 25
                                                    if tmove3_element == water_element:
                                                        t_ultimate_water_buff = t_ultimate_water_buff + 25
                                                    o_health = o_health - (dmg['DMG'] + t_water_buff)

                                                elif dmg['ELEMENT'] == earth_element:
                                                    t_defense = t_defense + (dmg['DMG'] * .20)
                                                    o_health = o_health - dmg['DMG']

                                                elif dmg['ELEMENT'] == recoil_element:
                                                    t_health = t_health - (dmg['DMG'] * .25)
                                                    o_health = o_health - dmg['DMG']

                                                elif dmg['ELEMENT'] == time_element:
                                                    t_stamina = 0
                                                    o_health = o_health - dmg['DMG']


                                                elif dmg['ELEMENT'] == death_element:
                                                    o_max_health = o_max_health - (dmg['DMG'] * .07)
                                                    o_health = o_health - dmg['DMG']

                                                elif dmg['ELEMENT'] == light_element:
                                                    t_stamina = round(t_stamina + (dmg['STAMINA_USED'] / 2))
                                                    o_health = o_health - dmg['DMG']

                                                elif dmg['ELEMENT'] == dark_element:
                                                    t_stamina = t_stamina + 5
                                                    o_stamina = o_stamina - 5
                                                    o_health = o_health - dmg['DMG']

                                                elif dmg['ELEMENT'] == life_element:
                                                    t_health = t_health + (dmg['DMG'] * .15)
                                                    o_health = o_health - dmg['DMG']

                                                elif dmg['ELEMENT'] == psychic_element:
                                                    o_defense = o_defense - (dmg['DMG'] * .08)
                                                    o_attack = o_attack - (dmg['DMG'] * .08)
                                                    o_health = o_health - dmg['DMG']

                                                elif dmg['ELEMENT'] == fire_element:
                                                    t_burn_dmg = t_burn_dmg + round(dmg['DMG'] * .20)
                                                    o_health = o_health - dmg['DMG']


                                                elif dmg['ELEMENT'] == electric_element:
                                                    t_shock_buff = t_shock_buff +  (dmg['DMG'] * .07)
                                                    o_health = o_health - dmg['DMG']

                                                elif dmg['ELEMENT'] == poison_element:
                                                    if t_poison_dmg <= 100:
                                                        t_poison_dmg = t_poison_dmg + 8
                                                    o_health = o_health - dmg['DMG']

                                                elif dmg['ELEMENT'] == ice_element:
                                                    t_ice_counter = t_ice_counter + 1
                                                    if t_ice_counter == 3:
                                                        t_freeze_enh = True
                                                        t_ice_counter = 0
                                                    o_health = o_health - dmg['DMG']

                                                elif dmg['ELEMENT'] == bleed_element:
                                                    t_bleed_counter = t_bleed_counter + 1
                                                    if t_bleed_counter == 5:
                                                        t_bleed_hit = True
                                                        t_bleed_counter = 0
                                                    o_health = o_health - dmg['DMG']
                                                    
                                                elif dmg['ELEMENT'] == gravity_element:
                                                    t_gravity_hit = True
                                                    o_health = o_health - dmg['DMG']
                                                
                                                else:
                                                    o_health = o_health - dmg['DMG']


                                            t_stamina = t_stamina - 20
                                            t_block_used = True
                                            t_defense = round(t_defense * 2)
                                            previous_moves.append(f"(**{turn_total}**) **{t_card}:** Blocked 🛡️")
                                            turn_total = turn_total + 1
                                            turn = turn_selector
                                        else:
                                            turn = 1
                                    if int(aiMove) != 5 and int(aiMove) != 6 and int(aiMove) != 7:

                                        # If you have enough stamina for move, use it
                                        # if c used block
                                        if mode in co_op_modes:
                                            if c_block_used == True:
                                                if dmg['CAN_USE_MOVE']:
                                                    if dmg['ENHANCE']:
                                                        enh_type = dmg['ENHANCED_TYPE']
                                                        if enh_type == 'ATK':
                                                            t_attack = round(t_attack + dmg['DMG'])
                                                        elif enh_type == 'DEF':
                                                            t_defense = round(t_defense + dmg['DMG'])
                                                        elif enh_type == 'STAM':
                                                            t_stamina = round(t_stamina + dmg['DMG'])
                                                        elif enh_type == 'HLT':
                                                            t_health = round(t_health + dmg['DMG'])
                                                        elif enh_type == 'LIFE':
                                                            t_health = round(t_health + dmg['DMG'])
                                                            c_health = round(c_health - dmg['DMG'])
                                                        elif enh_type == 'DRAIN':
                                                            t_stamina = round(t_stamina + dmg['DMG'])
                                                            c_stamina = round(c_stamina - dmg['DMG'])
                                                        elif enh_type == 'FLOG':
                                                            t_attack = round(t_attack + dmg['DMG'])
                                                            c_attack = round(c_attack - dmg['DMG'])
                                                        elif enh_type == 'WITHER':
                                                            t_defense = round(t_defense + dmg['DMG'])
                                                            c_defense = round(t_defense - dmg['DMG'])
                                                        elif enh_type == 'RAGE':
                                                            t_defense = round(t_defense - dmg['DMG'])
                                                            t_attack = round(t_attack + dmg['DMG'])
                                                        elif enh_type == 'BRACE':
                                                            t_defense = round(t_defense + dmg['DMG'])
                                                            t_attack = round(t_attack - dmg['DMG'])
                                                        elif enh_type == 'BZRK':
                                                            t_health = round(t_health - dmg['DMG'])
                                                            t_attack = round(t_attack + (dmg['DMG']))
                                                        elif enh_type == 'CRYSTAL':
                                                            t_health = round(t_health - dmg['DMG'])
                                                            t_defense = round(t_defense + dmg['DMG'])
                                                        elif enh_type == 'GROWTH':
                                                            t_max_health = round(t_max_health - dmg['DMG'])
                                                            t_defense = round(t_defense + (dmg['DMG'] * .5))
                                                            t_attack = round(t_attack + (dmg['DMG'] * .5))
                                                        elif enh_type == 'STANCE':
                                                            tempattack = dmg['DMG']
                                                            t_attack = t_defense
                                                            t_defense = tempattack
                                                        elif enh_type == 'CONFUSE':
                                                            tempattack = dmg['DMG']
                                                            c_attack = c_defense
                                                            c_defense = tempattack
                                                        elif enh_type == 'BLINK':
                                                            t_stamina = round(t_stamina - dmg['DMG'])
                                                            c_stamina = round(c_stamina + dmg['DMG'])
                                                        elif enh_type == 'SLOW':
                                                            tempstam = round(c_stamina + dmg['DMG'])
                                                            t_stamina = round(t_stamina - dmg['DMG'])
                                                            c_stamina = t_stamina
                                                            t_stamina = tempstam
                                                        elif enh_type == 'HASTE':
                                                            tempstam = round(c_stamina - dmg['DMG'])
                                                            t_stamina = round(t_stamina + dmg['DMG'])
                                                            c_stamina = t_stamina
                                                            t_stamina = tempstam
                                                        elif enh_type == 'SOULCHAIN':
                                                            t_stamina = round(dmg['DMG'])
                                                            c_stamina = t_stamina
                                                        elif enh_type == 'GAMBLE':
                                                            if mode in D_modes:
                                                                t_health = round(dmg['DMG']) * 2
                                                                c_health = round(dmg['DMG'])
                                                            elif mode in B_modes:
                                                                t_health = round(dmg['DMG']) * 4
                                                                c_health = round(dmg['DMG'])
                                                            else:
                                                                t_health = round(dmg['DMG'])
                                                                _health = round(dmg['DMG'])
                                                        elif enh_type == 'FEAR':
                                                            t_max_health = round(t_max_health - dmg['DMG'])
                                                            c_attack = round(c_attack - ((dmg['DMG'] * .5)))
                                                            c_defense = round(c_defense - ((dmg['DMG'] * .5)))
                                                        elif enh_type == 'WAVE':
                                                            c_health = round(c_health - dmg['DMG'])
                                                        elif enh_type == 'BLAST':
                                                            c_health = round(c_health - dmg['DMG'])
                                                        elif enh_type == 'CREATION':
                                                            t_max_health = round(t_max_health + dmg['DMG'])
                                                            t_health = round(t_health + dmg['DMG'])
                                                        elif enh_type == 'DESTRUCTION':
                                                            # t_max_health = round(t_max_health - dmg['DMG'])
                                                            c_max_health = round(c_max_health - dmg['DMG'])
                                                            # if t_max_health <=1:
                                                            #     t_max_health = 1
                                                            if c_max_health <=1:
                                                                c_max_health = 1
                                                        if enh_type in Stamina_Enhancer_Check or enh_type in Time_Enhancer_Check or enh_type in Control_Enhancer_Check:
                                                            t_stamina = t_stamina
                                                        else:
                                                            t_stamina = t_stamina - int(dmg['STAMINA_USED'])

                                                        previous_moves.append(f"(**{turn_total}**) **{t_card}**: 🦠 {dmg['MESSAGE']}")
                                                        turn_total = turn_total + 1
                                                        turn = turn_selector
                                                    elif dmg['DMG'] == 0:
                                                        t_stamina = t_stamina - int(dmg['STAMINA_USED'])
                                                        if oarm_barrier_active and dmg['ELEMENT'] != psychic_element:
                                                            tarm_barrier_active=False
                                                            embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                            previous_moves.append(f"(**{turn_total}**) **{t_card}**'s 💠 Barrier Disabled!")
                                                        previous_moves.append(f"(**{turn_total}**) **{t_card}**: {dmg['MESSAGE']}")
                                                        turn_total = turn_total + 1
                                                        turn = turn_selector
                                                    else:
                                                        if c_universe == "Naruto" and c_stamina < 10:
                                                            c_stored_damage = round(dmg['DMG'])
                                                            c_naruto_heal_buff = c_naruto_heal_buff + c_stored_damage
                                                            c_health = c_health 
                                                            previous_moves.append(f"(**{turn_total}**) {c_card}: Substitution Jutsu")
                                                            if not c_used_resolve:
                                                                previous_moves.append(f"(**{turn_total}**) 🩸**{c_stored_damage}** Hasirama Cells stored. 🩸**{c_naruto_heal_buff}** total stored.")
                                                            if oarm_barrier_active and dmg['ELEMENT'] != psychic_element:
                                                                tarm_barrier_active=False
                                                                embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                previous_moves.append(f"(**{turn_total}**) **{t_card}**'s 💠 Barrier Disabled!")
                                                        elif carm_shield_active and dmg['ELEMENT'] != dark_element:
                                                            if cshield_value > 0:
                                                                cshield_value = cshield_value -dmg['DMG']
                                                                c_health = c_health 
                                                                if cshield_value <=0:
                                                                    embedVar = discord.Embed(title=f"{c_card}'s' **Shield** Shattered!", description=f"{t_card} breaks the **Shield**!", colour=0xe91e63)
                                                                    previous_moves.append(f"(**{turn_total}**) 🌐{c_card}'s Shield Shattered!")
                                                                    if oarm_barrier_active and dmg['ELEMENT'] != psychic_element:
                                                                        tarm_barrier_active=False
                                                                        embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                        previous_moves.append(f"(**{turn_total}**) **{t_card}**'s 💠 Barrier Disabled!")
                                                                    carm_shield_active = False
                                                                else:
                                                                    embedVar = discord.Embed(title=f"{c_card} Activates **Shield** 🌐", description=f"**{t_card}** strikes the Shield 🌐\n**{cshield_value} Shield** Left!", colour=0xe91e63)
                                                                    if oarm_barrier_active and dmg['ELEMENT'] != psychic_element:
                                                                        tarm_barrier_active=False
                                                                        embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                    #await private_channel.send(embed=embedVar)

                                                        elif carm_barrier_active and dmg['ELEMENT'] != psychic_element:
                                                            if cbarrier_count >1:
                                                                c_health = c_health 
                                                                embedVar = discord.Embed(title=f"{c_card} Activates **Barrier** 💠", description=f"{t_card}'s attack **Nullified**!\n 💠{cbarrier_count - 1} **Barriers** remain!", colour=0xe91e63)
                                                                previous_moves.append(f"(**{turn_total}**) {c_card} Activates Barrier 💠 {t_card}'s attack **Nullified**!\n💠 {cbarrier_count - 1} **Barriers** remain!")
                                                                if oarm_barrier_active and dmg['ELEMENT'] != psychic_element:
                                                                    tarm_barrier_active=False
                                                                    embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}**'s 💠 Barrier Disabled!")
                                                                cbarrier_count = cbarrier_count - 1
                                                            elif cbarrier_count==1:
                                                                embedVar = discord.Embed(title=f"{c_card}'s **Barrier** Broken!", description=f"{t_card} destroys the **Barrier**", colour=0xe91e63)
                                                                cbarrier_count = cbarrier_count - 1
                                                                previous_moves.append(f"(**{turn_total}**) {c_card}'s Barrier Broken!")
                                                                if oarm_barrier_active and dmg['ELEMENT'] != psychic_element:
                                                                    tarm_barrier_active=False
                                                                    embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}**'s 💠 Barrier Disabled!")
                                                                carm_barrier_active = False
                                                        elif carm_parry_active and dmg['ELEMENT'] != earth_element:
                                                            if cparry_count > 1:
                                                                c_health = c_health
                                                                cparry_damage = round(dmg['DMG'])
                                                                c_health = round(c_health - (cparry_damage * .75))
                                                                t_health = round(t_health - (cparry_damage * .25))
                                                                cparry_count = cparry_count - 1
                                                                embedVar = discord.Embed(title=f"{c_card} Activates **Parry** 🔄", description=f"{t_card} takes {round(cparry_damage * .25)}! DMG\n **{cparry_count} Parries** to go!!", colour=0xe91e63)
                                                                previous_moves.append(f"(**{turn_total}**) {c_card} Activates Parry 🔄")
                                                                if oarm_barrier_active and dmg['ELEMENT'] != psychic_element:
                                                                    tarm_barrier_active=False
                                                                    embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}**'s 💠 Barrier Disabled!")
                                                                
                                                            elif cparry_count==1:
                                                                c_health = c_health
                                                                cparry_damage = round(dmg['DMG'])
                                                                c_health = round(c_health - (cparry_damage * .75))
                                                                t_health = round(t_health - (cparry_damage * .25))
                                                                embedVar = discord.Embed(title=f"{c_card} **Parry** Penetrated!!", description=f"{t_card} takes {round(cparry_damage * .25)}! DMG and breaks the **Parry**", colour=0xe91e63)
                                                                previous_moves.append(f"(**{turn_total}**) **{c_card}** Parry Penetrated! **{t_card}** takes **{round(cparry_damage * .25)}** ! DMG and breaks the **Parry**")
                                                                cparry_count = cparry_count - 1
                                                                if oarm_barrier_active and dmg['ELEMENT'] != psychic_element:
                                                                    tarm_barrier_active=False
                                                                    embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}**'s 💠 Barrier Disabled!")
                                                                carm_parry_active = False
                                                        else:
                                                            if dmg['REPEL']:
                                                                t_health = t_health - int(dmg['DMG'])
                                                            elif dmg['ABSORB']:
                                                                c_health = c_health + int(dmg['DMG'])
                                                            elif dmg['ELEMENT'] == water_element:
                                                                if tmove1_element == water_element:
                                                                    t_basic_water_buff = t_basic_water_buff + 25
                                                                if tmove2_element == water_element:
                                                                    t_special_water_buff = t_special_water_buff + 25
                                                                if tmove3_element == water_element:
                                                                    t_ultimate_water_buff = t_ultimate_water_buff + 25
                                                                c_health = c_health - dmg['DMG']

                                                            elif dmg['ELEMENT'] == ice_element:
                                                                t_ice_counter = t_ice_counter + 1
                                                                if t_ice_counter == 3:
                                                                    t_freeze_enh = True
                                                                    t_ice_counter = 0
                                                                c_health = c_health - dmg['DMG']

                                                            elif dmg['ELEMENT'] == time_element:
                                                                t_stamina = 0
                                                                c_health = c_health - dmg['DMG']

                                                            elif dmg['ELEMENT'] == bleed_element:
                                                                t_bleed_counter = t_bleed_counter + 1
                                                                if t_bleed_counter == 5:
                                                                    t_bleed_hit = True
                                                                    t_bleed_counter = 0
                                                                c_health = c_health - dmg['DMG']

                                                            elif dmg['ELEMENT'] == recoil_element:
                                                                t_health = t_health - (dmg['DMG'] * .25)
                                                                c_health = c_health - dmg['DMG']

                                                            elif dmg['ELEMENT'] == earth_element:
                                                                t_defense = t_defense + (dmg['DMG'] * .20)
                                                                c_health = c_health - dmg['DMG']

                                                            elif dmg['ELEMENT'] == death_element:
                                                                c_max_health = c_max_health - (dmg['DMG'] * .07)
                                                                c_health = c_health - dmg['DMG']

                                                            elif dmg['ELEMENT'] == light_element:
                                                                t_stamina = round(t_stamina + (dmg['STAMINA_USED'] / 2))
                                                                c_health = c_health - dmg['DMG']

                                                            elif dmg['ELEMENT'] == dark_element:
                                                                t_stamina = t_stamina + 5
                                                                c_stamina = c_stamina - 5
                                                                c_health = c_health - dmg['DMG']

                                                            elif dmg['ELEMENT'] == life_element:
                                                                t_health = t_health + (dmg['DMG'] * .15)
                                                                c_health = c_health - dmg['DMG']

                                                            elif dmg['ELEMENT'] == psychic_element:
                                                                c_defense = c_defense - (dmg['DMG'] * .08)
                                                                c_attack = c_attack - (dmg['DMG'] * .08)
                                                                c_health = c_health - dmg['DMG']

                                                            elif dmg['ELEMENT'] == fire_element:
                                                                t_burn_dmg = t_burn_dmg + round(dmg['DMG'] * .20)
                                                                c_health = c_health - dmg['DMG']

                                                            elif dmg['ELEMENT'] == electric_element:
                                                                t_shock_buff = t_shock_buff +  (dmg['DMG'] * .07)
                                                                c_health = c_health - dmg['DMG']

                                                            elif dmg['ELEMENT'] == poison_element:
                                                                if t_poison_dmg <= 100:
                                                                    t_poison_dmg = t_poison_dmg + 8
                                                                c_health = c_health - dmg['DMG']
                                                                
                                                            elif dmg['ELEMENT'] == gravity_element:
                                                                t_gravity_hit = True
                                                                c_health = c_health - dmg['DMG']
                                                            
                                                            else:
                                                                c_health = c_health - dmg['DMG']

                                                            embedVar = discord.Embed(title=f"{dmg['MESSAGE']}", colour=embed_color_t)
                                                            previous_moves.append(f"(**{turn_total}**) **{t_card}**: {dmg['MESSAGE']}")
                                                            if tarm_siphon_active:
                                                                siphon_damage = (dmg['DMG'] * .10) + tsiphon_value
                                                                t_health = round(t_health + siphon_damage)
                                                                if t_health >= t_max_health:
                                                                    t_health = t_max_health
                                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}**: 💉 Siphoned **Full Health!**")
                                                                else:
                                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}**: 💉 Siphoned **{round(siphon_damage)}** Health!")

                                                            if tarm_barrier_active:
                                                                tarm_barrier_active=False
                                                                embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                            
                                                                previous_moves.append(f"(**{turn_total}**) **{t_card}**'s 💠 Barrier Disabled!")
                                                        if c_health <= 0:
                                                            if c_final_stand==True:
                                                                if c_universe == "Dragon Ball Z":
                                                                    embedVar = discord.Embed(title=f"{c_card}'s LAST STAND", description=f"{c_card} FINDS RESOLVE", colour=0xe91e63)
                                                                    embedVar.add_field(name=f"{c_card} resolved and continues to fight", value="All stats & stamina increased")
                                                                    previous_moves.append(f"(**{turn_total}**) **{c_card}** 🩸 Transformation: Last Stand!!!")
                                                                    if oarm_barrier_active and dmg['ELEMENT'] != psychic_element:
                                                                        tarm_barrier_active=False
                                                                        embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                        previous_moves.append(f"(**{turn_total}**) **{t_card}**'s 💠 Barrier Disabled!")
                                                                    c_health = int(.75 * (c_attack + c_defense))
                                                                    
                                                                    c_used_resolve = True
                                                                    c_used_focus = True
                                                                    c_final_stand = False
                                                                    t_stamina = t_stamina - int(dmg['STAMINA_USED'])
                                                                    turn_total = turn_total + 1
                                                                    turn = turn_selector
                                                            else:
                                                                c_health = 0
                                                                t_stamina = t_stamina - int(dmg['STAMINA_USED'])
                                                                turn_total = turn_total + 1
                                                        else:
                                                            t_stamina = t_stamina - int(dmg['STAMINA_USED'])
                                                            turn_total = turn_total + 1
                                                            turn = turn_selector
                                                else:
                                                    #await private_channel.send(m.NOT_ENOUGH_STAMINA)
                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}** not enough Stamina to use this move") 
                                                    turn = 1
                                            else:
                                                if dmg['CAN_USE_MOVE']:
                                                    if dmg['ENHANCE']:
                                                        enh_type = dmg['ENHANCED_TYPE']
                                                        if enh_type == 'ATK':
                                                            t_attack = round(t_attack + dmg['DMG'])
                                                        elif enh_type == 'DEF':
                                                            t_defense = round(t_defense + dmg['DMG'])
                                                        elif enh_type == 'STAM':
                                                            t_stamina = round(t_stamina + dmg['DMG'])
                                                        elif enh_type == 'HLT':
                                                            t_health = round(t_health + dmg['DMG'])
                                                        elif enh_type == 'LIFE':
                                                            t_health = round(t_health + dmg['DMG'])
                                                            o_health = round(o_health - dmg['DMG'])
                                                        elif enh_type == 'DRAIN':
                                                            t_stamina = round(t_stamina + dmg['DMG'])
                                                            o_stamina = round(o_stamina - dmg['DMG'])
                                                        elif enh_type == 'FLOG':
                                                            t_attack = round(t_attack + dmg['DMG'])
                                                            o_attack = round(o_attack - dmg['DMG'])
                                                        elif enh_type == 'WITHER':
                                                            t_defense = round(t_defense + dmg['DMG'])
                                                            o_defense = round(o_defense - dmg['DMG'])
                                                        elif enh_type == 'RAGE':
                                                            t_defense = round(t_defense - dmg['DMG'])
                                                            t_attack = round(t_attack + dmg['DMG'])
                                                        elif enh_type == 'BRACE':
                                                            t_defense = round(t_defense + dmg['DMG'])
                                                            t_attack = round(t_attack - dmg['DMG'])
                                                        elif enh_type == 'BZRK':
                                                            t_health = round(t_health - dmg['DMG'])
                                                            t_attack = round(t_attack + (dmg['DMG']))
                                                        elif enh_type == 'CRYSTAL':
                                                            t_health = round(t_health - dmg['DMG'])
                                                            t_defense = round(t_defense + dmg['DMG'])
                                                        elif enh_type == 'GROWTH':
                                                            t_max_health = round(t_max_health - dmg['DMG'])
                                                            t_defense = round(t_defense + (dmg['DMG'] * .5))
                                                            t_attack = round(t_attack + (dmg['DMG'] * .5))
                                                        elif enh_type == 'STANCE':
                                                            tempattack = dmg['DMG']
                                                            t_attack = t_defense
                                                            t_defense = tempattack
                                                        elif enh_type == 'CONFUSE':
                                                            tempattack = dmg['DMG']
                                                            o_attack = o_defense
                                                            o_defense = tempattack
                                                        elif enh_type == 'BLINK':
                                                            t_stamina = round(t_stamina - dmg['DMG'])
                                                            o_stamina = round(o_stamina + dmg['DMG'])
                                                        elif enh_type == 'SLOW':
                                                            tempstam = round(o_stamina + dmg['DMG'])
                                                            t_stamina = round(t_stamina - dmg['DMG'])
                                                            o_stamina = t_stamina
                                                            t_stamina = tempstam
                                                        elif enh_type == 'HASTE':
                                                            tempstam = round(o_stamina - dmg['DMG'])
                                                            t_stamina = round(t_stamina + dmg['DMG'])
                                                            o_stamina = t_stamina
                                                            t_stamina = tempstam
                                                        elif enh_type == 'SOULCHAIN':
                                                            t_stamina = round(dmg['DMG'])
                                                            o_stamina = t_stamina
                                                        elif enh_type == 'GAMBLE':
                                                            if mode in D_modes:
                                                                t_health = round(dmg['DMG']) * 2
                                                                o_health = round(dmg['DMG'])
                                                            elif mode in B_modes:
                                                                t_health = round(dmg['DMG']) * 4
                                                                o_health = round(dmg['DMG'])
                                                            else:
                                                                t_health = round(dmg['DMG'])
                                                                o_health = round(dmg['DMG'])
                                                        elif enh_type == 'FEAR':
                                                            t_max_health = round(t_max_health - dmg['DMG'])
                                                            o_defense = round(o_defense - (dmg['DMG'] * .5))
                                                            o_attack = round(o_attack - (dmg['DMG'] * .5))
                                                        elif enh_type == 'WAVE':
                                                            o_health = round(o_health - dmg['DMG'])
                                                        elif enh_type == 'BLAST':
                                                            o_health = round(o_health - dmg['DMG'])
                                                        elif enh_type == 'CREATION':
                                                            t_max_health = round(t_max_health + dmg['DMG'])
                                                            t_health = round(t_health + dmg['DMG'])
                                                        elif enh_type == 'DESTRUCTION':
                                                            # t_max_health = round(t_max_health - dmg['DMG'])
                                                            o_max_health = round(o_max_health - dmg['DMG'])
                                                            # if t_max_health <=1:
                                                            #     t_max_health = 1
                                                            if o_max_health <=1:
                                                                o_max_health = 1
                                                        if enh_type in Stamina_Enhancer_Check or enh_type in Time_Enhancer_Check or enh_type in Control_Enhancer_Check:
                                                            t_stamina = t_stamina
                                                        else:
                                                            t_stamina = t_stamina - int(dmg['STAMINA_USED'])
                                                        previous_moves.append(f"(**{turn_total}**) **{t_card}**: 🦠 {dmg['MESSAGE']}")
                                                        turn_total = turn_total + 1
                                                        turn = turn_selector
                                                    elif dmg['DMG'] == 0:
                                                        t_stamina = t_stamina - int(dmg['STAMINA_USED'])
                                                        previous_moves.append(f"(**{turn_total}**) **{t_card}**: {dmg['MESSAGE']}")
                                                        if oarm_barrier_active and dmg['ELEMENT'] != psychic_element:
                                                            tarm_barrier_active=False
                                                            embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                            previous_moves.append(f"(**{turn_total}**) 🦠 **{t_card}**'s 💠 Barrier Disabled!")
                                                        turn_total = turn_total + 1
                                                        turn = turn_selector
                                                    else:
                                                        if o_universe == "Naruto" and o_stamina < 10:
                                                            o_health = o_health
                                                            previous_moves.append(f"(**{turn_total}**) **{o_card}** 🩸: Substitution Jutsu")
                                                            if oarm_barrier_active and dmg['ELEMENT'] != psychic_element:
                                                                tarm_barrier_active=False
                                                                embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                previous_moves.append(f"(**{turn_total}**) **{t_card}**'s 💠 Barrier Disabled!")
                                                        elif oarm_shield_active and dmg['ELEMENT'] != dark_element:
                                                            if oshield_value > 0:
                                                                oshield_value = oshield_value -dmg['DMG']
                                                                o_health = o_health 
                                                                if oshield_value <=0:
                                                                    previous_moves.append(f"(**{turn_total}**) **{o_card}'s** 🌐 Shield Shattered!")
                                                                    if oarm_barrier_active and dmg['ELEMENT'] != psychic_element:
                                                                        tarm_barrier_active=False
                                                                        embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                        previous_moves.append(f"(**{turn_total}**) **{t_card}**'s 💠 Barrier Disabled!")
                                                                    oarm_shield_active = False
                                                                else:
                                                                    embedVar = discord.Embed(title=f"{o_card} Activates **Shield** 🌐", description=f"**{t_card}** strikes the Shield 🌐\n**{oshield_value} Shield** Left!", colour=0xe91e63)
                                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}** strikes **{o_card}**'s Shield 🌐\n**{oshield_value} Shield** Left!")
                                                                    if oarm_barrier_active and dmg['ELEMENT'] != psychic_element:
                                                                        tarm_barrier_active=False
                                                                        embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                        previous_moves.append(f"(**{turn_total}**) **{t_card}**'s 💠 Barrier Disabled!")

                                                        elif oarm_barrier_active and dmg['ELEMENT'] != psychic_element:
                                                            if obarrier_count >1:
                                                                o_health = o_health 
                                                                embedVar = discord.Embed(title=f"{o_card} Activates **Barrier** 💠", description=f"{t_card}'s attack **Nullified**!\n💠 {obarrier_count - 1} **Barriers** remain!", colour=0xe91e63)
                                                                previous_moves.append(f"(**{turn_total}**) **{o_card}** Activates Barrier 💠 {t_card}'s attack **Nullified**!\n💠 {obarrier_count - 1} **Barriers** remain!")
                                                                if oarm_barrier_active and dmg['ELEMENT'] != psychic_element:
                                                                    tarm_barrier_active=False
                                                                    embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}**'s 💠 Barrier Disabled!")
                                                                obarrier_count = obarrier_count - 1
                                                            elif obarrier_count==1:
                                                                embedVar = discord.Embed(title=f"{o_card}'s **Barrier** Broken!", description=f"{t_card} destroys the **Barrier**", colour=0xe91e63)
                                                                obarrier_count = obarrier_count - 1
                                                                previous_moves.append(f"(**{turn_total}**) **{o_card}**'s Barrier Broken!")
                                                                if oarm_barrier_active and dmg['ELEMENT'] != psychic_element:
                                                                    tarm_barrier_active=False
                                                                    embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}**'s 💠 Barrier Disabled!")
                                                                oarm_barrier_active = False
                                                        elif oarm_parry_active and dmg['ELEMENT'] != earth_element:
                                                            if oparry_count > 1:
                                                                oparry_damage = round(dmg['DMG'])
                                                                o_health = round(o_health - (oparry_damage * .75))
                                                                t_health = round(t_health - (oparry_damage * .25))
                                                                oparry_count = oparry_count - 1
                                                                embedVar = discord.Embed(title=f"{o_card} Activates **Parry** 🔄", description=f"{t_card} takes {round(oparry_damage * .25)}! DMG\n **{oparry_count} Parries** to go!!", colour=0xe91e63)
                                                                previous_moves.append(f"(**{turn_total}**) **{o_card}** Activates Parry 🔄 {t_card} takes {round(oparry_damage * .25)}! DMG\n **{oparry_count}  Parries** to go!!")
                                                                if oarm_barrier_active and dmg['ELEMENT'] != psychic_element:
                                                                    tarm_barrier_active=False
                                                                    embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}**'s 💠 Barrier Disabled!")
                                                                
                                                            elif oparry_count==1:
                                                                oparry_damage = round(dmg['DMG'])
                                                                o_health = round(o_health - (oparry_damage * .75))
                                                                t_health = round(t_health - (oparry_damage * .25))
                                                                embedVar = discord.Embed(title=f"{o_card} **Parry** Penetrated!!", description=f"{t_card} takes {round(oparry_damage * .25)}! DMG and breaks the **Parry**", colour=0xe91e63)
                                                                previous_moves.append(f"(**{turn_total}**) **{o_card}** Parry Penetrated! **{t_card}** takes **{round(oparry_damage * .25)}**! DMG and breaks the **Parry**")
                                                                oparry_count = oparry_count - 1
                                                                if oarm_barrier_active and dmg['ELEMENT'] != psychic_element:
                                                                    tarm_barrier_active=False
                                                                    private_channel.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}**'s 💠 Barrier Disabled!")
                                                                oarm_parry_active = False
                                                        else:
                                                            if dmg['REPEL']:
                                                                t_health = t_health - int(dmg['DMG'])
                                                            elif dmg['ABSORB']:
                                                                o_health = o_health + int(dmg['DMG'])
                                                            elif dmg['ELEMENT'] == water_element:
                                                                if tmove1_element == water_element:
                                                                    t_basic_water_buff = t_basic_water_buff + 25
                                                                if tmove2_element == water_element:
                                                                    t_special_water_buff = t_special_water_buff + 25
                                                                if tmove3_element == water_element:
                                                                    t_ultimate_water_buff = t_ultimate_water_buff + 25
                                                                o_health = o_health - (dmg['DMG'] + t_water_buff)

                                                            elif dmg['ELEMENT'] == earth_element:
                                                                t_defense = t_defense + (dmg['DMG'] * .20)
                                                                o_health = o_health - dmg['DMG']

                                                            elif dmg['ELEMENT'] == recoil_element:
                                                                t_health = t_health - (dmg['DMG'] * .25)
                                                                o_health = o_health - dmg['DMG']

                                                            elif dmg['ELEMENT'] == time_element:
                                                                t_stamina = 0
                                                                o_health = o_health - dmg['DMG']


                                                            elif dmg['ELEMENT'] == death_element:
                                                                o_max_health = o_max_health - (dmg['DMG'] * .07)
                                                                o_health = o_health - dmg['DMG']

                                                            elif dmg['ELEMENT'] == light_element:
                                                                t_stamina = round(t_stamina + (dmg['STAMINA_USED'] / 2))
                                                                o_health = o_health - dmg['DMG']

                                                            elif dmg['ELEMENT'] == dark_element:
                                                                t_stamina = t_stamina + 5
                                                                o_stamina = o_stamina - 5
                                                                o_health = o_health - dmg['DMG']

                                                            elif dmg['ELEMENT'] == life_element:
                                                                t_health = t_health + (dmg['DMG'] * .15)
                                                                o_health = o_health - dmg['DMG']

                                                            elif dmg['ELEMENT'] == psychic_element:
                                                                o_defense = o_defense - (dmg['DMG'] * .08)
                                                                o_attack = o_attack - (dmg['DMG'] * .08)
                                                                o_health = o_health - dmg['DMG']

                                                            elif dmg['ELEMENT'] == fire_element:
                                                                t_burn_dmg = t_burn_dmg + round(dmg['DMG'] * .20)
                                                                o_health = o_health - dmg['DMG']


                                                            elif dmg['ELEMENT'] == electric_element:
                                                                t_shock_buff = t_shock_buff +  (dmg['DMG'] * .07)
                                                                o_health = o_health - dmg['DMG']

                                                            elif dmg['ELEMENT'] == poison_element:
                                                                if t_poison_dmg <= 100:
                                                                    t_poison_dmg = t_poison_dmg + 8
                                                                o_health = o_health - dmg['DMG']
        
                                                            elif dmg['ELEMENT'] == ice_element:
                                                                t_ice_counter = t_ice_counter + 1
                                                                if t_ice_counter == 3:
                                                                    t_freeze_enh = True
                                                                    t_ice_counter = 0
                                                                o_health = o_health - dmg['DMG']

                                                            elif dmg['ELEMENT'] == bleed_element:
                                                                t_bleed_counter = t_bleed_counter + 1
                                                                if t_bleed_counter == 5:
                                                                    t_bleed_hit = True
                                                                    t_bleed_counter = 0
                                                                o_health = o_health - dmg['DMG']
                                                                
                                                            elif dmg['ELEMENT'] == gravity_element:
                                                                t_gravity_hit = True
                                                                o_health = o_health - dmg['DMG']
                                                            
                                                            else:
                                                                o_health = o_health - dmg['DMG']


                                                            embedVar = discord.Embed(title=f"{dmg['MESSAGE']}", colour=embed_color_t)
                                                            previous_moves.append(f"(**{turn_total}**) **{t_card}**: {dmg['MESSAGE']}")
                                                            if tarm_siphon_active:
                                                                siphon_damage = (dmg['DMG'] * .10) + tsiphon_value
                                                                t_health = round(t_health + siphon_damage)
                                                                if t_health >= t_max_health:
                                                                    t_health = t_max_health
                                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}**: 💉 Siphoned **Full Health!**")
                                                                else:
                                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}**: 💉 Siphoned **{round(siphon_damage)}** Health!")
                                                            if oarm_barrier_active and dmg['ELEMENT'] != psychic_element:
                                                                tarm_barrier_active=False
                                                                private_channel.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                previous_moves.append(f"(**{turn_total}**) **{t_card}**'s 💠 Barrier Disabled!")
                                                        if o_health <= 0:
                                                            if o_final_stand == True:
                                                                if o_universe == "Dragon Ball Z":
                                                                    embedVar = discord.Embed(title=f"{o_card}'s LAST STAND", description=f"{o_card} FINDS RESOLVE", colour=0xe91e63)
                                                                    private_channel.add_field(name=f"**{o_card}** Resolved and continues to fight", value="All stats & stamina increased")
                                                                    previous_moves.append(f"(**{turn_total}**) **{o_card}** 🩸 Transformation: Last Stand!!!")
                                                                    if oarm_barrier_active and dmg['ELEMENT'] != psychic_element:
                                                                        tarm_barrier_active=False
                                                                        private_channel.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                        previous_moves.append(f"(**{turn_total}**) **{t_card}**'s 💠 Barrier Disabled!")
                                                                    o_health = int(.75 * (o_attack + o_defense))
                                                                    o_attack = o_attack + (.50 * o_attack)
                                                                    o_defense = o_defense + (.50 * o_defense)
                                                                    o_stamina = 100
                                                                    o_used_resolve = True
                                                                    o_final_stand = False
                                                                    o_used_focus = True
                                                                    t_stamina = t_stamina - int(dmg['STAMINA_USED'])
                                                                    turn_total = turn_total + 1
                                                                    turn = 0
                                                            else:
                                                                o_health = 0
                                                                t_stamina = t_stamina - int(dmg['STAMINA_USED'])
                                                                turn_total = turn_total + 1
                                                        else:
                                                            t_stamina = t_stamina - int(dmg['STAMINA_USED'])
                                                            turn_total = turn_total + 1
                                                            turn = turn_selector
                                                else:
                                                    previous_moves.append(f"(**{turn_total}**) {t_card} not enough Stamina to use move")
                                                    turn = 1
                                        else:
                                            if dmg['CAN_USE_MOVE']:
                                                if dmg['ENHANCE']:
                                                    enh_type = dmg['ENHANCED_TYPE']
                                                    if enh_type == 'ATK':
                                                        t_attack = round(t_attack + dmg['DMG'])
                                                    elif enh_type == 'DEF':
                                                        t_defense = round(t_defense + dmg['DMG'])
                                                    elif enh_type == 'STAM':
                                                        t_stamina = round(t_stamina + dmg['DMG'])
                                                    elif enh_type == 'HLT':
                                                        t_health = round(t_health + dmg['DMG'])
                                                    elif enh_type == 'LIFE':
                                                        t_health = round(t_health + dmg['DMG'])
                                                        o_health = round(o_health - dmg['DMG'])
                                                    elif enh_type == 'DRAIN':
                                                        t_stamina = round(t_stamina + dmg['DMG'])
                                                        o_stamina = round(o_stamina - dmg['DMG'])
                                                    elif enh_type == 'FLOG':
                                                        t_attack = round(t_attack + dmg['DMG'])
                                                        o_attack = round(o_attack - dmg['DMG'])
                                                    elif enh_type == 'WITHER':
                                                        t_defense = round(t_defense + dmg['DMG'])
                                                        o_defense = round(o_defense - dmg['DMG'])
                                                    elif enh_type == 'RAGE':
                                                        t_defense = round(t_defense - dmg['DMG'])
                                                        t_attack = round(t_attack + dmg['DMG'])
                                                    elif enh_type == 'BRACE':
                                                        t_defense = round(t_defense + dmg['DMG'])
                                                        t_attack = round(t_attack - dmg['DMG'])
                                                    elif enh_type == 'BZRK':
                                                        t_health = round(t_health - dmg['DMG'])
                                                        t_attack = round(t_attack + (dmg['DMG']))
                                                    elif enh_type == 'CRYSTAL':
                                                        t_health = round(t_health - dmg['DMG'])
                                                        t_defense = round(t_defense + dmg['DMG'])
                                                    elif enh_type == 'GROWTH':
                                                        t_max_health = round(t_max_health - dmg['DMG'])
                                                        t_defense = round(t_defense + (dmg['DMG'] * .5))
                                                        t_attack = round(t_attack + (dmg['DMG'] * .5))
                                                    elif enh_type == 'STANCE':
                                                        tempattack = dmg['DMG']
                                                        t_attack = t_defense
                                                        t_defense = tempattack
                                                    elif enh_type == 'CONFUSE':
                                                        tempattack = dmg['DMG']
                                                        o_attack = o_defense
                                                        o_defense = tempattack
                                                    elif enh_type == 'BLINK':
                                                        t_stamina = round(t_stamina - dmg['DMG'])
                                                        o_stamina = round(o_stamina + dmg['DMG'])
                                                    elif enh_type == 'SLOW':
                                                        tempstam = round(o_stamina + dmg['DMG'])
                                                        t_stamina = round(t_stamina - dmg['DMG'])
                                                        o_stamina = t_stamina
                                                        t_stamina = tempstam
                                                    elif enh_type == 'HASTE':
                                                        tempstam = round(o_stamina - dmg['DMG'])
                                                        t_stamina = round(t_stamina + dmg['DMG'])
                                                        o_stamina = t_stamina
                                                        t_stamina = tempstam
                                                    elif enh_type == 'SOULCHAIN':
                                                        t_stamina = round(dmg['DMG'])
                                                        o_stamina = t_stamina
                                                    elif enh_type == 'GAMBLE':
                                                        if mode in D_modes:
                                                            t_health = round(dmg['DMG']) * 2
                                                            o_health = round(dmg['DMG'])
                                                        elif mode in B_modes:
                                                            t_health = round(dmg['DMG']) * 4
                                                            o_health = round(dmg['DMG'])
                                                        else:
                                                            t_health = round(dmg['DMG'])
                                                            o_health = round(dmg['DMG'])
                                                    elif enh_type == 'FEAR':
                                                        t_max_health = round(t_max_health - dmg['DMG'])
                                                        o_defense = round(o_defense - (dmg['DMG'] * .5))
                                                        o_attack = round(o_attack - (dmg['DMG'] * .5))
                                                    elif enh_type == 'WAVE':
                                                        o_health = round(o_health - dmg['DMG'])
                                                    elif enh_type == 'BLAST':
                                                        o_health = round(o_health - dmg['DMG'])
                                                    elif enh_type == 'CREATION':
                                                        t_max_health = round(t_max_health + dmg['DMG'])
                                                        t_health = round(t_health + dmg['DMG'])
                                                    elif enh_type == 'DESTRUCTION':
                                                        t_max_health = round(t_max_health - dmg['DMG'])
                                                        # o_max_health = round(o_max_health - dmg['DMG'])
                                                        if t_max_health <=1:
                                                            t_max_health = 1
                                                        # if o_max_health <=1:
                                                        #     o_max_health = 1
                                                    if enh_type in Stamina_Enhancer_Check or enh_type in Time_Enhancer_Check or enh_type in Control_Enhancer_Check:
                                                        t_stamina = t_stamina
                                                    else:
                                                        t_stamina = t_stamina - int(dmg['STAMINA_USED'])
                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}**: 🦠 {dmg['MESSAGE']}")
                                                    turn_total = turn_total + 1
                                                    turn = turn_selector
                                                elif dmg['DMG'] == 0:
                                                    t_stamina = t_stamina - int(dmg['STAMINA_USED'])
                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}**: {dmg['MESSAGE']}")
                                                    if oarm_barrier_active and dmg['ELEMENT'] != psychic_element:
                                                        tarm_barrier_active=False
                                                        embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                        previous_moves.append(f"(**{turn_total}**) **{t_card}**'s 💠 Barrier Disabled!")
                                                        
                                                    turn_total = turn_total + 1
                                                    turn = turn_selector
                                                else:
                                                    if o_universe == "Naruto" and o_stamina < 10:
                                                        o_stored_damage = round(dmg['DMG'])
                                                        o_naruto_heal_buff = o_naruto_heal_buff + o_stored_damage
                                                        o_health = o_health 
                                                        previous_moves.append(f"(**{turn_total}**) **{o_card}** 🩸: Substitution Jutsu")
                                                        if not o_used_resolve:
                                                            previous_moves.append(f"(**{turn_total}**) 🩸**{o_stored_damage}** Hasirama Cells stored. 🩸**{o_naruto_heal_buff}** total stored.")
                                                        if oarm_barrier_active and dmg['ELEMENT'] != psychic_element:
                                                            tarm_barrier_active=False
                                                            embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                            previous_moves.append(f"(**{turn_total}**) **{t_card}**'s 💠 Barrier Disabled!")
                                                    elif oarm_shield_active and dmg['ELEMENT'] != dark_element:
                                                        if oshield_value > 0:
                                                            oshield_value = oshield_value -dmg['DMG']
                                                            o_health = o_health 
                                                            if oshield_value <=0:
                                                                embedVar = discord.Embed(title=f"{o_card}'s' **Shield** Shattered!", description=f"{t_card} breaks the **Shield**!", colour=0xe91e63)
                                                                previous_moves.append(f"(**{turn_total}**) **{o_card}'s** 🌐 Shield Shattered!")
                                                                if oarm_barrier_active and dmg['ELEMENT'] != psychic_element:
                                                                    tarm_barrier_active=False
                                                                    embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}**'s 💠 Barrier Disabled!")
                                                                oarm_shield_active = False
                                                            else:
                                                                embedVar = discord.Embed(title=f"{o_card} Activates **Shield** 🌐", description=f"**{t_card}** strikes the Shield 🌐\n**{oshield_value} Shield** Left!", colour=0xe91e63)
                                                                previous_moves.append(f"(**{turn_total}**) **{t_card}** strikes **{o_card}**'s Shield 🌐\n**{oshield_value} Shield** Left!")
                                                                if oarm_barrier_active and dmg['ELEMENT'] != psychic_element: 
                                                                    tarm_barrier_active=False
                                                                    embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}**'s 💠 Barrier Disabled!")

                                                    elif oarm_barrier_active and dmg['ELEMENT'] != psychic_element:
                                                        if obarrier_count >1:
                                                            o_health = o_health 
                                                            embedVar = discord.Embed(title=f"{o_card} Activates **Barrier** 💠", description=f"{t_card}'s attack **Nullified**!\n💠 {obarrier_count - 1} **Barriers** remain!", colour=0xe91e63)
                                                            previous_moves.append(f"(**{turn_total}**) **{o_card}** Activates Barrier 💠  {t_card}'s attack **Nullified**!\n💠 {obarrier_count - 1} **Barriers** remain!")
                                                            if oarm_barrier_active and dmg['ELEMENT'] != psychic_element:
                                                                tarm_barrier_active=False
                                                                embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                previous_moves.append(f"(**{turn_total}**) **{t_card}**'s 💠 Barrier Disabled!")
                                                            obarrier_count = obarrier_count - 1
                                                        elif obarrier_count==1:
                                                            embedVar = discord.Embed(title=f"{o_card}'s **Barrier** Broken!", description=f"{t_card} destroys the **Barrier**", colour=0xe91e63)
                                                            previous_moves.append(f"(**{turn_total}**) **{o_card}**'s Barrier Broken!")
                                                            obarrier_count = obarrier_count - 1
                                                            if oarm_barrier_active and dmg['ELEMENT'] != psychic_element:
                                                                tarm_barrier_active=False
                                                                embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                previous_moves.append(f"(**{turn_total}**) **{t_card}**'s 💠 Barrier Disabled!")
                                                            oarm_barrier_active = False
                                                    elif oarm_parry_active and dmg['ELEMENT'] != earth_element:
                                                        if oparry_count > 1:
                                                            oparry_damage = round(dmg['DMG'])
                                                            o_health = round(o_health - (oparry_damage * .75))
                                                            t_health = round(t_health - (oparry_damage * .25))
                                                            oparry_count = oparry_count - 1
                                                            embedVar = discord.Embed(title=f"{o_card} Activates **Parry** 🔄", description=f"{t_card} takes {round(oparry_damage * .25)}! DMG\n **{oparry_count} Parries** to go!!", colour=0xe91e63)
                                                            previous_moves.append(f"(**{turn_total}**) **{o_card}** Activates Parry 🔄 {t_card} takes {round(oparry_damage * .25)}! DMG\n **{oparry_count}  Parries** to go!!")
                                                            if oarm_barrier_active and dmg['ELEMENT'] != psychic_element:
                                                                tarm_barrier_active=False
                                                                embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                previous_moves.append(f"(**{turn_total}**) **{t_card}**'s 💠 Barrier Disabled!")
                                                            
                                                        elif oparry_count==1:
                                                            oparry_damage = round(dmg['DMG'])
                                                            o_health = round(o_health - (oparry_damage * .75))
                                                            t_health = round(t_health - (oparry_damage * .25))
                                                            embedVar = discord.Embed(title=f"{o_card} **Parry** Penetrated!!", description=f"{t_card} takes {round(oparry_damage * .25)}! DMG and breaks the **Parry**", colour=0xe91e63)
                                                            previous_moves.append(f"(**{turn_total}**) **{o_card}** Parry Penetrated! **{t_card}** takes **{round(oparry_damage * .25)}**! DMG and breaks the **Parry**")
                                                            oparry_count = oparry_count - 1
                                                            if oarm_barrier_active and dmg['ELEMENT'] != psychic_element:
                                                                tarm_barrier_active=False
                                                                embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                previous_moves.append(f"(**{turn_total}**) **{t_card}**'s 💠 Barrier Disabled!")
                                                            oarm_parry_active = False
                                                    else:
                                                        if dmg['REPEL']:
                                                            t_health = t_health - int(dmg['DMG'])
                                                        elif dmg['ABSORB']:
                                                            o_health = o_health + int(dmg['DMG'])
                                                        elif dmg['ELEMENT'] == water_element:
                                                            if tmove1_element == water_element:
                                                                t_basic_water_buff = t_basic_water_buff + 25
                                                            if tmove2_element == water_element:
                                                                t_special_water_buff = t_special_water_buff + 25
                                                            if tmove3_element == water_element:
                                                                t_ultimate_water_buff = t_ultimate_water_buff + 25
                                                            o_health = o_health - (dmg['DMG'] + t_water_buff)

                                                        elif dmg['ELEMENT'] == earth_element:
                                                            t_defense = t_defense + (dmg['DMG'] * .20)
                                                            o_health = o_health - dmg['DMG']

                                                        elif dmg['ELEMENT'] == recoil_element:
                                                            t_health = t_health - (dmg['DMG'] * .25)
                                                            o_health = o_health - dmg['DMG']

                                                        elif dmg['ELEMENT'] == time_element:
                                                            t_stamina = 0
                                                            o_health = o_health - dmg['DMG']


                                                        elif dmg['ELEMENT'] == death_element:
                                                            o_max_health = o_max_health - (dmg['DMG'] * .07)
                                                            o_health = o_health - dmg['DMG']

                                                        elif dmg['ELEMENT'] == light_element:
                                                            t_stamina = round(t_stamina + (dmg['STAMINA_USED'] / 2))
                                                            o_health = o_health - dmg['DMG']

                                                        elif dmg['ELEMENT'] == dark_element:
                                                            t_stamina = t_stamina + 5
                                                            o_stamina = o_stamina - 5
                                                            o_health = o_health - dmg['DMG']

                                                        elif dmg['ELEMENT'] == life_element:
                                                            t_health = t_health + (dmg['DMG'] * .15)
                                                            o_health = o_health - dmg['DMG']

                                                        elif dmg['ELEMENT'] == psychic_element:
                                                            o_defense = o_defense - (dmg['DMG'] * .08)
                                                            o_attack = o_attack - (dmg['DMG'] * .08)
                                                            o_health = o_health - dmg['DMG']

                                                        elif dmg['ELEMENT'] == fire_element:
                                                            t_burn_dmg = t_burn_dmg + round(dmg['DMG'] * .20)
                                                            o_health = o_health - dmg['DMG']


                                                        elif dmg['ELEMENT'] == electric_element:
                                                            t_shock_buff = t_shock_buff +  (dmg['DMG'] * .07)
                                                            o_health = o_health - dmg['DMG']

                                                        elif dmg['ELEMENT'] == poison_element:
                                                            if t_poison_dmg <= 100:
                                                                t_poison_dmg = t_poison_dmg + 8
                                                            o_health = o_health - dmg['DMG']
    
                                                        elif dmg['ELEMENT'] == ice_element:
                                                            t_ice_counter = t_ice_counter + 1
                                                            if t_ice_counter == 3:
                                                                t_freeze_enh = True
                                                                t_ice_counter = 0
                                                            o_health = o_health - dmg['DMG']

                                                        elif dmg['ELEMENT'] == bleed_element:
                                                            t_bleed_counter = t_bleed_counter + 1
                                                            if t_bleed_counter == 5:
                                                                t_bleed_hit = True
                                                                t_bleed_counter = 0
                                                            o_health = o_health - dmg['DMG']
                                                            
                                                        elif dmg['ELEMENT'] == gravity_element:
                                                            t_gravity_hit = True
                                                            o_health = o_health - dmg['DMG']
                                                        
                                                        else:
                                                            o_health = o_health - dmg['DMG']


                                                        previous_moves.append(f"(**{turn_total}**) **{t_card}**: {dmg['MESSAGE']}")
                                                        if tarm_siphon_active:
                                                            siphon_damage = (dmg['DMG'] * .10) + tsiphon_value
                                                            t_health = round(t_health + siphon_damage)
                                                            if t_health >= t_max_health:
                                                                t_health = t_max_health
                                                                previous_moves.append(f"(**{turn_total}**) **{t_card}**: 💉 Siphoned **Full Health!**")
                                                            else:
                                                                previous_moves.append(f"(**{turn_total}**) **{t_card}**: 💉 Siphoned **{round(siphon_damage)}** Health!")
                                                        if oarm_barrier_active and dmg['ELEMENT'] != psychic_element:
                                                            tarm_barrier_active=False
                                                            embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                            previous_moves.append(f"(**{turn_total}**) **{t_card}**'s 💠 Barrier Disabled!")
                                                    if o_health <= 0:
                                                        if o_final_stand == True:
                                                            if o_universe == "Dragon Ball Z":
                                                                embedVar = discord.Embed(title=f"{o_card}'s LAST STAND", description=f"{o_card} FINDS RESOLVE", colour=0xe91e63)
                                                                embedVar.add_field(name=f"**{o_card}** Resolved and continues to fight", value="All stats & stamina increased")
                                                                previous_moves.append(f"(**{turn_total}**) **{o_card}** 🩸 Transformation: Last Stand!!!")
                                                                if oarm_barrier_active and dmg['ELEMENT'] != psychic_element:
                                                                    tarm_barrier_active=False
                                                                    embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}**'s 💠 Barrier Disabled!") 
                                                                o_health = int(.75 * (o_attack + o_defense))
                                                                o_attack = o_attack + (.50 * o_attack)
                                                                o_defense = o_defense + (.50 * o_defense)
                                                                o_stamina = 100
                                                                o_used_resolve = True
                                                                o_final_stand = False
                                                                o_used_focus = True
                                                                t_stamina = t_stamina - int(dmg['STAMINA_USED'])
                                                                turn_total = turn_total + 1
                                                                turn = 0
                                                        else:
                                                            o_health = 0
                                                            t_stamina = t_stamina - int(dmg['STAMINA_USED'])
                                                            turn_total = turn_total + 1
                                                    else:
                                                        t_stamina = t_stamina - int(dmg['STAMINA_USED'])
                                                        turn_total = turn_total + 1
                                                        turn = turn_selector
                                            else:
                                                previous_moves.append(f"(**{turn_total}**) **{t_card}** not enough Stamina to use this move") 
                                                   
                                                turn = 1

                            elif mode in co_op_modes and turn != (0 or 1):
                                # Companion Turn Start
                                if turn == 2:
                                    if t_bleed_hit:
                                        t_bleed_hit = False
                                        bleed_dmg = 5 * turn_total
                                        c_health = c_health - bleed_dmg
                                        previous_moves.append(f"🩸 **{c_card}** shredded for **{round(bleed_dmg)}** bleed dmg...")

                                    if t_burn_dmg > 3:
                                        c_health = c_health - t_burn_dmg
                                        previous_moves.append(f"🔥 **{c_card}** burned for **{round(t_burn_dmg)}** dmg...")
                                    if t_freeze_enh:
                                        previous_moves.append(f"❄️ **{c_card}** has been frozen for a turn...")
                                        turn_total = turn_total + 1
                                        turn = 3
                                        continue
                                    if t_poison_dmg:
                                        c_health = c_health - t_poison_dmg
                                        previous_moves.append(f"🧪 **{c_card}** poisoned for **{t_poison_dmg}** dmg...")

                                    if c_gravity_hit:
                                        c_gravity_hit = False
                                    
                                    t_burn_dmg = round(t_burn_dmg / 2)
                                    c_freeze_enh = False

                                    if c_title_passive_type:
                                        if c_title_passive_type == "HLT":
                                            c_health = round(c_health + ((c_title_passive_value / 100) * c_health))
                                        if c_title_passive_type == "LIFE":
                                            if c_max_health != o_health:
                                                t_health = round(t_health - ((c_title_passive_value / 100) * t_health))
                                                c_health = round(c_health + ((c_title_passive_value / 100) * t_health))
                                        if c_title_passive_type == "ATK":
                                            c_attack = c_attack + c_title_passive_value
                                        if c_title_passive_type == "DEF":
                                            c_defense = c_defense + c_title_passive_value
                                        if c_title_passive_type == "STAM":
                                            if c_stamina > 15:
                                                c_stamina = c_stamina + c_title_passive_value
                                        if c_title_passive_type == "DRAIN":
                                            if c_stamina > 15:
                                                t_stamina = t_stamina - c_title_passive_value
                                                c_stamina = c_stamina + c_title_passive_value
                                        if c_title_passive_type == "FLOG":
                                            t_attack = round(t_attack - ((c_title_passive_value / 100) * t_attack))
                                            c_attack = round(c_attack + ((c_title_passive_value / 100) * t_attack))
                                        if c_title_passive_type == "WITHER":
                                            t_defense = round(t_defense - ((c_title_passive_value / 100) * t_defense))
                                            c_defense = round(c_defense + ((c_title_passive_value / 100) * t_defense))
                                        if c_title_passive_type == "RAGE":
                                            c_defense = round(c_defense - ((c_title_passive_value / 100) * c_defense))
                                            c_attack = round(c_attack + ((c_title_passive_value / 100) * c_defense))
                                        if c_title_passive_type == "BRACE":
                                            c_defense = round(c_defense + ((c_title_passive_value / 100) * c_attack))
                                            c_attack = round(c_attack - ((c_title_passive_value / 100) * c_attack))
                                        if c_title_passive_type == "BZRK":
                                            c_health = round(c_health - ((c_title_passive_value / 100) * c_health))
                                            c_attack = round(c_attack + ((c_title_passive_value / 100) * c_health))
                                        if c_title_passive_type == "CRYSTAL":
                                            c_health = c_health - c_title_passive_value
                                            c_defense = c_defense + c_title_passive_value
                                        if c_title_passive_type == "FEAR":
                                            c_health = c_health - c_title_passive_value
                                            t_defense = t_defense - (c_title_passive_value / 2)
                                            t_attack = t_attack - (c_title_passive_value / 2)
                                        if c_title_passive_type == "GROWTH":
                                            c_health = c_health - c_title_passive_value
                                            c_defense = c_defense + (c_title_passive_value / 2)
                                            c_attack = c_attack + (c_title_passive_value / 2)
                                        if c_title_passive_type == "SLOW":
                                            if turn_total != 0:
                                                turn_total = turn_total - 1
                                        if c_title_passive_type == "HASTE":
                                            turn_total = turn_total + 1
                                        if c_title_passive_type == "STANCE":
                                            tempattack = c_attack + c_title_passive_value
                                            c_attack = c_defense
                                            c_defense = tempattack
                                        if c_title_passive_type == "CONFUSE":
                                            tempattack = c_attack - c_title_passive_value
                                            t_attack = c_defense
                                            t_defense = tempattack
                                        if c_title_passive_type == "BLINK":
                                            c_stamina = c_stamina + c_title_passive_value
                                            t_stamina = t_stamina - c_title_passive_value
                 
                                    if t_card_passive_type:
                                        t_value_for_passive = t_card_tier * .5
                                        t_flat_for_passive = 10 * (t_card_tier * .5)
                                        t_stam_for_passive = 5 * (t_card_tier * .5)
                                        if t_card_passive_type == "HLT":
                                            t_health = round(round(t_health + ((t_value_for_passive / 100) * t_health)))
                                        if t_card_passive_type == "LIFE":
                                            if t_mac_health != t_health:
                                                c_health = round(c_health - ((t_value_for_passive / 100) * c_health))
                                                t_health = round(t_health + ((t_value_for_passive / 100) * c_health))
                                        if t_card_passive_type == "ATK":
                                            t_attack = t_attack + t_flat_for_passive
                                        if t_card_passive_type == "DEF":
                                            t_defense = t_defense + t_flat_for_passive
                                        if t_card_passive_type == "STAM":
                                            if t_stamina > 15:
                                                t_stamina = t_stamina + t_stam_for_passive
                                        if t_card_passive_type == "DRAIN":
                                            if t_stamina > 15:
                                                c_stamina = c_stamina - t_stam_for_passive
                                                t_stamina = t_stamina + t_stam_for_passive
                                        if t_card_passive_type == "FLOG":
                                            c_attack = round(c_attack - ((t_value_for_passive / 100) * c_attack))
                                            t_attack = round(t_attack + ((t_value_for_passive / 100) * c_attack))
                                        if t_card_passive_type == "WITHER":
                                            c_defense = round(c_defense - ((t_value_for_passive / 100) * c_defense))
                                            t_defense = round(t_defense + ((t_value_for_passive / 100) * c_defense))
                                        if t_card_passive_type == "RAGE":
                                            t_defense = round(t_defense - ((t_value_for_passive / 100) * t_defense))
                                            t_attack = round(t_attack + ((t_value_for_passive / 100) * t_defense))
                                        if t_card_passive_type == "BRACE":
                                            t_defense = round(t_defense + ((t_value_for_passive / 100) * t_attack))
                                            t_attack = round(t_attack - ((t_value_for_passive / 100) * t_attack))
                                        if t_card_passive_type == "BZRK":
                                            t_health = round(t_health - ((t_value_for_passive / 100) * t_health))
                                            t_attack = round(t_attack + ((t_value_for_passive / 100) * t_health))
                                        if t_card_passive_type == "CRYSTAL":
                                            t_health = round(t_health - ((t_value_for_passive / 100) * t_health))
                                            t_defense = round(t_defense + ((t_value_for_passive / 100) * t_health))
                                        if t_card_passive_type == "FEAR":
                                            t_health = t_health - t_flat_for_passive
                                            c_defense = c_defense - (t_flat_for_passive / 2)
                                            c_attack = c_attack - (t_flat_for_passive / 2)
                                        if t_card_passive_type == "GROWTH":
                                            t_health = t_health - t_flat_for_passive
                                            t_defense = t_defense + (t_flat_for_passive / 2)
                                            t_attack = t_attack + (t_flat_for_passive / 2)
                                        if t_card_passive_type == "SLOW":
                                            if turn_total != 0:
                                                turn_total = turn_total - 1
                                        if t_card_passive_type == "HASTE":
                                            turn_total = turn_total + 1
                                        if t_card_passive_type == "STANCE":
                                            tempattack = t_attack + t_flat_for_passive
                                            t_attack = t_defense
                                            t_defense = tempattack
                                        if t_card_passive_type == "CONFUSE":
                                            tempattack = c_attack - t_flat_for_passive
                                            c_attack = c_defense
                                            c_defense = tempattack
                                        if t_card_passive_type == "BLINK":
                                            t_stamina = t_stamina - t_stam_for_passive
                                            c_stamina = c_stamina + t_stam_for_passive
                          
                                    # await asyncio.sleep(2)
                                    if c_block_used == True:
                                        c_defense = int(c_defense / 2)
                                        c_block_used = False
                                    if c_attack <= 25:
                                        c_attack = 25
                                    if c_defense <= 30:
                                        c_defense = 30
                                    if c_attack > 9999:
                                        c_attack = 9999
                                    if c_defense > 9999:
                                        c_defense = 9999
                                    if c_health >= c_max_health:
                                        c_health = c_max_health
                                    # Tutorial Instructions
                                    if turn_total == 0 and botActive:
                                        embedVar = discord.Embed(title=f"MATCH START",
                                                                description=f"`{c_card} Says:`\n{c_greeting_description}",
                                                                colour=0xe91e63)
                                        await private_channel.send(embed=embedVar)

                                    if c_health <= (c_max_health * .25):
                                        embed_color_c = 0xe74c3c
                                        if c_chainsaw == True:
                                            if c_atk_chainsaw == False:
                                                c_atk_chainsaw = True
                                                c_chainsaw = False
                                                c_defense = c_defense * 2
                                                c_attack = c_attack * 2
                                                c_max_health = c_max_health * 2
                                                embedVar = discord.Embed(title=f"{c_card}'s Devilization",
                                                                        description=f"**{c_card}** Doubles ATK, DEF, and MAX HEALTH",
                                                                        colour=0xe91e63)
                                                await private_channel.send(embed=embedVar)

                                    elif c_health <= (c_max_health * .50):
                                        embed_color_c = 0xe67e22
                                        if c_chainsaw == True:
                                            if c_atk_chainsaw == False:
                                                c_atk_chainsaw = True
                                                c_chainsaw = False
                                                c_defense = c_defense * 2
                                                c_attack = c_attack * 2
                                                c_max_health = c_max_health * 2
                                                embedVar = discord.Embed(title=f"{c_card}'s Devilization",
                                                                        description=f"**{c_card}** Doubles ATK, DEF, and MAX HEALTH",
                                                                        colour=0xe91e63)
                                                await private_channel.send(embed=embedVar)
                                    elif c_health <= (c_max_health * .75):
                                        embed_color_c = 0xf1c40f

                                    else:
                                        embed_color_c = 0x2ecc71

                                    if c_stamina < 10:
                                        c_pet_used = False
                                        c_focus_count = c_focus_count + 1
                                        # fortitude or luck is based on health
                                        fortitude = 0.0
                                        low = c_health - (c_health * .90)
                                        if low <=0:
                                            low = 1
                                        high = c_health - (c_health * .80)
                                        fortitude = round(random.randint(int(low), int(high)))

                                        c_stamina = c_focus
                                        c_healthcalc = round(((c_focus * .40) + (fortitude * 1)) / 2)
                                        c_attackcalc = round(.20 * ((c_focus * .15) + round(fortitude * 1)))
                                        c_defensecalc = round(.20 * ((c_focus * .15) + round(fortitude * 1)))
                                        # check if user is at max health and sets messages and focus health value
                                        c_newhealth = 0
                                        healmessage = ""
                                        messagenumber = 0
                                        if c_title_passive_type:
                                            if c_title_passive_type == "GAMBLE":
                                                c_healthcalc = c_title_passive_value
                                            if c_title_passive_type == "SOULCHAIN":
                                                c_stamina = c_title_passive_value
                                                t_stamina = c_title_passive_value
                                                o_stamina = c_title_passive_value


                                        if o_title_passive_type:
                                            if o_title_passive_type == "GAMBLE":
                                                c_healthcalc = o_title_passive_value
                                        
                                        if t_title_passive_type:
                                            if t_title_passive_type == "GAMBLE":
                                                c_healthcalc = t_title_passive_value


                                        if c_universe == "Crown Rift Madness":
                                            healmessage = "yet inner **Madness** drags on..."
                                            messagenumber = 3
                                        else:
                                            if c_health <= c_max_health:
                                                c_newhealth = c_health + c_healthcalc
                                                if c_newhealth > c_max_health:
                                                    healmessage = "the injuries dissapeared!"
                                                    messagenumber = 1
                                                    c_health = c_max_health
                                                else:
                                                    healmessage = "regained some vitality."
                                                    messagenumber = 2
                                                    c_health = c_newhealth
                                            else:
                                                healmessage = f"**{t_card}**'s blows don't appear to have any effect!"
                                                messagenumber = 0
                                        if not c_used_resolve:
                                            c_attack = c_attack + c_attackcalc
                                            c_defense = c_defense + c_defensecalc
                                        c_used_focus = True

                                        embedVar = discord.Embed(title=f"{c_card} FOCUSED",
                                                                description=f"**{c_card} says**\n{c_focus_description}",
                                                                colour=0xe91e63)
                                        embedVar.add_field(name=f"{c_card} focused and {healmessage}",
                                                        value="All stats & stamina increased")
                                        #await private_channel.send(embed=embedVar)
                                        previous_moves.append(f"(**{turn_total}**) 🌀 **{c_card}** focused and {healmessage}")
                                        if not c_used_resolve and c_used_focus and c_universe == "Digimon":  # Digimon Universal Trait
                                            embedVar = discord.Embed(title=f"{c_card} STRENGTHENED RESOLVE :zap:",
                                                                    description=f"**{c_card} says**\n{c_resolve_description}",
                                                                    colour=0xe91e63)
                                            embedVar.add_field(name=f"Transformation: Digivolve", value="On Focus you Resolve.")
                                            #await private_channel.send(embed=embedVar)
                                            # fortitude or luck is based on health
                                            fortitude = 0.0
                                            low = o_health - (o_health * .75)
                                            high = o_health - (o_health * .66)
                                            fortitude = round(random.randint(int(low), int(high)))
                                            # Resolve Scaling
                                            c_resolve_health = round(fortitude + (.5 * c_resolve))
                                            c_resolve_attack = round((.30 * c_defense) * (c_resolve / (.50 * c_defense)))
                                            c_resolve_defense = round((.30 * c_defense) * (c_resolve / (.50 * c_defense)))

                                            c_stamina = c_stamina + c_resolve
                                            c_health = c_health + c_resolve_health
                                            c_attack = round(c_attack + c_resolve_attack)
                                            c_defense = round(c_defense - c_resolve_defense)
                                            c_used_resolve = True
                                            c_pet_used = False
                                            if turn_total <=5:
                                                c_attack = round(c_attack * 2)
                                                c_defense = round(c_defense * 2 )
                                                previous_moves.append(f"(**{turn_total}**) **{c_card}** 🩸 Transformation: Mega Digivolution!!!")
                                            else:
                                                previous_moves.append(f"(**{turn_total}**) **{c_card}** 🩸 Transformation: Digivolve")


                                        elif c_universe == "League Of Legends":
                                            embedVar = discord.Embed(title=f"Turret Shot hits {t_card} for **{60 + turn_total}** Damage 💥",
                                                                    colour=0xe91e63)
                                            #await private_channel.send(embed=embedVar)
                                            previous_moves.append(f"(**{turn_total}**) 🩸 Turret Shot hits **{t_card}** for **{60 + turn_total}** Damage 💥")
                                            t_health = round(t_health - (60 + turn_total))

                                        elif c_universe == "Dragon Ball Z":
                                            c_health = c_health + t_stamina + turn_total
                                            previous_moves.append(f"(**{turn_total}**) 🩸 Saiyan Spirit... You heal for **{t_stamina + turn_total}** ❤️")


                                        elif c_universe == "Solo Leveling":
                                            embedVar = discord.Embed(
                                                title=f"Ruler's Authority... {t_card} loses **{30 + turn_total}** 🛡️ 🔻",
                                                colour=0xe91e63)
                                            #await private_channel.send(embed=embedVar)
                                            previous_moves.append(f"(**{turn_total}**) 🩸 Ruler's Authority... {t_card} loses **{30 + turn_total}** 🛡️ 🔻")
                                            t_defense = round(t_defense - (30 + turn_total))

                                        elif c_universe == "Black Clover":
                                            embedVar = discord.Embed(title=f"Mana Zone! {c_card} Increased Stamina 🌀",
                                                                    colour=0xe91e63)
                                            #await private_channel.send(embed=embedVar)
                                            previous_moves.append(f"(**{turn_total}**) 🩸 Mana Zone! **{c_card}** Increased AP & Stamina 🌀")
                                            c_stamina = 100
                                            ccard_lvl_ap_buff = ccard_lvl_ap_buff + 30
                                        elif c_universe == "Death Note":
                                            if turn_total >= 50:
                                                embedVar = discord.Embed(title=f"{t_card}'s' Scheduled Death 📓",
                                                                        description=f"**{c_card} says**\n**Delete**",
                                                                        colour=0xe91e63)
                                                embedVar.add_field(name=f"{t_card} had a heart attack and died",
                                                                value=f"Death....")
                                                #await private_channel.send(embed=embedVar)
                                                previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 had a heart attack and died")
                                                t_health = 0

                                        if t_universe == "One Punch Man":
                                            embedVar = discord.Embed(
                                                title=f"Hero Reinforcements! **{t_card}**  Increased Health & Max Health ❤️",
                                                colour=0xe91e63)
                                            #await private_channel.send(embed=embedVar)
                                            previous_moves.append(f"(**{turn_total}**) Hero Reinforcements! **{t_card}** Increased Health!  ❤️")
                                            t_health = round(t_health + 100)
                                            t_max_health = round(t_max_health + 100)

                                        elif t_universe == "7ds":
                                            embedVar = discord.Embed(
                                                title=f"Power Of Friendship! 🧬 **{tpet_name}** Rested, **{t_card}** Increased Stamina 🌀", colour=0xe91e63)
                                            #await private_channel.send(embed=embedVar)
                                            previous_moves.append(f"(**{turn_total}**) 🩸 Power Of Friendship! 🧬 **{tpet_name}** Rested, **{t_card}** Increased Stamina 🌀")
                                            t_stamina = t_stamina + 60
                                            t_pet_used = False

                                        elif t_universe == "Souls":
                                            embedVar = discord.Embed(
                                                title=f"Combo Recognition! **{t_card}** Increased Attack by **{60 + turn_total}** 🔺 ",
                                                colour=0xe91e63)
                                            #await private_channel.send(embed=embedVar)
                                            previous_moves.append(f"(**{turn_total}**) 🩸 Combo Recognition! **{o_card}** Increased Attack by **{60 + turn_total}** 🔺")
                                            t_attack = round(t_attack + (60 + turn_total))

                                        else:
                                            turn_total = turn_total + 1
                                            if c_universe != "Crown Rift Madness":
                                                turn = 3
                                            else:
                                                turn = 2
                                        turn_total = turn_total + 1
                                        if c_universe != "Crown Rift Madness":
                                            turn = 3
                                        else:
                                            turn = 2
                                    else:
                                        if mode in ai_co_op_modes:
                                            # UNIVERSE CARD
                                            cap1 = list(c_1.values())[0] + ccard_lvl_ap_buff + c_shock_buff + c_basic_water_buff
                                            cap2 = list(c_2.values())[0] + ccard_lvl_ap_buff + c_shock_buff + c_special_water_buff
                                            cap3 = list(c_3.values())[0] + ccard_lvl_ap_buff + cdemon_slayer_buff + c_shock_buff + c_ultimate_water_buff
                                            cenh1 = list(c_enhancer.values())[0]
                                            cenh_name = list(c_enhancer.values())[2]
                                            cpet_enh_name = list(cpet_move.values())[2]
                                            cpet_msg_on_resolve = ""
                                            if c_universe == "Souls" and c_used_resolve:
                                                companion_card = showcard(c, carm,c_max_health, c_health, c_max_stamina, c_stamina,
                                                                    c_used_resolve, ctitle, c_used_focus, c_attack, c_defense,
                                                                    turn_total, cap2, cap3, cap3, cenh1, cenh_name, ccard_lvl, t_defense)
                                            else:
                                                companion_card = showcard(c, carm,c_max_health, c_health, c_max_stamina, c_stamina,
                                                                        c_used_resolve, ctitle, c_used_focus, c_attack, c_defense,
                                                                        turn_total, cap1, cap2, cap3, cenh1, cenh_name, ccard_lvl, t_defense)

                                            if c_universe == "Solo Leveling" and not c_swapped:
                                                if temp_tarm_shield_active and not tarm_shield_active:
                                                    if carm_shield_active:
                                                        cshield_value = cshield_value + temp_tshield_value
                                                        previous_moves.append(f"(**{turn_total}**) **{c_card}** 🩸 **ARISE!** *{tarm_name}* is now yours")
                                                        c_swapped = True
                                                    elif not carm_shield_active:
                                                        carm_shield_active = True
                                                        cshield_value = temp_tshield_value
                                                        previous_moves.append(f"(**{turn_total}**) **{c_card}** 🩸 **ARISE!** *{tarm_name}* is now yours")
                                                        c_swapped = True
                                                elif temp_tarm_barrier_active and not tarm_barrier_active:
                                                    if carm_barrier_active:
                                                        cbarrier_count = cbarrier_count + temp_tbarrier_count
                                                        previous_moves.append(f"(**{turn_total}**) **{c_card}** 🩸 **ARISE!** *{tarm_name}* is now yours")
                                                        c_swapped = True
                                                    elif not carm_barrier_active:
                                                        carm_barrier_active = True
                                                        cbarrier_count = temp_tbarrier_count
                                                        previous_moves.append(f"(**{turn_total}**) **{c_card}** 🩸 **ARISE!** *{tarm_name}* is now yours")
                                                        c_swapped = True
                                                elif temp_tarm_parry_active and not tarm_parry_active:
                                                    if carm_parry_active:
                                                        cparry_count = cparry_count + temp_tparry_count
                                                        previous_moves.append(f"(**{turn_total}**) **{c_card}** 🩸 **ARISE!** *{tarm_name}* is now yours")
                                                        c_swapped = True
                                                    elif not carm_parry_active:
                                                        carm_parry_active = True
                                                        cparry_count = temp_tparry_count
                                                        previous_moves.append(f"(**{turn_total}**) **{c_card}** 🩸 **ARISE!** *{tarm_name}* is now yours")
                                                        c_swapped = True

                                            #await private_channel.send(file=companion_card)
                                            tembedVar = discord.Embed(title=f"_Turn_ {turn_total}", description=textwrap.dedent(f"""\
                                            {previous_moves_into_embed}
                                            """), color=0xe74c3c)
                                            tembedVar.set_image(url="attachment://image.png")
                                            await battle_msg.delete(delay=None)
                                            # await asyncio.sleep(2)
                                            battle_msg = await private_channel.send(embed=tembedVar, file=companion_card)
                                            aiMove = 0

                                            if c_used_resolve and not c_pet_used:
                                                aiMove = 6
                                            elif t_enhancer['TYPE'] == "WAVE" and (turn_total % 10 == 0 or turn_total == 0 or turn_total == 1):
                                                if t_stamina >=20:
                                                    aiMove =4
                                            elif carm_barrier_active: #Ai Barrier Checks
                                                if t_stamina >=20: #Stamina Check For Enhancer
                                                    aiMove = await ai_enhancer_moves(turn_total,c_used_focus,c_used_resolve,c_pet_used,c_stamina,
                                                                            c_enhancer['TYPE'],c_health,c_max_health,c_attack,
                                                                            c_defense,t_stamina,t_attack,t_defense, o_health)
                                                else:
                                                    aiMove = 1
                                            elif t_health <=350: #Killing Blow
                                                if c_enhancer['TYPE'] == "BLAST":
                                                    if c_stamina >=20:
                                                        aiMove =4
                                                    else:
                                                        aiMove =1
                                                elif c_enhancer['TYPE'] == "WAVE" and (turn_total % 10 == 0 or turn_total == 0 or turn_total == 1):
                                                    if c_stamina >=20:
                                                        aiMove =4
                                                    else:
                                                        aiMove =1
                                                else:
                                                    if c_stamina >= 90:
                                                        aiMove = 1
                                                    elif c_stamina >= 80:
                                                        aiMove =3
                                                    elif c_stamina >=30:
                                                        aiMove=2
                                                    else:
                                                        aiMove=1
                                            elif t_stamina < 10:
                                                aiMove = 1
                                            elif c_health <= (.50 * c_max_health) and c_used_resolve == False and c_used_focus:
                                                aiMove = 5
                                            elif c_stamina >= 160 and (c_health >= t_health):
                                                if o_health <= t_health:
                                                    if cmove_enhanced_text in Healer_Enhancer_Check:
                                                        aiMove = 8
                                                    else:
                                                        aiMove = 3
                                                else:
                                                    aiMove = 3
                                            elif c_stamina >= 160:
                                                aiMove = 3
                                            elif c_stamina >= 150 and (c_health >= t_health):
                                                aiMove = 1
                                            elif c_stamina >= 150:
                                                aiMove = 1
                                            elif c_stamina >= 140 and (c_health >= t_health):
                                                aiMove = 1
                                            elif c_stamina >= 140:
                                                aiMove = 3
                                            elif c_stamina >= 130 and (c_health >= t_health):
                                                aiMove = 1
                                            elif c_stamina >= 130:
                                                aiMove = 3
                                            elif c_stamina >= 120 and (c_health >= t_health):
                                                if o_health <= t_health:
                                                    if cmove_enhanced_text in Healer_Enhancer_Check:
                                                        aiMove = 8
                                                    else:
                                                        aiMove = 2
                                                else:
                                                    aiMove = 2
                                            elif c_stamina >= 120:
                                                aiMove = 3
                                            elif c_stamina >= 110 and (c_health >= t_health):
                                                aiMove = 1
                                            elif c_stamina >= 110:
                                                aiMove = 2
                                            elif c_stamina >= 100 and (c_health >= t_health):
                                                if o_health <= t_health:
                                                    if cmove_enhanced_text in Healer_Enhancer_Check:
                                                        aiMove = 8
                                                    else:
                                                        aiMove = 8
                                                else:
                                                    if cmove_enhanced_text in Healer_Enhancer_Check:
                                                        aiMove = 8
                                                    else:
                                                        aiMove = 2
                                            elif c_stamina >= 100:
                                                if c_health >= o_health:
                                                    aiMove = 8
                                                else:
                                                    aiMove = 1
                                            elif c_stamina >= 90 and (c_health >= t_health):
                                                if o_health <= t_health:
                                                    if c_health >= o_health:
                                                        aiMove = 7
                                                    else:
                                                        if cmove_enhanced_text in Healer_Enhancer_Check:
                                                            aiMove = 8
                                                        else:
                                                            aiMove = 2
                                                else:
                                                    if c_health >= o_health:
                                                        aiMove = 7
                                                    else:
                                                        aiMove = 1
                                            elif c_stamina >= 90:
                                                if c_health >= o_health:
                                                    aiMove = 8
                                                else:
                                                    if cmove_enhanced_text in Healer_Enhancer_Check or cmove_enhanced_text in Support_Enhancer_Check:
                                                        aiMove = 8
                                                    else:
                                                        aiMove = 2
                                            elif c_stamina >= 80 and (c_health >= t_health):
                                                if o_health <= t_health:
                                                    if cmove_enhanced_text in Healer_Enhancer_Check:
                                                        aiMove = 8
                                                    else:
                                                        aiMove = 2
                                                else:
                                                    aiMove = 1
                                            elif c_stamina >= 80:
                                                if o_health <= t_health:
                                                    if cmove_enhanced_text in Healer_Enhancer_Check:
                                                        aiMove = 8
                                                    else:
                                                        aiMove = 2
                                                else:
                                                    aiMove = 3
                                            elif c_stamina >= 70 and (c_health >= t_health):
                                                if cmove_enhanced_text in Healer_Enhancer_Check:
                                                    aiMove = 8
                                                else:
                                                    aiMove = 2
                                            elif c_stamina >= 70:
                                                aiMove = 1
                                            elif c_stamina >= 60 and (c_health >= t_health):
                                                if c_used_resolve == False and c_used_focus:
                                                    aiMove = 5
                                                elif c_used_focus == False:
                                                    aiMove = 2
                                                else:
                                                    aiMove = 1
                                            elif c_stamina >= 60:
                                                if c_used_resolve == False and c_used_focus:
                                                    aiMove = 5
                                                elif c_used_focus == False:
                                                    aiMove = 2
                                                else:
                                                    aiMove = 1
                                            elif c_stamina >= 50 and (c_health >= t_health):
                                                if c_stamina >= o_stamina:
                                                    if c_health >= o_health:
                                                        aiMove = 8
                                                    else:
                                                        if cmove_enhanced_text in Healer_Enhancer_Check or cmove_enhanced_text in Support_Enhancer_Check:
                                                            aiMove = 8
                                                        else:
                                                            aiMove = 2
                                                else:
                                                    if c_health >= o_health:
                                                        aiMove = 8
                                                    else:
                                                        aiMove = 1
                                            elif c_stamina >= 50:
                                                aiMove = 2
                                            elif c_stamina >= 40 and (c_health >= t_health):
                                                if o_health <= t_health:
                                                    if cmove_enhanced_text in Healer_Enhancer_Check or cmove_enhanced_text in Support_Enhancer_Check:
                                                        aiMove = 8
                                                    else:
                                                        aiMove = 2
                                                else:
                                                    aiMove = 1
                                            elif c_stamina >= 40:
                                                aiMove = 2
                                            elif c_stamina >= 30 and (c_health >= t_health):
                                                if o_health <= t_health:
                                                    if cmove_enhanced_text in Healer_Enhancer_Check or cmove_enhanced_text in Support_Enhancer_Check:
                                                        aiMove = 8
                                                    else:
                                                        aiMove = 2
                                                else:
                                                    aiMove = await ai_enhancer_moves(turn_total,c_used_focus,c_used_resolve,c_pet_used,c_stamina,
                                                                            c_enhancer['TYPE'],c_health,c_max_health,c_attack,
                                                                            c_defense,t_stamina,t_attack,t_defense, t_health)
                                            elif c_stamina >= 30:
                                                aiMove = 2
                                            elif c_stamina >= 20 and (c_health >= t_health):
                                                if c_health >= o_health:
                                                    aiMove = 8
                                                else:
                                                    aiMove = 1
                                            elif c_stamina >= 20:
                                                if c_health >= o_health:
                                                    aiMove = 8
                                                else:
                                                    if cmove_enhanced_text in Healer_Enhancer_Check or cmove_enhanced_text in Support_Enhancer_Check:
                                                        aiMove = 8
                                                    else:
                                                        aiMove = 1
                                            elif c_stamina >= 10:
                                                aiMove = 1
                                            else:
                                                aiMove = 0

                                            # calculate data based on selected move
                                            if aiMove == 0:
                                                c_health = 0

                                                if private_channel.guild:
                                                    await private_channel.send(f"{user2.mention} has fled the battle...")
                                                    previous_moves.append(f"(**{turn_total}**) 💨 **{c_card}** Fled...")
                                                    # await discord.TextChannel.delete(private_channel, reason=None)
                                                else:

                                                    await private_channel.send(f"You fled the battle...")
                                                    previous_moves.append(f"(**{turn_total}**) 💨 **{c_card}** Fled...")
                                                return
                                            if aiMove == 1:
                                                if c_universe == "Souls" and c_used_resolve:
                                                    dmg = damage_cal(t_for_c_opponent_affinities, special_attack_name, cmove2_element, c_universe, c_card, c_2, c_attack, c_defense, t_defense,
                                                                c_stamina, c_enhancer_used, c_health, t_health, t_stamina,
                                                                c_max_health, t_attack, c_special_move_description, turn_total,
                                                                ccard_lvl_ap_buff, c_1)
                                                else:
                                                    dmg = damage_cal(t_for_c_opponent_affinities, basic_attack_name, cmove1_element, c_universe, c_card, c_1, c_attack, c_defense, t_defense,
                                                                    c_stamina, c_enhancer_used, c_health, t_health, t_stamina,
                                                                    c_max_health, t_attack, c_special_move_description, turn_total,
                                                                    ccard_lvl_ap_buff, None)
                                            elif aiMove == 2:
                                                if c_universe == "Souls" and c_used_resolve:
                                                    dmg = damage_cal(t_for_c_opponent_affinities, ultimate_attack_name, cmove3_element, c_universe, c_card, c_3, c_attack, c_defense, t_defense,
                                                                c_stamina, c_enhancer_used, c_health, t_health, t_stamina,
                                                                c_max_health, t_attack, c_special_move_description, turn_total,
                                                                ccard_lvl_ap_buff, c_2)
                                                else:
                                                    dmg = damage_cal(t_for_c_opponent_affinities, special_attack_name, cmove2_element, c_universe, c_card, c_2, c_attack, c_defense, t_defense,
                                                                    c_stamina, c_enhancer_used, c_health, t_health, t_stamina,
                                                                    c_max_health, t_attack, c_special_move_description, turn_total,
                                                                    ccard_lvl_ap_buff, None)
                                            elif aiMove == 3:

                                                dmg = damage_cal(t_for_c_opponent_affinities, ultimate_attack_name, cmove3_element, c_universe, c_card, c_3, c_attack, c_defense, t_defense,
                                                                c_stamina, c_enhancer_used, c_health, t_health, t_stamina,
                                                                c_max_health, t_attack, c_special_move_description, turn_total,
                                                                ccard_lvl_ap_buff, None)
                                                if c_gif != "N/A" and not operformance:
                                                    await battle_msg.delete(delay=None)
                                                    # await asyncio.sleep(1)
                                                    battle_msg = await private_channel.send(f"{c_gif}")
                                                    await asyncio.sleep(2)
                                            elif aiMove == 4:
                                                c_enhancer_used = True

                                                dmg = damage_cal(t_for_c_opponent_affinities, basic_attack_name, cmove1_element, c_universe, c_card, c_enhancer, c_attack, c_defense, t_defense,
                                                                c_stamina, c_enhancer_used, c_health, t_health, t_stamina,
                                                                c_max_health, t_attack, c_special_move_description, turn_total,
                                                                ccard_lvl_ap_buff, None)
                                                c_enhancer_used = False
                                            elif aiMove == 5:
                                                # Resolve Check and Calculation
                                                if not c_used_resolve and c_used_focus:
                                                    if c_universe == "My Hero Academia":  # My Hero Trait
                                                        # fortitude or luck is based on health
                                                        fortitude = 0.0
                                                        low = c_health - (c_health * .75)
                                                        high = c_health - (c_health * .66)
                                                        fortitude = round(random.randint(int(low), int(high)))
                                                        # Resolve Scaling
                                                        c_resolve_health = round(fortitude + (.5 * c_resolve))
                                                        c_resolve_attack = round(
                                                            (.30 * c_defense) * (c_resolve / (.50 * c_defense)))
                                                        c_resolve_defense = round(
                                                            (.30 * c_defense) * (c_resolve / (.50 * c_defense)))
                                                        ccard_lvl_ap_buff = ccard_lvl_ap_buff + 80 + turn_total

                                                        c_stamina = c_stamina + c_resolve
                                                        c_health = c_health + c_resolve_health
                                                        c_attack = round(c_attack + c_resolve_attack)
                                                        c_defense = round(c_defense - c_resolve_defense)
                                                        c_used_resolve = True
                                                        c_pet_used = False
                                                        embedVar = discord.Embed(title=f"{c_card} PLUS ULTRAAA",
                                                                                description=f"**{c_card} says**\n{c_resolve_description}",
                                                                                colour=0xe91e63)
                                                        embedVar.add_field(name=f"Transformation: Plus Ultra",
                                                                        value="You do not lose a turn after you Resolve.")
                                                        #await private_channel.send(embed=embedVar)
                                                        previous_moves.append(f"(**{turn_total}**) **{c_card}** 🩸 Resolved: PLUS ULTRA!")

                                                        turn_total = turn_total + 1
                                                        turn = 2

                                                    elif c_universe == "Demon Slayer": 
                                                        # fortitude or luck is based on health
                                                        fortitude = 0.0
                                                        low = c_health - (c_health * .75)
                                                        high = c_health - (c_health * .66)
                                                        fortitude = round(random.randint(int(low), int(high)))
                                                        # Resolve Scaling
                                                        c_resolve_health = round(fortitude + (.5 * c_resolve))
                                                        c_resolve_attack = round(
                                                            (.30 * c_defense) * (c_resolve / (.50 * c_defense)))
                                                        c_resolve_defense = round(
                                                            (.30 * c_defense) * (c_resolve / (.50 * c_defense)))
                                                        

                                                        c_stamina = c_stamina + c_resolve
                                                        c_health = c_health + c_resolve_health
                                                        c_attack = round(c_attack + c_resolve_attack)
                                                        c_defense = round(c_defense - c_resolve_defense)
                                                        if t_attack > c_attack:
                                                            c_attack = t_attack
                                                        if t_defense > c_defense:
                                                            c_defense = t_defense
                                                        c_used_resolve = True
                                                        c_pet_used = False
                                                        embedVar = discord.Embed(title=f"{c_card} begins Total Concentration Breathing",
                                                                                description=f"**{c_card} says**\n{c_resolve_description}",
                                                                                colour=0xe91e63)
                                                        previous_moves.append(f"(**{turn_total}**) **{c_card}** 🩸 Resolved: Total Concentration Breathing!")
                                                        
                                                        turn_total = turn_total + 1
                                                        turn = 0

                                                    elif c_universe == "Naruto": 
                                                        # fortitude or luck is based on health
                                                        fortitude = 0.0
                                                        low = c_health - (c_health * .75)
                                                        high = c_health - (c_health * .66)
                                                        fortitude = round(random.randint(int(low), int(high)))
                                                        # Resolve Scaling
                                                        c_resolve_health = round(fortitude + (.5 * c_resolve))
                                                        c_resolve_attack = round(
                                                            (.30 * c_defense) * (c_resolve / (.50 * c_defense)))
                                                        c_resolve_defense = round(
                                                            (.30 * c_defense) * (c_resolve / (.50 * c_defense)))
                                                        

                                                        c_stamina = c_stamina + c_resolve
                                                        c_health = c_health + c_resolve_health
                                                        c_health = c_health + c_naruto_heal_buff
                                                        c_attack = round(c_attack + c_resolve_attack)
                                                        c_defense = round(c_defense - c_resolve_defense)

                                                        c_used_resolve = True
                                                        c_pet_used = False
                                                        embedVar = discord.Embed(title=f"{c_card} Heals from Hashirama Cells",
                                                                                description=f"**{c_card} says**\n{c_resolve_description}",
                                                                                colour=0xe91e63)
                                                        previous_moves.append(f"(**{turn_total}**) **{c_card}** 🩸 Resolved: Hashirama Cells heal you for **{c_naruto_heal_buff}**!")
                                                        
                                                        turn_total = turn_total + 1
                                                        turn = 0


                                                    elif c_universe == "Attack On Titan":
                                                        # fortitude or luck is based on health
                                                        fortitude = 0.0
                                                        low = c_health - (c_health * .75)
                                                        high = c_health - (c_health * .66)
                                                        fortitude = round(random.randint(int(low), int(high)))
                                                        # Resolve Scaling
                                                        c_resolve_health = round(fortitude + (.5 * c_resolve))
                                                        c_resolve_attack = round(
                                                            (.30 * c_defense) * (c_resolve / (.50 * c_defense)))
                                                        c_resolve_defense = round(
                                                            (.30 * c_defense) * (c_resolve / (.50 * c_defense)))

                                                        c_stamina = c_stamina + c_resolve
                                                        c_health = c_health + c_resolve_health
                                                        c_attack = round(c_attack + c_resolve_attack)
                                                        c_defense = round(c_defense - c_resolve_defense)
                                                        c_used_resolve = True
                                                        c_pet_used = False
                                                        health_boost = 100 * c_focus_count
                                                        c_health = c_health + health_boost
                                                        embedVar = discord.Embed(title=f"{c_card} Titan Mode",
                                                                                description=f"**{c_card} says**\n{c_resolve_description}",
                                                                                colour=0xe91e63)
                                                        embedVar.add_field(name=f"Transformation Complete",
                                                                        value=f"Health increased by **{health_boost}**!")
                                                        #await private_channel.send(embed=embedVar)
                                                        previous_moves.append(f"(**{turn_total}**) **{c_card}** 🩸 Resolved: Titan Mode")

                                                        turn_total = turn_total + 1
                                                        turn = 3

                                                    elif c_universe == "Bleach":  # Bleach Trait
                                                        # fortitude or luck is based on health
                                                        fortitude = 0.0
                                                        low = c_health - (c_health * .75)
                                                        high = c_health - (c_health * .66)
                                                        fortitude = round(random.randint(int(low), int(high)))
                                                        # Resolve Scaling
                                                        c_resolve_health = round(fortitude + (.5 * c_resolve))
                                                        c_resolve_attack = round(
                                                            (.30 * c_defense) * (c_resolve / (.50 * c_defense)))
                                                        c_resolve_defense = round(
                                                            (.30 * c_defense) * (c_resolve / (.50 * c_defense)))

                                                        c_stamina = c_stamina + c_resolve
                                                        c_health = c_health + c_resolve_health
                                                        c_attack = round((c_attack + (2 * c_resolve_attack))*2 )
                                                        c_defense = round(c_defense - c_resolve_defense)
                                                        # if c_defense >= 120:
                                                        # c_defense = 120
                                                        c_used_resolve = True
                                                        c_pet_used = False
                                                        embedVar = discord.Embed(title=f"{c_card} Bankai! :zap:",
                                                                                description=f"**{c_card} says**\n{c_resolve_description}",
                                                                                colour=0xe91e63)
                                                        embedVar.add_field(name=f"Transformation: Bankai",
                                                                        value="Gain double Attack on Resolve.")
                                                        #await private_channel.send(embed=embedVar)
                                                        previous_moves.append(f"(**{turn_total}**) **{c_card}** 🩸 Resolved: Bankai!")
                                                        turn_total = turn_total + 1
                                                        turn = 3
                                                    elif c_universe == "God Of War":  # God Of War Trait
                                                        # fortitude or luck is based on health
                                                        fortitude = 0.0
                                                        low = c_health - (c_health * .75)
                                                        high = c_health - (c_health * .66)
                                                        fortitude = round(random.randint(int(low), int(high)))
                                                        # Resolve Scaling
                                                        c_resolve_health = round(fortitude + (.5 * o_resolve))
                                                        c_resolve_attack = round(
                                                            (.30 * c_defense) * (c_resolve / (.50 * c_defense)))
                                                        c_resolve_defense = round(
                                                            (.30 * c_defense) * (c_resolve / (.50 * c_defense)))

                                                        c_stamina = c_stamina + c_resolve
                                                        c_health = c_max_health
                                                        c_attack = round(c_attack + c_resolve_attack)
                                                        c_defense = round(c_defense - c_resolve_defense)
                                                        c_used_resolve = True
                                                        c_pet_used = False

                                                        
                                                        if c_gow_resolve:
                                                            previous_moves.append(f"(**{turn_total}**) **{c_card}** 🩸 Resolved: Ascension!")
                                                        elif not c_gow_resolve:
                                                            c_used_resolve = False
                                                            c_gow_resolve = True
                                                            c_defense = 125
                                                            previous_moves.append(f"(**{turn_total}**) **{c_card}** 🩸 Crushed Blood Orb: Health Refill")
                                                        

                                                        embedVar = discord.Embed(title=f"{c_card} ASCENDED :zap:",
                                                                                description=f"**{c_card} says**\n{c_resolve_description}",
                                                                                colour=0xe91e63)
                                                        embedVar.add_field(name=f"Transformation: Ascension",
                                                                        value="On Resolve Refill Health.")
                                                        #await private_channel.send(embed=embedVar)
                                                        
                                                        turn_total = turn_total + 1
                                                        turn = 3
                                                    elif c_universe == "Fate":  # Fate Trait
                                                        # fortitude or luck is based on health
                                                        fortitude = 0.0
                                                        low = c_health - (c_health * .75)
                                                        high = c_health - (c_health * .66)
                                                        fortitude = round(random.randint(int(low), int(high)))
                                                        # Resolve Scaling
                                                        c_resolve_health = round(fortitude + (.5 * c_resolve))
                                                        c_resolve_attack = round(
                                                            (.30 * c_defense) * (c_resolve / (.50 * c_defense)))
                                                        c_resolve_defense = round(
                                                            (.30 * c_defense) * (c_resolve / (.50 * c_defense)))

                                                        c_stamina = c_stamina + c_resolve
                                                        c_health = c_health + c_resolve_health
                                                        c_attack = round(c_attack + c_resolve_attack)
                                                        c_defense = round(c_defense - c_resolve_defense)

                                                        dmg = damage_cal(t_for_c_opponent_affinities, ultimate_attack_name, cmove3_element, c_universe, c_card, c_3, c_attack, c_defense,
                                                                        t_defense, c_stamina, c_enhancer_used, c_health,
                                                                        t_health, t_stamina, c_max_health, t_attack,
                                                                        c_special_move_description, turn_total,
                                                                        ccard_lvl_ap_buff, None)
                                                        t_health = t_health - dmg['DMG']
                                                        embedVar = discord.Embed(
                                                            title=f"{c_card} COMMAND SEAL :zap:\n\n{dmg['MESSAGE']}",
                                                            description=f"**{c_card} says**\n{c_resolve_description}",
                                                            colour=0xe91e63)
                                                        embedVar.add_field(name=f"Transformation: Command Seal",
                                                                        value="On Resolve, Strike with Ultimate, then Focus.")
                                                        previous_moves.append(f"(**{turn_total}**) **{c_card}** 🩸 Resolved: Command Seal! {dmg['MESSAGE']}")
                                                       # previous_moves.append(f"(**{turn_total}**) 🩸  {dmg['MESSAGE']}")
                                                        #await private_channel.send(embed=embedVar)
                                                        # c_stamina = 0
                                                        c_used_resolve = True
                                                        c_pet_used = False
                                                        turn_total = turn_total + 1
                                                        turn = 3
                                                    elif c_universe == "Kanto Region" or c_universe == "Johto Region" or c_universe == "Hoenn Region" or c_universe == "Sinnoh Region" or c_universe == "Kalos Region" or c_universe == "Unova Region" or c_universe == "Alola Region" or c_universe == "Galar Region":  # Pokemon Resolves
                                                        # fortitude or luck is based on health
                                                        fortitude = 0.0
                                                        low = c_health - (c_health * .75)
                                                        high = c_health - (c_health * .66)
                                                        fortitude = round(random.randint(int(low), int(high)))
                                                        # Resolve Scaling
                                                        c_resolve_health = round(fortitude + (.5 * o_resolve))
                                                        c_resolve_attack = round(
                                                            (.30 * c_defense) * (c_resolve / (.50 * c_defense)))
                                                        c_resolve_defense = round(
                                                            (.30 * c_defense) * (c_resolve / (.50 * c_defense)))

                                                        c_stamina = c_stamina + c_resolve
                                                        c_health = c_health + c_resolve_health
                                                        c_attack = round(c_attack + c_resolve_attack)
                                                        c_defense = round(c_defense) * 2
                                                        c_used_resolve = True
                                                        c_pet_used = False
                                                        embedVar = discord.Embed(title=f"{c_card} EVOLUTION :zap:",
                                                                                description=f"**{c_card} says**\n{c_resolve_description}",
                                                                                colour=0xe91e63)
                                                        embedVar.add_field(name=f"Transformation: Evolution",
                                                                        value="When you Resolve you do not lose Defense.")
                                                        #await private_channel.send(embed=embedVar)
                                                        if turn_total >= 50:
                                                            c_max_health = c_max_health + 1000
                                                            c_health = c_health + 1000
                                                            previous_moves.append(f"(**{turn_total}**) **{c_card}** 🩸 Resolved: Gigantomax Evolution!!! Gained **1000** HP!!!")
                                                        elif turn_total >= 30:
                                                            c_max_health = c_max_health + 300
                                                            c_health = c_health + 300
                                                            previous_moves.append(f"(**{turn_total}**) **{c_card}** 🩸 Resolved: Mega Evolution!! Gained **300** HP!")
                                                        else:
                                                            previous_moves.append(f"(**{turn_total}**) **{c_card}** 🩸 Resolved: Evolution!")
                                                        turn_total = turn_total + 1
                                                        turn = 3
                                                    else:  # Standard Resolve
                                                        # fortitude or luck is based on health
                                                        fortitude = 0.0
                                                        low = c_health - (c_health * .75)
                                                        high = c_health - (c_health * .66)
                                                        fortitude = round(random.randint(int(low), int(high)))
                                                        # Resolve Scaling
                                                        c_resolve_health = round(fortitude + (.5 * c_resolve))
                                                        c_resolve_attack = round(
                                                            (.30 * c_defense) * (c_resolve / (.50 * c_defense)))
                                                        c_resolve_defense = round(
                                                            (.30 * c_defense) * (c_resolve / (.50 * c_defense)))

                                                        c_stamina = c_stamina + c_resolve
                                                        c_health = c_health + c_resolve_health
                                                        c_attack = round(c_attack + c_resolve_attack)
                                                        c_defense = round(c_defense - c_resolve_defense)
                                                        c_used_resolve = True
                                                        c_pet_used = False
                                                        if c_universe == "League Of Legends":
                                                            t_health = t_health - (60 * (c_focus_count + t_focus_count))
                                                            embedVar = discord.Embed(title=f"{c_card} PENTA KILL!",
                                                                                    description=f"**{c_card} says**\n{c_resolve_description}",
                                                                                    colour=0xe91e63)
                                                            embedVar.add_field(name=f"Nexus Destroyed",
                                                                            value=f"**{c_card}** dealt **{(60 * (c_focus_count + t_focus_count))}** damage.")
                                                            previous_moves.append(f"(**{turn_total}**) **{c_card}** 🩸 Resolved: Pentakill! Dealing {(60 * (c_focus_count + t_focus_count))} damage.")
                                                        elif c_universe == "Souls":
                                                            previous_moves.append(f"(**{turn_total}**) **{c_card}** 🩸 Phase 2: Enhanced Moveset!")
                                                            
                                                        else:
                                                            embedVar = discord.Embed(
                                                                title=f"{c_card} STRENGTHENED RESOLVE :zap:",
                                                                description=f"**{c_card} says**\n{c_resolve_description}",
                                                                colour=0xe91e63)
                                                            embedVar.add_field(name=f"Transformation",
                                                                            value="All stats & stamina greatly increased")
                                                            previous_moves.append(f"(**{turn_total}**) ⚡ **{c_card}** Resolved!")
                                                        #await private_channel.send(embed=embedVar)
                                                        turn_total = turn_total + 1
                                                        turn = 3
                                                else:
                                                    previous_moves.append(f"(**{turn_total}**) {c_card} cannot resolve!")
                                            elif aiMove == 6:
                                                # Resolve Check and Calculation
                                                if c_used_resolve and c_used_focus and not c_pet_used:
                                                    c_enhancer_used = True
                                                    dmg = damage_cal(t_for_c_opponent_affinities, basic_attack_name, cmove1_element, c_universe, c_card, cpet_move, c_attack, c_defense,
                                                                    t_defense, c_stamina, c_enhancer_used, c_health, t_health,
                                                                    t_stamina, c_max_health, t_attack,
                                                                    c_special_move_description, turn_total, ccard_lvl_ap_buff, None)
                                                    c_enhancer_used = False
                                                    c_pet_used = True
                                                    cpet_dmg = dmg['DMG']
                                                    cpet_type = dmg['ENHANCED_TYPE']
                                                    if dmg['CAN_USE_MOVE']:
                                                        if cpet_type == 'ATK':
                                                            c_attack = round(c_attack + dmg['DMG'])
                                                        elif cpet_type == 'DEF':
                                                            c_defense = round(c_defense + dmg['DMG'])
                                                        elif cpet_type == 'STAM':
                                                            c_stamina = round(c_stamina + dmg['DMG'])
                                                        elif cpet_type == 'HLT':
                                                            c_health = round(c_health + dmg['DMG'])
                                                        elif cpet_type == 'LIFE':
                                                            c_health = round(c_health + dmg['DMG'])
                                                            t_health = round(t_health - dmg['DMG'])
                                                        elif cpet_type == 'DRAIN':
                                                            c_stamina = round(c_stamina + dmg['DMG'])
                                                            t_stamina = round(t_stamina - dmg['DMG'])
                                                        elif cpet_type == 'FLOG':
                                                            c_attack = round(c_attack + dmg['DMG'])
                                                            t_attack = round(t_attack - dmg['DMG'])
                                                        elif cpet_type == 'WITHER':
                                                            c_defense = round(c_defense + dmg['DMG'])
                                                            t_defense = round(t_defense - dmg['DMG'])
                                                        elif cpet_type == 'RAGE':
                                                            c_defense = round(c_defense - dmg['DMG'])
                                                            c_attack = round(c_attack + dmg['DMG'])
                                                        elif cpet_type == 'BRACE':
                                                            c_defense = round(c_defense + dmg['DMG'])
                                                            c_attack = round(c_attack - dmg['DMG'])
                                                        elif cpet_type == 'BZRK':
                                                            c_health = round(c_health - dmg['DMG'])
                                                            c_attack = round(c_attack + dmg['DMG'])
                                                        elif cpet_type == 'CRYSTAL':
                                                            c_health = round(c_health - dmg['DMG'])
                                                            c_defense = round(c_defense + dmg['DMG'])
                                                        elif cpet_type == 'GROWTH':
                                                            c_max_health = round(c_max_health - dmg['DMG'])
                                                            c_defense = round(c_defense + (dmg['DMG'] * .5))
                                                            c_attack = round(c_attack + (dmg['DMG'] * .5))
                                                        elif cpet_type == 'STANCE':
                                                            tempattack = dmg['DMG']
                                                            c_attack = c_defense
                                                            c_defense = tempattack
                                                        elif cpet_type == 'CONFUSE':
                                                            tempattack = dmg['DMG']
                                                            t_attack = t_defense
                                                            t_defense = tempattack
                                                        elif cpet_type == 'BLINK':
                                                            c_stamina = round(c_stamina - dmg['DMG'])
                                                            t_stamina = round(t_stamina + dmg['DMG'])
                                                        elif cpet_type == 'SLOW':
                                                            tempstam = round(t_stamina + dmg['DMG'])
                                                            c_stamina = round(c_stamina - dmg['DMG'])
                                                            t_stamina = c_stamina
                                                            c_stamina = tempstam
                                                        elif cpet_type == 'HASTE':
                                                            tempstam = round(t_stamina - dmg['DMG'])
                                                            c_stamina = round(c_stamina + dmg['DMG'])
                                                            t_stamina = c_stamina
                                                            c_stamina = tempstam
                                                        elif cpet_type == 'SOULCHAIN':
                                                            c_stamina = round(dmg['DMG'])
                                                            t_stamina = c_stamina
                                                        elif cpet_type == 'GAMBLE':
                                                            c_health = round(dmg['DMG'])
                                                            t_health = c_health
                                                        elif cpet_type == 'FEAR':
                                                            c_max_health = round(c_max_health - dmg['DMG'])
                                                            t_defense = round(t_defense - (dmg['DMG'] * .5))
                                                            t_attack = round(t_attack - (dmg['DMG'] * .5))
                                                        elif cpet_type == 'WAVE':
                                                            t_health = round(t_health - dmg['DMG'])
                                                        elif cpet_type == 'BLAST':
                                                            if dmg['DMG'] >= 100:
                                                                dmg['DMG'] = 100
                                                            t_health = round(t_health - dmg['DMG'])
                                                        elif cpet_type == 'CREATION':
                                                            c_max_health = round(c_max_health + dmg['DMG'])
                                                            c_health = round(c_health + dmg['DMG'])
                                                        elif cpet_type == 'DESTRUCTION':
                                                            if dmg['DMG'] >= 100:
                                                                dmg['DMG'] = 100
                                                            t_max_health = round(t_max_health - dmg['DMG'])
                                                            if t_max_health <=1:
                                                                t_max_health = 1

                                                        #c_stamina = c_stamina - int(dmg['STAMINA_USED'])
                                                        if c_universe == "Persona":
                                                            petdmg = damage_cal(t_for_c_opponent_affinities, basic_attack_name, cmove1_element, c_universe, c_card, c_1, c_attack, c_defense,
                                                                                t_defense, c_stamina, c_enhancer_used, c_health,
                                                                                t_health, t_stamina, c_max_health, t_attack,
                                                                                c_special_move_description, turn_total,
                                                                                ccard_lvl_ap_buff, None)

                                                            t_health = t_health - petdmg['DMG']

                                                            embedVar = discord.Embed(
                                                                title=f"**PERSONA!**\n{cpet_name} was summoned from {c_card}'s soul dealing **{petdmg['DMG']}** damage!!",
                                                                colour=0xe91e63)
                                                            await battle_msg.delete(delay=2)
                                                            if not operformance: #FindMeT
                                                                csummon_file = showsummon(cpet_image, cpet_name, dmg['MESSAGE'], cpet_lvl, cpet_bond)
                                                                embedVar.set_image(url="attachment://pet.png")
                                                                await asyncio.sleep(2)
                                                                battle_msg = await private_channel.send(embed=embedVar, file=csummon_file)
                                                                await asyncio.sleep(2)
                                                                await battle_msg.delete(delay=None)

                                                            #await private_channel.send(embed=embedVar)
                                                            previous_moves.append(f"(**{turn_total}**) **Persona!** 🩸 : **{cpet_name}** was summoned from **{c_card}'s** soul dealing **{petdmg['DMG']}** damage!")
                                                            t_pet_used=True
                                                        else:
                                                            embedVar = discord.Embed(#Findmet
                                                                title=f"{c_card} Summoned 🧬 {cpet_name}",
                                                                colour=0xe91e63)
                                                            await battle_msg.delete(delay=None)
                                                            if not operformance: #FindMeT
                                                                csummon_file = showsummon(cpet_image, cpet_name, dmg['MESSAGE'], cpet_lvl, cpet_bond)
                                                                embedVar.set_image(url="attachment://pet.png")
                                                                await asyncio.sleep(2)
                                                                battle_msg = await private_channel.send(embed=embedVar, file=csummon_file)
                                                                await asyncio.sleep(2)
                                                                await battle_msg.delete(delay=2)
                                                            
                                                            previous_moves.append(f"(**{turn_total}**) **{c_card}** Summoned 🧬 **{cpet_name}**: {dmg['MESSAGE']}")
                                                            
                                                            
                                                        turn = 2
                                                    else:
                                                        #await private_channel.send(f"{cpet_name} needs a turn to rest...")
                                                        previous_moves.append(f"(**{turn_total}**) {c_card} Could not summon 🧬 **{cpet_name}**. Needs rest")
                                                        turn = 2
                                                else:
                                                    #await private_channel.send(f"{cpet_name} needs a turn to rest...")
                                                    previous_moves.append(f"(**{turn_total}**) {c_card} Could not summon 🧬 **{cpet_name}**. Needs rest")
                                            elif aiMove == 8:
                                                c_enhancer_used = True
                                                dmg = damage_cal(t_for_c_opponent_affinities, basic_attack_name, cmove1_element, c_universe, c_card, c_enhancer, c_attack, c_defense, o_defense,
                                                                c_stamina, c_enhancer_used, c_health, o_health, o_stamina,
                                                                c_max_health, o_attack, c_special_move_description, turn_total,
                                                                ccard_lvl_ap_buff, None)
                                                c_enhancer_used = False
                                                cdmg = dmg['DMG']
                                                cenh_type = dmg['ENHANCED_TYPE']
                                                if dmg['CAN_USE_MOVE']:
                                                    if cenh_type == 'ATK':
                                                        o_attack = round(o_attack + dmg['DMG'])
                                                    elif cenh_type == 'DEF':
                                                        o_defense = round(o_defense + dmg['DMG'])
                                                    elif cenh_type == 'STAM':
                                                        o_stamina = round(o_stamina + dmg['DMG'])
                                                    elif cenh_type == 'HLT':
                                                        o_health = round(o_health + dmg['DMG'])
                                                    elif cenh_type == 'LIFE':
                                                        o_health = round(o_health + dmg['DMG'])
                                                        c_health = round(c_health - dmg['DMG'])
                                                    elif cenh_type == 'DRAIN':
                                                        o_stamina = round(o_stamina + dmg['DMG'])
                                                        c_stamina = round(c_stamina - dmg['DMG'])
                                                    elif cenh_type == 'FLOG':
                                                        o_attack = round(o_attack + dmg['DMG'])
                                                        t_attack = round(t_attack - dmg['DMG'])
                                                    elif cenh_type == 'WITHER':
                                                        o_defense = round(o_defense + dmg['DMG'])
                                                        t_defense = round(t_defense - dmg['DMG'])
                                                    elif cenh_type == 'RAGE':
                                                        o_defense = round(o_defense - dmg['DMG'])
                                                        o_attack = round(o_attack + dmg['DMG'])
                                                    elif cenh_type == 'BRACE':
                                                        o_defense = round(o_defense + dmg['DMG'])
                                                        o_attack = round(o_attack - dmg['DMG'])
                                                    elif cenh_type == 'BZRK':
                                                        o_health = round(o_health - dmg['DMG'])
                                                        o_attack = round(o_attack + dmg['DMG'])
                                                    elif cenh_type == 'CRYSTAL':
                                                        o_health = round(o_health - dmg['DMG'])
                                                        o_defense = round(o_defense + dmg['DMG'])
                                                    elif cenh_type == 'GROWTH':
                                                        o_max_health = round(o_max_health - dmg['DMG'])
                                                        o_defense = round(o_defense + (dmg['DMG'] * .5))
                                                        o_attack = round(o_attack + (dmg['DMG'] * .5))
                                                    elif cenh_type == 'STANCE':
                                                        tempattack = dmg['DMG']
                                                        o_attack = o_defense
                                                        o_defense = tempattack
                                                    elif cenh_type == 'CONFUSE':
                                                        tempattack = dmg['DMG']
                                                        c_attack = c_defense
                                                        c_defense = tempattack
                                                    elif cenh_type == 'BLINK':
                                                        o_stamina = round(o_stamina - dmg['DMG'])
                                                        c_stamina = round(c_stamina + dmg['DMG'])
                                                    elif cenh_type == 'SLOW':
                                                        tempstam = round(c_stamina + dmg['DMG'])
                                                        o_stamina = round(o_stamina - dmg['DMG'])
                                                        c_stamina = o_stamina
                                                        o_stamina = tempstam
                                                    elif cenh_type == 'HASTE':
                                                        tempstam = round(c_stamina - dmg['DMG'])
                                                        o_stamina = round(o_stamina + dmg['DMG'])
                                                        c_stamina = o_stamina
                                                        o_stamina = tempstam
                                                    elif cenh_type == 'SOULCHAIN':
                                                        o_stamina = round(dmg['DMG'])
                                                        c_stamina = o_stamina
                                                    elif cenh_type == 'GAMBLE':
                                                        o_health = round(dmg['DMG'])
                                                        c_health = o_health
                                                    elif cenh_type == 'FEAR':
                                                        o_max_health = round(o_max_health - dmg['DMG'])
                                                        t_defense = round(t_defense - (dmg['DMG'] * .5))
                                                        t_attack = round(t_attack - (dmg['DMG'] * .5))
                                                    elif cenh_type == 'WAVE':
                                                        t_health = round(t_health - dmg['DMG'])
                                                    elif cenh_type == 'BLAST':
                                                        t_health = round(t_health - dmg['DMG'])
                                                    elif cenh_type == 'CREATION':
                                                        o_max_health = round(o_max_health + dmg['DMG'])
                                                        o_health = round(o_health + dmg['DMG'])
                                                    elif cenh_type == 'DESTRUCTION':
                                                        t_max_health = round(t_max_health - dmg['DMG'])
                                                        # c_max_health = round(c_max_health - dmg['DMG'])
                                                        if t_max_health <=1:
                                                            t_max_health = 1
                                                        # if c_max_health <=1:
                                                        #     c_max_health = 1

                                                            
                                                    
                                                    if cenh_type in Stamina_Enhancer_Check or cenh_type in Time_Enhancer_Check or cenh_type in Control_Enhancer_Check:
                                                        c_stamina = c_stamina
                                                    else:
                                                        c_stamina = c_stamina - int(dmg['STAMINA_USED'])

                                                    embedVar = discord.Embed(
                                                        title=f"{c_card} ASSISTED {o_card}", colour=0xe91e63)
                                                    embedVar.add_field(name=f"{c_card} used {cmove_enhanced_text}!",
                                                                    value=f"Enhanced {cenh_type}")
                                                    #await private_channel.send(embed=embedVar)
                                                    previous_moves.append(f'(**{turn_total}**) **{c_card}** used {cmove_enhanced_text}:👥 Assisting **{o_card}**')
                                                    turn_total = turn_total + 1
                                                    turn = 3
                                                else:
                                                    #await private_channel.send(m.NOT_ENOUGH_STAMINA)
                                                    previous_moves.append(f"(**{turn_total}**) **{c_card}** not enough Stamina to use this move") 
                                                    turn = 2
                                            elif aiMove == 7:
                                                if c_stamina >= 20:
                                                    c_block_used = True
                                                    c_stamina = c_stamina - 20
                                                    c_defense = round(c_defense * 2)
                                                    embedVar = discord.Embed(
                                                        title=f"**{c_card}** Defended 🛡️ {o_card}", colour=0xe91e63)

                                                    #await private_channel.send(embed=embedVar)
                                                    previous_moves.append(f"(**{turn_total}**) **{c_card}**: Defended 🛡️ **{o_card}**")
                                                    turn_total = turn_total + 1
                                                    turn = 3
                                                else:
                                                    #await private_channel.send(f"{c_card} is too tired to block...")
                                                    previous_moves.append(f"(**{turn_total}**) **{c_card}** is too tired to block.")
                                                    turn = 2

                                            if aiMove != 5 and aiMove != 6 and aiMove != 7 and aiMove != 8:
                                                # If you have enough stamina for move, use it

                                                if dmg['CAN_USE_MOVE']:
                                                    if dmg['ENHANCE']:
                                                        enh_type = dmg['ENHANCED_TYPE']

                                                        if enh_type == 'ATK':
                                                            c_attack = round(c_attack + dmg['DMG'])
                                                        elif enh_type == 'DEF':
                                                            c_defense = round(c_defense + dmg['DMG'])
                                                        elif enh_type == 'STAM':
                                                            c_stamina = round(c_stamina + dmg['DMG'])
                                                        elif enh_type == 'HLT':
                                                            c_health = round(c_health + dmg['DMG'])
                                                        elif enh_type == 'LIFE':
                                                            c_health = round(c_health + dmg['DMG'])
                                                            t_health = round(t_health - dmg['DMG'])
                                                        elif enh_type == 'DRAIN':
                                                            c_stamina = round(c_stamina + dmg['DMG'])
                                                            t_stamina = round(t_stamina - dmg['DMG'])
                                                        elif enh_type == 'FLOG':
                                                            c_attack = round(c_attack + dmg['DMG'])
                                                            t_attack = round(t_attack - dmg['DMG'])
                                                        elif enh_type == 'WITHER':
                                                            c_defense = round(c_defense + dmg['DMG'])
                                                            t_defense = round(t_defense - dmg['DMG'])
                                                        elif enh_type == 'RAGE':
                                                            c_defense = round(c_defense - dmg['DMG'])
                                                            c_attack = round(c_attack + dmg['DMG'])
                                                        elif enh_type == 'BRACE':
                                                            c_defense = round(c_defense + dmg['DMG'])
                                                            c_attack = round(c_attack - dmg['DMG'])
                                                        elif enh_type == 'BZRK':
                                                            c_health = round(c_health - dmg['DMG'])
                                                            c_attack = round(c_attack + dmg['DMG'])
                                                        elif enh_type == 'CRYSTAL':
                                                            c_health = round(c_health - dmg['DMG'])
                                                            c_defense = round(c_defense + dmg['DMG'])
                                                        elif enh_type == 'GROWTH':
                                                            c_max_health = round(c_max_health - dmg['DMG'])
                                                            c_defense = round(c_defense + (dmg['DMG'] * .5))
                                                            c_attack = round(c_attack + (dmg['DMG'] * .5))
                                                        elif enh_type == 'STANCE':
                                                            tempattack = dmg['DMG']
                                                            c_attack = c_defense
                                                            c_defense = tempattack
                                                        elif enh_type == 'CONFUSE':
                                                            tempattack = dmg['DMG']
                                                            t_attack = t_defense
                                                            t_defense = tempattack
                                                        elif enh_type == 'BLINK':
                                                            c_stamina = round(c_stamina - dmg['DMG'])
                                                            t_stamina = round(t_stamina + dmg['DMG'])
                                                        elif enh_type == 'SLOW':
                                                            tempstam = round(t_stamina + dmg['DMG'])
                                                            c_stamina = round(c_stamina - dmg['DMG'])
                                                            t_stamina = c_stamina
                                                            c_stamina = tempstam
                                                        elif enh_type == 'HASTE':
                                                            tempstam = round(t_stamina - dmg['DMG'])
                                                            c_stamina = round(c_stamina + dmg['DMG'])
                                                            t_stamina = c_stamina
                                                            c_stamina = tempstam
                                                        elif enh_type == 'SOULCHAIN':
                                                            c_stamina = round(dmg['DMG'])
                                                            t_stamina = c_stamina
                                                        elif enh_type == 'GAMBLE':
                                                            if mode in D_modes:
                                                                t_health = round(dmg['DMG']) * 2
                                                                c_health = round(dmg['DMG'])
                                                            elif mode in B_modes:
                                                                t_health = round(dmg['DMG']) * 3
                                                                c_health = round(dmg['DMG'])
                                                            else:
                                                                t_health = round(dmg['DMG'])
                                                                c_health = round(dmg['DMG'])
                                                        elif enh_type == 'FEAR':
                                                            c_max_health = round(c_max_health - dmg['DMG'])
                                                            t_defense = round(t_defense - (dmg['DMG'] * .5))
                                                            t_attack = round(t_attack - (dmg['DMG'] * .5))
                                                        elif enh_type == 'WAVE':
                                                            t_health = round(t_health - dmg['DMG'])
                                                        elif enh_type == 'BLAST':
                                                            t_health = round(t_health - dmg['DMG'])
                                                        elif enh_type == 'CREATION':
                                                            c_max_health = round(c_max_health + dmg['DMG'])
                                                            c_health = round(c_health + dmg['DMG'])
                                                        elif enh_type == 'DESTRUCTION':
                                                            t_max_health = round(t_max_health - dmg['DMG'])
                                                            # c_max_health = round(c_max_health - dmg['DMG'])
                                                            if t_max_health <=1:
                                                                t_max_health = 1
                                                            # if c_max_health <=1:
                                                            #     c_max_health = 1

                                                        if enh_type in Stamina_Enhancer_Check or enh_type in Time_Enhancer_Check or enh_type in Control_Enhancer_Check:
                                                            c_stamina = c_stamina
                                                        else:
                                                            c_stamina = c_stamina - int(dmg['STAMINA_USED'])

                                                        embedVar = discord.Embed(title=f"{dmg['MESSAGE']}",
                                                                                colour=embed_color_c)
                                                        #await private_channel.send(embed=embedVar)
                                                        previous_moves.append(f"(**{turn_total}**) **{c_card}**: 🦠 {dmg['MESSAGE']}")
                                                        turn_total = turn_total + 1
                                                        turn = 3
                                                    elif dmg['DMG'] == 0:
                                                        c_stamina = c_stamina - int(dmg['STAMINA_USED'])

                                                        embedVar = discord.Embed(title=f"{dmg['MESSAGE']}", colour=embed_color_c)
                                                        previous_moves.append(f"(**{turn_total}**) **{c_card}**: {dmg['MESSAGE']}")
                                                        if carm_barrier_active:
                                                            carm_barrier_active=False
                                                            previous_moves.append(f"(**{turn_total}**) **{c_card}**'s 💠 Barrier Disabled!")
                                                        
                                                        turn_total = turn_total + 1
                                                        turn = 3
                                                    else:
                                                        if t_universe == "Naruto" and t_stamina < 10:
                                                            t_stored_damage = round(dmg['DMG'])
                                                            t_naruto_heal_buff = t_naruto_heal_buff + t_stored_damage
                                                            t_health = t_health 
                                                            embedVar = discord.Embed(title=f"{t_card}: Substitution Jutsu", description=f"{c_card} strikes a log", colour=0xe91e63)
                                                            previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸: Substitution Jutsu")
                                                            if not t_used_resolve:
                                                                previous_moves.append(f"(**{turn_total}**) 🩸**{t_stored_damage}** Hasirama Cells stored. 🩸**{t_naruto_heal_buff}** total stored.")
                                                            if carm_barrier_active:
                                                                carm_barrier_active=False
                                                                embedVar.add_field(name=f"{c_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                previous_moves.append(f"(**{turn_total}**) **{c_card}**'s 💠 Barrier Disabled!")
                                                            #await private_channel.send(embed=embedVar)
                                                        elif tarm_shield_active and dmg['ELEMENT'] != dark_element:
                                                            if tshield_value > 0:
                                                                tshield_value = tshield_value -dmg['DMG']
                                                                t_health = t_health 
                                                                if tshield_value <=0:
                                                                    embedVar = discord.Embed(title=f"{t_card}'s' **Shield** Shattered!", description=f"{c_card} breaks the **Shield**!", colour=0xe91e63)
                                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}'s** 🌐 Shield Shattered!")
                                                                    if carm_barrier_active:
                                                                        carm_barrier_active=False
                                                                        embedVar.add_field(name=f"{c_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                        previous_moves.append(f"(**{turn_total}**) **{c_card}**'s 💠 Barrier Disabled!")
                                                                    #await private_channel.send(embed=embedVar)
                                                                    tarm_shield_active = False
                                                                else:
                                                                    embedVar = discord.Embed(title=f"{t_card} Activates **Shield** 🌐", description=f"**{c_card}** strikes the Shield 🌐\n**{tshield_value} Shield** Left!", colour=0xe91e63)
                                                                    previous_moves.append(f"(**{turn_total}**) **{c_card}** strikes **{t_card}**'s Shield 🌐\n**{tshield_value} Shield** Left!")
                                                                    if carm_barrier_active:
                                                                        carm_barrier_active=False
                                                                        embedVar.add_field(name=f"{c_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                        previous_moves.append(f"(**{turn_total}**) **{c_card}**'s 💠 Barrier Disabled!")
                                                                    #await private_channel.send(embed=embedVar)

                                                        elif tarm_barrier_active and dmg['ELEMENT'] != psychic_element :
                                                            if tbarrier_count >1:
                                                                t_health = t_health 
                                                                embedVar = discord.Embed(title=f"{t_card} Activates **Barrier** 💠", description=f"{c_card}'s attack **Nullified**!\n **{tbarrier_count - 1} Barriers** remain!", colour=0xe91e63)
                                                                previous_moves.append(f"(**{turn_total}**) **{t_card}** Activates Barrier 💠 {c_card}'s attack **Nullified**!\n💠 {tbarrier_count - 1} **Barriers** remain!")
                                                                if carm_barrier_active:
                                                                    carm_barrier_active=False
                                                                    embedVar.add_field(name=f"{c_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                    previous_moves.append(f"(**{turn_total}**) **{c_card}**'s 💠 Barrier Disabled!")
                                                                #await private_channel.send(embed=embedVar)
                                                                tbarrier_count = tbarrier_count - 1
                                                            elif tbarrier_count==1:
                                                                embedVar = discord.Embed(title=f"{t_card}'s **Barrier** Broken!", description=f"{c_card} destroys the **Barrier**", colour=0xe91e63)
                                                                previous_moves.append(f"(**{turn_total}**) **{t_card}**'s Barrier Broken!")
                                                                tbarrier_count = tbarrier_count - 1
                                                                if carm_barrier_active:
                                                                    carm_barrier_active=False
                                                                    embedVar.add_field(name=f"{c_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                    previous_moves.append(f"(**{turn_total}**) **{c_card}**'s 💠 Barrier Disabled!")
                                                                #await private_channel.send(embed=embedVar)
                                                                tarm_barrier_active = False
                                                        elif tarm_parry_active and dmg['ELEMENT'] != earth_element:
                                                            if tparry_count > 1:
                                                                t_health = t_health
                                                                tparry_damage = round(dmg['DMG'])
                                                                t_health = round(t_health - (tparry_damage * .75))
                                                                c_health = round(c_health - (tparry_damage * .25))
                                                                tparry_count = tparry_count - 1
                                                                embedVar = discord.Embed(title=f"{t_card} Activates **Parry** 🔄", description=f"{c_card} takes {round(tparry_damage * .25)}! DMG\n **{tparry_count} Parries** to go!!", colour=0xe91e63)
                                                                previous_moves.append(f"(**{turn_total}**) **{t_card}** Activates Parry 🔄 {c_card} takes {round(tparry_damage * .25)}! DMG\n **{tparry_count}  Parries** to go!!")
                                                                if carm_barrier_active:
                                                                    carm_barrier_active=False
                                                                    embedVar.add_field(name=f"{c_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                    previous_moves.append(f"(**{turn_total}**) **{c_card}**'s 💠 Barrier Disabled!")
                                                                #await private_channel.send(embed=embedVar)
                                                                
                                                            elif tparry_count==1:
                                                                t_health = t_health
                                                                tparry_damage = round(dmg['DMG'])
                                                                t_health = round(t_health - (tparry_damage * .75))
                                                                c_health = round(c_health - (tparry_damage * .25))
                                                                embedVar = discord.Embed(title=f"{t_card} **Parry** Penetrated!!", description=f"{c_card} takes {round(tparry_damage * .25)}! DMG and breaks the **Parry**", colour=0xe91e63)
                                                                previous_moves.append(f"(**{turn_total}**) **{t_card}** Parry Penetrated! **{c_card}** takes **{round(tparry_damage * .25)}**! DMG and breaks the **Parry**")
                                                                tparry_count = tparry_count - 1
                                                                if carm_barrier_active:
                                                                    carm_barrier_active=False
                                                                    embedVar.add_field(name=f"{c_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                    previous_moves.append(f"(**{turn_total}**) **{c_card}**'s 💠 Barrier Disabled!")
                                                                #await private_channel.send(embed=embedVar)
                                                                tarm_parry_active = False
                                                        else:
                                                            if dmg['REPEL']:
                                                                c_health = c_health - int(dmg['DMG'])
                                                            elif dmg['ABSORB']:
                                                                t_health = t_health + int(dmg['DMG'])
                                                            elif dmg['ELEMENT'] == water_element:
                                                                if cmove1_element == water_element:
                                                                    c_basic_water_buff = c_basic_water_buff + 25
                                                                if cmove2_element == water_element:
                                                                    c_special_water_buff = c_special_water_buff + 25
                                                                if cmove3_element == water_element:
                                                                    c_ultimate_water_buff = c_ultimate_water_buff + 25
                                                                t_health = t_health - dmg['DMG']

                                                            elif dmg['ELEMENT'] == ice_element:
                                                                c_ice_counter = c_ice_counter + 1
                                                                if c_ice_counter == 3:
                                                                    c_freeze_enh = True
                                                                    c_ice_counter = 0
                                                                t_health = t_health - dmg['DMG']

                                                            elif dmg['ELEMENT'] == time_element:
                                                                c_stamina = 0
                                                                t_health = t_health - dmg['DMG']

                                                            elif dmg['ELEMENT'] == bleed_element:
                                                                c_bleed_counter = c_bleed_counter + 1
                                                                if c_bleed_counter == 5:
                                                                    c_bleed_hit = True
                                                                    c_bleed_counter = 0
                                                                t_health = t_health - dmg['DMG']

                                                            elif dmg['ELEMENT'] == recoil_element:
                                                                c_health = c_health - (dmg['DMG'] * .25)
                                                                t_health = t_health - dmg['DMG']

                                                            elif dmg['ELEMENT'] == earth_element:
                                                                c_defense = c_defense + (dmg['DMG'] * .20)
                                                                t_health = t_health - dmg['DMG']

                                                            elif dmg['ELEMENT'] == death_element:
                                                                t_max_health = t_max_health - (dmg['DMG'] * .07)
                                                                t_health = t_health - dmg['DMG']

                                                            elif dmg['ELEMENT'] == light_element:
                                                                c_stamina = round(c_stamina + (dmg['STAMINA_USED'] / 2))
                                                                t_health = t_health - dmg['DMG']

                                                            elif dmg['ELEMENT'] == dark_element:
                                                                c_stamina = c_stamina + 5
                                                                t_stamina = t_stamina - 5
                                                                t_health = t_health - dmg['DMG']

                                                            elif dmg['ELEMENT'] == life_element:
                                                                c_health = c_health + (dmg['DMG'] * .15)
                                                                t_health = t_health - dmg['DMG']

                                                            elif dmg['ELEMENT'] == psychic_element:
                                                                t_defense = t_defense - (dmg['DMG'] * .08)
                                                                t_attack = t_attack - (dmg['DMG'] * .08)
                                                                t_health = t_health - dmg['DMG']

                                                            elif dmg['ELEMENT'] == fire_element:
                                                                c_burn_dmg = c_burn_dmg + round(dmg['DMG'] * .20)
                                                                t_health = t_health - dmg['DMG']


                                                            elif dmg['ELEMENT'] == electric_element:
                                                                c_shock_buff = c_shock_buff +  (dmg['DMG'] * .07)
                                                                t_health = t_health - dmg['DMG']

                                                            elif dmg['ELEMENT'] == poison_element:
                                                                if c_poison_dmg <= 100:
                                                                    c_poison_dmg = c_poison_dmg + 8
                                                                t_health = t_health - dmg['DMG']
                                                                
                                                            elif dmg['ELEMENT'] == gravity_element:
                                                                c_gravity_hit = True
                                                                t_health = t_health - dmg['DMG']
                                                            else:
                                                                t_health = t_health - dmg['DMG']

                                                            embedVar = discord.Embed(title=f"{dmg['MESSAGE']}", colour=embed_color_c)
                                                            previous_moves.append(f"(**{turn_total}**) **{c_card}**: {dmg['MESSAGE']}")
                                                            if carm_siphon_active:
                                                                siphon_damage = (dmg['DMG'] * .10) + csiphon_value
                                                                c_health = round(c_health + siphon_damage)
                                                                if c_health >= c_max_health:
                                                                    c_health = c_max_health
                                                                    previous_moves.append(f"(**{turn_total}**) **{c_card}**: 💉 Siphoned **Full Health!**")
                                                                else:
                                                                    previous_moves.append(f"(**{turn_total}**) **{c_card}**: 💉 Siphoned **{round(siphon_damage)}** Health!")
                                                                if mode not in ai_co_op_modes:
                                                                    await button_ctx.defer(ignore=True)
                                                            if carm_barrier_active:
                                                                carm_barrier_active=False
                                                                embedVar.add_field(name=f"{c_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                previous_moves.append(f"(**{turn_total}**) **{c_card}**'s 💠 Barrier Disabled!")
                                                            #await private_channel.send(embed=embedVar)
                                                        if t_health <= 0:
                                                            if t_final_stand==True:
                                                                if t_universe == "Dragon Ball Z":
                                                                    embedVar = discord.Embed(title=f"{t_card}'s LAST STAND", description=f"{t_card} FINDS RESOLVE", colour=0xe91e63)
                                                                    embedVar.add_field(name=f"**{t_card}** Resolved and continues to fight", value="All stats & stamina increased")
                                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 Transformation: Last Stand!!!")
                                                                    if carm_barrier_active:
                                                                        carm_barrier_active=False
                                                                        embedVar.add_field(name=f"{c_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                        previous_moves.append(f"(**{turn_total}**) **{c_card}**'s 💠 Barrier Disabled!")
                                                                    #await private_channel.send(embed=embedVar)
                                                                    t_health = int(.75 * (t_attack + t_defense))
                                                                    
                                                                    t_used_resolve = True
                                                                    t_final_stand = False
                                                                    t_used_focus = True
                                                                    c_stamina = c_stamina - dmg['STAMINA_USED']
                                                                    turn_total = turn_total + 1
                                                                    turn = 3
                                                            else:
                                                                t_health = 0
                                                                c_stamina = c_stamina - dmg['STAMINA_USED']
                                                                turn_total = turn_total + 1
                                                        else:
                                                            c_stamina = c_stamina - dmg['STAMINA_USED']
                                                            turn_total = turn_total + 1
                                                            turn = 3
                                                else:
                                                    emessage = m.NOT_ENOUGH_STAMINA
                                                    embedVar = discord.Embed(title=emessage,
                                                                            description=f"Use abilities to Increase `STAM` or enter `FOCUS STATE`!",
                                                                            colour=0xe91e63)
                                                    #await private_channel.send(embed=embedVar)
                                                    previous_moves.append(f"(**{turn_total}**) **{c_card}** not enough Stamina to use this move") 
                                                    turn = 2
                                        else:
                                            cap1 = list(c_1.values())[0] + ccard_lvl_ap_buff + c_shock_buff + c_basic_water_buff
                                            cap2 = list(c_2.values())[0] + ccard_lvl_ap_buff + c_shock_buff + c_special_water_buff
                                            cap3 = list(c_3.values())[0] + ccard_lvl_ap_buff + cdemon_slayer_buff + c_shock_buff + c_ultimate_water_buff
                                            cenh1 = list(c_enhancer.values())[0]
                                            cenh_name = list(c_enhancer.values())[2]
                                            cpet_enh_name = list(cpet_move.values())[2]
                                            cpet_msg_on_resolve = ""
                                            if c_universe == "Souls" and c_used_resolve:
                                                companion_card = showcard(c, carm,c_max_health, c_health, c_max_stamina, c_stamina,
                                                                    c_used_resolve, ctitle, c_used_focus, c_attack, c_defense,
                                                                    turn_total, cap2, cap3, cap3, cenh1, cenh_name, ccard_lvl, t_defense)
                                            else:
                                                companion = showcard(c, carm,c_max_health, c_health, c_max_stamina, c_stamina,
                                                                    c_used_resolve, ctitle, c_used_focus, c_attack, c_defense,
                                                                    turn_total, cap1, cap2, cap3, cenh1, cenh_name, ccard_lvl, t_defense)

                                            if c_universe == "Solo Leveling" and not c_swapped:
                                                if temp_tarm_shield_active and not tarm_shield_active:
                                                    if carm_shield_active:
                                                        cshield_value = cshield_value + temp_tshield_value
                                                        previous_moves.append(f"(**{turn_total}**) **{c_card}** 🩸 **ARISE!** *{tarm_name}* is now yours")
                                                        c_swapped = True
                                                    elif not carm_shield_active:
                                                        carm_shield_active = True
                                                        cshield_value = temp_tshield_value
                                                        previous_moves.append(f"(**{turn_total}**) **{c_card}** 🩸 **ARISE!** *{tarm_name}* is now yours")
                                                        c_swapped = True
                                                elif temp_tarm_barrier_active and not tarm_barrier_active:
                                                    if carm_barrier_active:
                                                        cbarrier_count = cbarrier_count + temp_tbarrier_count
                                                        previous_moves.append(f"(**{turn_total}**) **{c_card}** 🩸 **ARISE!** *{tarm_name}* is now yours")
                                                        c_swapped = True
                                                    elif not carm_barrier_active:
                                                        carm_barrier_active = True
                                                        cbarrier_count = temp_tbarrier_count
                                                        previous_moves.append(f"(**{turn_total}**) **{c_card}** 🩸 **ARISE!** *{tarm_name}* is now yours")
                                                        c_swapped = True
                                                elif temp_tarm_parry_active and not tarm_parry_active:
                                                    if carm_parry_active:
                                                        cparry_count = cparry_count + temp_tparry_count
                                                        previous_moves.append(f"(**{turn_total}**) **{c_card}** 🩸 **ARISE!** *{tarm_name}* is now yours")
                                                        c_swapped = True
                                                    elif not carm_parry_active:
                                                        carm_parry_active = True
                                                        cparry_count = temp_tparry_count
                                                        previous_moves.append(f"(**{turn_total}**) **{c_card}** 🩸 **ARISE!** *{tarm_name}* is now yours")
                                                        c_swapped = True


                                            # await private_channel.send(file=companion)

                                            if c_used_focus and c_used_resolve:
                                                options = ["q", "Q", "0", "1", "2", "3", "4", "6", "7"]
                                            elif c_used_focus and not c_used_resolve:
                                                options = ["q", "Q", "0", "1", "2", "3", "4", "5", "7"]
                                            else:
                                                options = ["q", "Q", "0", "1", "2", "3", "4", "7"]

                                            battle_buttons = []
                                            util_buttons = [
                                                manage_components.create_button(
                                                    style=ButtonStyle.grey,
                                                    label="Quit | /ff",
                                                    custom_id="q"
                                                ),
                                            ]
                                            if c_stamina >= 10:
                                                battle_buttons.append(
                                                    manage_components.create_button(
                                                        style=ButtonStyle.green,
                                                        label=f"{c_basic_emoji} 10",
                                                        custom_id="1"
                                                    )
                                                )

                                            if c_stamina >= 30:
                                                battle_buttons.append(
                                                    manage_components.create_button(
                                                        style=ButtonStyle.green,
                                                        label=f"{c_super_emoji} 30",
                                                        custom_id="2"
                                                    )
                                                )


                                            if c_stamina >= 80:
                                                battle_buttons.append(
                                                    manage_components.create_button(
                                                        style=ButtonStyle.green,
                                                        label=f"{c_ultimate_emoji} 80",
                                                        custom_id="3"
                                                    )
                                                )

                                            if c_stamina >= 20:
                                                battle_buttons.append(
                                                    manage_components.create_button(
                                                        style=ButtonStyle.blue,
                                                        label=f"🦠 20",
                                                        custom_id="4"
                                                    )
                                                )

                                                if t_gravity_hit == False:
                                                    util_buttons.append(
                                                        manage_components.create_button(
                                                            style=ButtonStyle.grey,
                                                            label="Block 20",
                                                            custom_id="0"
                                                        )
                                                    )

                                            coop_util_buttons = [
                                                manage_components.create_button(
                                                    style=ButtonStyle.blue,
                                                    label="Assist Companion 20",
                                                    custom_id="7"
                                                )
                                            ]

                                            if c_used_focus and c_used_resolve and not c_pet_used:
                                                util_buttons.append(
                                                    manage_components.create_button(
                                                        style=ButtonStyle.green,
                                                        label="🧬",
                                                        custom_id="6"
                                                    )
                                                )

                                            if c_used_focus and not c_used_resolve:
                                                util_buttons.append(
                                                    manage_components.create_button(
                                                        style=ButtonStyle.green,
                                                        label="⚡Resolve!",
                                                        custom_id="5"
                                                    )
                                                )

                                            battle_action_row = manage_components.create_actionrow(*battle_buttons)
                                            util_action_row = manage_components.create_actionrow(*util_buttons)
                                            coop_util_action_row = manage_components.create_actionrow(*coop_util_buttons)

                                            cap1 = list(c_1.values())[0] + ccard_lvl_ap_buff + c_shock_buff + c_basic_water_buff
                                            cap2 = list(c_2.values())[0] + ccard_lvl_ap_buff + c_shock_buff + c_special_water_buff
                                            cap3 = list(c_3.values())[0] + ccard_lvl_ap_buff + cdemon_slayer_buff + c_shock_buff + c_ultimate_water_buff
                                            cenh1 = list(c_enhancer.values())[0]
                                            cenh_name = list(c_enhancer.values())[2]
                                            cpet_enh_name = list(cpet_move.values())[2]
                                            cpet_msg_on_resolve = ""
                                            tarm_message = " "
                                            oarm_message = " "
                                            if c_used_resolve:
                                                cpet_msg_on_resolve = f"🧬 {enhancer_mapping[pet_enh_name]}"
                                            if tarm_barrier_active:
                                                tarm_message = f"💠{tbarrier_count}"
                                            elif tarm_shield_active:
                                                tarm_message = f"🌐{tshield_value}"
                                            elif tarm_parry_active:
                                                tarm_message = f"🔄{tparry_count}"
                                            if oarm_barrier_active:
                                                oarm_message = f"💠{obarrier_count}"
                                            elif oarm_shield_active:
                                                oarm_message = f"🌐{oshield_value}"
                                            elif oarm_parry_active:
                                                oarm_message = f"🔄{oparry_count}"
                                            if carm_passive_type == "BARRIER":
                                                if carm_barrier_active:
                                                    carm_passive_value = f"{cbarrier_count}"
                                                else:
                                                    carm_passive_value = 0
                                            elif carm_passive_type == "SHIELD":
                                                if carm_shield_active:
                                                    carm_passive_value = f"{cshield_value}"
                                                else:
                                                    carm_passive_value = 0
                                            elif carm_passive_type == "PARRY":
                                                if carm_parry_active:
                                                    carm_passive_value = f"{cparry_count}"
                                                else:
                                                    carm_passive_value = 0
                                            embedVar = discord.Embed(title=f"", description=textwrap.dedent(f"""\
                                            {previous_moves_into_embed}
                                            
                                            """), color=0xe74c3c)
                                            embedVar.set_author(name=f"🦾 {carm_name} - {carm_passive_type} {carm_passive_value} {enhancer_suffix_mapping[carm_passive_type]}\n{cpet_msg_on_resolve}\n")
                                            embedVar.add_field(name=f"➡️ **Current Turn** {turn_total}", value=f"{user2.mention} Select move below!")
                                            # await asyncio.sleep(2)
                                            embedVar.set_image(url="attachment://image.png")
                                            embedVar.set_footer(
                                                text=f"{t_card}: ❤️{round(t_health)} 🌀{round(t_stamina)} 🗡️{round(t_attack)}/🛡️{round(t_defense)} {tarm_message}\n{o_card}: ❤️{round(o_health)} 🌀{round(o_stamina)} 🗡️{round(o_attack)}/🛡️{round(o_defense)} {oarm_message}",
                                                icon_url="https://cdn.discordapp.com/emojis/789290881654980659.gif?v=1")
                                            await battle_msg.delete(delay=2)
                                            await asyncio.sleep(2)
                                            battle_msg = await private_channel.send(embed=embedVar, components=[battle_action_row, util_action_row,
                                                                                coop_util_action_row], file=companion)
                                            # Make sure user is responding with move
                                            def check(button_ctx):
                                                return button_ctx.author == user and button_ctx.custom_id in options

                                            try:
                                                button_ctx: ComponentContext = await manage_components.wait_for_component(
                                                    self.bot,
                                                    components=[battle_action_row, util_action_row, coop_util_action_row],
                                                    timeout=80, check=check)

                                                # calculate data based on selected move
                                                if button_ctx.custom_id == "q" or button_ctx.custom_id == "Q":
                                                    c_health = 0

                                                    if private_channel.guild:
                                                        await private_channel.send(f"{user2.mention} has fled the battle...")
                                                        previous_moves.append(f"(**{turn_total}**) 💨 **{c_card}** Fled...")
                                                        # await discord.TextChannel.delete(private_channel, reason=None)
                                                    else:
                                                        await private_channel.send(f"You fled the battle...")
                                                        previous_moves.append(f"(**{turn_total}**) 💨 **{c_card}** Fled...")
                                                    #return
                                                if button_ctx.custom_id == "1":
                                                    if c_universe == "Souls" and c_used_resolve:
                                                        dmg = damage_cal(t_for_c_opponent_affinities, special_attack_name, cmove2_element, c_universe, c_card, c_2, c_attack, c_defense, t_defense,
                                                                    c_stamina, c_enhancer_used, c_health, t_health, t_stamina,
                                                                    c_max_health, t_attack, c_special_move_description, turn_total,
                                                                    ccard_lvl_ap_buff, c_1)
                                                    else:
                                                        dmg = damage_cal(t_for_c_opponent_affinities, basic_attack_name, cmove1_element, c_universe, c_card, c_1, c_attack, c_defense, t_defense,
                                                                        c_stamina, c_enhancer_used, c_health, t_health, t_stamina,
                                                                        c_max_health, t_attack, c_special_move_description,
                                                                        turn_total, ccard_lvl_ap_buff, None)
                                                elif button_ctx.custom_id == "2":
                                                    if c_universe == "Souls" and c_used_resolve:
                                                        dmg = damage_cal(t_for_c_opponent_affinities, ultimate_attack_name, cmove3_element, c_universe, c_card, c_3, c_attack, c_defense, t_defense,
                                                                    c_stamina, c_enhancer_used, c_health, t_health, t_stamina,
                                                                    c_max_health, t_attack, c_special_move_description, turn_total,
                                                                    ccard_lvl_ap_buff, c_2)
                                                    else:
                                                        dmg = damage_cal(t_for_c_opponent_affinities, special_attack_name, cmove2_element, c_universe, c_card, c_2, c_attack, c_defense, t_defense,
                                                                        c_stamina, c_enhancer_used, c_health, t_health, t_stamina,
                                                                        c_max_health, t_attack, c_special_move_description,
                                                                        turn_total, ccard_lvl_ap_buff, None)
                                                elif button_ctx.custom_id == "3":

                                                    dmg = damage_cal(t_for_c_opponent_affinities, ultimate_attack_name, cmove3_element, c_universe, c_card, c_3, c_attack, c_defense, t_defense,
                                                                    c_stamina, c_enhancer_used, c_health, t_health, t_stamina,
                                                                    c_max_health, t_attack, c_special_move_description,
                                                                    turn_total, ccard_lvl_ap_buff, None)
                                                    if c_gif != "N/A" and not operformance:
                                                        await battle_msg.delete(delay=None)
                                                        # await asyncio.sleep(1)
                                                        battle_msg = await private_channel.send(f"{c_gif}")
                                                        await asyncio.sleep(2)
                                                elif button_ctx.custom_id == "4":
                                                    c_enhancer_used = True

                                                    dmg = damage_cal(t_for_c_opponent_affinities, basic_attack_name, cmove1_element, c_universe, c_card, c_enhancer, c_attack, c_defense,
                                                                    t_defense, c_stamina, c_enhancer_used, c_health, t_health,
                                                                    t_stamina, c_max_health, t_attack,
                                                                    c_special_move_description, turn_total, ccard_lvl_ap_buff, None)
                                                    c_enhancer_used = False
                                                elif button_ctx.custom_id == "5":
                                                    # Resolve Check and Calculation
                                                    if not c_used_resolve and c_used_focus:
                                                        if c_universe == "My Hero Academia":  # My Hero Trait
                                                            # fortitude or luck is based on health
                                                            fortitude = 0.0
                                                            low = c_health - (c_health * .75)
                                                            high = c_health - (c_health * .66)
                                                            fortitude = round(random.randint(int(low), int(high)))
                                                            # Resolve Scaling
                                                            c_resolve_health = round(fortitude + (.5 * c_resolve))
                                                            c_resolve_attack = round(
                                                                (.30 * c_defense) * (c_resolve / (.50 * c_defense)))
                                                            c_resolve_defense = round(
                                                                (.30 * c_defense) * (c_resolve / (.50 * c_defense)))
                                                            ccard_lvl_ap_buff = ccard_lvl_ap_buff + 80 + turn_total

                                                            c_stamina = c_stamina + c_resolve
                                                            c_health = c_health + c_resolve_health
                                                            c_attack = round(c_attack + c_resolve_attack)
                                                            c_defense = round(c_defense - c_resolve_defense)
                                                            c_used_resolve = True
                                                            c_pet_used = False
                                                            embedVar = discord.Embed(title=f"{c_card} PLUS ULTRAAA",
                                                                                    description=f"**{c_card} says**\n{c_resolve_description}",
                                                                                    colour=0xe91e63)
                                                            embedVar.add_field(name=f"Transformation: Plus Ultra",
                                                                            value="You do not lose a turn after you Resolve.")
                                                            #await button_ctx.send(embed=embedVar)
                                                            previous_moves.append(f"(**{turn_total}**) **{c_card}** 🩸 Resolved: PLUS ULTRA!")
                                                            await button_ctx.defer(ignore=True)
                                                            turn_total = turn_total + 1
                                                            turn = 2
                                                        
                                                        elif c_universe == "Demon Slayer": 
                                                            # fortitude or luck is based on health
                                                            fortitude = 0.0
                                                            low = c_health - (c_health * .75)
                                                            high = c_health - (c_health * .66)
                                                            fortitude = round(random.randint(int(low), int(high)))
                                                            # Resolve Scaling
                                                            c_resolve_health = round(fortitude + (.5 * c_resolve))
                                                            c_resolve_attack = round(
                                                                (.30 * c_defense) * (c_resolve / (.50 * c_defense)))
                                                            c_resolve_defense = round(
                                                                (.30 * c_defense) * (c_resolve / (.50 * c_defense)))
                                                            

                                                            c_stamina = c_stamina + c_resolve
                                                            c_health = c_health + c_resolve_health
                                                            c_attack = round(c_attack + c_resolve_attack)
                                                            c_defense = round(c_defense - c_resolve_defense)
                                                            if t_attack > c_attack:
                                                                c_attack = t_attack
                                                            if t_defense > c_defense:
                                                                c_defense = t_defense
                                                            c_used_resolve = True
                                                            c_pet_used = False
                                                            embedVar = discord.Embed(title=f"{c_card} begins Total Concentration Breathing",
                                                                                    description=f"**{c_card} says**\n{c_resolve_description}",
                                                                                    colour=0xe91e63)
                                                            previous_moves.append(f"(**{turn_total}**) **{c_card}** 🩸 Resolved: Total Concentration Breathing!")
                                                            await button_ctx.defer(ignore=True)
                                                            turn_total = turn_total + 1
                                                            turn = 0

                                                        elif c_universe == "Naruto": 
                                                            # fortitude or luck is based on health
                                                            fortitude = 0.0
                                                            low = c_health - (c_health * .75)
                                                            high = c_health - (c_health * .66)
                                                            fortitude = round(random.randint(int(low), int(high)))
                                                            # Resolve Scaling
                                                            c_resolve_health = round(fortitude + (.5 * c_resolve))
                                                            c_resolve_attack = round(
                                                                (.30 * c_defense) * (c_resolve / (.50 * c_defense)))
                                                            c_resolve_defense = round(
                                                                (.30 * c_defense) * (c_resolve / (.50 * c_defense)))
                                                            

                                                            c_stamina = c_stamina + c_resolve
                                                            c_health = c_health + c_resolve_health
                                                            c_health = c_health + c_naruto_heal_buff
                                                            c_attack = round(c_attack + c_resolve_attack)
                                                            c_defense = round(c_defense - c_resolve_defense)
                                                            c_used_resolve = True
                                                            c_pet_used = False
                                                            embedVar = discord.Embed(title=f"{c_card} Heals from Hashirama Cells",
                                                                                    description=f"**{c_card} says**\n{c_resolve_description}",
                                                                                    colour=0xe91e63)
                                                            previous_moves.append(f"(**{turn_total}**) **{c_card}** 🩸 Resolved: Hashirama Cells heal you for **{c_naruto_heal_buff}**")
                                                            await button_ctx.defer(ignore=True)
                                                            turn_total = turn_total + 1
                                                            turn = 0



                                                        
                                                        elif c_universe == "Attack On Titan":
                                                            # fortitude or luck is based on health
                                                            fortitude = 0.0
                                                            low = c_health - (c_health * .75)
                                                            high = c_health - (c_health * .66)
                                                            fortitude = round(random.randint(int(low), int(high)))
                                                            # Resolve Scaling
                                                            c_resolve_health = round(fortitude + (.5 * c_resolve))
                                                            c_resolve_attack = round(
                                                                (.30 * c_defense) * (c_resolve / (.50 * c_defense)))
                                                            c_resolve_defense = round(
                                                                (.30 * c_defense) * (c_resolve / (.50 * c_defense)))

                                                            c_stamina = c_stamina + c_resolve
                                                            c_health = c_health + c_resolve_health
                                                            c_attack = round(c_attack + c_resolve_attack)
                                                            c_defense = round(c_defense - c_resolve_defense)
                                                            c_used_resolve = True
                                                            c_pet_used = False
                                                            health_boost = 100 * c_focus_count
                                                            c_health = c_health + health_boost
                                                            embedVar = discord.Embed(title=f"{c_card} Titan Mode",
                                                                                    description=f"**{c_card} says**\n{c_resolve_description}",
                                                                                    colour=0xe91e63)
                                                            embedVar.add_field(name=f"Transformation Complete",
                                                                            value=f"Health increased by **{health_boost}**!")
                                                            #await button_ctx.send(embed=embedVar)
                                                            previous_moves.append(f"(**{turn_total}**) **{c_card}** 🩸 Resolved: Titan Mode")
                                                            await button_ctx.defer(ignore=True)
                                                            turn_total = turn_total + 1
                                                            turn = 3
                                                        elif c_universe == "Bleach":  # Bleach Trait
                                                            # fortitude or luck is based on health
                                                            fortitude = 0.0
                                                            low = c_health - (c_health * .75)
                                                            high = c_health - (c_health * .66)
                                                            fortitude = round(random.randint(int(low), int(high)))
                                                            # Resolve Scaling
                                                            c_resolve_health = round(fortitude + (.5 * c_resolve))
                                                            c_resolve_attack = round(
                                                                (.30 * c_defense) * (c_resolve / (.50 * c_defense)))
                                                            c_resolve_defense = round(
                                                                (.30 * c_defense) * (c_resolve / (.50 * c_defense)))

                                                            c_stamina = c_stamina + c_resolve
                                                            c_health = c_health + c_resolve_health
                                                            c_attack = round((c_attack + (2 * c_resolve_attack))*2 )
                                                            c_defense = round(c_defense - c_resolve_defense)
                                                            # if c_defense >= 120:
                                                            # c_defense = 120
                                                            c_used_resolve = True
                                                            c_pet_used = False
                                                            embedVar = discord.Embed(
                                                                title=f"{c_card} STRENGTHENED RESOLVE :zap:",
                                                                description=f"**{c_card} says**\n{c_resolve_description}",
                                                                colour=0xe91e63)
                                                            embedVar.add_field(name=f"Transformation: Bankai",
                                                                            value="Gain double Attack on Resolve.")
                                                            #await button_ctx.send(embed=embedVar)
                                                            previous_moves.append(f"(**{turn_total}**) **{c_card}** 🩸 Resolved: Bankai!")
                                                            await button_ctx.defer(ignore=True)
                                                            turn_total = turn_total + 1
                                                            turn = 3
                                                        elif c_universe == "God Of War":  # God Of War Trait
                                                            # fortitude or luck is based on health
                                                            fortitude = 0.0
                                                            low = c_health - (c_health * .75)
                                                            high = c_health - (c_health * .66)
                                                            fortitude = round(random.randint(int(low), int(high)))
                                                            # Resolve Scaling
                                                            c_resolve_health = round(fortitude + (.5 * o_resolve))
                                                            c_resolve_attack = round(
                                                                (.30 * c_defense) * (c_resolve / (.50 * c_defense)))
                                                            c_resolve_defense = round(
                                                                (.30 * c_defense) * (c_resolve / (.50 * c_defense)))

                                                            c_stamina = c_stamina + c_resolve
                                                            c_health = c_max_health
                                                            c_attack = round(c_attack + c_resolve_attack)
                                                            c_defense = round(c_defense - c_resolve_defense)
                                                            c_used_resolve = True
                                                            c_pet_used = False

                                                            if c_gow_resolve:
                                                                previous_moves.append(f"(**{turn_total}**) **{c_card}** 🩸 Resolved: Ascension!")
                                                            elif not c_gow_resolve:
                                                                c_used_resolve = False
                                                                c_gow_resolve = True
                                                                c_defense = 125
                                                                previous_moves.append(f"(**{turn_total}**) **{c_card}** 🩸 Crushed Blood Orb: Health Refill")
                                                            

                                                            embedVar = discord.Embed(
                                                                title=f"{c_card} STRENGTHENED RESOLVE :zap:",
                                                                description=f"**{c_card} says**\n{c_resolve_description}",
                                                                colour=0xe91e63)
                                                            embedVar.add_field(name=f"Transformation: Ascension",
                                                                            value="On Resolve Refill Health.")
                                                            #await button_ctx.send(embed=embedVar)
                                                            
                                                            await button_ctx.defer(ignore=True)
                                                            turn_total = turn_total + 1
                                                            turn = 3
                                                        elif c_universe == "Fate":  # Fate Trait
                                                            # fortitude or luck is based on health
                                                            fortitude = 0.0
                                                            low = c_health - (c_health * .75)
                                                            high = c_health - (c_health * .66)
                                                            fortitude = round(random.randint(int(low), int(high)))
                                                            # Resolve Scaling
                                                            c_resolve_health = round(fortitude + (.5 * c_resolve))
                                                            c_resolve_attack = round(
                                                                (.30 * c_defense) * (c_resolve / (.50 * c_defense)))
                                                            c_resolve_defense = round(
                                                                (.30 * c_defense) * (c_resolve / (.50 * c_defense)))

                                                            c_stamina = c_stamina + c_resolve
                                                            c_health = c_health + c_resolve_health
                                                            c_attack = round(c_attack + c_resolve_attack)
                                                            c_defense = round(c_defense - c_resolve_defense)

                                                            dmg = damage_cal(t_for_c_opponent_affinities, ultimate_attack_name, cmove3_element, c_universe, c_card, c_3, c_attack, c_defense,
                                                                            t_defense, c_stamina, c_enhancer_used, c_health,
                                                                            t_health, t_stamina, c_max_health, t_attack,
                                                                            c_special_move_description, turn_total,
                                                                            ccard_lvl_ap_buff, None)
                                                            t_health = t_health - dmg['DMG']
                                                            embedVar = discord.Embed(
                                                                title=f"{c_card} STRENGTHENED RESOLVE :zap:\n\n{dmg['MESSAGE']}",
                                                                description=f"**{c_card} says**\n{c_resolve_description}",
                                                                colour=0xe91e63)
                                                            embedVar.add_field(name=f"Transformation: Command Seal",
                                                                            value="On Resolve, Strike with Ultimate, then Focus.")
                                                            #await button_ctx.send(embed=embedVar)
                                                            previous_moves.append(f"(**{turn_total}**) **{c_card}** 🩸 Resolved: Command Seal! {dmg['MESSAGE']}")
                                                            await button_ctx.defer(ignore=True)
                                                            # c_stamina = 0
                                                            c_used_resolve = True
                                                            c_pet_used = False
                                                            turn_total = turn_total + 1
                                                            turn = 3
                                                        elif c_universe == "Kanto Region" or c_universe == "Johto Region" or c_universe == "Hoenn Region" or c_universe == "Sinnoh Region" or c_universe == "Kalos Region" or c_universe == "Unova Region" or c_universe == "Alola Region" or c_universe == "Galar Region":  # Pokemon Resolves
                                                            # fortitude or luck is based on health
                                                            fortitude = 0.0
                                                            low = c_health - (c_health * .75)
                                                            high = c_health - (c_health * .66)
                                                            fortitude = round(random.randint(int(low), int(high)))
                                                            # Resolve Scaling
                                                            c_resolve_health = round(fortitude + (.5 * o_resolve))
                                                            c_resolve_attack = round(
                                                                (.30 * c_defense) * (c_resolve / (.50 * c_defense)))
                                                            c_resolve_defense = round(
                                                                (.30 * c_defense) * (c_resolve / (.50 * c_defense)))

                                                            c_stamina = c_stamina + c_resolve
                                                            c_health = c_health + c_resolve_health
                                                            c_attack = round(c_attack + c_resolve_attack)
                                                            c_defense = round(c_defense) * 2
                                                            c_used_resolve = True
                                                            c_pet_used = False
                                                            embedVar = discord.Embed(
                                                                title=f"{c_card} STRENGTHENED RESOLVE :zap:",
                                                                description=f"**{c_card} says**\n{c_resolve_description}",
                                                                colour=0xe91e63)
                                                            embedVar.add_field(name=f"Transformation: Evolution",
                                                                            value="When you Resolve your Defense doubles")
                                                            await button_ctx.defer(ignore=True)
                                                            #await button_ctx.send(embed=embedVar)
                                                            if turn_total >= 50:
                                                                c_max_health = c_max_health + 1000
                                                                c_health = c_health + 1000
                                                                previous_moves.append(f"(**{turn_total}**) **{c_card}** 🩸 Resolved: Gigantomax Evolution!!! Gained **1000** HP!!!")
                                                            elif turn_total >= 30:
                                                                c_max_health = c_max_health + 300
                                                                c_health = c_health + 300
                                                                previous_moves.append(f"(**{turn_total}**) **{c_card}** 🩸 Resolved: Mega Evolution!! Gained **300** HP!")
                                                            else:
                                                                previous_moves.append(f"(**{turn_total}**) **{c_card}** 🩸 Resolved: Evolution!")
                                                            turn_total = turn_total + 1
                                                            turn = 3
                                                        else:  # Standard Resolve
                                                            # fortitude or luck is based on health
                                                            fortitude = 0.0
                                                            low = c_health - (c_health * .75)
                                                            high = c_health - (c_health * .66)
                                                            fortitude = round(random.randint(int(low), int(high)))
                                                            # Resolve Scaling
                                                            c_resolve_health = round(fortitude + (.5 * c_resolve))
                                                            c_resolve_attack = round(
                                                                (.30 * c_defense) * (c_resolve / (.50 * c_defense)))
                                                            c_resolve_defense = round(
                                                                (.30 * c_defense) * (c_resolve / (.50 * c_defense)))

                                                            c_stamina = c_stamina + c_resolve
                                                            c_health = c_health + c_resolve_health
                                                            c_attack = round(c_attack + c_resolve_attack)
                                                            c_defense = round(c_defense - c_resolve_defense)
                                                            c_used_resolve = True
                                                            c_pet_used = False
                                                            if c_universe == "League Of Legends":
                                                                t_health = t_health - (60 * (c_focus_count + t_focus_count))
                                                                embedVar = discord.Embed(title=f"{c_card} PENTA KILL!",
                                                                                        description=f"**{c_card} says**\n{c_resolve_description}",
                                                                                        colour=0xe91e63)
                                                                embedVar.add_field(name=f"Nexus Destroyed",
                                                                                value=f"**{c_card}** dealt **{(60 * (c_focus_count + t_focus_count))}** damage.")
                                                                previous_moves.append(f"(**{turn_total}**) **{c_card}** 🩸 Resolved: Pentakill! Dealing {(60 * (c_focus_count + t_focus_count))} damage.")
                                                                await button_ctx.defer(ignore=True)
                                                            elif c_universe == "Souls":
                                                                previous_moves.append(f"(**{turn_total}**) **{c_card}** 🩸 Phase 2: Enhanced Moveset!")
                                                                await button_ctx.defer(ignore=True)
                                                            else:
                                                                embedVar = discord.Embed(
                                                                    title=f"{c_card} STRENGTHENED RESOLVE :zap:",
                                                                    description=f"**{c_card} says**\n{c_resolve_description}",
                                                                    colour=0xe91e63)
                                                                embedVar.add_field(name=f"Transformation",
                                                                                value="All stats & stamina greatly increased")
                                                                previous_moves.append(f"(**{turn_total}**) ⚡ **{c_card}** Resolved!")
                                                            #await button_ctx.send(embed=embedVar)
                                                            await button_ctx.defer(ignore=True)
                                                            turn_total = turn_total + 1
                                                            turn = 3
                                                    else:
                                                        previous_moves.append(f"(**{turn_total}**) {c_card} cannot resolve!")
                                                        await button_ctx.defer(ignore=True)
                                                elif button_ctx.custom_id == "6":
                                                    # Resolve Check and Calculation
                                                    if c_used_resolve and c_used_focus and not c_pet_used:
                                                        c_enhancer_used = True
                                                        dmg = damage_cal(t_for_c_opponent_affinities, basic_attack_name, cmove1_element, c_universe, c_card, cpet_move, c_attack, c_defense,
                                                                        t_defense, c_stamina, c_enhancer_used, c_health,
                                                                        t_health, t_stamina, c_max_health, t_attack,
                                                                        c_special_move_description, turn_total,
                                                                        ccard_lvl_ap_buff, None)
                                                        c_enhancer_used = False
                                                        c_pet_used = True
                                                        cpet_dmg = dmg['DMG']
                                                        cpet_type = dmg['ENHANCED_TYPE']
                                                        if dmg['CAN_USE_MOVE']:
                                                            if cpet_type == 'ATK':
                                                                c_attack = round(c_attack + dmg['DMG'])
                                                            elif cpet_type == 'DEF':
                                                                c_defense = round(c_defense + dmg['DMG'])
                                                            elif cpet_type == 'STAM':
                                                                c_stamina = round(c_stamina + dmg['DMG'])
                                                            elif cpet_type == 'HLT':
                                                                c_health = round(c_health + dmg['DMG'])
                                                            elif cpet_type == 'LIFE':
                                                                c_health = round(c_health + dmg['DMG'])
                                                                t_health = round(t_health - dmg['DMG'])
                                                            elif cpet_type == 'DRAIN':
                                                                c_stamina = round(c_stamina + dmg['DMG'])
                                                                t_stamina = round(t_stamina - dmg['DMG'])
                                                            elif cpet_type == 'FLOG':
                                                                c_attack = round(c_attack + dmg['DMG'])
                                                                t_attack = round(t_attack - dmg['DMG'])
                                                            elif cpet_type == 'WITHER':
                                                                c_defense = round(c_defense + dmg['DMG'])
                                                                t_defense = round(t_defense - dmg['DMG'])
                                                            elif cpet_type == 'RAGE':
                                                                c_defense = round(c_defense - dmg['DMG'])
                                                                c_attack = round(c_attack + dmg['DMG'])
                                                            elif cpet_type == 'BRACE':
                                                                c_defense = round(c_defense + dmg['DMG'])
                                                                c_attack = round(c_attack - dmg['DMG'])
                                                            elif cpet_type == 'BZRK':
                                                                c_health = round(c_health - dmg['DMG'])
                                                                c_attack = round(c_attack + dmg['DMG'])
                                                            elif cpet_type == 'CRYSTAL':
                                                                c_health = round(c_health - dmg['DMG'])
                                                                c_defense = round(c_defense + dmg['DMG'])
                                                            elif cpet_type == 'GROWTH':
                                                                c_max_health = round(c_max_health - dmg['DMG'])
                                                                c_defense = round(c_defense + (dmg['DMG'] * .5))
                                                                c_attack = round(c_attack + (dmg['DMG'] * .5))
                                                            elif cpet_type == 'STANCE':
                                                                tempattack = dmg['DMG']
                                                                c_attack = c_defense
                                                                c_defense = tempattack
                                                            elif cpet_type == 'CONFUSE':
                                                                tempattack = dmg['DMG']
                                                                t_attack = t_defense
                                                                t_defense = tempattack
                                                            elif cpet_type == 'BLINK':
                                                                c_stamina = round(c_stamina - dmg['DMG'])
                                                                t_stamina = round(t_stamina + dmg['DMG'])
                                                            elif cpet_type == 'SLOW':
                                                                tempstam = round(t_stamina + dmg['DMG'])
                                                                c_stamina = round(c_stamina - dmg['DMG'])
                                                                t_stamina = c_stamina
                                                                c_stamina = tempstam
                                                            elif cpet_type == 'HASTE':
                                                                tempstam = round(t_stamina - dmg['DMG'])
                                                                c_stamina = round(c_stamina + dmg['DMG'])
                                                                t_stamina = c_stamina
                                                                c_stamina = tempstam
                                                            elif cpet_type == 'SOULCHAIN':
                                                                c_stamina = round(dmg['DMG'])
                                                                t_stamina = c_stamina
                                                            elif cpet_type == 'GAMBLE':
                                                                c_health = round(dmg['DMG'])
                                                                t_health = c_health
                                                            elif cpet_type == 'FEAR':
                                                                c_max_health = round(c_max_health - dmg['DMG'])
                                                                t_defense = round(t_defense - (dmg['DMG'] * .5))
                                                                t_attack = round(t_attack - (dmg['DMG'] * .5))
                                                            elif cpet_type == 'WAVE':
                                                                t_health = round(t_health - dmg['DMG'])
                                                            elif cpet_type == 'BLAST':
                                                                if dmg['DMG'] >= 100:
                                                                    dmg['DMG'] = 100
                                                                t_health = round(t_health - dmg['DMG'])
                                                            elif cpet_type == 'CREATION':
                                                                c_max_health = round(c_max_health + dmg['DMG'])
                                                                c_health = round(c_health + dmg['DMG'])
                                                            elif cpet_type == 'DESTRUCTION':
                                                                if dmg['DMG'] >= 100:
                                                                    dmg['DMG'] = 100
                                                                t_max_health = round(t_max_health - dmg['DMG'])
                                                                if t_max_health <=1:
                                                                    t_max_health = 1

                                                            #c_stamina = c_stamina - int(dmg['STAMINA_USED'])
                                                            if c_universe == "Persona":
                                                                petdmg = damage_cal(t_for_c_opponent_affinities, basic_attack_name, cmove1_element, c_universe, c_card, c_1, c_attack,
                                                                                    c_defense, t_defense, c_stamina,
                                                                                    c_enhancer_used, c_health, t_health,
                                                                                    t_stamina, c_max_health, t_attack,
                                                                                    c_special_move_description, turn_total,
                                                                                    ccard_lvl_ap_buff, None)

                                                                t_health = t_health - petdmg['DMG']

                                                                embedVar = discord.Embed(
                                                                    title=f"**PERSONA!**\n{cpet_name} was summoned from {c_card}'s soul dealing **{petdmg['DMG']}** damage!!",
                                                                    colour=0xe91e63)
                                                                await battle_msg.delete(delay=None)
                                                                if not operformance:
                                                                    csummon_file = showsummon(cpet_image, cpet_name, dmg['MESSAGE'], cpet_lvl, cpet_bond)
                                                                    embedVar.set_image(url="attachment://pet.png")
                                                                    await asyncio.sleep(2)
                                                                    battle_msg = await private_channel.send(embed=embedVar, file=csummon_file)
                                                                    await asyncio.sleep(2)
                                                                    await battle_msg.delete(delay=None)
                                                                
                                                                #await button_ctx.send(embed=embedVar, file=csummon_file)
                                                                previous_moves.append(f"(**{turn_total}**) **Persona!** 🩸 : **{cpet_name}** was summoned from **{c_card}'s** soul dealing **{petdmg['DMG']}** damage!\n**{t_card}** summon disabled!")
                                                                t_pet_used = True
                                                                await button_ctx.defer(ignore=True)
                                                                
                                                            else:
                                                                embedVar = discord.Embed(
                                                                    title=f"{c_card} Summoned 🧬 {cpet_name}",
                                                                    colour=0xe91e63)

                                                                #await private_channel.send(embed=embedVar)
                                                                await battle_msg.delete(delay=None)
                                                                if not operformance: #FindMeT
                                                                    csummon_file = showsummon(cpet_image, cpet_name, dmg['MESSAGE'], cpet_lvl, cpet_bond)
                                                                    embedVar.set_image(url="attachment://pet.png")
                                                                    await asyncio.sleep(2)
                                                                    battle_msg = await private_channel.send(embed=embedVar, file=csummon_file)
                                                                    await asyncio.sleep(2)
                                                                    await battle_msg.delete(delay=None)
                                                                previous_moves.append(f"(**{turn_total}**) **{c_card}** Summoned 🧬 **{cpet_name}**: {dmg['MESSAGE']}")
                                                                
                                                                await button_ctx.defer(ignore=True)
                                                                
                                                            turn = 2
                                                        else:
                                                            previous_moves.append(f"(**{turn_total}**) {c_card} Could not summon 🧬 **{cpet_name}**. Needs rest")
                                                            await button_ctx.defer(ignore=True)
                                                            turn = 2
                                                    else:
                                                        previous_moves.append(f"(**{turn_total}**) {c_card} Could not summon 🧬 **{cpet_name}**. Needs rest")
                                                        await button_ctx.defer(ignore=True)
                                                elif button_ctx.custom_id == "7":
                                                    c_enhancer_used = True
                                                    dmg = damage_cal(t_for_c_opponent_affinities, basic_attack_name, cmove1_element, c_universe, c_card, c_enhancer, c_attack, c_defense,
                                                                    o_defense, c_stamina, c_enhancer_used, c_health, o_health,
                                                                    o_stamina, c_max_health, o_attack,
                                                                    c_special_move_description, turn_total, ccard_lvl_ap_buff, None)
                                                    c_enhancer_used = False
                                                    cdmg = dmg['DMG']
                                                    cenh_type = dmg['ENHANCED_TYPE']
                                                    if dmg['CAN_USE_MOVE']:
                                                        if cenh_type == 'ATK':
                                                            o_attack = round(o_attack + dmg['DMG'])
                                                        elif cenh_type == 'DEF':
                                                            o_defense = round(o_defense + dmg['DMG'])
                                                        elif cenh_type == 'STAM':
                                                            o_stamina = round(o_stamina + dmg['DMG'])
                                                        elif cenh_type == 'HLT':
                                                            o_health = round(o_health + dmg['DMG'])
                                                        elif cenh_type == 'LIFE':
                                                            o_health = round(o_health + dmg['DMG'])
                                                            c_health = round(c_health - dmg['DMG'])
                                                        elif cenh_type == 'DRAIN':
                                                            o_stamina = round(o_stamina + dmg['DMG'])
                                                            c_stamina = round(c_stamina - dmg['DMG'])
                                                        elif cenh_type == 'FLOG':
                                                            o_attack = round(o_attack + dmg['DMG'])
                                                            t_attack = round(t_attack - dmg['DMG'])
                                                        elif cenh_type == 'WITHER':
                                                            o_defense = round(o_defense + dmg['DMG'])
                                                            t_defense = round(t_defense - dmg['DMG'])
                                                        elif cenh_type == 'RAGE':
                                                            o_defense = round(o_defense - dmg['DMG'])
                                                            o_attack = round(o_attack + dmg['DMG'])
                                                        elif cenh_type == 'BRACE':
                                                            o_defense = round(o_defense + dmg['DMG'])
                                                            o_attack = round(o_attack - dmg['DMG'])
                                                        elif cenh_type == 'BZRK':
                                                            o_health = round(o_health - dmg['DMG'])
                                                            o_attack = round(o_attack + dmg['DMG'])
                                                        elif cenh_type == 'CRYSTAL':
                                                            o_health = round(o_health - dmg['DMG'])
                                                            o_defense = round(o_defense + dmg['DMG'])
                                                        elif cenh_type == 'GROWTH':
                                                            o_max_health = round(o_max_health - dmg['DMG'])
                                                            o_defense = round(o_defense + (dmg['DMG'] * .5))
                                                            o_attack = round(o_attack + (dmg['DMG'] * .5))
                                                        elif cenh_type == 'STANCE':
                                                            tempattack = dmg['DMG']
                                                            o_attack = o_defense
                                                            o_defense = tempattack
                                                        elif cenh_type == 'CONFUSE':
                                                            tempattack = dmg['DMG']
                                                            c_attack = c_defense
                                                            c_defense = tempattack
                                                        elif cenh_type == 'BLINK':
                                                            o_stamina = round(o_stamina - dmg['DMG'])
                                                            c_stamina = round(c_stamina + dmg['DMG'])
                                                        elif cenh_type == 'SLOW':
                                                            tempstam = round(c_stamina + dmg['DMG'])
                                                            o_stamina = round(o_stamina - dmg['DMG'])
                                                            c_stamina = o_stamina
                                                            o_stamina = tempstam
                                                        elif cenh_type == 'HASTE':
                                                            tempstam = round(c_stamina - dmg['DMG'])
                                                            o_stamina = round(o_stamina + dmg['DMG'])
                                                            c_stamina = o_stamina
                                                            o_stamina = tempstam
                                                        elif cenh_type == 'SOULCHAIN':
                                                            o_stamina = round(dmg['DMG'])
                                                            c_stamina = o_stamina
                                                        elif cenh_type == 'GAMBLE':
                                                            o_health = round(dmg['DMG'])
                                                            c_health = o_health
                                                        elif cenh_type == 'FEAR':
                                                            o_max_health = round(o_max_health - dmg['DMG'])
                                                            c_defense = round(c_defense - (dmg['DMG'] * .5))
                                                            c_attack = round(c_attack - (dmg['DMG'] * .5))
                                                        elif cenh_type == 'WAVE':
                                                            t_health = round(t_health - dmg['DMG'])
                                                        elif cenh_type == 'BLAST':
                                                            t_health = round(t_health - dmg['DMG'])
                                                        elif cenh_type == 'CREATION':
                                                            o_max_health = round(o_max_health + dmg['DMG'])
                                                            o_health = round(o_health + dmg['DMG'])
                                                        elif enh_type == 'DESTRUCTION':
                                                            t_max_health = round(t_max_health - dmg['DMG'])
                                                            # c_max_health = round(c_max_health - dmg['DMG'])
                                                            if t_max_health <=1:
                                                                t_max_health = 1
                                                            # if c_max_health <=1:
                                                            #     c_max_health = 1
                                                        
                                                        if enh_type in Stamina_Enhancer_Check or enh_type in Time_Enhancer_Check or enh_type in Control_Enhancer_Check:
                                                            c_stamina = c_stamina
                                                        else:
                                                            c_stamina = c_stamina - int(dmg['STAMINA_USED'])

                                                        embedVar = discord.Embed(
                                                            title=f"**{c_card}** ASSISTED **{o_card}** 👥",
                                                            colour=0xe91e63)
                                                        embedVar.add_field(name=f"{c_card} used {cmove_enhanced_text}!",
                                                                        value=f"Enhanced {cenh_type}")
                                                        #await button_ctx.send(embed=embedVar)
                                                        previous_moves.append(f'(**{turn_total}**) **{c_card}** used {cmove_enhanced_text}:👥 Assisting **{o_card}**')
                                                        await button_ctx.defer(ignore=True)
                                                        turn_total = turn_total + 1
                                                        turn = 3
                                                    else:
                                                        previous_moves.append(f"(**{turn_total}**) **{c_card}** not enough Stamina to use this move")
                                                        await button_ctx.defer(ignore=True)
                                                        turn = 2
                                                        await button_ctx.defer(ignore=True)
                                                elif button_ctx.custom_id == "0":
                                                    if c_universe == "Persona":
                                                        block_message = f"**Confidant Block!*** 🩸: **{c_card}** Blocked 🛡️"
                                                        c_block_used = True
                                                        c_defense = round(c_defense * 2)
                                                        embedVar = discord.Embed(
                                                            title=f"**{c_card}** Defended 🛡️ {o_card}",
                                                            colour=0xe91e63)

                                                        #await button_ctx.send(embed=embedVar)
                                                        previous_moves.append(block_message)
                                                        turn_total = turn_total + 1
                                                        turn = 3
                                                        await button_ctx.defer(ignore=True)

                                                    if c_stamina >= 20:
                                                        if c_universe == "Attack On Titan":
                                                            previous_moves.append(f"(**{turn_total}**) **Rally** 🩸 ! **{c_card}** Increased Max Health ❤️")
                                                            c_max_health = round(c_max_health + 100)
                                                            c_health = c_health + 100

                                                        if c_universe == "Bleach":
                                                            dmg = damage_cal(t_for_c_opponent_affinities, basic_attack_name, cmove1_element, c_universe, c_card, c_1, c_attack, c_defense, t_defense,
                                                                        c_stamina, c_enhancer_used, c_health, t_health, t_stamina,
                                                                        c_max_health, t_attack, c_special_move_description,
                                                                        turn_total, ccard_lvl_ap_buff, None)
                                                            previous_moves.append(f"(**{turn_total}**) **{c_card}** Exerted their 🩸 Spiritual Pressure - {dmg['MESSAGE']}")
                                                            if dmg['REPEL']:
                                                                c_health = c_health - dmg['DMG']
                                                            elif dmg['ABSORB']:
                                                                t_health = t_health + dmg['DMG']
                                                            elif dmg['ELEMENT'] == water_element:
                                                                if cmove1_element == water_element:
                                                                    c_basic_water_buff = c_basic_water_buff + 25
                                                                if cmove2_element == water_element:
                                                                    c_special_water_buff = c_special_water_buff + 25
                                                                if cmove3_element == water_element:
                                                                    c_ultimate_water_buff = c_ultimate_water_buff + 25
                                                                t_health = t_health - dmg['DMG']

                                                            elif dmg['ELEMENT'] == ice_element:
                                                                c_ice_counter = c_ice_counter + 1
                                                                if c_ice_counter == 3:
                                                                    c_freeze_enh = True
                                                                    c_ice_counter = 0
                                                                t_health = t_health - dmg['DMG']

                                                            elif dmg['ELEMENT'] == time_element:
                                                                c_stamina = 0
                                                                t_health = t_health - dmg['DMG']

                                                            elif dmg['ELEMENT'] == bleed_element:
                                                                c_bleed_counter = c_bleed_counter + 1
                                                                if c_bleed_counter == 5:
                                                                    c_bleed_hit = True
                                                                    c_bleed_counter = 0
                                                                t_health = t_health - dmg['DMG']

                                                            elif dmg['ELEMENT'] == recoil_element:
                                                                c_health = c_health - (dmg['DMG'] * .25)
                                                                t_health = t_health - dmg['DMG']

                                                            elif dmg['ELEMENT'] == earth_element:
                                                                c_defense = c_defense + (dmg['DMG'] * .20)
                                                                t_health = t_health - dmg['DMG']

                                                            elif dmg['ELEMENT'] == death_element:
                                                                t_max_health = t_max_health - (dmg['DMG'] * .07)
                                                                t_health = t_health - dmg['DMG']

                                                            elif dmg['ELEMENT'] == light_element:
                                                                c_stamina = round(c_stamina + (dmg['STAMINA_USED'] / 2))
                                                                t_health = t_health - dmg['DMG']

                                                            elif dmg['ELEMENT'] == dark_element:
                                                                c_stamina = c_stamina + 5
                                                                t_stamina = t_stamina - 5
                                                                t_health = t_health - dmg['DMG']

                                                            elif dmg['ELEMENT'] == life_element:
                                                                c_health = c_health + (dmg['DMG'] * .15)
                                                                t_health = t_health - dmg['DMG']

                                                            elif dmg['ELEMENT'] == psychic_element:
                                                                t_defense = t_defense - (dmg['DMG'] * .08)
                                                                t_attack = t_attack - (dmg['DMG'] * .08)
                                                                t_health = t_health - dmg['DMG']

                                                            elif dmg['ELEMENT'] == fire_element:
                                                                c_burn_dmg = c_burn_dmg + round(dmg['DMG'] * .20)
                                                                t_health = t_health - dmg['DMG']


                                                            elif dmg['ELEMENT'] == electric_element:
                                                                c_shock_buff = c_shock_buff +  (dmg['DMG'] * .07)
                                                                t_health = t_health - dmg['DMG']

                                                            elif dmg['ELEMENT'] == poison_element:
                                                                if c_poison_dmg <= 100:
                                                                    c_poison_dmg = c_poison_dmg + 8
                                                                t_health = t_health - dmg['DMG']
                                                                
                                                            elif dmg['ELEMENT'] == gravity_element:
                                                                c_gravity_hit = True
                                                                t_health = t_health - dmg['DMG']
                                                                
                                                            else:
                                                                t_health = t_health - dmg['DMG']

                                                        c_block_used = True
                                                        c_stamina = c_stamina - 20
                                                        c_defense = round(c_defense * 2)
                                                        embedVar = discord.Embed(
                                                            title=f"**{c_card}** Defended 🛡️ {o_card}",
                                                            colour=0xe91e63)

                                                        #await button_ctx.send(embed=embedVar)
                                                        previous_moves.append(f"(**{turn_total}**) **{c_card}**: Defended 🛡️ **{o_card}**")
                                                        turn_total = turn_total + 1
                                                        turn = 3
                                                        await button_ctx.defer(ignore=True)
                                                    else:
                                                        previous_moves.append(f"(**{turn_total}**) **{c_card}** is too tired to block.")
                                                        turn = 2
                                                        await button_ctx.defer(ignore=True)

                                                if button_ctx.custom_id != "5" and button_ctx.custom_id != "6" and button_ctx.custom_id != "7" and button_ctx.custom_id != "0" and button_ctx.custom_id != "q" and button_ctx.custom_id in options:
                                                    # If you have enough stamina for move, use it

                                                    if dmg['CAN_USE_MOVE']:
                                                        if dmg['ENHANCE']:
                                                            enh_type = dmg['ENHANCED_TYPE']

                                                            if enh_type == 'ATK':
                                                                c_attack = round(c_attack + dmg['DMG'])
                                                            elif enh_type == 'DEF':
                                                                c_defense = round(c_defense + dmg['DMG'])
                                                            elif enh_type == 'STAM':
                                                                c_stamina = round(c_stamina + dmg['DMG'])
                                                            elif enh_type == 'HLT':
                                                                c_health = round(c_health + dmg['DMG'])
                                                            elif enh_type == 'LIFE':
                                                                c_health = round(c_health + dmg['DMG'])
                                                                t_health = round(t_health - dmg['DMG'])
                                                            elif enh_type == 'DRAIN':
                                                                c_stamina = round(c_stamina + dmg['DMG'])
                                                                t_stamina = round(t_stamina - dmg['DMG'])
                                                            elif enh_type == 'FLOG':
                                                                c_attack = round(c_attack + dmg['DMG'])
                                                                t_attack = round(t_attack - dmg['DMG'])
                                                            elif enh_type == 'WITHER':
                                                                c_defense = round(c_defense + dmg['DMG'])
                                                                t_defense = round(t_defense - dmg['DMG'])
                                                            elif enh_type == 'RAGE':
                                                                c_defense = round(c_defense - dmg['DMG'])
                                                                c_attack = round(c_attack + dmg['DMG'])
                                                            elif enh_type == 'BRACE':
                                                                c_defense = round(c_defense + dmg['DMG'])
                                                                c_attack = round(c_attack - dmg['DMG'])
                                                            elif enh_type == 'BZRK':
                                                                c_health = round(c_health - dmg['DMG'])
                                                                c_attack = round(c_attack + dmg['DMG'])
                                                            elif enh_type == 'CRYSTAL':
                                                                c_health = round(c_health - dmg['DMG'])
                                                                c_defense = round(c_defense + dmg['DMG'])
                                                            elif enh_type == 'GROWTH':
                                                                c_max_health = round(c_max_health - dmg['DMG'])
                                                                c_defense = round(c_defense + (dmg['DMG'] * .5))
                                                                c_attack = round(c_attack + (dmg['DMG'] * .5))
                                                            elif enh_type == 'STANCE':
                                                                tempattack = dmg['DMG']
                                                                c_attack = c_defense
                                                                c_defense = tempattack
                                                            elif enh_type == 'CONFUSE':
                                                                tempattack = dmg['DMG']
                                                                t_attack = t_defense
                                                                t_defense = tempattack
                                                            elif enh_type == 'BLINK':
                                                                c_stamina = round(c_stamina - dmg['DMG'])
                                                                t_stamina = round(t_stamina + dmg['DMG'])
                                                            elif enh_type == 'SLOW':
                                                                tempstam = round(t_stamina + dmg['DMG'])
                                                                c_stamina = round(c_stamina - dmg['DMG'])
                                                                t_stamina = c_stamina
                                                                c_stamina = tempstam
                                                            elif enh_type == 'HASTE':
                                                                tempstam = round(t_stamina - dmg['DMG'])
                                                                c_stamina = round(c_stamina + dmg['DMG'])
                                                                t_stamina = c_stamina
                                                                c_stamina = tempstam
                                                            elif enh_type == 'SOULCHAIN':
                                                                c_stamina = round(dmg['DMG'])
                                                                t_stamina = c_stamina
                                                            elif enh_type == 'GAMBLE':
                                                                if mode in D_modes:
                                                                    t_health = round(dmg['DMG']) * 2
                                                                    c_health = round(dmg['DMG'])
                                                                elif mode in B_modes:
                                                                    t_health = round(dmg['DMG']) * 4
                                                                    c_health = round(dmg['DMG'])
                                                                else:
                                                                    t_health = round(dmg['DMG'])
                                                                    c_health = round(dmg['DMG'])
                                                            elif enh_type == 'FEAR':
                                                                c_max_health = round(c_max_health - dmg['DMG'])
                                                                t_defense = round(t_defense - (dmg['DMG'] * .5))
                                                                t_attack = round(t_attack - (dmg['DMG'] * .5))
                                                            elif enh_type == 'WAVE':
                                                                t_health = round(t_health - dmg['DMG'])
                                                            elif enh_type == 'BLAST':
                                                                t_health = round(t_health - dmg['DMG'])
                                                            elif enh_type == 'CREATION':
                                                                c_max_health = round(c_max_health + dmg['DMG'])
                                                                c_health = round(c_health + dmg['DMG'])
                                                            elif enh_type == 'DESTRUCTION':
                                                                t_max_health = round(t_max_health - dmg['DMG'])
                                                                # c_max_health = round(c_max_health - dmg['DMG'])
                                                                if t_max_health <=1:
                                                                    t_max_health = 1
                                                                # if c_max_health <=1:
                                                                #     c_max_health = 1
                                                            
                                                            if enh_type in Stamina_Enhancer_Check or enh_type in Time_Enhancer_Check or enh_type in Control_Enhancer_Check:
                                                                c_stamina = c_stamina
                                                            else:
                                                                c_stamina = c_stamina - int(dmg['STAMINA_USED'])

                                                            embedVar = discord.Embed(title=f"{dmg['MESSAGE']}",
                                                                                    colour=embed_color_c)
                                                            #await button_ctx.send(embed=embedVar)
                                                            previous_moves.append(f"(**{turn_total}**) **{c_card}**: 🦠 {dmg['MESSAGE']}")
                                                            turn_total = turn_total + 1
                                                            turn = 3
                                                            await button_ctx.defer(ignore=True)
                                                        elif dmg['DMG'] == 0:
                                                            c_stamina = c_stamina - int(dmg['STAMINA_USED'])

                                                            embedVar = discord.Embed(title=f"{dmg['MESSAGE']}", colour=embed_color_c)
                                                            previous_moves.append(f"(**{turn_total}**) **{c_card}**: {dmg['MESSAGE']}")
                                                            if carm_barrier_active:
                                                                carm_barrier_active=False
                                                                embedVar.add_field(name=f"{c_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                previous_moves.append(f"(**{turn_total}**) **{c_card}**'s 💠 Barrier Disabled!")
                                                            #await button_ctx.send(embed=embedVar)
                                                            turn_total = turn_total + 1
                                                            turn = 3
                                                            await button_ctx.defer(ignore=True)
                                                        else:
                                                            if t_universe == "Naruto" and t_stamina < 10:
                                                                t_stored_damage = round(dmg['DMG'])
                                                                t_naruto_heal_buff = t_naruto_heal_buff + t_stored_damage
                                                                t_health = t_health 
                                                                embedVar = discord.Embed(title=f"{t_card}: Substitution Jutsu", description=f"{c_card} strikes a log", colour=0xe91e63)
                                                                previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸: Substitution Jutsu")
                                                                if not t_used_resolve:
                                                                    previous_moves.append(f"(**{turn_total}**) 🩸**{t_stored_damage}** Hasirama Cells stored. 🩸**{t_naruto_heal_buff}** total stored.")
                                                                if carm_barrier_active:
                                                                    carm_barrier_active=False
                                                                    embedVar.add_field(name=f"{c_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                    previous_moves.append(f"(**{turn_total}**) **{c_card}**'s 💠 Barrier Disabled!")
                                                                #await private_channel.send(embed=embedVar)
                                                                await button_ctx.defer(ignore=True)
                                                            elif tarm_shield_active and dmg['ELEMENT'] != dark_element:
                                                                if tshield_value > 0:
                                                                    tshield_value = tshield_value -dmg['DMG']
                                                                    t_health = t_health 
                                                                    if tshield_value <=0:
                                                                        embedVar = discord.Embed(title=f"{t_card}'s' **Shield** Shattered!", description=f"{c_card} breaks the **Shield**!", colour=0xe91e63)
                                                                        previous_moves.append(f"(**{turn_total}**) **{t_card}'s** 🌐 Shield Shattered!")
                                                                        if carm_barrier_active:
                                                                            carm_barrier_active=False
                                                                            embedVar.add_field(name=f"{c_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                            previous_moves.append(f"(**{turn_total}**) **{c_card}**'s 💠 Barrier Disabled!")
                                                                        #await private_channel.send(embed=embedVar)
                                                                        tarm_shield_active = False
                                                                        await button_ctx.defer(ignore=True)
                                                                    else:
                                                                        embedVar = discord.Embed(title=f"{t_card} Activates **Shield** 🌐", description=f"**{c_card}** strikes the Shield 🌐\n**{tshield_value} Shield** Left!", colour=0xe91e63)
                                                                        previous_moves.append(f"(**{turn_total}**) **{c_card}** strikes **{t_card}**'s Shield 🌐\n**{tshield_value} Shield** Left!")
                                                                        if carm_barrier_active:
                                                                            carm_barrier_active=False
                                                                            embedVar.add_field(name=f"{c_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                            previous_moves.append(f"(**{turn_total}**) **{c_card}**'s 💠 Barrier Disabled!")
                                                                        #await private_channel.send(embed=embedVar)
                                                                        await button_ctx.defer(ignore=True)

                                                            elif tarm_barrier_active and dmg['ELEMENT'] != psychic_element :
                                                                if tbarrier_count >1:
                                                                    t_health = t_health 
                                                                    embedVar = discord.Embed(title=f"{t_card} Activates **Barrier** 💠", description=f"{c_card}'s attack **Nullified**!\n **{tbarrier_count - 1} Barriers** remain!", colour=0xe91e63)
                                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}** Activates Barrier 💠  {c_card}'s attack **Nullified**!\n💠 {tbarrier_count - 1} **Barriers** remain!")
                                                                    if carm_barrier_active:
                                                                        carm_barrier_active=False
                                                                        embedVar.add_field(name=f"{c_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                        previous_moves.append(f"(**{turn_total}**) **{c_card}**'s 💠 Barrier Disabled!")
                                                                    #await private_channel.send(embed=embedVar)
                                                                    await button_ctx.defer(ignore=True)
                                                                    tbarrier_count = tbarrier_count - 1
                                                                elif tbarrier_count==1:
                                                                    embedVar = discord.Embed(title=f"{t_card}'s **Barrier** Broken!", description=f"{c_card} destroys the **Barrier**", colour=0xe91e63)
                                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}**'s Barrier Broken!")
                                                                    tbarrier_count = tbarrier_count - 1
                                                                    if carm_barrier_active:
                                                                        carm_barrier_active=False
                                                                        embedVar.add_field(name=f"{c_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                        previous_moves.append(f"(**{turn_total}**) **{c_card}**'s 💠 Barrier Disabled!")
                                                                    #await private_channel.send(embed=embedVar)
                                                                    await button_ctx.defer(ignore=True)
                                                                    tarm_barrier_active = False
                                                            elif tarm_parry_active and dmg['ELEMENT'] != earth_element:
                                                                if tparry_count > 1:
                                                                    t_health = t_health
                                                                    tparry_damage = round(dmg['DMG'])
                                                                    t_health = round(t_health - (tparry_damage * .75))
                                                                    c_health = round(c_health - (tparry_damage * .25))
                                                                    tparry_count = tparry_count - 1
                                                                    embedVar = discord.Embed(title=f"{t_card} Activates **Parry** 🔄", description=f"{c_card} takes {round(tparry_damage * .25)}! DMG\n **{tparry_count} Parries** to go!!", colour=0xe91e63)
                                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}** Activates Parry 🔄 {c_card} takes {round(tparry_damage * .25)}! DMG\n **{tparry_count}  Parries** to go!!")
                                                                    if carm_barrier_active:
                                                                        carm_barrier_active=False
                                                                        embedVar.add_field(name=f"{c_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                        previous_moves.append(f"(**{turn_total}**) **{c_card}**'s 💠 Barrier Disabled!")
                                                                    #await private_channel.send(embed=embedVar)
                                                                    await button_ctx.defer(ignore=True)
                                                                    
                                                                elif tparry_count==1:
                                                                    t_health = t_health
                                                                    tparry_damage = round(dmg['DMG'])
                                                                    t_health = round(t_health - (tparry_damage * .75))
                                                                    c_health = round(c_health - (tparry_damage * .25))
                                                                    embedVar = discord.Embed(title=f"{t_card} **Parry** Penetrated!!", description=f"{c_card} takes {round(tparry_damage * .25)}! DMG and breaks the **Parry**", colour=0xe91e63)
                                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}** Parry Penetrated! **{c_card}** takes **{round(tparry_damage * .25)}**! DMG and breaks the **Parry**")
                                                                    tparry_count = tparry_count - 1
                                                                    if carm_barrier_active:
                                                                        carm_barrier_active=False
                                                                        embedVar.add_field(name=f"{c_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                        previous_moves.append(f"(**{turn_total}**) **{c_card}**'s 💠 Barrier Disabled!")
                                                                    #await private_channel.send(embed=embedVar)
                                                                    tarm_parry_active = False
                                                                    await button_ctx.defer(ignore=True)
                                                            else:
                                                                if dmg['REPEL']:
                                                                    c_health = c_health - int(dmg['DMG'])
                                                                elif dmg['ABSORB']:
                                                                    t_health = t_health + int(dmg['DMG'])
                                                                elif dmg['ELEMENT'] == water_element:
                                                                    if cmove1_element == water_element:
                                                                        c_basic_water_buff = c_basic_water_buff + 25
                                                                    if cmove2_element == water_element:
                                                                        c_special_water_buff = c_special_water_buff + 25
                                                                    if cmove3_element == water_element:
                                                                        c_ultimate_water_buff = c_ultimate_water_buff + 25
                                                                    t_health = t_health - dmg['DMG']

                                                                elif dmg['ELEMENT'] == ice_element:
                                                                    c_ice_counter = c_ice_counter + 1
                                                                    if c_ice_counter == 3:
                                                                        c_freeze_enh = True
                                                                        c_ice_counter = 0
                                                                    t_health = t_health - dmg['DMG']

                                                                elif dmg['ELEMENT'] == time_element:
                                                                    c_stamina = 0
                                                                    t_health = t_health - dmg['DMG']

                                                                elif dmg['ELEMENT'] == bleed_element:
                                                                    c_bleed_counter = c_bleed_counter + 1
                                                                    if c_bleed_counter == 5:
                                                                        c_bleed_hit = True
                                                                        c_bleed_counter = 0
                                                                    t_health = t_health - dmg['DMG']

                                                                elif dmg['ELEMENT'] == recoil_element:
                                                                    c_health = c_health - (dmg['DMG'] * .25)
                                                                    t_health = t_health - dmg['DMG']

                                                                elif dmg['ELEMENT'] == earth_element:
                                                                    c_defense = c_defense + (dmg['DMG'] * .20)
                                                                    t_health = t_health - dmg['DMG']

                                                                elif dmg['ELEMENT'] == death_element:
                                                                    t_max_health = t_max_health - (dmg['DMG'] * .07)
                                                                    t_health = t_health - dmg['DMG']

                                                                elif dmg['ELEMENT'] == light_element:
                                                                    c_stamina = round(c_stamina + (dmg['STAMINA_USED'] / 2))
                                                                    t_health = t_health - dmg['DMG']

                                                                elif dmg['ELEMENT'] == dark_element:
                                                                    c_stamina = c_stamina + 5
                                                                    t_stamina = t_stamina - 5
                                                                    t_health = t_health - dmg['DMG']

                                                                elif dmg['ELEMENT'] == life_element:
                                                                    c_health = c_health + (dmg['DMG'] * .15)
                                                                    t_health = t_health - dmg['DMG']

                                                                elif dmg['ELEMENT'] == psychic_element:
                                                                    t_defense = t_defense - (dmg['DMG'] * .08)
                                                                    t_attack = t_attack - (dmg['DMG'] * .08)
                                                                    t_health = t_health - dmg['DMG']

                                                                elif dmg['ELEMENT'] == fire_element:
                                                                    c_burn_dmg = c_burn_dmg + round(dmg['DMG'] * .20)
                                                                    t_health = t_health - dmg['DMG']


                                                                elif dmg['ELEMENT'] == electric_element:
                                                                    c_shock_buff = c_shock_buff +  (dmg['DMG'] * .07)
                                                                    t_health = t_health - dmg['DMG']

                                                                elif dmg['ELEMENT'] == poison_element:
                                                                    if c_poison_dmg <= 100:
                                                                        c_poison_dmg = c_poison_dmg + 8
                                                                    t_health = t_health - dmg['DMG']
                                                                    
                                                                elif dmg['ELEMENT'] == gravity_element:
                                                                    c_gravity_hit = True
                                                                    t_health = t_health - dmg['DMG']
                                                            
                                                                else:
                                                                    t_health = t_health - dmg['DMG']


                                                                embedVar = discord.Embed(title=f"{dmg['MESSAGE']}", colour=0xe91e63)
                                                                previous_moves.append(f"(**{turn_total}**) **{c_card}**: {dmg['MESSAGE']}")
                                                                if carm_siphon_active:
                                                                    siphon_damage = (dmg['DMG'] * .10) + csiphon_value
                                                                    c_health = round(c_health + siphon_damage)
                                                                    if c_health >= c_max_health:
                                                                        c_health = c_max_health
                                                                        previous_moves.append(f"(**{turn_total}**) **{c_card}**: 💉 Siphoned **Full Health!**")
                                                                    else:
                                                                        previous_moves.append(f"(**{turn_total}**) **{c_card}**: 💉 Siphoned **{round(siphon_damage)}** Health!")
                                                                    await button_ctx.defer(ignore=True)
                                                                if carm_barrier_active:
                                                                    carm_barrier_active=False
                                                                    embedVar.add_field(name=f"{c_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                    previous_moves.append(f"(**{turn_total}**) **{c_card}**'s 💠 Barrier Disabled!")
                                                                #await private_channel.send(embed=embedVar)
                                                                await button_ctx.defer(ignore=True)
                                                            if t_health <= 0:
                                                                if t_final_stand==True:
                                                                    if t_universe == "Dragon Ball Z":
                                                                        embedVar = discord.Embed(title=f"{t_card}'s LAST STAND", description=f"{t_card} FINDS RESOLVE", colour=0xe91e63)
                                                                        embedVar.add_field(name=f"**{t_card}** Resolved and continues to fight", value="All stats & stamina increased")
                                                                        previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 Transformation: Last Stand!!!")
                                                                        if carm_barrier_active:
                                                                            carm_barrier_active=False
                                                                            embedVar.add_field(name=f"{c_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                            previous_moves.append(f"(**{turn_total}**) **{c_card}**'s 💠 Barrier Disabled!")
                                                                        #await private_channel.send(embed=embedVar)
                                                                        t_health = int(.75 * (t_attack + t_defense))
                                                                        
                                                                        t_used_resolve = True
                                                                        t_used_focus = True
                                                                        t_final_stand = False
                                                                        c_stamina = c_stamina - dmg['STAMINA_USED']
                                                                        turn_total = turn_total + 1
                                                                        turn = 3
                                                                        await button_ctx.defer(ignore=True)
                                                                else:
                                                                    t_health = 0
                                                                    c_stamina = c_stamina - dmg['STAMINA_USED']
                                                                    turn_total = turn_total + 1
                                                                    #await button_ctx.defer(ignore=True)
                                                            else:
                                                                c_stamina = c_stamina - dmg['STAMINA_USED']
                                                                turn_total = turn_total + 1
                                                                turn = 3
                                                                #await button_ctx.defer(ignore=True)
                                                    else:
                                                        emessage = m.NOT_ENOUGH_STAMINA
                                                        embedVar = discord.Embed(title=emessage,
                                                                                description=f"Use abilities to Increase `STAM` or enter `FOCUS STATE`!",
                                                                                colour=0xe91e63)
                                                        #await button_ctx.send(embed=embedVar)
                                                        previous_moves.append(f"(**{turn_total}**) **{c_card}** not enough Stamina to use this move") 
                                                        turn = 2
                                                        await button_ctx.defer(ignore=True)
                                            except asyncio.TimeoutError:
                                                await save_spot(self, ctx, universe, mode, currentopponent)
                                                await ctx.author.send(f"{ctx.author.mention} your game timed out. Your channel has been closed but your spot in the tales has been saved where you last left off.")
                                                await ctx.send(f"{ctx.author.mention} your game timed out. Your channel has been closed but your spot in the tales has been saved where you last left off.")
                                                # await discord.TextChannel.delete(private_channel, reason=None)
                                                previous_moves.append(f"(**{turn_total}**) 💨 **{c_card}** Fled...")
                                                c_health = 0
                                                o_health = 0
                                            except Exception as ex:
                                                trace = []
                                                tb = ex.__traceback__
                                                while tb is not None:
                                                    trace.append({
                                                        "filename": tb.tb_frame.f_code.co_filename,
                                                        "name": tb.tb_frame.f_code.co_name,
                                                        "lineno": tb.tb_lineno
                                                    })
                                                    tb = tb.tb_next
                                                print(str({
                                                    'type': type(ex).__name__,
                                                    'message': str(ex),
                                                    'trace': trace
                                                }))
                                                guild = self.bot.get_guild(main.guild_id)
                                                channel = guild.get_channel(main.guild_channel)
                                                await channel.send(f"'PLAYER': **{str(ctx.author)}**, 'GUILD': **{str(ctx.author.guild)}**, TYPE: {type(ex).__name__}, MESSAGE: {str(ex)}, TRACE: {trace}")

                                # Opponent Turn Start
                                elif turn == 3:
                                    if c_bleed_hit:
                                        c_bleed_hit = False
                                        bleed_dmg = 5 * turn_total
                                        t_health = t_health - bleed_dmg
                                        previous_moves.append(f"🩸 **{t_card}** shredded for **{round(bleed_dmg)}** bleed dmg...")

                                    if c_burn_dmg > 3:
                                        t_health = t_health - c_burn_dmg
                                        previous_moves.append(f"🔥 **{t_card}** burned for **{round(c_burn_dmg)}** dmg...")
                                    if c_freeze_enh:
                                        previous_moves.append(f"❄️ **{t_card}** has been frozen for a turn...")
                                        turn_total = turn_total + 1
                                        turn = 0
                                        continue
                                    if c_poison_dmg:
                                        t_health = t_health - c_poison_dmg
                                        previous_moves.append(f"🧪 **{t_card}** poisoned for **{c_poison_dmg}** dmg...")

                                    c_burn_dmg = round(c_burn_dmg / 2)
                                    t_freeze_enh = False
                                    
                                    if t_gravity_hit:
                                        t_gravity_hit = False

                                    if t_title_passive_type:
                                        if t_title_passive_type == "HLT":
                                            t_health = round(t_health + ((t_title_passive_value / 100) * t_health))
                                        if t_title_passive_type == "LIFE":
                                            if t_max_health != o_health:
                                                c_health = c_health - ((t_title_passive_value / 100) * c_health)
                                                t_health = t_health + ((t_title_passive_value / 100) * c_health)
                                        if t_title_passive_type == "ATK":
                                            t_attack = t_attack + t_title_passive_value
                                        if t_title_passive_type == "DEF":
                                            t_defense = t_defense + t_title_passive_value
                                        if t_title_passive_type == "STAM":
                                            if t_stamina > 15:
                                                t_stamina = t_stamina + t_title_passive_value
                                        if t_title_passive_type == "DRAIN":
                                            if t_stamina > 15:
                                                t_stamina = t_stamina + t_title_passive_value
                                                c_stamina = c_stamina - t_title_passive_value
                                        if t_title_passive_type == "FLOG":
                                            t_attack = t_attack + ((t_title_passive_value / 100) * c_attack)
                                            c_attack = c_attack - ((t_title_passive_value / 100) * c_attack)
                                        if t_title_passive_type == "WITHER":
                                            t_defense = t_defense + ((t_title_passive_value / 100) * c_defense)
                                            c_defense = c_defense - ((t_title_passive_value / 100) * c_defense)
                                        if t_title_passive_type == "RAGE":
                                            t_defense = round(t_defense - ((t_title_passive_value / 100) * t_defense))
                                            t_attack = round(t_attack + ((t_title_passive_value / 100) * t_defense))
                                        if t_title_passive_type == "BRACE":
                                            t_defense = round(t_defense + ((t_title_passive_value / 100) * t_attack))
                                            t_attack = round(t_attack - ((t_title_passive_value / 100) * t_attack))
                                        if t_title_passive_type == "BZRK":
                                            t_health = round(t_health - ((t_title_passive_value / 100) * t_health))
                                            t_attack = round(t_attack + ((t_title_passive_value / 100) * t_health))
                                        if t_title_passive_type == "CRYSTAL":
                                            t_health = round(t_health - ((t_title_passive_value / 100) * t_health))
                                            t_defense = round(t_defense + ((t_title_passive_value / 100) * t_health))
                                        if t_title_passive_type == "FEAR":
                                            t_health = t_health - t_title_passive_value
                                            c_defense = c_defense - (t_title_passive_value / 2)
                                            c_attack = c_attack - (t_title_passive_value / 2)
                                        if t_title_passive_type == "GROWTH":
                                            t_health = t_health - t_title_passive_value
                                            t_defense = t_defense + (t_title_passive_value / 2)
                                            t_attack = t_attack + (t_title_passive_value / 2)
                                        if t_title_passive_type == "SLOW":
                                            if turn_total != 0:
                                                turn_total = turn_total - 1
                                        if t_title_passive_type == "HASTE":
                                            turn_total = turn_total + 1
                                        if t_title_passive_type == "STANCE":
                                            tempattack = t_attack + t_title_passive_value
                                            t_attack = t_defense
                                            t_defense = tempattack
                                        if t_title_passive_type == "CONFUSE":
                                            tempattack = c_attack - t_title_passive_value
                                            c_attack = c_defense
                                            c_defense = tempattack
                                        if t_title_passive_type == "BLINK":
                                            c_stamina = c_stamina + t_title_passive_value
                                            t_stamina = t_stamina - t_title_passive_value

                                    if c_card_passive_type:
                                        c_value_for_passive = c_card_tier * .5
                                        c_flat_for_passive = 10 * (c_card_tier * .5)
                                        c_stam_for_passive = 5 * (c_card_tier * .5)
                                        if c_card_passive_type == "HLT":
                                            c_health = round(round(c_health + ((c_value_for_passive / 100) * c_health)))
                                        if c_card_passive_type == "LIFE":
                                            if c_mat_health != c_health:
                                                t_health = round(t_health - ((c_value_for_passive / 100) * t_health))
                                                c_health = round(c_health + ((c_value_for_passive / 100) * t_health))
                                        if c_card_passive_type == "ATK":
                                            c_attack = c_attack + c_flat_for_passive
                                        if c_card_passive_type == "DEF":
                                            c_defense = c_defense + c_flat_for_passive
                                        if c_card_passive_type == "STAM":
                                            if c_stamina > 15:
                                                c_stamina = c_stamina + c_stam_for_passive
                                        if c_card_passive_type == "DRAIN":
                                            if c_stamina > 15:
                                                t_stamina = t_stamina - c_stam_for_passive
                                                c_stamina = c_stamina + c_stam_for_passive
                                        if c_card_passive_type == "FLOG":
                                            t_attack = round(t_attack - ((c_value_for_passive / 100) * t_attack))
                                            c_attack = round(c_attack + ((c_value_for_passive / 100) * t_attack))
                                        if c_card_passive_type == "WITHER":
                                            t_defense = round(t_defense - ((c_value_for_passive / 100) * t_defense))
                                            c_defense = round(c_defense + ((c_value_for_passive / 100) * t_defense))
                                        if c_card_passive_type == "RAGE":
                                            c_defense = round(c_defense - ((c_value_for_passive / 100) * c_defense))
                                            c_attack = round(c_attack + ((c_value_for_passive / 100) * c_defense))
                                        if c_card_passive_type == "BRACE":
                                            c_defense = round(c_defense + ((c_value_for_passive / 100) * c_attack))
                                            c_attack = round(c_attack - ((c_value_for_passive / 100) * c_attack))
                                        if c_card_passive_type == "BZRK":
                                            c_health = round(c_health - ((c_value_for_passive / 100) * c_health))
                                            c_attack = round(c_attack + ((c_value_for_passive / 100) * c_health))
                                        if c_card_passive_type == "CRYSTAL":
                                            c_health = round(c_health - ((c_value_for_passive / 100) * c_health))
                                            c_defense = round(c_defense + ((c_value_for_passive / 100) * c_health))
                                        if c_card_passive_type == "FEAR":
                                            c_health = c_health - c_flat_for_passive
                                            t_defense = t_defense - (c_flat_for_passive / 2)
                                            t_attack = t_attack - (c_flat_for_passive / 2)
                                        if c_card_passive_type == "GROWTH":
                                            c_health = c_health - c_flat_for_passive
                                            c_defense = c_defense + (c_flat_for_passive / 2)
                                            c_attack = c_attack + (c_flat_for_passive / 2)
                                        if c_card_passive_type == "SLOW":
                                            if turn_total != 0:
                                                turn_total = turn_total - 1
                                        if c_card_passive_type == "HASTE":
                                            turn_total = turn_total + 1
                                        if c_card_passive_type == "STANCE":
                                            tempattack = c_attack + c_flat_for_passive
                                            c_attack = c_defense
                                            c_defense = tempattack
                                        if c_card_passive_type == "CONFUSE":
                                            tempattack = t_attack - c_flat_for_passive
                                            t_attack = t_defense
                                            t_defense = tempattack
                                        if c_card_passive_type == "BLINK":
                                            c_stamina = c_stamina - c_stam_for_passive
                                            t_stamina = t_stamina + c_stam_for_passive

                                    # await asyncio.sleep(2)
                                    if t_block_used == True:
                                        t_block_used = False
                                        t_defense = int(t_defense / 2)
                                    if t_attack <= 25:
                                        t_attack = 25
                                    if t_defense <= 30:
                                        t_defense = 30
                                    if t_attack >= 9999:
                                        t_attack = 9999
                                    if t_defense >= 9999:
                                        t_defense = 9999
                                    if t_health >= t_max_health:
                                        t_health = t_max_health
                                    # o_pet_used = True
                                    if t_health <= (t_max_health * .25):
                                        embed_color_t = 0xe74c3c
                                        if t_chainsaw == True:
                                            if t_atk_chainsaw == False:
                                                t_atk_chainsaw = True
                                                t_chainsaw = False
                                                t_defense = t_defense * 2
                                                t_attack = t_attack * 2
                                                t_max_health = t_max_health * 2
                                                embedVar = discord.Embed(title=f"{t_card}'s Devilization",
                                                                        description=f"**{t_card}** Doubles Stats",
                                                                        colour=0xe91e63)
                                                previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸's Devilization")

                                    elif t_health <= (t_max_health * .50):
                                        embed_color_t = 0xe67e22
                                        if t_chainsaw == True:
                                            if t_atk_chainsaw == False:
                                                t_atk_chainsaw = True
                                                t_chainsaw = False
                                                t_defense = t_defense * 2
                                                t_attack = t_attack * 2
                                                t_max_health = t_max_health * 2
                                                embedVar = discord.Embed(title=f"{t_card}'s Devilization",
                                                                        description=f"**{t_card}** Doubles Stats",
                                                                        colour=0xe91e63)
                                                previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸's Devilization")
                                    elif t_health <= (t_max_health * .75):
                                        embed_color_t = 0xf1c40f
                                    else:
                                        embed_color_t = 0x2ecc71

                                    # Focus
                                    if t_stamina < 10:
                                        t_pet_used = False
                                        t_focus_count = t_focus_count + 1
                                        fortitude = 0.0
                                        low = t_health - (t_health * .90)
                                        if low <=0:
                                            low = 1
                                        high = t_health - (t_health * .80)
                                        fortitude = round(random.randint(int(low), int(high)))

                                        t_stamina = t_focus
                                        t_healthcalc = round(((t_focus * .40) + (fortitude * 1)) / 2)
                                        t_attackcalc = round(.20 * ((t_focus * .15) + round(fortitude * 1)))
                                        t_defensecalc = round(.20 * ((t_focus * .10) + round(fortitude * 1)))
                                        t_newhealth = 0
                                        healmessage = ""
                                        messagenumber = 0
                                        if t_title_passive_type:
                                            if t_title_passive_type == "GAMBLE":
                                                t_healthcalc = t_title_passive_value
                                            if t_title_passive_type == "SOULCHAIN":
                                                o_stamina = t_title_passive_value
                                                t_stamina = t_title_passive_value
                                                if mode in co_op_modes:
                                                    c_stmina = t_title_passive_value


                                        if o_title_passive_type:
                                            if o_title_passive_type == "GAMBLE":
                                                t_healthcalc = o_title_passive_value
                                        
                                        if mode in co_op_modes:
                                            if c_title_passive_type:
                                                if c_title_passive_type == "GAMBLE":
                                                    t_healthcalc = c_title_passive_value


                                        if t_universe == "Crown Rift Madness":
                                            healmessage = "yet inner **Madness** drags on..."
                                            messagenumber = 3
                                        else:
                                            if t_health <= t_max_health:
                                                t_newhealth = t_health + t_healthcalc
                                                if t_newhealth > t_max_health:
                                                    healmessage = f"recovered!"
                                                    messagenumber = 1
                                                    t_health = t_max_health
                                                else:
                                                    healmessage = f"stopped the bleeding..."
                                                    messagenumber = 2
                                                    t_health = t_newhealth
                                            else:
                                                healmessage = f"hasn't been touched..."
                                                messagenumber = 0
                                        if mode in B_modes:
                                            embedVar = discord.Embed(title=f"**{t_card}** Enters Focus State",
                                                                    description=f"{t_powerup}", colour=0xe91e63)
                                            embedVar.add_field(name=f"A great aura starts to envelop **{t_card}** ",
                                                            value=f"{t_aura}")
                                            embedVar.set_footer(text=f"{t_card} Says: 'Now, are you ready for a real fight?'")
                                            previous_moves.append(f"(**{turn_total}**) 🌀 **{t_card}** Focused and Says: 'Now, are you ready for a real fight?'")
                                        else:
                                            previous_moves.append(f"(**{turn_total}**) 🌀 **{t_card}** focused and {healmessage}")
                                        if not t_used_resolve:
                                            t_attack = t_attack + t_attackcalc
                                            t_defense = t_defense + t_defensecalc
                                        t_used_focus = True

                                        if not t_used_resolve and t_used_focus and t_universe == "Digimon":  # Digimon Universal Trait
                                            # fortitude or luck is based on health
                                            fortitude = 0.0
                                            low = t_health - (t_health * .75)
                                            high = t_health - (t_health * .66)
                                            fortitude = round(random.randint(int(low), int(high)))
                                            # Resolve Scaling
                                            t_resolve_health = round(fortitude + (.5 * t_resolve))
                                            t_resolve_attack = round((.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                            t_resolve_defense = round((.30 * t_defense) * (t_resolve / (.50 * t_defense)))

                                            t_stamina = t_stamina + t_resolve
                                            t_health = t_health + t_resolve_health
                                            t_attack = round(t_attack + t_resolve_attack)
                                            t_defense = round(t_defense - t_resolve_defense)
                                            t_used_resolve = True

                                            embedVar = discord.Embed(title=f"{t_card} STRENGTHENED RESOLVE :zap:",
                                                                    description=f"**{t_card} says**\n{t_resolve_description}",
                                                                    colour=0xe91e63)
                                            embedVar.add_field(name=f"Transformation: Digivolve", value="On Focus you Resolve.")
                                            #await private_channel.send(embed=embedVar)
                                            if turn_total <=5:
                                                t_attack = round(t_attack * 2)
                                                t_defense = round(t_defense * 2 )
                                                previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 Transformation: Mega Digivolution!!!")
                                            else:
                                                previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 Transformation: Digivolve")


                                        elif t_universe == "League Of Legends":
                                            embedVar = discord.Embed(title=f"Turret Shot hits {c_card} for **{60 + turn_total}** Damage 💥",
                                                                    colour=0xe91e63)
                                            #await private_channel.send(embed=embedVar)
                                            previous_moves.append(f"(**{turn_total}**) 🩸 Turret Shot hits **{c_card}** for **{60 + turn_total}** Damage 💥")
                                            c_health = round(c_health - (60 + turn_total))

                                        elif t_universe == "Dragon Ball Z":
                                            t_health = t_health + c_stamina
                                            previous_moves.append(f"(**{turn_total}**) 🩸 Saiyan Spirit... You heal for **{c_stamina + turn_total}** ❤️")


                                        elif t_universe == "Solo Leveling":
                                            embedVar = discord.Embed(
                                                title=f"Ruler's Authority... {c_card} loses **{30 + turn_total}** 🛡️ 🔻",
                                                colour=0xe91e63)
                                            #await private_channel.send(embed=embedVar)
                                            previous_moves.append(f"(**{turn_total}**) 🩸 Ruler's Authority... {c_card} loses **{30 + turn_total}** 🛡️ 🔻")
                                            c_defense = round(c_defense - (30 + turn_total))

                                        elif t_universe == "Black Clover":
                                            embedVar = discord.Embed(title=f"Mana Zone! **{t_card}** Increased Stamina 🌀",
                                                                    colour=0xe91e63)
                                            #await private_channel.send(embed=embedVar)
                                            previous_moves.append(f"(**{turn_total}**) 🩸 Mana Zone! **{t_card}** Increased AP & Stamina 🌀")
                                            t_stamina = 100
                                            tcard_lvl_ap_buff = tcard_lvl_ap_buff + 30

                                        elif t_universe == "Death Note":
                                            if turn_total >= 50:
                                                embedVar = discord.Embed(title=f"{o_card}'s' Scheduled Death 📓",
                                                                        description=f"**{t_card} says**\n**Delete**",
                                                                        colour=0xe91e63)
                                                embedVar.add_field(name=f"{o_card} had a heart attack and died",
                                                                value=f"Death....")
                                                #await private_channel.send(embed=embedVar)
                                                previous_moves.append(f"(**{turn_total}**) **{c_card}** 🩸 had a heart attack and died")
                                                c_health = 0

                                        if c_universe == "One Punch Man":
                                            embedVar = discord.Embed(
                                                title=f"Hero Reinforcements! {c_card}  Increased Health & Max Health ❤️",
                                                colour=0xe91e63)
                                            #await private_channel.send(embed=embedVar)
                                            previous_moves.append(f"(**{turn_total}**) 🩸 Hero Reinforcements! **{c_card}**  Increased Health & Max Health ❤️")
                                            c_health = round(c_health + 100)
                                            c_max_health = round(c_max_health + 100)

                                        elif c_universe == "7ds":
                                            embedVar = discord.Embed(
                                                title=f"Power Of Friendship! 🧬 Summon Rested {c_card} Increased Stamina 🌀", colour=0xe91e63)
                                            #await private_channel.send(embed=embedVar)
                                            previous_moves.append(f"(**{turn_total}**) 🩸 Power Of Friendship! 🧬 **{cpet_name}** Rested, **{c_card}** Increased Stamina 🌀")
                                            c_stamina = c_stamina + 60
                                            c_pet_used = False

                                        elif c_universe == "Souls":
                                            embedVar = discord.Embed(
                                                title=f"Combo Recognition! {c_card} Increased Attack by **{60 + turn_total}** 🔺 ",
                                                colour=0xe91e63)
                                            #await private_channel.send(embed=embedVar)
                                            previous_moves.append(f"(**{turn_total}**) 🩸 Combo Recognition! **{c_card}** Increased Attack by **{60 + turn_total}** 🔺")
                                            c_attack = round(c_attack + (60 + turn_total))

                                        else:
                                            turn_total = turn_total + 1
                                            if t_universe != "Crown Rift Madness":
                                                turn = 0
                                            else:
                                                turn = 3
                                        turn_total = turn_total + 1
                                        if t_universe != "Crown Rift Madness":
                                            turn = 0
                                        else:
                                            turn = 3
                                    else:
                                        # UNIVERSE CARD
                                        tap1 = list(t_1.values())[0] + tcard_lvl_ap_buff + corruption_ap_buff + t_shock_buff + t_basic_water_buff
                                        tap2 = list(t_2.values())[0] + tcard_lvl_ap_buff + corruption_ap_buff + t_shock_buff + t_special_water_buff
                                        tap3 = list(t_3.values())[0] + tcard_lvl_ap_buff + tdemon_slayer_buff + corruption_ap_buff + t_shock_buff + t_ultimate_water_buff
                                        tenh1 = list(t_enhancer.values())[0]
                                        tenh_name = list(t_enhancer.values())[2]
                                        tpet_enh_name = list(tpet_move.values())[2]
                                        tpet_msg_on_resolve = ""
                                        # UNIVERSE CARD
                                        if t_universe == "Souls" and t_used_resolve:
                                            player_2_card = showcard(t, tarm,t_max_health, t_health, t_max_stamina, t_stamina,
                                                                t_used_resolve, ttitle, t_used_focus, t_attack, t_defense,
                                                                turn_total, tap2, tap3, tap3, tenh1, tenh_name, tcard_lvl, c_defense)
                                        else:
                                            player_2_card = showcard(t, tarm,t_max_health, t_health, t_max_stamina, t_stamina,
                                                                    t_used_resolve, ttitle, t_used_focus, t_attack, t_defense,
                                                                    turn_total, tap1, tap2, tap3, tenh1, tenh_name, tcard_lvl, c_defense)
                                                                

                                        if t_universe == "Solo Leveling" and not t_swapped:
                                            if temp_carm_shield_active and not carm_shield_active:
                                                if tarm_shield_active:
                                                    tshield_value = tshield_value + temp_cshield_value
                                                    previous_moves.append(f"(**{turn_total}**) (**{turn_total}**) **{t_card}** 🩸 **ARISE!** *{carm_name}* is now yours")
                                                    t_swapped = True
                                                elif not tarm_shield_active:
                                                    tarm_shield_active = True
                                                    tshield_value = temp_cshield_value
                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 **ARISE!** *{carm_name}* is now yours")
                                                    t_swapped = True
                                            elif temp_carm_barrier_active and not carm_barrier_active:
                                                if tarm_barrier_active:
                                                    tbarrier_count = tbarrier_count + temp_cbarrier_count
                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 **ARISE!** *{carm_name}* is now yours")
                                                    t_swapped = True
                                                elif not tarm_barrier_active:
                                                    tarm_barrier_active = True
                                                    tbarrier_count = temp_cbarrier_count
                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 **ARISE!** *{carm_name}* is now yours")
                                                    t_swapped = True
                                            elif temp_carm_parry_active and not carm_parry_active:
                                                if tarm_parry_active:
                                                    tparry_count = tparry_count + temp_cparry_count
                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 **ARISE!** *{carm_name}* is now yours")
                                                    t_swapped = True
                                                elif not tarm_parry_active:
                                                    tarm_parry_active = True
                                                    tparry_count = temp_cparry_count
                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 **ARISE!** *{carm_name}* is now yours")
                                                    t_swapped = True


                                        tembedVar = discord.Embed(title=f"_Turn_ {turn_total}", description=textwrap.dedent(f"""\
                                        {previous_moves_into_embed}
                                        """), color=0xe74c3c)
                                        tembedVar.set_image(url="attachment://image.png")
                                        await battle_msg.delete(delay=None)
                                        # await asyncio.sleep(2)
                                        battle_msg = await private_channel.send(embed=tembedVar, file=player_2_card)
                                        aiMove = 0

                                        if t_used_resolve and not t_pet_used:
                                            aiMove = 6
                                        elif t_enhancer['TYPE'] == "WAVE" and (turn_total % 10 == 0 or turn_total == 0 or turn_total == 1):
                                            if t_stamina >=20:
                                                aiMove =4
                                        elif tarm_barrier_active: #Ai Barrier Checks
                                            if t_stamina >=20: #Stamina Check For Enhancer
                                                aiMove = await ai_enhancer_moves(turn_total,t_used_focus,t_used_resolve,t_pet_used,t_stamina,
                                                                           t_enhancer['TYPE'],t_health,t_max_health,t_attack,
                                                                           t_defense,c_stamina,c_attack,c_defense, c_health)
                                            else:
                                                aiMove = 1
                                        elif c_health <=350: #Killing Blow
                                            if t_enhancer['TYPE'] == "BLAST":
                                                if t_stamina >=20:
                                                    aiMove =4
                                                else:
                                                    aiMove =1
                                            elif t_enhancer['TYPE'] == "WAVE" and (turn_total % 10 == 0 or turn_total == 0 or turn_total == 1):
                                                if t_stamina >=20:
                                                    aiMove =4
                                                else:
                                                    aiMove =1
                                            else:
                                                if t_stamina >= 90:
                                                    aiMove = 1
                                                elif t_stamina >= 80:
                                                    aiMove =3
                                                elif t_stamina >=30:
                                                    aiMove=2
                                                else:
                                                    aiMove=1
                                        elif c_stamina < 10:
                                            aiMove = 1
                                        elif t_stamina >= 160 and (t_health >= c_health):
                                            aiMove = 3
                                        elif t_stamina >= 160:
                                            aiMove = 3
                                        elif t_stamina >= 150 and (t_health >= c_health):
                                            aiMove = 1
                                        elif t_stamina >= 150:
                                            aiMove = 1
                                        elif t_stamina >= 140 and (t_health >= c_health):
                                            aiMove = 1
                                        elif t_stamina >= 140:
                                            aiMove = 3
                                        elif t_stamina >= 130 and (t_health >= c_health):
                                            aiMove = 1
                                        elif t_stamina >= 130:
                                            aiMove = 3
                                        elif t_stamina >= 120 and (t_health >= c_health):
                                            aiMove = 2
                                        elif t_stamina >= 120:
                                            aiMove = 3
                                        elif t_stamina >= 110 and (t_health >= c_health):
                                            aiMove = 1
                                        elif t_stamina >= 110:
                                            aiMove = 2
                                        elif t_stamina >= 100 and (t_health >= c_health):
                                            aiMove = await ai_enhancer_moves(turn_total,t_used_focus,t_used_resolve,t_pet_used,t_stamina,
                                                                           t_enhancer['TYPE'],t_health,t_max_health,t_attack,
                                                                           t_defense,c_stamina,c_attack,c_defense, c_health)
                                        elif t_stamina >= 100:
                                            aiMove = 1
                                        elif t_stamina >= 90 and (t_health >= c_health):
                                            aiMove = 3
                                        elif t_stamina >= 90:
                                            aiMove = await ai_enhancer_moves(turn_total,t_used_focus,t_used_resolve,t_pet_used,t_stamina,
                                                                           t_enhancer['TYPE'],t_health,t_max_health,t_attack,
                                                                           t_defense,c_stamina,c_attack,c_defense, c_health)
                                        elif t_stamina >= 80 and (t_health >= c_health):
                                            aiMove = 1
                                        elif t_stamina >= 80:
                                            aiMove = 3
                                        elif t_stamina >= 70 and (t_health >= c_health):
                                            aiMove = await ai_enhancer_moves(turn_total,t_used_focus,t_used_resolve,t_pet_used,t_stamina,
                                                                           t_enhancer['TYPE'],t_health,t_max_health,t_attack,
                                                                           t_defense,c_stamina,c_attack,c_defense, c_health)
                                        elif t_stamina >= 70:
                                            aiMove = 1
                                        elif t_stamina >= 60 and (t_health >= c_health):
                                            if t_used_resolve == False and t_used_focus:
                                                aiMove = 5
                                            elif t_used_focus == False:
                                                aiMove = 2
                                            else:
                                                aiMove = 1
                                        elif t_stamina >= 60:
                                            if t_used_resolve == False and t_used_focus:
                                                aiMove = 5
                                            elif t_used_focus == False:
                                                aiMove = 2
                                            else:
                                                aiMove = 1
                                        elif t_stamina >= 50 and (t_health >= c_health):
                                            if t_used_resolve == False and t_used_focus:
                                                aiMove = 5
                                            elif t_used_focus == False:
                                                aiMove = 2
                                            else:
                                                aiMove = 1
                                        elif t_stamina >= 50:
                                            if t_used_resolve == False and t_used_focus:
                                                aiMove = 5
                                            elif t_used_focus == False:
                                                aiMove = 2
                                            else:
                                                aiMove = 1
                                        elif t_stamina >= 40 and (t_health >= c_health):
                                            aiMove = 1
                                        elif t_stamina >= 40:
                                            aiMove = 2
                                        elif t_stamina >= 30 and (t_health >= c_health):
                                            aiMove = await ai_enhancer_moves(turn_total,t_used_focus,t_used_resolve,t_pet_used,t_stamina,
                                                                           t_enhancer['TYPE'],t_health,t_max_health,t_attack,
                                                                           t_defense,c_stamina,c_attack,c_defense, c_health)
                                        elif t_stamina >= 30:
                                            aiMove = 2
                                        elif t_stamina >= 20 and (t_health >= c_health):
                                            aiMove = 1
                                        elif t_stamina >= 20:
                                            aiMove = await ai_enhancer_moves(turn_total,t_used_focus,t_used_resolve,t_pet_used,t_stamina,
                                                                           t_enhancer['TYPE'],t_health,t_max_health,t_attack,
                                                                           t_defense,c_stamina,c_attack,c_defense, c_health)
                                        elif t_stamina >= 10:
                                            aiMove = 1
                                        else:
                                            aiMove = 0

                                        t_special_move_description = ""
                                        if int(aiMove) == 0:
                                            t_health = 0
                                        if int(aiMove) == 1:

                                            if o_defend_used == True:
                                                if t_universe == "Souls" and t_used_resolve:
                                                    dmg = damage_cal(o_opponent_affinities, special_attack_name, tmove2_element, t_universe, t_card, t_2, t_attack, t_defense, o_defense, t_stamina,
                                                                    t_enhancer_used, t_health, o_health, o_stamina, t_max_health,
                                                                    o_attack, t_special_move_description, turn_total,
                                                                    tcard_lvl_ap_buff, t_1)
                                                else:
                                                    dmg = damage_cal(o_opponent_affinities, basic_attack_name, tmove1_element, t_universe, t_card, t_1, t_attack, t_defense, o_defense,
                                                                    t_stamina, t_enhancer_used, t_health, o_health, o_stamina,
                                                                    t_max_health, o_attack, t_special_move_description, turn_total,
                                                                    tcard_lvl_ap_buff, None)
                                            else:
                                                if t_universe == "Souls" and t_used_resolve:
                                                    dmg = damage_cal(c_opponent_affinities, special_attack_name, tmove2_element, t_universe, t_card, t_2, t_attack, t_defense, c_defense, t_stamina,
                                                                    t_enhancer_used, t_health, c_health, c_stamina, t_max_health,
                                                                    c_attack, t_special_move_description, turn_total,
                                                                    tcard_lvl_ap_buff, t_1)
                                                else:
                                                    dmg = damage_cal(c_opponent_affinities, basic_attack_name, tmove1_element, t_universe, t_card, t_1, t_attack, t_defense, c_defense,
                                                                    t_stamina, t_enhancer_used, t_health, c_health, c_stamina,
                                                                    t_max_health, c_attack, t_special_move_description, turn_total,
                                                                    tcard_lvl_ap_buff, None)
                                        elif int(aiMove) == 2:

                                            if o_defend_used == True:
                                                if t_universe == "Souls" and t_used_resolve:
                                                    dmg = damage_cal(o_opponent_affinities, ultimate_attack_name, tmove3_element, t_universe, t_card, t_3, t_attack, t_defense, o_defense, t_stamina,
                                                                    t_enhancer_used, t_health, o_health, o_stamina, t_max_health,
                                                                    o_attack, t_special_move_description, turn_total,
                                                                    tcard_lvl_ap_buff, t_2)
                                                else:
                                                    dmg = damage_cal(o_opponent_affinities, special_attack_name, tmove2_element, t_universe, t_card, t_2, t_attack, t_defense, o_defense,
                                                                    t_stamina, t_enhancer_used, t_health, o_health, o_stamina,
                                                                    t_max_health, o_attack, t_special_move_description, turn_total,
                                                                    tcard_lvl_ap_buff, None)
                                            else:
                                                if t_universe == "Souls" and t_used_resolve:
                                                    dmg = damage_cal(c_opponent_affinities, ultimate_attack_name, tmove3_element, t_universe, t_card, t_3, t_attack, t_defense, c_defense, t_stamina,
                                                                    t_enhancer_used, t_health, c_health, c_stamina, t_max_health,
                                                                    c_attack, t_special_move_description, turn_total,
                                                                    tcard_lvl_ap_buff, t_2)
                                                else:
                                                    dmg = damage_cal(c_opponent_affinities, special_attack_name, tmove2_element, t_universe, t_card, t_2, t_attack, t_defense, c_defense,
                                                                    t_stamina, t_enhancer_used, t_health, c_health, c_stamina,
                                                                    t_max_health, c_attack, t_special_move_description, turn_total,
                                                                    tcard_lvl_ap_buff, None)
                                        elif int(aiMove) == 3:

                                            if o_defend_used == True:
                                                dmg = damage_cal(o_opponent_affinities, ultimate_attack_name, tmove3_element, t_universe, t_card, t_3, t_attack, t_defense, o_defense,
                                                                t_stamina, t_enhancer_used, t_health, o_health, o_stamina,
                                                                t_max_health, o_attack, t_special_move_description, turn_total,
                                                                tcard_lvl_ap_buff, None)
                                            else:
                                                dmg = damage_cal(c_opponent_affinities, ultimate_attack_name, tmove3_element, t_universe, t_card, t_3, t_attack, t_defense, c_defense,
                                                                t_stamina, t_enhancer_used, t_health, c_health, c_stamina,
                                                                t_max_health, c_attack, t_special_move_description, turn_total,
                                                                tcard_lvl_ap_buff, None)
                                            if t_gif != "N/A" and not operformance:
                                                await battle_msg.delete(delay=2)
                                                await asyncio.sleep(2)
                                                battle_msg = await private_channel.send(f"{t_gif}")
                                                await asyncio.sleep(2)
                                        elif int(aiMove) == 4:

                                            t_enhancer_used = True
                                            if o_defend_used == True:
                                                dmg = damage_cal(o_opponent_affinities, basic_attack_name, tmove1_element, t_universe, t_card, t_enhancer, t_attack, t_defense, o_defense,
                                                                t_stamina, t_enhancer_used, t_health, o_health, o_stamina,
                                                                t_max_health, o_attack, t_special_move_description, turn_total,
                                                                tcard_lvl_ap_buff, None)
                                            else:
                                                dmg = damage_cal(t_for_c_opponent_affinities, basic_attack_name, tmove1_element, t_universe, t_card, t_enhancer, t_attack, t_defense, c_defense,
                                                                t_stamina, t_enhancer_used, t_health, c_health, c_stamina,
                                                                t_max_health, c_attack, t_special_move_description, turn_total,
                                                                tcard_lvl_ap_buff, None)
                                            t_enhancer_used = False
                                        elif int(aiMove) == 5:
                                            if not t_used_resolve and t_used_focus:
                                                if botActive and mode in B_modes:
                                                    embedVar = discord.Embed(title=f"**{t_card}** Resolved!",
                                                                            description=f"{t_rmessage}", colour=0xe91e63)
                                                    embedVar.set_footer(text=f"{o_card} this will not be easy...")
                                                    await private_channel.send(embed=embedVar)
                                                if t_universe == "My Hero Academia":  # My hero TRait
                                                    # fortitude or luck is based on health
                                                    fortitude = 0.0
                                                    low = t_health - (t_health * .75)
                                                    high = t_health - (t_health * .66)
                                                    fortitude = round(random.randint(int(low), int(high)))
                                                    # Resolve Scaling
                                                    t_resolve_health = round(fortitude + (.5 * t_resolve))
                                                    t_resolve_attack = round(
                                                        (.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                                    t_resolve_defense = round(
                                                        (.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                                    tcard_lvl_ap_buff = tcard_lvl_ap_buff + 80 + turn_total

                                                    t_stamina = t_stamina + t_resolve
                                                    t_health = t_health + t_resolve_health
                                                    t_attack = round(t_attack + t_resolve_attack)
                                                    t_defense = round(t_defense - t_resolve_defense)
                                                    t_used_resolve = True
                                                    t_pet_used = False

                                                    embedVar = discord.Embed(title=f"{t_card} PLUS ULTRAAA",
                                                                            description=f"**{t_card} says**\n{t_resolve_description}",
                                                                            colour=0xe91e63)
                                                    embedVar.add_field(name=f"Transformation: Plus Ultra",
                                                                    value="You do not lose a turn after you Resolve.")
                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 Resolved: PLUS ULTRA!")
                                                    #await private_channel.send(embed=embedVar)
                                                    turn_total = turn_total + 1
                                                    turn = 3
                                                
                                                elif t_universe == "Demon Slayer": 
                                                    # fortitude or luck is based on health
                                                    fortitude = 0.0
                                                    low = t_health - (t_health * .75)
                                                    high = t_health - (t_health * .66)
                                                    fortitude = round(random.randint(int(low), int(high)))
                                                    # Resolve Scaling
                                                    t_resolve_health = round(fortitude + (.5 * t_resolve))
                                                    t_resolve_attack = round(
                                                        (.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                                    t_resolve_defense = round(
                                                        (.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                                    

                                                    t_stamina = t_stamina + t_resolve
                                                    t_health = t_health + t_resolve_health
                                                    t_attack = round(t_attack + t_resolve_attack)
                                                    t_defense = round(t_defense - t_resolve_defense)
                                                    if c_attack > t_attack:
                                                        t_attack = c_attack
                                                    if c_defense > t_defense:
                                                        t_defense = c_defense
                                                    t_used_resolve = True
                                                    t_pet_used = False
                                                    embedVar = discord.Embed(title=f"{t_card} begins Total Concentration Breathing",
                                                                            description=f"**{t_card} says**\n{t_resolve_description}",
                                                                            colour=0xe91e63)
                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 Resolved: Total Concentration Breathing!")
                                                    
                                                    turn_total = turn_total + 1
                                                    turn = 0

                                                elif t_universe == "Naruto": 
                                                    # fortitude or luck is based on health
                                                    fortitude = 0.0
                                                    low = t_health - (t_health * .75)
                                                    high = t_health - (t_health * .66)
                                                    fortitude = round(random.randint(int(low), int(high)))
                                                    # Resolve Scaling
                                                    t_resolve_health = round(fortitude + (.5 * t_resolve))
                                                    t_resolve_attack = round(
                                                        (.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                                    t_resolve_defense = round(
                                                        (.30 * t_defense) * (t_resolve / (.50 * t_defense)))

                                                    t_stamina = t_stamina + t_resolve
                                                    t_health = t_health + t_resolve_health
                                                    t_health = t_health + t_naruto_heal_buff
                                                    t_attack = round(t_attack + t_resolve_attack)
                                                    t_defense = round(t_defense - t_resolve_defense)
                                                    t_used_resolve = True
                                                    t_pet_used = False
                                                    embedVar = discord.Embed(title=f"{t_card} Heals from Hashirama Cells",
                                                                            description=f"**{t_card} says**\n{t_resolve_description}",
                                                                            colour=0xe91e63)
                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 Resolved: Hashirama Cells heal you for **{t_naruto_heal_buff}**")
                                                    turn_total = turn_total + 1
                                                    turn = 0


                                                
                                                elif t_universe == "Attack On Titan":
                                                    # fortitude or luck is based on health
                                                    fortitude = 0.0
                                                    low = t_health - (t_health * .75)
                                                    high = t_health - (t_health * .66)
                                                    fortitude = round(random.randint(int(low), int(high)))
                                                    # Resolve Scaling
                                                    t_resolve_health = round(fortitude + (.5 * t_resolve))
                                                    t_resolve_attack = round(
                                                        (.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                                    t_resolve_defense = round(
                                                        (.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                                    t_stamina = t_stamina + t_resolve
                                                    t_health = t_health + t_resolve_health
                                                    t_attack = round(t_attack + t_resolve_attack)
                                                    t_defense = round(t_defense - t_resolve_defense)
                                                    t_used_resolve = True
                                                    t_pet_used = False
                                                    health_boost = 100 * t_focus_count
                                                    t_health = t_health + health_boost

                                                    embedVar = discord.Embed(title=f"{t_card} Titan Mode",
                                                                            description=f"**{t_card} says**\n{t_resolve_description}",
                                                                            colour=0xe91e63)
                                                    embedVar.add_field(name=f"Transformation Complete",
                                                                    value=f"Health increased by **{health_boost}**!")
                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 Resolved: Titan Mode")
                                                    #await private_channel.send(embed=embedVar)
                                                    turn_total = turn_total + 1
                                                    turn = 0

                                                elif t_universe == "Bleach":  # Bleach Trait
                                                    # fortitude or luck is based on health
                                                    fortitude = 0.0
                                                    low = t_health - (t_health * .75)
                                                    high = t_health - (t_health * .66)
                                                    fortitude = round(random.randint(int(low), int(high)))
                                                    # Resolve Scaling
                                                    t_resolve_health = round(fortitude + (.5 * t_resolve))
                                                    t_resolve_attack = round(
                                                        (.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                                    t_resolve_defense = round(
                                                        (.30 * t_defense) * (t_resolve / (.50 * t_defense)))

                                                    t_stamina = t_stamina + t_resolve
                                                    t_health = t_health + t_resolve_health
                                                    t_attack = round((t_attack + (2 * t_resolve_attack))* 2)
                                                    t_defense = round(t_defense - t_resolve_defense)
                                                    # if t_defense >= 120:
                                                    # t_defense = 120
                                                    t_used_resolve = True
                                                    t_pet_used = False

                                                    embedVar = discord.Embed(title=f"{t_card} STRENGTHENED RESOLVE :zap:",
                                                                            description=f"**{t_card} says**\n{t_resolve_description}",
                                                                            colour=0xe91e63)
                                                    embedVar.add_field(name=f"Transformation: Bankai",
                                                                    value="Gain double Attack on Resolve.")
                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 Resolved: Bankai!")
                                                    #await private_channel.send(embed=embedVar)
                                                    turn_total = turn_total + 1
                                                    turn = 0
                                                elif t_universe == "God Of War":  # God Of War Trait
                                                    # fortitude or luck is based on health
                                                    fortitude = 0.0
                                                    low = t_health - (t_health * .75)
                                                    high = t_health - (t_health * .66)
                                                    fortitude = round(random.randint(int(low), int(high)))
                                                    # Resolve Scaling
                                                    t_resolve_health = round(fortitude + (.5 * t_resolve))
                                                    t_resolve_attack = round(
                                                        (.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                                    t_resolve_defense = round(
                                                        (.30 * t_defense) * (t_resolve / (.50 * t_defense)))

                                                    t_stamina = t_stamina + t_resolve
                                                    t_health = t_max_health
                                                    t_attack = round(t_attack + t_resolve_attack)
                                                    t_defense = round(t_defense - t_resolve_defense)
                                                    t_used_resolve = True
                                                    t_pet_used = False
                                                    if t_gow_resolve:
                                                        previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 Resolved: Ascension!")
                                                    elif not t_gow_resolve:
                                                        t_used_resolve = False
                                                        t_gow_resolve = True
                                                        t_defense = 125
                                                        previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 Crushed Blood Orb: Health Refill")

                                                    embedVar = discord.Embed(title=f"{t_card} STRENGTHENED RESOLVE :zap:",
                                                                            description=f"**{t_card} says**\n{t_resolve_description}",
                                                                            colour=0xe91e63)
                                                    embedVar.add_field(name=f"Transformation: Ascension",
                                                                    value="On Resolve Refill Health.")
                                                   
                                                    #await private_channel.send(embed=embedVar)
                                                    turn_total = turn_total + 1
                                                    turn = 0
                                                elif t_universe == "Fate":  # Fate Trait
                                                    # fortitude or luck is based on health
                                                    fortitude = 0.0
                                                    low = t_health - (t_health * .75)
                                                    high = t_health - (t_health * .66)
                                                    fortitude = round(random.randint(int(low), int(high)))
                                                    # Resolve Scaling
                                                    t_resolve_health = round(fortitude + (.5 * t_resolve))
                                                    t_resolve_attack = round(
                                                        (.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                                    t_resolve_defense = round(
                                                        (.30 * t_defense) * (t_resolve / (.50 * t_defense)))

                                                    t_stamina = t_stamina + t_resolve
                                                    t_health = t_health + t_resolve_health
                                                    t_attack = round(t_attack + t_resolve_attack)
                                                    t_defense = round(t_defense - t_resolve_defense)
                                                    t_used_resolve = True

                                                    embedVar = discord.Embed(title=f"{t_card} STRENGTHENED RESOLVE :zap:",
                                                                            description=f"**{t_card} says**\n{t_resolve_description}",
                                                                            colour=0xe91e63)
                                                    embedVar.add_field(name=f"Transformation: Command Seal",
                                                                    value="On Resolve, Strike with Ultimate, then Focus.")
                                                    #await private_channel.send(embed=embedVar)
                                                    if o_defend_used == True:
                                                        dmg = damage_cal(o_opponent_affinities, ultimate_attack_name, tmove3_element, t_universe, t_card, t_3, t_attack, t_defense,
                                                                        o_defense, t_stamina, t_enhancer_used, t_health,
                                                                        o_health, o_stamina, t_max_health, o_attack,
                                                                        t_special_move_description, turn_total,
                                                                        tcard_lvl_ap_buff, None)
                                                        o_health = o_health - int(dmg['DMG'])
                                                    else:
                                                        dmg = damage_cal(t_for_c_opponent_affinities, ultimate_attack_name, tmove3_element, t_universe, t_card, t_3, t_attack, t_defense,
                                                                        c_defense, t_stamina, t_enhancer_used, t_health,
                                                                        c_health, c_stamina, t_max_health, c_attack,
                                                                        t_special_move_description, turn_total,
                                                                        tcard_lvl_ap_buff, None)
                                                        c_health = c_health - int(dmg['DMG'])
                                                    t_pet_used = False
                                                    embedVar = discord.Embed(title=f"{dmg['MESSAGE']}", colour=embed_color_t)
                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 Resolved: Command Seal! {dmg['MESSAGE']}")
                                                    #await private_channel.send(embed=embedVar)
                                                    # t_stamina = 0
                                                    turn_total = turn_total + 1
                                                    turn = 0
                                                elif t_universe == "Kanto Region" or t_universe == "Johto Region" or t_universe == "Hoenn Region" or t_universe == "Sinnoh Region" or t_universe == "Kalos Region" or t_universe == "Unova Region" or t_universe == "Alola Region" or t_universe == "Galar Region":  # Pokemon Resolves
                                                    # fortitude or luck is based on health
                                                    fortitude = 0.0
                                                    low = t_health - (t_health * .75)
                                                    high = t_health - (t_health * .66)
                                                    fortitude = round(random.randint(int(low), int(high)))
                                                    # Resolve Scaling
                                                    t_resolve_health = round(fortitude + (.5 * t_resolve))
                                                    t_resolve_attack = round(
                                                        (.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                                    t_resolve_defense = round(
                                                        (.30 * t_defense) * (t_resolve / (.50 * t_defense)))

                                                    t_stamina = t_stamina + t_resolve
                                                    t_health = t_health + t_resolve_health
                                                    t_attack = round(t_attack + t_resolve_attack)
                                                    t_defense = round(t_defense) * 2
                                                    t_used_resolve = True
                                                    t_pet_used = False

                                                    embedVar = discord.Embed(title=f"{t_card} STRENGTHENED RESOLVE :zap:",
                                                                            description=f"**{t_card} says**\n{t_resolve_description}",
                                                                            colour=0xe91e63)
                                                    embedVar.add_field(name=f"Transformation: Evolution",
                                                                    value="When you Resolve your Defense doubles")
                                                    if turn_total >= 50:
                                                        t_max_health = t_max_health + 1000
                                                        t_health = t_health + 1000
                                                        previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 Resolved: Gigantomax Evolution!!! Gained **1000** HP!!!")
                                                    elif turn_total >= 30:
                                                        t_max_health = t_max_health + 300
                                                        t_health = t_health + 300
                                                        previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 Resolved: Mega Evolution!! Gained **300** HP!")
                                                    else:
                                                        previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 Resolved: Evolution!")
                                                    #await private_channel.send(embed=embedVar)
                                                    turn_total = turn_total + 1
                                                    turn = 0
                                                else:
                                                    # fortitude or luck is based on health
                                                    fortitude = 0.0
                                                    low = t_health - (t_health * .75)
                                                    high = t_health - (t_health * .66)
                                                    fortitude = round(random.randint(int(low), int(high)))
                                                    # Resolve Scaling
                                                    t_resolve_health = round(fortitude + (.5 * t_resolve))
                                                    t_resolve_attack = round(
                                                        (.30 * t_defense) * (t_resolve / (.50 * t_defense)))
                                                    t_resolve_defense = round(
                                                        (.30 * t_defense) * (t_resolve / (.50 * t_defense)))

                                                    t_stamina = t_stamina + t_resolve
                                                    t_health = t_health + t_resolve_health
                                                    t_attack = round(t_attack + t_resolve_attack)
                                                    t_defense = round(t_defense - t_resolve_defense)
                                                    t_used_resolve = True
                                                    t_pet_used = False

                                                    if t_universe == "League Of Legends":
                                                        if o_block_used == True:
                                                            o_health = o_health - (60 * (o_focus_count + t_focus_count))
                                                            embedVar = discord.Embed(title=f"{t_card} PENTA KILL!",
                                                                                    description=f"**{t_card} says**\n{t_resolve_description}",
                                                                                    colour=0xe91e63)
                                                            embedVar.add_field(name=f"Nexus Destroyed",
                                                                            value=f"**{t_card}** dealt **{(60 * (o_focus_count + t_focus_count))}** damage.")
                                                            previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 Resolved: Pentakill! Dealing {(60 * (o_focus_count + t_focus_count))} damage.")
                                                        else:
                                                            c_health = c_health - (60 * (c_focus_count + t_focus_count))
                                                            embedVar = discord.Embed(title=f"{t_card} PENTA KILL!",
                                                                                    description=f"**{t_card} says**\n{t_resolve_description}",
                                                                                    colour=0xe91e63)
                                                            embedVar.add_field(name=f"Nexus Destroyed",
                                                                            value=f"**{t_card}** dealt **{(60 * (c_focus_count + t_focus_count))}** damage.")
                                                            previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 Resolved: Pentakill! Dealing {(60 * (c_focus_count + t_focus_count))} damage.")
                                                    elif t_universe == "Souls":
                                                        previous_moves.append(f"(**{turn_total}**) **{t_card}** 🩸 Phase 2: Enhanced Moveset!")
                                                        
                                                    else:
                                                        embedVar = discord.Embed(title=f"{t_card} STRENGTHENED RESOLVE :zap:",
                                                                                description=f"**{t_card} says**\n{t_resolve_description}",
                                                                                colour=0xe91e63)
                                                        embedVar.add_field(name=f"Transformation",
                                                                        value="All stats & stamina greatly increased")
                                                        previous_moves.append(f"(**{turn_total}**) ⚡ **{t_card}** Resolved!")
                                                    #await private_channel.send(embed=embedVar)
                                                    turn_total = turn_total + 1
                                                    turn = 0
                                            else:
                                                previous_moves.append(f"(**{turn_total}**) {t_card} cannot resolve!")
                                                turn = 3
                                        elif int(aiMove) == 6:
                                            # Resolve Check and Calculation
                                            if t_used_resolve and t_used_focus and not t_pet_used:
                                                if o_defend_used == True:
                                                    t_enhancer_used = True
                                                    dmg = damage_cal(o_opponent_affinities, basic_attack_name, tmove1_element, t_universe, t_card, tpet_move, t_attack, t_defense,
                                                                    o_defense, t_stamina, t_enhancer_used, t_health, o_health,
                                                                    o_stamina, t_max_health, o_attack,
                                                                    t_special_move_description, turn_total, tcard_lvl_ap_buff, None)
                                                    t_enhancer_used = False
                                                    t_pet_used = True
                                                    tpet_dmg = dmg['DMG']
                                                    tpet_type = dmg['ENHANCED_TYPE']
                                                    if dmg['CAN_USE_MOVE']:
                                                        if tpet_type == 'ATK':
                                                            t_attack = round(t_attack + dmg['DMG'])
                                                        elif tpet_type == 'DEF':
                                                            t_defense = round(t_defense + dmg['DMG'])
                                                        elif tpet_type == 'STAM':
                                                            t_stamina = round(t_stamina + dmg['DMG'])
                                                        elif tpet_type == 'HLT':
                                                            t_health = round(t_health + dmg['DMG'])
                                                        elif tpet_type == 'LIFE':
                                                            t_health = round(t_health + dmg['DMG'])
                                                            o_health = round(o_health - dmg['DMG'])
                                                        elif tpet_type == 'DRAIN':
                                                            t_stamina = round(t_stamina + dmg['DMG'])
                                                            o_stamina = round(o_stamina - dmg['DMG'])
                                                        elif tpet_type == 'FLOG':
                                                            t_attack = round(t_attack + dmg['DMG'])
                                                            o_attack = round(o_attack - dmg['DMG'])
                                                        elif tpet_type == 'WITHER':
                                                            t_defense = round(t_defense + dmg['DMG'])
                                                            o_defense = round(o_defense - dmg['DMG'])
                                                        elif tpet_type == 'RAGE':
                                                            t_defense = round(t_defense - dmg['DMG'])
                                                            t_attack = round(t_attack + dmg['DMG'])
                                                        elif tpet_type == 'BRACE':
                                                            t_defense = round(t_defense + dmg['DMG'])
                                                            t_attack = round(t_attack - dmg['DMG'])
                                                        elif tpet_type == 'BZRK':
                                                            t_health = round(t_health - dmg['DMG'])
                                                            t_attack = round(t_attack + dmg['DMG'])
                                                        elif tpet_type == 'CRYSTAL':
                                                            t_health = round(t_health - dmg['DMG'])
                                                            t_defense = round(t_defense + dmg['DMG'])
                                                        elif tpet_type == 'GROWTH':
                                                            t_max_health = round(t_max_health - dmg['DMG'])
                                                            t_defense = round(t_defense + (dmg['DMG'] * .5))
                                                            t_attack = round(t_attack + (dmg['DMG'] * .5))
                                                        elif tpet_type == 'STANCE':
                                                            tempattack = dmg['DMG']
                                                            t_attack = t_defense
                                                            t_defense = tempattack
                                                        elif tpet_type == 'CONFUSE':
                                                            tempattack = dmg['DMG']
                                                            o_attack = o_defense
                                                            o_defense = tempattack
                                                        elif tpet_type == 'BLINK':
                                                            t_stamina = round(t_stamina - dmg['DMG'])
                                                            o_stamina = round(o_stamina + dmg['DMG'])
                                                        elif tpet_type == 'SLOW':
                                                            tempstam = round(o_stamina + dmg['DMG'])
                                                            t_stamina = round(t_stamina - dmg['DMG'])
                                                            o_stamina = t_stamina
                                                            t_stamina = tempstam
                                                        elif tpet_type == 'HASTE':
                                                            tempstam = round(o_stamina - dmg['DMG'])
                                                            t_stamina = round(t_stamina + dmg['DMG'])
                                                            o_stamina = t_stamina
                                                            t_stamina = tempstam
                                                        elif tpet_type == 'SOULCHAIN':
                                                            t_stamina = round(dmg['DMG'])
                                                            o_stamina = t_stamina
                                                        elif tpet_type == 'GAMBLE':
                                                            t_health = round(dmg['DMG'])
                                                            o_health = t_health
                                                        elif tpet_type == 'FEAR':
                                                            t_max_health = round(t_max_health - dmg['DMG'])
                                                            o_defense = round(o_defense - (dmg['DMG'] * .5))
                                                            o_attack = round(o_attack - (dmg['DMG'] * .5))
                                                        elif tpet_type == 'WAVE':
                                                            o_health = round(o_health - dmg['DMG'])
                                                        elif tpet_type == 'BLAST':
                                                            if dmg['DMG'] >= 100:
                                                                dmg['DMG'] = 100
                                                            o_health = round(o_health - dmg['DMG'])
                                                        elif tpet_type == 'CREATION':
                                                            t_max_health = round(t_max_health + dmg['DMG'])
                                                            t_health = round(t_health + dmg['DMG'])
                                                        elif tpet_type == 'DESTRUCTION':
                                                            if dmg['DMG'] >= 100:
                                                                dmg['DMG'] = 100
                                                            o_max_health = round(o_max_health - dmg['DMG'])
                                                            if o_max_health <=1:
                                                                o_max_health = 1
                                                        t_stamina = t_stamina - int(dmg['STAMINA_USED'])

                                                        if t_universe == "Persona":
                                                            petdmg = damage_cal(t_for_c_opponent_affinities, basic_attack_name, tmove1_element, t_universe, t_card, t_1, t_attack, t_defense,
                                                                                c_defense, t_stamina, t_enhancer_used, t_health,
                                                                                c_health, c_stamina, t_max_health, c_attack,
                                                                                t_special_move_description, turn_total,
                                                                                tcard_lvl_ap_buff, None)

                                                            o_health = o_health - petdmg['DMG']

                                                            embedVar = discord.Embed(
                                                                title=f"**PERSONA!**\n{tpet_name} was summoned from {t_card}'s soul dealing **{petdmg['DMG']}** damage!!",
                                                                colour=0xe91e63)
                                                            await battle_msg.delete(delay=2)
                                                            if not operformance:
                                                                tsummon_file = showsummon(tpet_image, tpet_name, dmg['MESSAGE'], tpet_lvl, tpet_bond)
                                                                await asyncio.sleep(2)
                                                                battle_msg = await private_channel.send(embed=embedVar, file=tsummon_file)
                                                                await asyncio.sleep(2)
                                                                await battle_msg.delete(delay=2)
                                                            
                                                            
                                                            embedVar.set_image(url="attachment://pet.png")
                                                            #await button_ctx.send(embed=embedVar)
                                                            previous_moves.append(f"(**{turn_total}**) **Persona!** 🩸 : **{tpet_name}** was summoned from **{t_card}'s** soul dealing **{petdmg['DMG']}** damage!\n**{c_card}** summon disabled!")
                                                            c_pet_used = True
                                                            
                                                            
                                                        else:
                                                            embedVar = discord.Embed(
                                                                title=f"{t_card} Summoned 🧬 **{tpet_name}**",
                                                                colour=0xe91e63)
                                                            await battle_msg.delete(delay=2)
                                                            if not operformance:
                                                                tsummon_file = showsummon(tpet_image, tpet_name, dmg['MESSAGE'], tpet_lvl, tpet_bond)
                                                                await asyncio.sleep(2)
                                                                battle_msg = await private_channel.send(embed=embedVar, file=tsummon_file)
                                                                await asyncio.sleep(2)
                                                                await battle_msg.delete(delay=2)
                                                            
                                                            
                                                            embedVar.set_image(url="attachment://pet.png")
                                                            #await private_channel.send(embed=embedVar)
                                                            previous_moves.append(f"(**{turn_total}**) **{t_card}** Summoned 🧬 **{tpet_name}**: {dmg['MESSAGE']}")
                                                            
                                                        turn = 3
                                                    else:
                                                        previous_moves.append(f"(**{turn_total}**) {t_card} Could not summon 🧬 **{tpet_name}**. Needs rest")
                                                        turn = 3
                                                else:
                                                    t_enhancer_used = True
                                                    dmg = damage_cal(t_for_c_opponent_affinities, basic_attack_name, tmove1_element, t_universe, t_card, tpet_move, t_attack, t_defense,
                                                                    c_defense, t_stamina, t_enhancer_used, t_health, c_health,
                                                                    c_stamina, t_max_health, c_attack,
                                                                    t_special_move_description, turn_total, tcard_lvl_ap_buff, None)
                                                    t_enhancer_used = False
                                                    t_pet_used = True
                                                    tpet_dmg = dmg['DMG']
                                                    tpet_type = dmg['ENHANCED_TYPE']
                                                    if dmg['CAN_USE_MOVE']:
                                                        if tpet_type == 'ATK':
                                                            t_attack = round(t_attack + dmg['DMG'])
                                                        elif tpet_type == 'DEF':
                                                            t_defense = round(t_defense + dmg['DMG'])
                                                        elif tpet_type == 'STAM':
                                                            t_stamina = round(t_stamina + dmg['DMG'])
                                                        elif tpet_type == 'HLT':
                                                            t_health = round(t_health + dmg['DMG'])
                                                        elif tpet_type == 'LIFE':
                                                            t_health = round(t_health + dmg['DMG'])
                                                            c_health = round(c_health - dmg['DMG'])
                                                        elif tpet_type == 'DRAIN':
                                                            t_stamina = round(t_stamina + dmg['DMG'])
                                                            c_stamina = round(c_stamina - dmg['DMG'])
                                                        elif tpet_type == 'FLOG':
                                                            t_attack = round(t_attack + dmg['DMG'])
                                                            c_attack = round(c_attack - dmg['DMG'])
                                                        elif tpet_type == 'WITHER':
                                                            t_defense = round(t_defense + dmg['DMG'])
                                                            c_defense = round(c_defense - dmg['DMG'])
                                                        elif tpet_type == 'RAGE':
                                                            t_defense = round(t_defense - dmg['DMG'])
                                                            t_attack = round(t_attack + dmg['DMG'])
                                                        elif tpet_type == 'BRACE':
                                                            t_defense = round(t_defense + dmg['DMG'])
                                                            t_attack = round(t_attack - dmg['DMG'])
                                                        elif tpet_type == 'BZRK':
                                                            t_health = round(t_health - dmg['DMG'])
                                                            t_attack = round(t_attack + dmg['DMG'])
                                                        elif tpet_type == 'CRYSTAL':
                                                            t_health = round(t_health - dmg['DMG'])
                                                            t_defense = round(t_defense + dmg['DMG'])
                                                        elif tpet_type == 'GROWTH':
                                                            t_max_health = round(t_max_health - dmg['DMG'])
                                                            t_defense = round(t_defense + (dmg['DMG'] * .5))
                                                            t_attack = round(t_attack + (dmg['DMG'] * .5))
                                                        elif tpet_type == 'STANCE':
                                                            tempattack = dmg['DMG']
                                                            t_attack = t_defense
                                                            t_defense = tempattack
                                                        elif tpet_type == 'CONFUSE':
                                                            tempattack = dmg['DMG']
                                                            c_attack = c_defense
                                                            c_defense = tempattack
                                                        elif tpet_type == 'BLINK':
                                                            t_stamina = round(t_stamina - dmg['DMG'])
                                                            c_stamina = round(c_stamina + dmg['DMG'])
                                                        elif tpet_type == 'SLOW':
                                                            tempstam = round(c_stamina + dmg['DMG'])
                                                            t_stamina = round(t_stamina - dmg['DMG'])
                                                            c_stamina = t_stamina
                                                            t_stamina = tempstam
                                                        elif tpet_type == 'HASTE':
                                                            tempstam = round(c_stamina - dmg['DMG'])
                                                            t_stamina = round(t_stamina + dmg['DMG'])
                                                            c_stamina = t_stamina
                                                            t_stamina = tempstam
                                                        elif tpet_type == 'SOULCHAIN':
                                                            t_stamina = round(dmg['DMG'])
                                                            c_stamina = t_stamina
                                                        elif tpet_type == 'GAMBLE':
                                                            t_health = round(dmg['DMG'])
                                                            c_health = t_health
                                                        elif tpet_type == 'FEAR':
                                                            t_max_health = round(t_max_health - dmg['DMG'])
                                                            c_attack = round(c_attack - ((dmg['DMG'] * .5)))
                                                            c_defense = round(c_defense - ((dmg['DMG'] * .5)))
                                                        elif tpet_type == 'WAVE':
                                                            c_health = round(c_health - dmg['DMG'])
                                                        elif tpet_type == 'BLAST':
                                                            if dmg['DMG'] >= 100:
                                                                dmg['DMG'] = 100
                                                            c_health = round(c_health - dmg['DMG'])
                                                        elif tpet_type == 'CREATION':
                                                            t_max_health = round(t_max_health + dmg['DMG'])
                                                            t_health = round(t_health + dmg['DMG'])
                                                        elif tpet_type == 'DESTRUCTION':
                                                            if dmg['DMG'] >= 100:
                                                                dmg['DMG'] = 100    
                                                            o_max_health = round(o_max_health - dmg['DMG'])
                                                            if o_max_health <=1:
                                                                o_max_health = 1
                                                        t_stamina = t_stamina - int(dmg['STAMINA_USED'])

                                                        if t_universe == "Persona":
                                                            petdmg = damage_cal(t_for_c_opponent_affinities, basic_attack_name, tmove1_element, t_universe, t_card, t_1, t_attack, t_defense,
                                                                                c_defense, t_stamina, t_enhancer_used, t_health,
                                                                                c_health, c_stamina, t_max_health, c_attack,
                                                                                t_special_move_description, turn_total,
                                                                                tcard_lvl_ap_buff, None)

                                                            c_health = c_health - petdmg['DMG']

                                                            embedVar = discord.Embed(
                                                                title=f"**PERSONA!**\n{tpet_name} was summoned from {t_card}'s soul dealing **{petdmg['DMG']}** damage!!",
                                                                colour=0xe91e63)
                                                            await battle_msg.delete(delay=2)
                                                            if not operformance:
                                                                tsummon_file = showsummon(tpet_image, tpet_name, dmg['MESSAGE'], tpet_lvl, tpet_bond)
                                                                embedVar.set_image(url="attachment://pet.png")
                                                                await asyncio.sleep(2)
                                                                battle_msg = await private_channel.send(embed=embedVar, file=tsummon_file)
                                                                await asyncio.sleep(2)
                                                                await battle_msg.delete(delay=2)
                                                            
                                                            
                                                            #embedVar.set_image(url="attachment://pet.png")
                                                            #await button_ctx.send(embed=embedVar)
                                                            previous_moves.append(f"(**{turn_total}**) **Persona!** 🩸 : **{tpet_name}** was summoned from **{t_card}'s** soul dealing **{petdmg['DMG']}** damage!\n**{c_card}** summon disabled!")
                                                            c_pet_used = True
                                                            
                                                        else:
                                                            embedVar = discord.Embed(
                                                                title=f"{t_card} Summoned 🧬 **{tpet_name}**",
                                                                colour=0xe91e63)
                                                            await battle_msg.delete(delay=2)
                                                            if not operformance:
                                                                tsummon_file = showsummon(tpet_image, tpet_name, dmg['MESSAGE'], tpet_lvl, tpet_bond)
                                                                embedVar.set_image(url="attachment://pet.png")
                                                                await asyncio.sleep(2)
                                                                battle_msg = await private_channel.send(embed=embedVar, file=tsummon_file)
                                                                await asyncio.sleep(2)
                                                                await battle_msg.delete(delay=2)
                                                            
                                                            
                                                            
                                                            previous_moves.append(f"(**{turn_total}**) **{t_card}** Summoned 🧬 **{tpet_name}**: {dmg['MESSAGE']}")
                                                            
                                                        turn = 3
                                                    else:
                                                        previous_moves.append(f"(**{turn_total}**) {t_card} Could not summon 🧬 **{tpet_name}**. Needs rest")
                                                        turn = 3
                                        elif int(aiMove) == 7:
                                            if t_universe == "Persona":
                                                block_message = f"**Confidant Block!*** 🩸: **{t_card}** Blocked 🛡️"
                                                t_block_used = True
                                                t_defense = round(t_defense * 2)

                                                previous_moves.append(block_message)
                                                await button_ctx.defer(ignore=True)
                                                turn_total = turn_total + 1
                                                turn = 0


                                            if t_stamina >= 20:
                                                if t_universe == "Attack On Titan":
                                                    previous_moves.append(f"(**{turn_total}**) **Rally** 🩸 ! **{t_card}** Increased Max Health ❤️")
                                                    t_max_health = round(t_max_health + 100)
                                                    t_health = t_health + 100

                                                if t_universe == "Bleach":
                                                    dmg = damage_cal(o_opponent_affinities, basic_attack_name, tmove1_element, t_universe, t_card, t_1, t_attack, t_defense, o_defense,
                                                                    t_stamina, t_enhancer_used, t_health, o_health, o_stamina,
                                                                    t_max_health, o_attack, t_special_move_description, turn_total,
                                                                    tcard_lvl_ap_buff, None)
                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}** Exerted their 🩸 Spiritual Pressure - {dmg['MESSAGE']}")
                                                    if dmg['REPEL']:
                                                        t_health = t_health - dmg['DMG']
                                                    elif dmg['ABSORB']:
                                                        c_health = c_health + dmg['DMG']
                                                    elif dmg['ELEMENT'] == water_element:
                                                        if tmove1_element == water_element:
                                                            t_basic_water_buff = t_basic_water_buff + 25
                                                        if tmove2_element == water_element:
                                                            t_special_water_buff = t_special_water_buff + 25
                                                        if tmove3_element == water_element:
                                                            t_ultimate_water_buff = t_ultimate_water_buff + 25
                                                        c_health = c_health - dmg['DMG']

                                                    elif dmg['ELEMENT'] == ice_element:
                                                        t_ice_counter = t_ice_counter + 1
                                                        if t_ice_counter == 3:
                                                            t_freeze_enh = True
                                                            t_ice_counter = 0
                                                        c_health = c_health - dmg['DMG']

                                                    elif dmg['ELEMENT'] == time_element:
                                                        t_stamina = 0
                                                        c_health = c_health - dmg['DMG']

                                                    elif dmg['ELEMENT'] == bleed_element:
                                                        t_bleed_counter = t_bleed_counter + 1
                                                        if t_bleed_counter == 5:
                                                            t_bleed_hit = True
                                                            t_bleed_counter = 0
                                                        c_health = c_health - dmg['DMG']

                                                    elif dmg['ELEMENT'] == recoil_element:
                                                        t_health = t_health - (dmg['DMG'] * .25)
                                                        c_health = c_health - dmg['DMG']

                                                    elif dmg['ELEMENT'] == earth_element:
                                                        t_defense = t_defense + (dmg['DMG'] * .20)
                                                        c_health = c_health - dmg['DMG']

                                                    elif dmg['ELEMENT'] == death_element:
                                                        c_max_health = c_max_health - (dmg['DMG'] * .07)
                                                        c_health = c_health - dmg['DMG']

                                                    elif dmg['ELEMENT'] == light_element:
                                                        t_stamina = round(t_stamina + (dmg['STAMINA_USED'] / 2))
                                                        c_health = c_health - dmg['DMG']

                                                    elif dmg['ELEMENT'] == dark_element:
                                                        t_stamina = t_stamina + 5
                                                        c_stamina = c_stamina - 5
                                                        c_health = c_health - dmg['DMG']

                                                    elif dmg['ELEMENT'] == life_element:
                                                        t_health = t_health + (dmg['DMG'] * .15)
                                                        c_health = c_health - dmg['DMG']

                                                    elif dmg['ELEMENT'] == psychic_element:
                                                        c_defense = c_defense - (dmg['DMG'] * .08)
                                                        c_attack = c_attack - (dmg['DMG'] * .08)
                                                        c_health = c_health - dmg['DMG']

                                                    elif dmg['ELEMENT'] == fire_element:
                                                        t_burn_dmg = t_burn_dmg + round(dmg['DMG'] * .20)
                                                        c_health = c_health - dmg['DMG']

                                                    elif dmg['ELEMENT'] == electric_element:
                                                        t_shock_buff = t_shock_buff +  (dmg['DMG'] * .07)
                                                        c_health = c_health - dmg['DMG']

                                                    elif dmg['ELEMENT'] == poison_element:
                                                        if t_poison_dmg <= 100:
                                                            t_poison_dmg = t_poison_dmg + 8
                                                        c_health = c_health - dmg['DMG']
                                                        
                                                    elif dmg['ELEMENT'] == gravity_element:
                                                        t_gravity_hit = True
                                                        c_health = c_health - dmg['DMG']
                                                    
                                                    else:
                                                        c_health = c_health - dmg['DMG']

                                                t_stamina = t_stamina - 20
                                                t_block_used = True
                                                t_defense = round(t_defense * 2)
                                                previous_moves.append(f"(**{turn_total}**) **{t_card}:** Blocked 🛡️")
                                                turn_total = turn_total + 1
                                                turn = 0
                                            else:
                                                turn = 2

                                        if int(aiMove) != 5 and int(aiMove) != 6 and int(aiMove) !=7:
                                            # If you have enough stamina for move, use it
                                            # check if o is blocking

                                            if o_defend_used == True:
                                                if dmg['CAN_USE_MOVE']:
                                                    if dmg['ENHANCE']:
                                                        enh_type = dmg['ENHANCED_TYPE']
                                                        if enh_type == 'ATK':
                                                            t_attack = round(t_attack + dmg['DMG'])
                                                        elif enh_type == 'DEF':
                                                            t_defense = round(t_defense + dmg['DMG'])
                                                        elif enh_type == 'STAM':
                                                            t_stamina = round(t_stamina + dmg['DMG'])
                                                        elif enh_type == 'HLT':
                                                            t_health = round(t_health + dmg['DMG'])
                                                        elif enh_type == 'LIFE':
                                                            t_health = round(t_health + dmg['DMG'])
                                                            o_health = round(o_health - dmg['DMG'])
                                                        elif enh_type == 'DRAIN':
                                                            t_stamina = round(t_stamina + dmg['DMG'])
                                                            o_stamina = round(o_stamina - dmg['DMG'])
                                                        elif enh_type == 'FLOG':
                                                            t_attack = round(t_attack + dmg['DMG'])
                                                            o_attack = round(o_attack - dmg['DMG'])
                                                        elif enh_type == 'WITHER':
                                                            t_defense = round(t_defense + dmg['DMG'])
                                                            o_defense = round(o_defense - dmg['DMG'])
                                                        elif enh_type == 'RAGE':
                                                            t_defense = round(t_defense - dmg['DMG'])
                                                            t_attack = round(t_attack + dmg['DMG'])
                                                        elif enh_type == 'BRACE':
                                                            t_defense = round(t_defense + dmg['DMG'])
                                                            t_attack = round(t_attack - dmg['DMG'])
                                                        elif enh_type == 'BZRK':
                                                            t_health = round(t_health - dmg['DMG'])
                                                            t_attack = round(t_attack + (dmg['DMG']))
                                                        elif enh_type == 'CRYSTAL':
                                                            t_health = round(t_health - dmg['DMG'])
                                                            t_defense = round(t_defense + dmg['DMG'])
                                                        elif enh_type == 'GROWTH':
                                                            t_max_health = round(t_max_health - dmg['DMG'])
                                                            t_defense = round(t_defense + (dmg['DMG'] * .5))
                                                            t_attack = round(t_attack + (dmg['DMG'] * .5))
                                                        elif enh_type == 'STANCE':
                                                            tempattack = dmg['DMG']
                                                            t_attack = t_defense
                                                            t_defense = tempattack
                                                        elif enh_type == 'CONFUSE':
                                                            tempattack = dmg['DMG']
                                                            o_attack = o_defense
                                                            o_defense = tempattack
                                                        elif enh_type == 'BLINK':
                                                            t_stamina = round(t_stamina - dmg['DMG'])
                                                            o_stamina = round(o_stamina + dmg['DMG'])
                                                        elif enh_type == 'SLOW':
                                                            tempstam = round(o_stamina + dmg['DMG'])
                                                            t_stamina = round(t_stamina - dmg['DMG'])
                                                            o_stamina = t_stamina
                                                            t_stamina = tempstam
                                                        elif enh_type == 'HASTE':
                                                            tempstam = round(o_stamina - dmg['DMG'])
                                                            t_stamina = round(t_stamina + dmg['DMG'])
                                                            o_stamina = t_stamina
                                                            t_stamina = tempstam
                                                        elif enh_type == 'SOULCHAIN':
                                                            t_stamina = round(dmg['DMG'])
                                                            o_stamina = o_stamina
                                                        elif enh_type == 'GAMBLE':
                                                            if mode in D_modes:
                                                                t_health = round(dmg['DMG']) * 3
                                                                o_health = round(dmg['DMG'])
                                                            elif mode in B_modes:
                                                                t_health = round(dmg['DMG']) * 4
                                                                o_health = round(dmg['DMG'])
                                                            else:
                                                                t_health = round(dmg['DMG']) * 2
                                                                o_health = round(dmg['DMG'])
                                                        elif enh_type == 'FEAR':
                                                            t_max_health = round(t_max_health - dmg['DMG'])
                                                            o_defense = round(o_defense - (dmg['DMG'] * .5))
                                                            o_attack = round(o_attack - (dmg['DMG'] * .5))
                                                        elif enh_type == 'WAVE':
                                                            o_health = round(o_health - dmg['DMG'])
                                                        elif enh_type == 'BLAST':
                                                            o_health = round(o_health - dmg['DMG'])
                                                        elif enh_type == 'CREATION':
                                                            t_max_health = round(t_max_health + dmg['DMG'])
                                                            t_health = round(t_health + dmg['DMG'])
                                                        elif enh_type == 'DESTRUCTION':
                                                            # t_max_health = round(t_max_health - dmg['DMG'])
                                                            o_max_health = round(o_max_health - dmg['DMG'])
                                                            # if t_max_health <=1:
                                                            #     t_max_health = 1
                                                            if o_max_health <=1:
                                                                o_max_health = 1
                                                        
                                                        if enh_type in Stamina_Enhancer_Check or enh_type in Time_Enhancer_Check or enh_type in Control_Enhancer_Check:
                                                            t_stamina = t_stamina
                                                        else:
                                                            t_stamina = t_stamina - int(dmg['STAMINA_USED'])
                                                        embedVar = discord.Embed(title=f"{dmg['MESSAGE']}",
                                                                                colour=embed_color_t)
                                                        #await private_channel.send(embed=embedVar)
                                                        previous_moves.append(f"(**{turn_total}**) **{t_card}**: 🦠 {dmg['MESSAGE']}")
                                                        turn_total = turn_total + 1
                                                        turn = 0
                                                    elif dmg['DMG'] == 0:
                                                        t_stamina = t_stamina - int(dmg['STAMINA_USED'])
                                                        embedVar = discord.Embed(title=f"{dmg['MESSAGE']}", colour=embed_color_t)
                                                        previous_moves.append(f"(**{turn_total}**) **{t_card}**: {dmg['MESSAGE']}")
                                                        if tarm_barrier_active:
                                                            tarm_barrier_active=False
                                                            embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                            previous_moves.append(f"(**{turn_total}**) **{t_card}**'s 💠 Barrier Disabled!")
                                                        #await private_channel.send(embed=embedVar)
                                                        turn_total = turn_total + 1
                                                        turn = 0
                                                    else:
                                                        if o_universe == "Naruto" and o_stamina < 10:
                                                            o_stored_damage = round(dmg['DMG'])
                                                            o_naruto_heal_buff = o_naruto_heal_buff + o_stored_damage
                                                            o_health = o_health 
                                                            embedVar = discord.Embed(title=f"{o_card}: Substitution Jutsu", description=f"{t_card} strikes a log", colour=0xe91e63)
                                                            previous_moves.append(f"(**{turn_total}**) **{o_card}** 🩸: Substitution Jutsu")
                                                            if not o_used_resolve:
                                                                previous_moves.append(f"(**{turn_total}**) 🩸**{o_stored_damage}** Hasirama Cells stored. 🩸**{o_naruto_heal_buff}** total stored.")
                                                            if tarm_barrier_active:
                                                                tarm_barrier_active=False
                                                                embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                previous_moves.append(f"(**{turn_total}**) **{t_card}**'s 💠 Barrier Disabled!")
                                                            #await private_channel.send(embed=embedVar)
                                                        elif oarm_shield_active and dmg['ELEMENT'] != dark_element:
                                                            if oshield_value > 0:
                                                                oshield_value = oshield_value -dmg['DMG']
                                                                o_health = o_health 
                                                                if oshield_value <=0:
                                                                    embedVar = discord.Embed(title=f"{o_card}'s' **Shield** Shattered!", description=f"{t_card} breaks the **Shield**!", colour=0xe91e63)
                                                                    previous_moves.append(f"(**{turn_total}**) **{o_card}'s** 🌐 Shield Shattered!")
                                                                    if tarm_barrier_active:
                                                                        tarm_barrier_active=False
                                                                        embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                        previous_moves.append(f"(**{turn_total}**) **{t_card}**'s 💠 Barrier Disabled!")
                                                                    #await private_channel.send(embed=embedVar)
                                                                    oarm_shield_active = False
                                                                else:
                                                                    embedVar = discord.Embed(title=f"{o_card} Activates **Shield** 🌐", description=f"**{t_card}** strikes the Shield 🌐\n**{oshield_value} Shield** Left!", colour=0xe91e63)
                                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}** strikes **{o_card}**'s Shield 🌐\n**{oshield_value} Shield** Left!")
                                                                    if tarm_barrier_active:
                                                                        tarm_barrier_active=False
                                                                        embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                        previous_moves.append(f"(**{turn_total}**) **{t_card}**'s 💠 Barrier Disabled!")
                                                                    #await private_channel.send(embed=embedVar)

                                                        elif oarm_barrier_active and dmg['ELEMENT'] != psychic_element:
                                                            if obarrier_count >1:
                                                                o_health = o_health 
                                                                embedVar = discord.Embed(title=f"{o_card} Activates **Barrier** 💠", description=f"{t_card}'s attack **Nullified**!\n💠 {obarrier_count - 1} **Barriers** remain!", colour=0xe91e63)
                                                                previous_moves.append(f"(**{turn_total}**) /**{o_card}** Activates Barrier 💠  {t_card}'s attack **Nullified**!\n💠 {obarrier_count - 1} **Barriers** remain!")
                                                                if tarm_barrier_active:
                                                                    tarm_barrier_active=False
                                                                    embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}**'s 💠 Barrier Disabled!")
                                                                #await private_channel.send(embed=embedVar)
                                                                obarrier_count = obarrier_count - 1
                                                            elif obarrier_count==1:
                                                                embedVar = discord.Embed(title=f"{o_card}'s **Barrier** Broken!", description=f"{t_card} destroys the **Barrier**", colour=0xe91e63)
                                                                previous_moves.append(f"(**{turn_total}**) **{o_card}**'s Barrier Broken!")
                                                                obarrier_count = obarrier_count - 1
                                                                if tarm_barrier_active:
                                                                    tarm_barrier_active=False
                                                                    embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}**'s 💠 Barrier Disabled!")
                                                                #await private_channel.send(embed=embedVar)
                                                                oarm_barrier_active = False
                                                        elif oarm_parry_active and dmg['ELEMENT'] != earth_element:
                                                            if oparry_count > 1:
                                                                oparry_damage = round(dmg['DMG'])
                                                                o_health = round(o_health - (oparry_damage * .75))
                                                                t_health = round(t_health - (oparry_damage * .25))
                                                                oparry_count = oparry_count - 1
                                                                embedVar = discord.Embed(title=f"{o_card} Activates **Parry** 🔄", description=f"{t_card} takes {round(oparry_damage * .25)}! DMG\n **{oparry_count} Parries** to go!!", colour=0xe91e63)
                                                                previous_moves.append(f"(**{turn_total}**) **{o_card}** Activates Parry 🔄 {t_card} takes {round(oparry_damage * .25)}! DMG\n **{oparry_count}  Parries** to go!!")
                                                                if tarm_barrier_active:
                                                                    tarm_barrier_active=False
                                                                    embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}**'s 💠 Barrier Disabled!")
                                                                #await private_channel.send(embed=embedVar)
                                                                
                                                            elif oparry_count==1:
                                                                oparry_damage = round(dmg['DMG'])
                                                                o_health = round(o_health - (oparry_damage * .75))
                                                                t_health = round(t_health - (oparry_damage * .25))
                                                                embedVar = discord.Embed(title=f"{o_card} **Parry** Penetrated!!", description=f"{t_card} takes {round(oparry_damage * .25)}! DMG and breaks the **Parry**", colour=0xe91e63)
                                                                previous_moves.append(f"(**{turn_total}**) **{o_card}** Parry Penetrated! **{t_card}** takes **{round(oparry_damage * .25)}**! DMG and breaks the **Parry**")
                                                                oparry_count = oparry_count - 1
                                                                if tarm_barrier_active:
                                                                    tarm_barrier_active=False
                                                                    embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}**'s 💠 Barrier Disabled!")
                                                                #await private_channel.send(embed=embedVar)
                                                                oarm_parry_active = False
                                                        else:
                                                            if dmg['REPEL']:
                                                                t_health = t_health - int(dmg['DMG'])
                                                            elif dmg['ABSORB']:
                                                                o_health = o_health + int(dmg['DMG'])
                                                            elif dmg['ELEMENT'] == water_element:
                                                                if tmove1_element == water_element:
                                                                    t_basic_water_buff = t_basic_water_buff + 25
                                                                if tmove2_element == water_element:
                                                                    t_special_water_buff = t_special_water_buff + 25
                                                                if tmove3_element == water_element:
                                                                    t_ultimate_water_buff = t_ultimate_water_buff + 25
                                                                o_health = o_health - (dmg['DMG'] + t_water_buff)

                                                            elif dmg['ELEMENT'] == earth_element:
                                                                t_defense = t_defense + (dmg['DMG'] * .20)
                                                                o_health = o_health - dmg['DMG']

                                                            elif dmg['ELEMENT'] == recoil_element:
                                                                t_health = t_health - (dmg['DMG'] * .25)
                                                                o_health = o_health - dmg['DMG']

                                                            elif dmg['ELEMENT'] == time_element:
                                                                t_stamina = 0
                                                                o_health = o_health - dmg['DMG']


                                                            elif dmg['ELEMENT'] == death_element:
                                                                o_max_health = o_max_health - (dmg['DMG'] * .07)
                                                                o_health = o_health - dmg['DMG']

                                                            elif dmg['ELEMENT'] == light_element:
                                                                t_stamina = round(t_stamina + (dmg['STAMINA_USED'] / 2))
                                                                o_health = o_health - dmg['DMG']

                                                            elif dmg['ELEMENT'] == dark_element:
                                                                t_stamina = t_stamina + 5
                                                                o_stamina = o_stamina - 5
                                                                o_health = o_health - dmg['DMG']

                                                            elif dmg['ELEMENT'] == life_element:
                                                                t_health = t_health + (dmg['DMG'] * .15)
                                                                o_health = o_health - dmg['DMG']

                                                            elif dmg['ELEMENT'] == psychic_element:
                                                                o_defense = o_defense - (dmg['DMG'] * .08)
                                                                o_attack = o_attack - (dmg['DMG'] * .08)
                                                                o_health = o_health - dmg['DMG']

                                                            elif dmg['ELEMENT'] == fire_element:
                                                                t_burn_dmg = t_burn_dmg + round(dmg['DMG'] * .20)
                                                                o_health = o_health - dmg['DMG']


                                                            elif dmg['ELEMENT'] == electric_element:
                                                                t_shock_buff = t_shock_buff +  (dmg['DMG'] * .07)
                                                                o_health = o_health - dmg['DMG']

                                                            elif dmg['ELEMENT'] == poison_element:
                                                                if t_poison_dmg <= 100:
                                                                    t_poison_dmg = t_poison_dmg + 8
                                                                o_health = o_health - dmg['DMG']
        
                                                            elif dmg['ELEMENT'] == ice_element:
                                                                t_ice_counter = t_ice_counter + 1
                                                                if t_ice_counter == 3:
                                                                    t_freeze_enh = True
                                                                    t_ice_counter = 0
                                                                o_health = o_health - dmg['DMG']

                                                            elif dmg['ELEMENT'] == bleed_element:
                                                                t_bleed_counter = t_bleed_counter + 1
                                                                if t_bleed_counter == 5:
                                                                    t_bleed_hit = True
                                                                    t_bleed_counter = 0
                                                                o_health = o_health - dmg['DMG']
                                                                
                                                            elif dmg['ELEMENT'] == gravity_element:
                                                                t_gravity_hit = True
                                                                o_health = o_health - dmg['DMG']
                                                            
                                                            else:
                                                                o_health = o_health - dmg['DMG']


                                                            embedVar = discord.Embed(title=f"{dmg['MESSAGE']}", colour=embed_color_t)
                                                            previous_moves.append(f"(**{turn_total}**) **{t_card}**: {dmg['MESSAGE']}")
                                                            if tarm_siphon_active:
                                                                siphon_damage = (dmg['DMG'] * .10) + tsiphon_value
                                                                t_health = round(t_health + siphon_damage)
                                                                if t_health >= t_max_health:
                                                                    t_health = t_max_health
                                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}**: 💉 Siphoned **Full Health!**")
                                                                else:
                                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}**: 💉 Siphoned **{round(siphon_damage)}** Health!")
                                                            if tarm_barrier_active:
                                                                tarm_barrier_active=False
                                                                embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                previous_moves.append(f"(**{turn_total}**) **{t_card}**'s 💠 Barrier Disabled!")
                                                            #await private_channel.send(embed=embedVar)
                                                        if o_health <= 0:
                                                            if o_final_stand==True:
                                                                if o_universe == "Dragon Ball Z":
                                                                    embedVar = discord.Embed(title=f"{o_card}'s LAST STAND", description=f"{o_card} FINDS RESOLVE", colour=0xe91e63)
                                                                    embedVar.add_field(name=f"**{o_card}** Resolved and continues to fight", value="All stats & stamina increased")
                                                                    previous_moves.append(f"(**{turn_total}**) **{o_card}** 🩸 Transformation: Last Stand!!!")
                                                                    if tarm_barrier_active:
                                                                        tarm_barrier_active=False
                                                                        embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                        previous_moves.append(f"(**{turn_total}**) **{t_card}**'s 💠 Barrier Disabled!")
                                                                    #await private_channel.send(embed=embedVar)
                                                                    o_health = int(.75 * (o_attack + o_defense))
                                                                    
                                                                    o_stamina = 100
                                                                    o_used_resolve = True
                                                                    o_final_stand = False
                                                                    o_used_focus = True
                                                                    t_stamina = t_stamina - int(dmg['STAMINA_USED'])
                                                                    turn_total = turn_total + 1
                                                                    turn = 0
                                                            else:
                                                                o_health = 0
                                                                t_stamina = t_stamina - int(dmg['STAMINA_USED'])
                                                                turn_total = turn_total + 1
                                                        else:
                                                            t_stamina = t_stamina - int(dmg['STAMINA_USED'])
                                                            turn_total = turn_total + 1
                                                            turn = 0
                                                else:
                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}** not enough Stamina to use this move") 
                                                    turn = 3
                                            else:
                                                if dmg['CAN_USE_MOVE']:
                                                    if dmg['ENHANCE']:
                                                        enh_type = dmg['ENHANCED_TYPE']
                                                        if enh_type == 'ATK':
                                                            t_attack = round(t_attack + dmg['DMG'])
                                                        elif enh_type == 'DEF':
                                                            t_defense = round(t_defense + dmg['DMG'])
                                                        elif enh_type == 'STAM':
                                                            t_stamina = round(t_stamina + dmg['DMG'])
                                                        elif enh_type == 'HLT':
                                                            t_health = round(t_health + dmg['DMG'])
                                                        elif enh_type == 'LIFE':
                                                            t_health = round(t_health + dmg['DMG'])
                                                            c_health = round(c_health - dmg['DMG'])
                                                        elif enh_type == 'DRAIN':
                                                            t_stamina = round(t_stamina + dmg['DMG'])
                                                            c_stamina = round(c_stamina - dmg['DMG'])
                                                        elif enh_type == 'FLOG':
                                                            t_attack = round(t_attack + dmg['DMG'])
                                                            c_attack = round(c_attack - dmg['DMG'])
                                                        elif enh_type == 'WITHER':
                                                            t_defense = round(t_defense + dmg['DMG'])
                                                            c_defense = round(t_defense - dmg['DMG'])
                                                        elif enh_type == 'RAGE':
                                                            t_defense = round(t_defense - dmg['DMG'])
                                                            t_attack = round(t_attack + dmg['DMG'])
                                                        elif enh_type == 'BRACE':
                                                            t_defense = round(t_defense + dmg['DMG'])
                                                            t_attack = round(t_attack - dmg['DMG'])
                                                        elif enh_type == 'BZRK':
                                                            t_health = round(t_health - dmg['DMG'])
                                                            t_attack = round(t_attack + (dmg['DMG']))
                                                        elif enh_type == 'CRYSTAL':
                                                            t_health = round(t_health - dmg['DMG'])
                                                            t_defense = round(t_defense + dmg['DMG'])
                                                        elif enh_type == 'GROWTH':
                                                            t_max_health = round(t_max_health - dmg['DMG'])
                                                            t_defense = round(t_defense + (dmg['DMG'] * .5))
                                                            t_attack = round(t_attack + (dmg['DMG'] * .5))
                                                        elif enh_type == 'STANCE':
                                                            tempattack = dmg['DMG']
                                                            t_attack = t_defense
                                                            t_defense = tempattack
                                                        elif enh_type == 'CONFUSE':
                                                            tempattack = dmg['DMG']
                                                            c_attack = c_defense
                                                            c_defense = tempattack
                                                        elif enh_type == 'BLINK':
                                                            t_stamina = round(t_stamina - dmg['DMG'])
                                                            c_stamina = round(c_stamina + dmg['DMG'])
                                                        elif enh_type == 'SLOW':
                                                            tempstam = round(c_stamina + dmg['DMG'])
                                                            t_stamina = round(t_stamina - dmg['DMG'])
                                                            c_stamina = t_stamina
                                                            t_stamina = tempstam
                                                        elif enh_type == 'HASTE':
                                                            tempstam = round(c_stamina - dmg['DMG'])
                                                            t_stamina = round(t_stamina + dmg['DMG'])
                                                            c_stamina = t_stamina
                                                            t_stamina = tempstam
                                                        elif enh_type == 'SOULCHAIN':
                                                            t_stamina = round(dmg['DMG'])
                                                            c_stamina = t_stamina
                                                        elif enh_type == 'GAMBLE':
                                                            if mode in D_modes:
                                                                t_health = round(dmg['DMG']) * 3
                                                                c_health = round(dmg['DMG'])
                                                            elif mode in B_modes:
                                                                t_health = round(dmg['DMG']) * 4
                                                                c_health = round(dmg['DMG'])
                                                            else:
                                                                t_health = round(dmg['DMG']) * 2
                                                                c_health = round(dmg['DMG'])
                                                        elif enh_type == 'FEAR':
                                                            t_max_health = round(t_max_health - dmg['DMG'])
                                                            c_attack = round(c_attack - ((dmg['DMG'] * .5)))
                                                            c_defense = round(c_defense - ((dmg['DMG'] * .5)))
                                                        elif enh_type == 'WAVE':
                                                            c_health = round(c_health - dmg['DMG'])
                                                        elif enh_type == 'BLAST':
                                                            c_health = round(c_health - dmg['DMG'])
                                                        elif enh_type == 'CREATION':
                                                            t_max_health = round(t_max_health + dmg['DMG'])
                                                            t_health = round(t_health + dmg['DMG'])
                                                        elif enh_type == 'DESTRUCTION':
                                                            # t_max_health = round(t_max_health - dmg['DMG'])
                                                            c_max_health = round(c_max_health - dmg['DMG'])
                                                            # if t_max_health <=1:
                                                            #     t_max_health = 1
                                                            if c_max_health <=1:
                                                                c_max_health = 1
                                                        if enh_type in Stamina_Enhancer_Check or enh_type in Time_Enhancer_Check or enh_type in Control_Enhancer_Check:
                                                            t_stamina = t_stamina
                                                        else:
                                                            t_stamina = t_stamina - int(dmg['STAMINA_USED'])
                                                        embedVar = discord.Embed(title=f"{dmg['MESSAGE']}",
                                                                                colour=embed_color_t)
                                                        #await private_channel.send(embed=embedVar)
                                                        previous_moves.append(f"(**{turn_total}**) **{t_card}**: 🦠 {dmg['MESSAGE']}")
                                                        turn_total = turn_total + 1
                                                        turn = 0
                                                    elif dmg['DMG'] == 0:
                                                        t_stamina = t_stamina - int(dmg['STAMINA_USED'])
                                                        embedVar = discord.Embed(title=f"{dmg['MESSAGE']}", colour=embed_color_t)
                                                        previous_moves.append(f"(**{turn_total}**) **{t_card}**: {dmg['MESSAGE']}")
                                                        if tarm_barrier_active:
                                                            tarm_barrier_active=False
                                                            embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                            previous_moves.append(f"(**{turn_total}**) **{t_card}**'s 💠 Barrier Disabled!")
                                                        #await private_channel.send(embed=embedVar)
                                                        turn_total = turn_total + 1
                                                        turn = 0
                                                    else:
                                                        if c_universe == "Naruto" and c_stamina < 10:
                                                            c_stored_damage = round(dmg['DMG'])
                                                            c_naruto_heal_buff = c_naruto_heal_buff + c_stored_damage
                                                            c_health = c_health 
                                                            embedVar = discord.Embed(title=f"{c_card}: Substitution Jutsu", description=f"{t_card} strikes a log", colour=0xe91e63)
                                                            previous_moves.append(f"(**{turn_total}**) **{c_card}** 🩸: Substitution Jutsu")
                                                            if not c_used_resolve:
                                                                previous_moves.append(f"(**{turn_total}**) 🩸**{c_stored_damage}** Hasirama Cells stored. 🩸**{c_naruto_heal_buff}** total stored.")
                                                            if tarm_barrier_active:
                                                                tarm_barrier_active=False
                                                                embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                previous_moves.append(f"(**{turn_total}**) **{t_card}**'s 💠 Barrier Disabled!")
                                                            #await private_channel.send(embed=embedVar)
                                                        elif carm_shield_active and dmg['ELEMENT'] != dark_element:
                                                            if cshield_value > 0:
                                                                cshield_value = cshield_value -dmg['DMG']
                                                                c_health = c_health 
                                                                if cshield_value <=0:
                                                                    embedVar = discord.Embed(title=f"{c_card}'s' **Shield** Shattered!", description=f"{t_card} breaks the **Shield**!", colour=0xe91e63)
                                                                    previous_moves.append(f"(**{turn_total}**) **{c_card}'s** 🌐 Shield Shattered!")
                                                                    if tarm_barrier_active:
                                                                        tarm_barrier_active=False
                                                                        embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                        previous_moves.append(f"(**{turn_total}**) **{t_card}**'s 💠 Barrier Disabled!")
                                                                    #await private_channel.send(embed=embedVar)
                                                                    carm_shield_active = False
                                                                else:
                                                                    embedVar = discord.Embed(title=f"{c_card} Activates **Shield** 🌐", description=f"**{t_card}** strikes the Shield 🌐\n**{cshield_value} Shield** Left!", colour=0xe91e63)
                                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}** strikes **{c_card}**'s Shield 🌐\n**{cshield_value} Shield** Left!")
                                                                    if tarm_barrier_active:
                                                                        tarm_barrier_active=False
                                                                        embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                        previous_moves.append(f"(**{turn_total}**) **{t_card}**'s 💠 Barrier Disabled!")
                                                                    #await private_channel.send(embed=embedVar)

                                                        elif carm_barrier_active and dmg['ELEMENT'] != psychic_element:
                                                            if cbarrier_count >1:
                                                                c_health = c_health 
                                                                embedVar = discord.Embed(title=f"{c_card} Activates **Barrier** 💠", description=f"{t_card}'s attack **Nullified**!\n 💠{cbarrier_count - 1} **Barriers** remain!", colour=0xe91e63)
                                                                previous_moves.append(f"(**{turn_total}**) **{c_card}** Activates Barrier 💠 {t_card}'s attack **Nullified**!\n💠 {cbarrier_count - 1} **Barriers** remain!")
                                                                if tarm_barrier_active:
                                                                    tarm_barrier_active=False
                                                                    embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}**'s 💠 Barrier Disabled!")
                                                                #await private_channel.send(embed=embedVar)
                                                                cbarrier_count = cbarrier_count - 1
                                                            elif cbarrier_count==1:
                                                                embedVar = discord.Embed(title=f"{c_card}'s **Barrier** Broken!", description=f"{t_card} destroys the **Barrier**", colour=0xe91e63)
                                                                previous_moves.append(f"(**{turn_total}**) **{c_card}**'s Barrier Broken!")
                                                                cbarrier_count = cbarrier_count - 1
                                                                if tarm_barrier_active:
                                                                    tarm_barrier_active=False
                                                                    embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}**'s 💠 Barrier Disabled!")
                                                                #await private_channel.send(embed=embedVar)
                                                                carm_barrier_active = False
                                                        elif carm_parry_active and dmg['ELEMENT'] != earth_element:
                                                            if cparry_count > 1:
                                                                c_health = c_health
                                                                cparry_damage = round(dmg['DMG'])
                                                                c_health = round(c_health - (cparry_damage * .75))
                                                                t_health = round(t_health - (cparry_damage * .25))
                                                                cparry_count = cparry_count - 1
                                                                embedVar = discord.Embed(title=f"{c_card} Activates **Parry** 🔄", description=f"{t_card} takes {round(cparry_damage * .25)}! DMG\n **{cparry_count} Parries** to go!!", colour=0xe91e63)
                                                                previous_moves.append(f"(**{turn_total}**) **{c_card}** Activates Parry 🔄 {t_card} takes {round(cparry_damage * .25)}! DMG\n **{cparry_count}  Parries** to go!!")
                                                                if tarm_barrier_active:
                                                                    tarm_barrier_active=False
                                                                    embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!**")
                                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}**'s 💠 Barrier Disabled!")
                                                                #await private_channel.send(embed=embedVar)
                                                                
                                                            elif cparry_count==1:
                                                                c_health = c_health
                                                                cparry_damage = round(dmg['DMG'])
                                                                c_health = round(c_health - (cparry_damage * .75))
                                                                t_health = round(t_health - (cparry_damage * .25))
                                                                embedVar = discord.Embed(title=f"{c_card} **Parry** Penetrated!!", description=f"{t_card} takes {round(cparry_damage * .25)}! DMG and breaks the **Parry**", colour=0xe91e63)
                                                                previous_moves.append(f"(**{turn_total}**) **{c_card}** Parry Penetrated! **{t_card}** takes **{round(cparry_damage * .25)}**! DMG and breaks the **Parry**")
                                                                cparry_count = cparry_count - 1
                                                                if tarm_barrier_active:
                                                                    tarm_barrier_active=False
                                                                    embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}**'s 💠 Barrier Disabled!")
                                                                #await private_channel.send(embed=embedVar)
                                                                carm_parry_active = False
                                                        else:
                                                            if dmg['REPEL']:
                                                                t_health = t_health - int(dmg['DMG'])
                                                            elif dmg['ABSORB']:
                                                                c_health = c_health + int(dmg['DMG'])
                                                            elif dmg['ELEMENT'] == water_element:
                                                                if tmove1_element == water_element:
                                                                    t_basic_water_buff = t_basic_water_buff + 25
                                                                if tmove2_element == water_element:
                                                                    t_special_water_buff = t_special_water_buff + 25
                                                                if tmove3_element == water_element:
                                                                    t_ultimate_water_buff = t_ultimate_water_buff + 25
                                                                c_health = c_health - dmg['DMG']

                                                            elif dmg['ELEMENT'] == ice_element:
                                                                t_ice_counter = t_ice_counter + 1
                                                                if t_ice_counter == 3:
                                                                    t_freeze_enh = True
                                                                    t_ice_counter = 0
                                                                c_health = c_health - dmg['DMG']

                                                            elif dmg['ELEMENT'] == time_element:
                                                                t_stamina = 0
                                                                c_health = c_health - dmg['DMG']

                                                            elif dmg['ELEMENT'] == bleed_element:
                                                                t_bleed_counter = t_bleed_counter + 1
                                                                if t_bleed_counter == 5:
                                                                    t_bleed_hit = True
                                                                    t_bleed_counter = 0
                                                                c_health = c_health - dmg['DMG']

                                                            elif dmg['ELEMENT'] == recoil_element:
                                                                t_health = t_health - (dmg['DMG'] * .25)
                                                                c_health = c_health - dmg['DMG']

                                                            elif dmg['ELEMENT'] == earth_element:
                                                                t_defense = t_defense + (dmg['DMG'] * .20)
                                                                c_health = c_health - dmg['DMG']

                                                            elif dmg['ELEMENT'] == death_element:
                                                                c_max_health = c_max_health - (dmg['DMG'] * .07)
                                                                c_health = c_health - dmg['DMG']

                                                            elif dmg['ELEMENT'] == light_element:
                                                                t_stamina = round(t_stamina + (dmg['STAMINA_USED'] / 2))
                                                                c_health = c_health - dmg['DMG']

                                                            elif dmg['ELEMENT'] == dark_element:
                                                                t_stamina = t_stamina + 5
                                                                c_stamina = c_stamina - 5
                                                                c_health = c_health - dmg['DMG']

                                                            elif dmg['ELEMENT'] == life_element:
                                                                t_health = t_health + (dmg['DMG'] * .15)
                                                                c_health = c_health - dmg['DMG']

                                                            elif dmg['ELEMENT'] == psychic_element:
                                                                c_defense = c_defense - (dmg['DMG'] * .08)
                                                                c_attack = c_attack - (dmg['DMG'] * .08)
                                                                c_health = c_health - dmg['DMG']

                                                            elif dmg['ELEMENT'] == fire_element:
                                                                t_burn_dmg = t_burn_dmg + round(dmg['DMG'] * .20)
                                                                c_health = c_health - dmg['DMG']

                                                            elif dmg['ELEMENT'] == electric_element:
                                                                t_shock_buff = t_shock_buff +  (dmg['DMG'] * .07)
                                                                c_health = c_health - dmg['DMG']

                                                            elif dmg['ELEMENT'] == poison_element:
                                                                if t_poison_dmg <= 100:
                                                                    t_poison_dmg = t_poison_dmg + 8
                                                                c_health = c_health - dmg['DMG']
                                                                
                                                            elif dmg['ELEMENT'] == gravity_element:
                                                                t_gravity_hit = True
                                                                c_health = c_health - dmg['DMG']
                                                            
                                                            else:
                                                                c_health = c_health - dmg['DMG']



                                                            embedVar = discord.Embed(title=f"{dmg['MESSAGE']}", colour=embed_color_t)
                                                            previous_moves.append(f"(**{turn_total}**) **{t_card}**: {dmg['MESSAGE']}")
                                                            if tarm_siphon_active:
                                                                siphon_damage = (dmg['DMG'] * .10) + tsiphon_value
                                                                t_health = round(t_health + siphon_damage)
                                                                if t_health >= t_max_health:
                                                                    t_health = t_max_health
                                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}**: 💉 Siphoned **Full Health!**")
                                                                else:
                                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}**: 💉 Siphoned **{round(siphon_damage)}** Health!")
                                                            if tarm_barrier_active:
                                                                tarm_barrier_active=False
                                                                embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                previous_moves.append(f"(**{turn_total}**) **{t_card}**'s 💠 Barrier Disabled!")
                                                            #await private_channel.send(embed=embedVar)
                                                        if c_health <= 0:
                                                            if c_final_stand==True:
                                                                if c_universe == "Dragon Ball Z":
                                                                    embedVar = discord.Embed(title=f"{c_card}'s LAST STAND", description=f"{c_card} FINDS RESOLVE", colour=0xe91e63)
                                                                    embedVar.add_field(name=f"{c_card} resolved and continues to fight", value="All stats & stamina increased")
                                                                    previous_moves.append(f"(**{turn_total}**) **{c_card}** 🩸 Transformation: Last Stand!!!")
                                                                    if tarm_barrier_active:
                                                                        tarm_barrier_active=False
                                                                        embedVar.add_field(name=f"{t_card}'s **Barrier** Disabled!", value =f"*Maximize **Barriers** with your Enhancer!*")
                                                                        previous_moves.append(f"(**{turn_total}**) **{t_card}**'s 💠 Barrier Disabled!")
                                                                    #await private_channel.send(embed=embedVar)
                                                                    c_health = int(.75 * (c_attack + c_defense))
                                                                    
                                                                    c_used_resolve = True
                                                                    c_used_focus = True
                                                                    c_final_stand = False
                                                                    t_stamina = t_stamina - int(dmg['STAMINA_USED'])
                                                                    turn_total = turn_total + 1
                                                                    turn = 2
                                                            else:
                                                                c_health = 0
                                                                t_stamina = t_stamina - int(dmg['STAMINA_USED'])
                                                                turn_total = turn_total + 1
                                                        else:
                                                            t_stamina = t_stamina - int(dmg['STAMINA_USED'])
                                                            turn_total = turn_total + 1
                                                            turn = 0
                                                else:
                                                    #await private_channel.send(m.NOT_ENOUGH_STAMINA)
                                                    previous_moves.append(f"(**{turn_total}**) **{t_card}** not enough Stamina to use this move")
                                                    turn = 3

                        # End the match
                    if (((o_health <= 0 or c_health <= 0) and mode in co_op_modes) or (
                            o_max_health <= 0 or c_max_health <= 0) and mode in co_op_modes) or (
                            (o_health <= 0 or o_max_health <= 0) and mode not in co_op_modes):
                        mode = original_mode
                        if previous_moves:
                            if previous_moves_len ==0:
                                previous_moves_into_embed = "\n\n".join(previous_moves)
                                #previous_moves_into_embed = f"You got One Shot! Try Again..."  
                            elif previous_moves_len >= 6:
                                previous_moves = previous_moves[-5:]
                                previous_moves_into_embed = "\n\n".join(previous_moves)
                            else:
                                previous_moves_into_embed = "\n\n".join(previous_moves)
                            

                        if mode in PVP_MODES or mode =="RAID":
                            try:
                                # await ctx.send(f":zap: {user2.mention} you win the match!")
                                uid = t_DID
                                ouid = sowner['DID']
                                tuser = await self.bot.fetch_user(uid)
                                ouser = await self.bot.fetch_user(ouid)
                                wintime = time.asctime()
                                h_playtime = int(wintime[11:13])
                                m_playtime = int(wintime[14:16])
                                s_playtime = int(wintime[17:19])
                                gameClock = getTime(int(h_gametime), int(m_gametime), int(s_gametime), h_playtime, m_playtime,
                                                    s_playtime)
                                match = await savematch(str(tuser), str(t_card), str(t_card_path), str(ttitle['TITLE']),
                                                        str(tarm['ARM']), "N/A", "PVP", o['EXCLUSIVE'])
                                
                                sownerctx = await self.bot.fetch_user(ouid)
                                if mode == "RAID":
                                    guild_query = {'FDID': oguild['FDID']}
                                    guild_info = db.queryGuild(guild_query)
                                    fee = universe['FEE']
                                    guildwin = db.updateGuild(guild_query, {'$inc': {'BOUNTY': fee, 'STREAK': 1}})
                                    bounty = oguild['BOUNTY']
                                    bonus = oguild['STREAK']
                                    total_bounty = (bounty + ((bonus / 100) * bounty))
                                    wage = .50 * total_bounty
                                # response = await score(sownerctx, tuser)
                                await crown_utilities.curse(30, str(ctx.author.id))
                                await crown_utilities.bless(80, tuser.id)
                                if tguild:
                                    await crown_utilities.bless(15, str(tuser.id))
                                    await crown_utilities.blessteam(25, cteam)
                                    await teamwin(cteam)
                                    await crown_utilities.blessguild(60, tguild)
                                    if oguild:
                                        await crown_utilities.curse(7, str(tuser.id))
                                        await crown_utilities.curseteam(15, oteam)
                                        await teamloss(oteam)
                                        await crown_utilities.curseguild(30, oguild)

                                if arena_flag and arena_type == "SINGLES":
                                    arena = db.queryArena({"OWNER": str(arena_owner), "ACTIVE": True})
                                    guild1_lost = False
                                    for member in arena['GUILD1_MEMBERS']:
                                        if member['NAME'] == sowner['DISNAME'] and member['STRIKES'] == 1:
                                            guild1_lost = True
                                    guild2_lost = False
                                    for member in arena['GUILD2_MEMBERS']:
                                        if member['NAME'] == opponent['DISNAME'] and member['STRIKES'] == 1:
                                            guild2_lost = True
                                    if guild1_lost:
                                        query = {'OWNER': sowner['DISNAME'], "ACTIVE": True}
                                        update_query = {
                                            '$inc': {'GUILD1_MEMBERS.$[type].' + 'STRIKES': 1},
                                            '$set': {'ACTIVE': False, "WINNER": str(opponent['DISNAME']), "LOSER": str(sowner['DISNAME'])}
                                            }
                                        filter_query = [{'type.' + "NAME": str(sowner['DISNAME'])}]
                                        res = db.updateArena(query, update_query, filter_query)
                                        await crown_utilities.bless(10000, str(tuser.id))
                                        # await ctx.send(f"{ouser.mention} has won the 1v1, earning :coin: 10,000!")
                                        await battle_msg.delete(delay=2)
                                        await asyncio.sleep(2)
                                        battle_msg = await private_channel.send(content=f"{ouser.mention} has won the 1v1, earning :coin: 10,000!")

                                    else:
                                        query = {'OWNER': sowner['DISNAME'], "ACTIVE": True}
                                        update_query = {
                                            '$inc': {'GUILD1_MEMBERS.$[type].' + 'STRIKES': 1}
                                            }
                                        filter_query = [{'type.' + "NAME": str(sowner['DISNAME'])}]
                                        res = db.updateArena(query, update_query, filter_query)
                                        # print("This oneee")
                                        # await ctx.send(f"{tuser.mention} ❌")
                                        await battle_msg.delete(delay=2)
                                        await asyncio.sleep(2)
                                        battle_msg = await private_channel.send(content=f"{tuser.mention} ❌")
                                if mode == "RAID":
                                    embedVar = discord.Embed(title=f"🛡️ **{t_card}** defended the {oguild['GNAME']}\nMatch concluded in {turn_total} turns",
                                        description=textwrap.dedent(f"""
                                                                    {previous_moves_into_embed}
                                                                    """),
                                        colour=0x1abc9c)
                                    embedVar.set_author(name=f"{o_card} says:\n{o_lose_description}")
                                    if int(gameClock[0]) == 0 and int(gameClock[1]) == 0:
                                        embedVar.set_footer(text=f"Battle Time: {gameClock[2]} Seconds.")
                                    elif int(gameClock[0]) == 0:
                                        embedVar.set_footer(text=f"Battle Time: {gameClock[1]} Minutes and {gameClock[2]} Seconds.")
                                    else:
                                        embedVar.set_footer(
                                            text=f"Battle Time: {gameClock[0]} Hours {gameClock[1]} Minutes and {gameClock[2]} Seconds.")
                                    embedVar.add_field(name="🔢 Focus Count",
                                                    value=f"**{o_card}**: {o_focus_count}\n**{t_card}**: {t_focus_count}")
                                    if o_focus_count >= t_focus_count:
                                        embedVar.add_field(name="🌀 Most Focused", value=f"**{o_card}**")
                                    else:
                                        embedVar.add_field(name="🌀 Most Focused", value=f"**{t_card}**")
                                        await battle_msg.delete(delay=2)
                                    battle_msg = await private_channel.send(embed=embedVar)
                                    continued =False
                                    return
                                else:
                                    victory_message = f":zap: VICTORY"
                                    victory_description = f"Match concluded in {turn_total} turns."
                                    if botActive:
                                        victory_message = f":zap: TRY AGAIN"
                                        victory_description = f"Remember to equip **Titles** and **Arms** to apply **Enhancers** in battle!\nMatch concluded in {turn_total} turns."
                                    embedVar = discord.Embed(title=f"{victory_message}\n**{t_card} says**\n{t_win_description}",
                                                            description=f"{victory_description}\n{previous_moves_into_embed}",
                                                            colour=0x1abc9c)
                                    embedVar.set_author(name=f"{o_card} says:\n{o_lose_description}")
                                    if int(gameClock[0]) == 0 and int(gameClock[1]) == 0:
                                        embedVar.set_footer(text=f"Battle Time: {gameClock[2]} Seconds.")
                                    elif int(gameClock[0]) == 0:
                                        embedVar.set_footer(text=f"Battle Time: {gameClock[1]} Minutes and {gameClock[2]} Seconds.")
                                    else:
                                        embedVar.set_footer(
                                            text=f"Battle Time: {gameClock[0]} Hours {gameClock[1]} Minutes and {gameClock[2]} Seconds.")
                                    embedVar.add_field(name="🔢 Focus Count",
                                                    value=f"**{o_card}**: {o_focus_count}\n**{t_card}**: {t_focus_count}")
                                    if o_focus_count >= t_focus_count:
                                        embedVar.add_field(name="🌀 Most Focused", value=f"**{o_card}**")
                                    else:
                                        embedVar.add_field(name="🌀 Most Focused", value=f"**{t_card}**")
                                    # await ctx.send(embed=embedVar)
                                    await battle_msg.delete(delay=2)
                                    await asyncio.sleep(2)
                                    battle_msg = await private_channel.send(embed=embedVar)
                                    continued = False
                                    return
                            except Exception as ex:
                                trace = []
                                tb = ex.__traceback__
                                while tb is not None:
                                    trace.append({
                                        "filename": tb.tb_frame.f_code.co_filename,
                                        "name": tb.tb_frame.f_code.co_name,
                                        "lineno": tb.tb_lineno
                                    })
                                    tb = tb.tb_next
                                print(str({
                                    'type': type(ex).__name__,
                                    'message': str(ex),
                                    'trace': trace
                                }))
                                guild = self.bot.get_guild(main.guild_id)
                                channel = guild.get_channel(main.guild_channel)
                                await channel.send(f"'PLAYER': **{str(ctx.author)}**, 'GUILD': **{str(ctx.author.guild)}**, TYPE: {type(ex).__name__}, MESSAGE: {str(ex)}, TRACE: {trace}")
                            continued = False
                            return
                        else:
                            # await private_channel.send(f":zap: {user2.mention} you win the match!")
                            wintime = time.asctime()
                            h_playtime = int(wintime[11:13])
                            m_playtime = int(wintime[14:16])
                            s_playtime = int(wintime[17:19])
                            gameClock = getTime(int(h_gametime), int(m_gametime), int(s_gametime), h_playtime, m_playtime,
                                                s_playtime)
                            if o_user['RIFT'] == 1:
                                response = db.updateUserNoFilter({'DISNAME': str(o_user['DISNAME'])}, {'$set': {'RIFT': 0}})
                            
                            if randomized_battle:
                                embedVar = discord.Embed(title=f":zap: **{t_card}** wins the match!\nThe game lasted {turn_total} rounds.\n**{t_card} says**\n`{t_win_description}`", description=textwrap.dedent(f"""
                                {previous_moves_into_embed}
                                
                                """),colour=0x1abc9c)
                                embedVar.set_author(name=f"{o_card}")
                                if int(gameClock[0]) == 0 and int(gameClock[1]) == 0:
                                    embedVar.set_footer(text=f"Battle Time: {gameClock[2]} Seconds.")
                                elif int(gameClock[0]) == 0:
                                    embedVar.set_footer(text=f"Battle Time: {gameClock[1]} Minutes and {gameClock[2]} Seconds.")
                                else:
                                    embedVar.set_footer(
                                        text=f"Battle Time: {gameClock[0]} Hours {gameClock[1]} Minutes and {gameClock[2]} Seconds.")

                                await battle_msg.delete(delay=2)
                                await asyncio.sleep(2)
                                battle_msg = await private_channel.send(embed=embedVar)
                                # await discord.TextChannel.delete(private_channel, reason=None)
                                return
                            # BOSS LOSS
                            if mode in B_modes:
                                embedVar = discord.Embed(title=f":zap: **{t_card}** Wins...\nMatch concluded in {turn_total} turns!\n{t_wins}", description=textwrap.dedent(f"""
                                {previous_moves_into_embed}
                                
                                """),colour=0x1abc9c)
                                embedVar.set_author(name=f"{o_card} says:\n{o_lose_description}",
                                                    icon_url="https://res.cloudinary.com/dkcmq8o15/image/upload/v1620236432/PCG%20LOGOS%20AND%20RESOURCES/PCGBot_1.png")
                                if int(gameClock[0]) == 0 and int(gameClock[1]) == 0:
                                    embedVar.set_footer(text=f"Battle Time: {gameClock[2]} Seconds.")
                                elif int(gameClock[0]) == 0:
                                    embedVar.set_footer(text=f"Battle Time: {gameClock[1]} Minutes and {gameClock[2]} Seconds.")
                                else:
                                    embedVar.set_footer(
                                        text=f"Battle Time: {gameClock[0]} Hours {gameClock[1]} Minutes and {gameClock[2]} Seconds.")
                                await battle_msg.delete(delay=2)
                                await asyncio.sleep(2)
                                #battle_msg = await private_channel.send(embed=embedVar)
                                # await discord.TextChannel.delete(private_channel, reason=None)

                            # Play Again Buttons
                            play_again_buttons = [
                                manage_components.create_button(
                                    style=ButtonStyle.blue,
                                    label="Play Again",
                                    custom_id="Yes"
                                ),
                                manage_components.create_button(
                                    style=ButtonStyle.red,
                                    label="End",
                                    custom_id="No"
                                )
                            ]
                            play_again_buttons_action_row = manage_components.create_actionrow(*play_again_buttons)
                            if mode not in B_modes and mode not in co_op_modes:
                                embedVar = discord.Embed(title=f":zap: **{t_card}** wins the match!\nThe game lasted {turn_total} rounds.\n**{t_card} says**\n`{t_win_description}`", description=textwrap.dedent(f"""
                                {previous_moves_into_embed}
                                
                                """),colour=0x1abc9c)
                            if mode in co_op_modes and mode not in ai_co_op_modes:
                                teammates = False
                                fam_members =False
                                stat_bonus = 0
                                hlt_bonus = 0 
                                if o_user['TEAM'] == c_user['TEAM'] and o_user['TEAM'] != 'PCG':
                                    teammates=True
                                    stat_bonus=50
                                if o_user['FAMILY'] == c_user['FAMILY'] and o_user['FAMILY'] != 'PCG':
                                    fam_members=True
                                    hlt_bonus=100
                                
                                if teammates==True:
                                    bonus_message = f"Guild **{o_user['TEAM']}:** 🗡️**+{stat_bonus}** 🛡️**+{stat_bonus}**"
                                    if fam_members==True:
                                        bonus_message = f"Family **{o_user['FAMILY']}:** ❤️**+{hlt_bonus}**\nGuild **{o_user['TEAM']}:** 🗡️**+{stat_bonus}**\🛡️**+{stat_bonus}**"
                                elif fam_members==True:
                                        bonus_message = f"Family **{o_user['FAMILY']}:** ❤️**+{hlt_bonus}**"
                                else:
                                    bonus_message = f"Join a Guild or Create a Family for Coop Bonuses!"
                                    
                                embedVar = discord.Embed(title=f":zap: **{t_card}** wins the match!\n\n**{o_user['NAME']}** and **{c_user['NAME']}** will you play again?\nThe game lasted {turn_total} rounds.\n**{t_card} says**\n`{t_win_description}`", description=textwrap.dedent(f"""
                                {previous_moves_into_embed}
                                
                                """),colour=0x1abc9c)
                                embedVar.add_field(name="**Co-Op Bonus**",
                                                value=f"{bonus_message}")
                            elif mode in co_op_modes and mode in ai_co_op_modes:
                                embedVar = discord.Embed(title=f":zap: **{t_card}** wins the match!\n\n**{o_user['NAME']}** and **{c_card}** will you play again?\nThe game lasted {turn_total} rounds.\n**{t_card} says**\n`{t_win_description}`", description=textwrap.dedent(f"""
                                {previous_moves_into_embed}
                                
                                """),colour=0x1abc9c)
                                embedVar.add_field(name="**Duo Tips**",
                                                value=f"Create Duos that compliment each others Weaknesses")
                            # if int(gameClock[0]) == 0 and int(gameClock[1]) == 0:
                            #     embedVar.set_footer(text=f"Battle Time: {gameClock[2]} Seconds.")
                            # elif int(gameClock[0]) == 0:
                            #     embedVar.set_footer(text=f"Battle Time: {gameClock[1]} Minutes and {gameClock[2]} Seconds.")
                            # else:
                            #     embedVar.set_footer(
                            #         text=f"Battle Time: {gameClock[0]} Hours {gameClock[1]} Minutes and {gameClock[2]} Seconds.")
                            msg = await private_channel.send(embed=embedVar, components=[play_again_buttons_action_row])

                            if mode not in co_op_modes and mode != "Abyss":
                                play_again_selector = ctx.author
                            elif mode in co_op_modes and mode not in ai_co_op_modes:
                                play_again_selector = ctx.author
                            else:
                                play_again_selector = ctx.author

                            def check(button_ctx):
                                return button_ctx.author == play_again_selector

                            try:
                                button_ctx: ComponentContext = await manage_components.wait_for_component(self.bot, components=[
                                    play_again_buttons_action_row], timeout=120, check=check)

                                if button_ctx.custom_id == "No":
                                    await msg.edit(components=[])
                                    await button_ctx.defer(ignore=True)
                                    return

                                if button_ctx.custom_id == "Yes":
                                    currentopponent = 0
                                    continued = True
                            except asyncio.TimeoutError:
                                continued = False
                                # await discord.TextChannel.delete(private_channel, reason=None)

                    elif t_health <= 0 or t_max_health <= 0:
                        mode = original_mode
                        if previous_moves:
                            if previous_moves_len ==0:
                                previous_moves_into_embed = "\n\n".join(previous_moves)
                                #previous_moves_into_embed = f"**{t_card}** GOT DROPPED! **{o_card}** ONE SHOT THEM!"  
                            elif previous_moves_len >= 6:
                                previous_moves = previous_moves[-6:]
                                previous_moves_into_embed = "\n\n".join(previous_moves)
                            else:
                                previous_moves_into_embed = "\n\n".join(previous_moves)
                        # print(previous_moves_into_embed)
                        if mode in PVP_MODES or mode == "RAID":
                            try:
                                uid = o_DID
                                ouser = await self.bot.fetch_user(uid)
                                tuser = await self.bot.fetch_user(uid)
                                wintime = time.asctime()
                                h_playtime = int(wintime[11:13])
                                m_playtime = int(wintime[14:16])
                                s_playtime = int(wintime[17:19])
                                gameClock = getTime(int(h_gametime), int(m_gametime), int(s_gametime), h_playtime, m_playtime,
                                                    s_playtime)
                                ouid = sowner['DID']
                                sownerctx = await self.bot.fetch_user(ouid)
                                if mode == "RAID":
                                    guild_query = {'FDID': oguild['FDID']}
                                    bounty = oguild['BOUNTY']
                                    bonus = oguild['STREAK']
                                    total_bounty = (bounty + ((bonus / 100) * bounty))
                                    winbonus = int(((bonus / 100) * bounty))
                                    if winbonus == 0:
                                        winbonus = bounty
                                    wage = int(total_bounty)
                                    endmessage = ":yen: SHIELD BOUNTY CLAIMED"
                                    if title_match_active:
                                        if shield_test_active:
                                            endmessage = f":flags: {oguild['GNAME']} DEFENSE TEST OVER!"
                                        elif shield_training_active:
                                            endmessage = f":flags: {oguild['GNAME']} TRAINING COMPLETE!"
                                        else:
                                            newshield = db.updateGuild(guild_query, {'$set': {'SHIELD': str(ctx.author)}})
                                            guildwin = db.updateGuild(guild_query, {'$set': {'BOUNTY': winbonus, 'STREAK': 1}})
                                            endmessage = f":flags: {oguild['GNAME']} SHIELD CLAIMED!"
                                            prev_team_update = {'$set': {'SHIELDING': False}}
                                            remove_shield = db.updateTeam({'TEAM_NAME': str(tteam)}, prev_team_update)
                                            update_shielding = {'$set': {'SHIELDING': True}}
                                            add_shield = db.updateTeam({'TEAM_NAME': str(oteam)}, update_shielding)
                                    else:
                                        guildloss = db.updateGuild(guild_query, {'$set': {'BOUNTY': fee, 'STREAK': 0}})
                                
                                
                                # response = await score(sownerctx, ouser)
                                await crown_utilities.bless(8, str(ctx.author.id))
                                await crown_utilities.curse(3, str(tuser.id))
                                if oguild:
                                    await crown_utilities.bless(15, str(ctx.author.id))
                                    await crown_utilities.blessteam(25, oteam)
                                    await teamwin(oteam)
                                    await crown_utilities.blessguild(60, oguild)
                                    if tguild:
                                        await crown_utilities.curse(7, str(tuser.id))
                                        await crown_utilities.curseteam(15, tteam)
                                        await teamloss(tteam)
                                        await crown_utilities.curseguild(30, tguild)


                                if arena_flag and arena_type == "SINGLES":
                                    arena = db.queryArena({"OWNER": str(arena_owner), "ACTIVE": True})
                                    guild1_lost = False
                                    for member in arena['GUILD1_MEMBERS']:
                                        if member['NAME'] == sowner['DISNAME'] and member['STRIKES'] == 1:
                                            guild1_lost = True
                                    guild2_lost = False
                                    for member in arena['GUILD2_MEMBERS']:
                                        if member['NAME'] == opponent['DISNAME'] and member['STRIKES'] == 1:
                                            guild2_lost = True
                                    if guild2_lost:
                                        query = {'OWNER': sowner['DISNAME'], 'ACTIVE': True}
                                        update_query = {
                                            '$inc': {'GUILD2_MEMBERS.$[type].' + 'STRIKES': 1},
                                            '$set': {'ACTIVE': False, "WINNER": str(sowner['DISNAME']), "LOSER": str(opponent['DISNAME'])}
                                            }
                                        filter_query = [{'type.' + "NAME": str(opponent['DISNAME'])}]
                                        res = db.updateArena(query, update_query, filter_query)
                                        await crown_utilities.bless(10000, str(ouser.id))
                                        # await ctx.send(f"{tuser.mention} has won the 1v1, earning :coin: 10,000!")
                                        await battle_msg.delete(delay=2)
                                        await asyncio.sleep(2)
                                        battle_msg = await private_channel.send(f"{tuser.mention} has won the 1v1, earning :coin: 10,000!")

                                    else:
                                        query = {'OWNER': sowner['DISNAME'], 'ACTIVE': True}
                                        update_query = {
                                            '$inc': {'GUILD2_MEMBERS.$[type].' + 'STRIKES': 1}
                                            }
                                        filter_query = [{'type.' + "NAME": str(opponent['DISNAME'])}]
                                        res = db.updateArena(query, update_query, filter_query)
                                        
                                        # await ctx.send(f"{ouser.mention} ❌")
                                        await battle_msg.delete(delay=2)
                                        await asyncio.sleep(2)
                                        battle_msg = await private_channel.send(f"{ouser.mention} ❌")


                                match = await savematch(str(ouser), str(o_card), str(o_card_path), str(otitle['TITLE']),
                                                        str(oarm['ARM']), "N/A", "PVP", o['EXCLUSIVE'])
                                
                                if mode == "RAID":
                                    embedVar = discord.Embed(
                                        title=f"{endmessage}\n**{o_card} says**\n{o_win_description}\n\n You have defeated the {oguild['GNAME']} SHIELD!\nMatch concluded in {turn_total} turns",
                                        description=textwrap.dedent(f"""
                                                                    {previous_moves_into_embed}
                                                                    
                                                                    """), colour=0xe91e63)
                                    embedVar.set_author(name=f"{t_card} says\n{t_lose_description}")
                                    if int(gameClock[0]) == 0 and int(gameClock[1]) == 0:
                                        embedVar.set_footer(text=f"Battle Time: {gameClock[2]} Seconds.")
                                    elif int(gameClock[0]) == 0:
                                        embedVar.set_footer(text=f"Battle Time: {gameClock[1]} Minutes and {gameClock[2]} Seconds.")
                                    else:
                                        embedVar.set_footer(
                                            text=f"Battle Time: {gameClock[0]} Hours {gameClock[1]} Minutes and {gameClock[2]} Seconds.")
                                    embedVar.add_field(name="🔢 Focus Count",
                                                    value=f"**{o_card}**: {o_focus_count}\n**{t_card}**: {t_focus_count}")
                                    if o_focus_count >= t_focus_count:
                                        embedVar.add_field(name="🌀 Most Focused", value=f"**{o_card}**")
                                    else:
                                        embedVar.add_field(name="🌀 Most Focused", value=f"**{t_card}**")
                                    battle_msg = await private_channel.send(embed=embedVar)
                                    continued = False
                                    return
                                else:
                                    victory_message = f":zap: VICTORY"
                                    victory_description = f"Match concluded in {turn_total} turns."
                                    if botActive:
                                        victory_message = f":zap: TUTORIAL VICTORY"
                                        victory_description = f"Congratulations! remember to equip **Titles** and **Arms** to apply **Enhancers** in battle!\nMatch concluded in {turn_total} turns."
                                    
                                    embedVar = discord.Embed(title=f"{victory_message}\n**{o_card} says**\n{o_win_description}\n{victory_description}", description=textwrap.dedent(f"""
                                    {previous_moves_into_embed}
                                    
                                    """),colour=0xe91e63)
                                    embedVar.set_author(name=f"{t_card} says\n{t_lose_description}")
                                    if int(gameClock[0]) == 0 and int(gameClock[1]) == 0:
                                        embedVar.set_footer(text=f"Battle Time: {gameClock[2]} Seconds.")
                                    elif int(gameClock[0]) == 0:
                                        embedVar.set_footer(text=f"Battle Time: {gameClock[1]} Minutes and {gameClock[2]} Seconds.")
                                    else:
                                        embedVar.set_footer(
                                            text=f"Battle Time: {gameClock[0]} Hours {gameClock[1]} Minutes and {gameClock[2]} Seconds.")
                                    embedVar.add_field(name="🔢 Focus Count",
                                                    value=f"**{o_card}**: {o_focus_count}\n**{t_card}**: {t_focus_count}")
                                    if o_focus_count >= t_focus_count:
                                        embedVar.add_field(name="🌀 Most Focused", value=f"**{o_card}**")
                                    else:
                                        embedVar.add_field(name="🌀 Most Focused", value=f"**{t_card}**")
                                    # await ctx.send(embed=embedVar)
                                    await battle_msg.delete(delay=2)
                                    await asyncio.sleep(2)
                                    battle_msg = await private_channel.send(embed=embedVar)


                                    continued = False
                                    return
                            except Exception as ex:
                                trace = []
                                tb = ex.__traceback__
                                while tb is not None:
                                    trace.append({
                                        "filename": tb.tb_frame.f_code.co_filename,
                                        "name": tb.tb_frame.f_code.co_name,
                                        "lineno": tb.tb_lineno
                                    })
                                    tb = tb.tb_next
                                print(str({
                                    'type': type(ex).__name__,
                                    'message': str(ex),
                                    'trace': trace
                                }))
                                guild = self.bot.get_guild(main.guild_id)
                                channel = guild.get_channel(main.guild_channel)
                                await channel.send(f"'PLAYER': **{str(ctx.author)}**, 'GUILD': **{str(ctx.author.guild)}**, TYPE: {type(ex).__name__}, MESSAGE: {str(ex)}, TRACE: {trace}")

                        else:
                            corrupted_message = ""
                            if mode != "ABYSS" and mode != "SCENARIO" and mode not in RAID_MODES and mode not in PVP_MODES and difficulty != "EASY":
                                if universe['CORRUPTED']:
                                    corrupted_message = await crown_utilities.corrupted_universe_handler(ctx, selected_universe, difficulty)
                                    if not corrupted_message:
                                        corrupted_message = "You must dismantle a card from this universe to enable crafting."

                            tale_or_dungeon_only = ""
                            if mode in U_modes:
                                tale_or_dungeon_only = "Tales"
                            if mode in D_modes:
                                tale_or_dungeon_only = "Dungeon"

                            if randomized_battle:
                                bounty = abyss_scaling
                                drop_response = await specific_drops(self,str(o_user['DID']), t_card, t_universe)
                                await crown_utilities.bless(bounty, str(o_user['DID']))
                                embedVar = discord.Embed(title=f"VICTORY\n:coin: {bounty} Bounty Received!\n**{o_card} says**\n{o_win_description}\nThe game lasted {turn_total} rounds.\n\n{drop_response}",description=textwrap.dedent(f"""
                                {previous_moves_into_embed}
                                
                                """),colour=0x1abc9c)
                                embedVar.set_author(name=f"{t_card} lost!")
                                # await ctx.send(embed=embedVar)
                                await battle_msg.delete(delay=2)
                                await asyncio.sleep(2)
                                battle_msg = await private_channel.send(embed=embedVar)

                                # await discord.TextChannel.delete(private_channel, reason=None)
                                return

                            if mode in B_modes:
                                uid = o_DID
                                ouser = await self.bot.fetch_user(uid)
                                wintime = time.asctime()
                                h_playtime = int(wintime[11:13])
                                m_playtime = int(wintime[14:16])
                                s_playtime = int(wintime[17:19])
                                gameClock = getTime(int(h_gametime), int(m_gametime), int(s_gametime), h_playtime, m_playtime,
                                                    s_playtime)
                                drop_response = await bossdrops(self,ctx.author, t_universe)
                                db.updateUserNoFilter({'DID': str(ctx.author.id)}, {'$set': {'BOSS_FOUGHT': True}})
                                match = await savematch(str(ouser), str(o_card), str(o_card_path), str(otitle['TITLE']),
                                                        str(oarm['ARM']), "N/A", "Boss", o['EXCLUSIVE'])
                                bank_amount = 100000
                                fam_amount = 50000
                                if difficulty == "HARD":
                                    bank_amount = 500000
                                    fam_amount = 250000


                                if mode == "CBoss":
                                    # cmatch = await savematch(str(user2), str(c_card), str(c_card_path), str(ctitle['TITLE']),
                                    #                         str(carm['ARM']), "N/A", "Boss", c['EXCLUSIVE'])
                                    cfambank = await crown_utilities.blessfamily(bank_amount, cfam)
                                    cteambank = await crown_utilities.blessteam(bank_amount, cteam)
                                    cpetlogger = await summonlevel(cpet_name, user2)
                                    ccardlogger = await crown_utilities.cardlevel(c_card, user2.id, "Dungeon", selected_universe)
                                    await crown_utilities.bless(50000, str(user2.id))
                                    teammates = False
                                    fam_members =False
                                    stat_bonus = 0
                                    hlt_bonus = 0 
                                    if o_user['TEAM'] == c_user['TEAM'] and o_user['TEAM'] != 'PCG':
                                        teammates=True
                                        stat_bonus=50
                                    if o_user['FAMILY'] == c_user['FAMILY'] and o_user['FAMILY'] != 'PCG':
                                        fam_members=True
                                        hlt_bonus=100
                                    
                                    if teammates==True:
                                        bonus_message = f":checkered_flag:**{o_user['TEAM']}:** 🗡️**+{stat_bonus}** 🛡️**+{stat_bonus}**"
                                        if fam_members==True:
                                            bonus_message = f":family_mwgb:**{o_user['FAMILY']}:** ❤️**+{hlt_bonus}**\n:checkered_flag:**{o_user['TEAM']}:**🗡️**+{stat_bonus}** 🛡️**+{stat_bonus}**"
                                    elif fam_members==True:
                                            bonus_message = f":family_mwgb:**{o_user['FAMILY']}:** ❤️**+{hlt_bonus}**"
                                    else:
                                        bonus_message = f"Join a Guild or Create a Family for Coop Bonuses!"
                                    embedVar = discord.Embed(title=f":zap: **{o_card}** and **{c_card}** defeated the {t_universe} Boss {t_card}!\nMatch concluded in {turn_total} turns!\n\n{drop_response} + :coin: 15,000!\n\n{c_user['NAME']} got :coin: 10,000!", description=textwrap.dedent(f"""
                                    {previous_moves_into_embed}
                                    
                                    """),colour=0x1abc9c)
                                    embedVar.set_author(name=f"**{t_card}** Says: {t_concede}")
                                    embedVar.add_field(name="**Co-Op Bonus**",
                                                value=f"{bonus_message}")
                                else:
                                    embedVar = discord.Embed(title=f":zap: **{o_card}** defeated the {t_universe} Boss {t_card}!\nMatch concluded in {turn_total} turns!\n\n{drop_response} + :coin: 25,000!\n{corrupted_message}",description=textwrap.dedent(f"""
                                    {previous_moves_into_embed}
                                    
                                    """),colour=0x1abc9c)
                                await crown_utilities.bless(25000, str(ctx.author.id))
                                ofambank = await crown_utilities.blessfamily(fam_amount, ofam)
                                oteambank = await crown_utilities.blessteam(bank_amount, oteam)
                                petlogger = await summonlevel(opet_name, ouser)
                                cardlogger = await crown_utilities.cardlevel(o_card, ouser.id, "Dungeon", selected_universe)

                                if crestsearch:
                                    await crown_utilities.blessguild(25000, oguild['GNAME'])
                                    teambank = await crown_utilities.blessteam(5000, oteam)
                                    await movecrest(selected_universe, oguild['GNAME'])
                                    embedVar.add_field(name=f"**{selected_universe} Crest Claimed**!",
                                                    value=f":flags:**{oguild['GNAME']}** earned the {selected_universe} **Crest**")
                                embedVar.set_author(name=f"{t_card} lost",
                                                    icon_url="https://res.cloudinary.com/dkcmq8o15/image/upload/v1620236432/PCG%20LOGOS%20AND%20RESOURCES/PCGBot_1.png")
                                if int(gameClock[0]) == 0 and int(gameClock[1]) == 0:
                                    embedVar.set_footer(text=f"Battle Time: {gameClock[2]} Seconds.")
                                elif int(gameClock[0]) == 0:
                                    embedVar.set_footer(text=f"Battle Time: {gameClock[1]} Minutes and {gameClock[2]} Seconds.")
                                else:
                                    embedVar.set_footer(
                                        text=f"Battle Time: {gameClock[0]} Hours {gameClock[1]} Minutes and {gameClock[2]} Seconds.")
                                # await ctx.send(embed=embedVar)
                                await battle_msg.delete(delay=2)
                                await asyncio.sleep(2)
                                battle_msg = await private_channel.send(embed=embedVar)

                                if t_card not in sowner['BOSS_WINS']:
                                    if difficulty == "HARD":
                                        await crown_utilities.bless(5000000, str(ctx.author.id))
                                    else:
                                        await crown_utilities.bless(15000000, str(ctx.author.id))
                                    if mode == "CBoss":
                                        if difficulty == "HARD":
                                            await crown_utilities.bless(5000000, str(user2.id))
                                        else:
                                            await crown_utilities.bless(15000000, str(user2.id))

                                    query = {'DISNAME': sowner['DISNAME']}
                                    new_query = {'$addToSet': {'BOSS_WINS': t_card}}
                                    resp = db.updateUserNoFilter(query, new_query)

                                # await discord.TextChannel.delete(private_channel, reason=None)
                                continued = False
                            
                            if mode == "ABYSS":
                                if currentopponent != (total_legends):
                                    embedVar = discord.Embed(title=f"VICTORY\n**{o_card} says**\n{o_win_description}\nThe game lasted {turn_total} rounds.",description=textwrap.dedent(f"""
                                    {previous_moves_into_embed}
                                    
                                    """),colour=0x1abc9c)

                                    embedVar.set_author(name=f"{t_card} lost!")
                                    

                                    await battle_msg.delete(delay=2)
                                    await asyncio.sleep(2)
                                    battle_msg = await private_channel.send(embed=embedVar)
                                    currentopponent = currentopponent + 1
                                    continued = True
                                if currentopponent == (total_legends):
                                    uid = o_DID
                                    ouser = await self.bot.fetch_user(uid)
                                    floor = universe['FLOOR']
                                    new_level = floor + 1
                                    response = db.updateUserNoFilter({'DID': str(ctx.author.id)}, {'$set': {'LEVEL': new_level}})
                                    abyss_message = abyss_level_up_message(str(ctx.author.id), floor, t_card, t_title, tarm_name)
                                    cardlogger = await crown_utilities.cardlevel(o_card, ctx.author.id, "Purchase", "n/a")
                                    abyss_drop_message = "\n".join(abyss_message['DROP_MESSAGE'])
                                    bless_amount = 100000 + (10000 * floor)
                                    await crown_utilities.bless(bless_amount, ctx.author.id)
                                    embedVar = discord.Embed(title=f"🌑 Floor **{floor}** Cleared\n**{o_card} says**\n{o_win_description}\nThe game lasted {turn_total} rounds.",description=textwrap.dedent(f"""
                                    Counquer the **Abyss** to unlock **Abyssal Rewards** and **New Game Modes.**
                                    
                                    🎊**Abyss Floor Unlocks**
                                    **0** - *Shop*
                                    **2** - *Tales*
                                    **3** - *Coop*
                                    **6** - *PVP*
                                    **7** - *Duo*
                                    **8** - *Crafting*
                                    **9** - *Guilds, Families, Associations*
                                    **10**- *Trading and Blacksmith*
                                    **20** - *Gifting*
                                    **25** - *Explore Mode*
                                    **40** - *Dungeons*
                                    **60** - *Bosses*
                                    **100** - *Boss Soul Exchange*
                                    """),colour=0xe91e63)

                                    embedVar.set_author(name=f"{t_card} lost!")
                                    embedVar.set_footer(text=f"Traverse the **Abyss** in /solo to unlock new game modes and features!")
                                    embedVar.add_field(
                                    name=f"Abyssal Rewards",
                                    value=f"{abyss_drop_message}")

                                    if abyss_message['NEW_UNLOCK']:
                                        await ctx.author.send(abyss_message['MESSAGE'])
                                        await ctx.send(f"{ctx.author.mention} {abyss_message['MESSAGE']}")
 
                                    battle_msg = await private_channel.send(embed=embedVar)

                                    continued = False

                            if mode == "SCENARIO":
                                if currentopponent != (total_legends):
                                    uid = o_DID
                                    ouser = await self.bot.fetch_user(uid)
                                    cardlogger = await crown_utilities.cardlevel(o_card, ouser.id, "Tales", universe['UNIVERSE'])

                                    embedVar = discord.Embed(title=f"VICTORY\n**{o_card} says**\n{o_win_description}\nThe game lasted {turn_total} rounds.",description=textwrap.dedent(f"""
                                    {previous_moves_into_embed}
                                    
                                    """),colour=0x1abc9c)

                                    embedVar.set_author(name=f"{t_card} lost!")
                                    

                                    await battle_msg.delete(delay=2)
                                    await asyncio.sleep(2)
                                    battle_msg = await private_channel.send(embed=embedVar)
                                    currentopponent = currentopponent + 1
                                    continued = True
                                if currentopponent == (total_legends):
                                    uid = o_DID
                                    ouser = await self.bot.fetch_user(uid)
                                    response = await scenario_drop(self, ctx, universe, difficulty)
                                    bless_amount = 50000
                                    await crown_utilities.bless(bless_amount, ctx.author.id)
                                    embedVar = discord.Embed(title=f"Scenario Battle Cleared!\n**{o_card} says**\n{o_win_description}\nThe game lasted {turn_total} rounds.",description=textwrap.dedent(f"""
                                    Good luck on your next adventure!
                                    """),colour=0xe91e63)

                                    embedVar.set_author(name=f"{t_card} lost!")
                                    embedVar.add_field(
                                    name=f"Scenario Reward",
                                    value=f"{response}")
 
                                    battle_msg = await private_channel.send(embed=embedVar)

                                    continued = False

                            elif mode not in B_modes and mode != "ABYSS":
                                uid = o_DID
                                ouser = await self.bot.fetch_user(uid)
                                wintime = time.asctime()
                                h_playtime = int(wintime[11:13])
                                m_playtime = int(wintime[14:16])
                                s_playtime = int(wintime[17:19])
                                gameClock = getTime(int(h_gametime), int(m_gametime), int(s_gametime), h_playtime, m_playtime,
                                                    s_playtime)

                                bank_amount = 2000
                                fam_amount = 1000
                                if mode in D_modes:
                                    bank_amount = 8000
                                    fam_amount = 3000

                                if difficulty == "HARD":
                                    bank_amount = 20000
                                    fam_amount = 10000

                                if difficulty == "EASY":
                                    bank_amount = 500
                                    fam_amount = 100


                                if mode in D_modes:
                                    teambank = await crown_utilities.blessteam(bank_amount, oteam)
                                else:
                                    teambank = await crown_utilities.blessteam(bank_amount, oteam)
                                if o_user['RIFT'] == 1:
                                    response = db.updateUserNoFilter({'DISNAME': str(o_user['DISNAME'])}, {'$set': {'RIFT': 0}})

                                if mode in D_modes:
                                    drop_response = await dungeondrops(self, ouser, selected_universe, currentopponent)
                                elif mode in U_modes:
                                    drop_response = await drops(self, ouser, selected_universe, currentopponent)
                                if mode in D_modes:
                                    ofambank = await crown_utilities.blessfamily(fam_amount, ofam)
                                else:
                                    ofambank = await crown_utilities.blessfamily(fam_amount, ofam)
                                match = await savematch(str(ouser), str(o_card), str(o_card_path), str(otitle['TITLE']),
                                                        str(oarm['ARM']), str(selected_universe), tale_or_dungeon_only,
                                                        o['EXCLUSIVE'])
                                if difficulty != "EASY":
                                    questlogger = await quest(ouser, t_card, tale_or_dungeon_only)
                                    destinylogger = await destiny(ouser, t_card, tale_or_dungeon_only)
                                    petlogger = await summonlevel(opet_name, ouser)
                                    cardlogger = await crown_utilities.cardlevel(o_card, ouser.id, tale_or_dungeon_only, selected_universe)
                                    # if questlogger:
                                    #     await private_channel.send(questlogger)
                                    # if destinylogger:
                                    #     await private_channel.send(destinylogger)
                                
                                if mode in co_op_modes and mode not in ai_co_op_modes:
                                    teammates = False
                                    fam_members =False
                                    stat_bonus = 0
                                    hlt_bonus = 0 
                                    if o_user['TEAM'] == c_user['TEAM'] and o_user['TEAM'] != 'PCG':
                                        teammates=True
                                        stat_bonus=50
                                    if o_user['FAMILY'] == c_user['FAMILY'] and o_user['FAMILY'] != 'PCG':
                                        fam_members=True
                                        hlt_bonus=100
                                    
                                    if teammates==True:
                                        bonus_message = f":checkered_flag:**{o_user['TEAM']}:** 🗡️**+{stat_bonus}** 🛡️**+{stat_bonus}**"
                                        if fam_members==True:
                                            bonus_message = f":family_mwgb:**{o_user['FAMILY']}:** ❤️**+{hlt_bonus}**\n:checkered_flag:**{o_user['TEAM']}:**🗡️**+{stat_bonus}** 🛡️**+{stat_bonus}**"
                                    elif fam_members==True:
                                            bonus_message = f":family_mwgb:**{o_user['FAMILY']}:** ❤️**+{hlt_bonus}**"
                                    else:
                                        bonus_message = f"Join a Guild or Create a Family for Coop Bonuses!"
                                    cuid = c_DID
                                    cuser = await self.bot.fetch_user(cuid)
                                    if mode in D_modes:
                                        teambank = await crown_utilities.blessteam(bank_amount, oteam)
                                        cteambank = await crown_utilities.blessteam(bank_amount, oteam)
                                    else:
                                        teambank = await crown_utilities.blessteam(bank_amount, oteam)
                                        cteambank = await crown_utilities.blessteam(bank_amount, oteam)
                                    if mode in D_modes:
                                        cdrop_response = await dungeondrops(self,user2, selected_universe, currentopponent)
                                    elif mode in U_modes:
                                        cdrop_response = await drops(self,user2, selected_universe, currentopponent)
                                    if mode in D_modes:
                                        cfambank = await crown_utilities.blessfamily(fam_amount, cfam)
                                        ofambank = await crown_utilities.blessfamily(fam_amount, ofam)
                                    else:
                                        cfambank = await crown_utilities.blessfamily(fam_amount, cfam)
                                        ofambank = await crown_utilities.blessfamily(fam_amount, ofam)
                                    # cmatch = await savematch(str(user2), str(c_card), str(c_card_path), str(ctitle['TITLE']),
                                    #                         str(carm['ARM']), str(selected_universe), tale_or_dungeon_only, c['EXCLUSIVE'])
                                    cfambank = await crown_utilities.blessfamily(fam_amount, cfam)
                                    cteambank = await crown_utilities.blessteam(bank_amount, cteam)
                                    cpetlogger = await summonlevel(cpet_name, user2)
                                    ccardlogger = await crown_utilities.cardlevel(c_card, user2.id, tale_or_dungeon_only, selected_universe)
                                    await crown_utilities.bless(5000, str(user2.id))

                                if currentopponent != (total_legends):
                                    if mode not in co_op_modes:
                                        embedVar = discord.Embed(title=f"🎊 VICTORY\nThe game lasted {turn_total} rounds.\n\n{drop_response}\n{corrupted_message}",description=textwrap.dedent(f"""
                                        {previous_moves_into_embed}
                                        
                                        """),colour=0x1abc9c)
                                        if difficulty != "EASY":
                                            if questlogger:
                                                embedVar.add_field(name="**Quest Progress**",
                                                    value=f"{questlogger}")
                                            if destinylogger:
                                                embedVar.add_field(name="**Destiny Progress**",
                                                    value=f"{destinylogger}")
                                    elif mode in co_op_modes and mode not in ai_co_op_modes:
                                        embedVar = discord.Embed(title=f"👥 CO-OP VICTORY\nThe game lasted {turn_total} rounds.\n\n👤**{o_user['NAME']}:** {drop_response}\n👥**{c_user['NAME']}:** {cdrop_response} ",description=textwrap.dedent(f"""
                                        {previous_moves_into_embed}
                                        
                                        """),colour=0x1abc9c)
                                        embedVar.add_field(name="**Co-Op Bonus**",
                                                value=f"{bonus_message}")
                                        if questlogger:
                                            embedVar.add_field(name="**Quest Progress**",
                                                value=f"{questlogger}")
                                        if destinylogger:
                                            embedVar.add_field(name="**Destiny Progress**",
                                                value=f"{destinylogger}")
                                    elif mode in ai_co_op_modes:
                                        embedVar = discord.Embed(title=f"🎊 DUO VICTORY\nThe game lasted {turn_total} rounds.\n\n{drop_response}\n{corrupted_message}",description=textwrap.dedent(f"""
                                        {previous_moves_into_embed}
                                        
                                        """),colour=0x1abc9c)
                                    if mode in D_modes:
                                        if crestsearch:
                                            await crown_utilities.blessguild(10000, oguild['GNAME'])
                                            embedVar.add_field(name=f"**{selected_universe} Crest Search!**",
                                                            value=f":flags:**{oguild['GNAME']}** earned **10,000** :coin:")
                                    embedVar.set_author(name=f"{t_card} lost!")
                                    
                                    await battle_msg.delete(delay=2)
                                    await asyncio.sleep(2)
                                    battle_msg = await private_channel.send(embed=embedVar)

                                    currentopponent = currentopponent + 1
                                    continued = True

                                if currentopponent == (total_legends):
                                    if mode in D_modes:
                                        embedVar = discord.Embed(title=f":fire: DUNGEON CONQUERED",
                                                                description=f"**{selected_universe} Dungeon** has been conquered\n\n{drop_response}\n{corrupted_message}",
                                                                colour=0xe91e63)
                                        embedVar.set_author(name=f"{selected_universe} Boss has been unlocked!")
                                        if crestsearch:
                                            await crown_utilities.blessguild(100000, oguild['GNAME'])
                                            teambank = await crown_utilities.blessteam(10000, oteam)
                                            await movecrest(selected_universe, oguild['GNAME'])
                                            embedVar.add_field(name=f"**{selected_universe}** CREST CLAIMED!",
                                                            value=f"**{oguild['GNAME']}** earned the {selected_universe} **Crest**")
                                        if questlogger:
                                            embedVar.add_field(name="**Quest Progress**",
                                                value=f"{questlogger}")
                                        if destinylogger:
                                            embedVar.add_field(name="**Destiny Progress**",
                                                value=f"{destinylogger}")
                                        embedVar.set_footer(text="The /shop has been updated with new CARDS, TITLES and ARMS!")
                                        if difficulty != "EASY":
                                            upload_query = {'DID': str(ctx.author.id)}
                                            new_upload_query = {'$addToSet': {'DUNGEONS': selected_universe}}
                                            r = db.updateUserNoFilter(upload_query, new_upload_query)
                                        if selected_universe in completed_universes:
                                            await crown_utilities.bless(300000, ctx.author.id)
                                            teambank = await crown_utilities.blessteam(bank_amount, oteam)
                                            # await crown_utilities.bless(125, user2)
                                            # await ctx.send(embed=embedVar)
                                            await battle_msg.delete(delay=2)
                                            await asyncio.sleep(2)
                                            embedVar.add_field(name="Miner Reward",
                                                        value=f"You were awarded :coin: 300,000 for completing the {selected_universe} Dungeon again!")
                                            battle_msg = await private_channel.send(embed=embedVar)
                                        else:
                                            await crown_utilities.bless(6000000, ctx.author.id)
                                            teambank = await crown_utilities.blessteam(1500000, oteam)
                                            # await ctx.send(embed=embedVar)
                                            await battle_msg.delete(delay=2)
                                            await asyncio.sleep(2)
                                            embedVar.add_field(name="Dungeon Reward",
                                                        value=f"You were awarded :coin: 6,000,000 for completing the {selected_universe} Dungeon!")
                                            battle_msg = await private_channel.send(embed=embedVar)
                                        if mode in co_op_modes and mode not in ai_co_op_modes:
                                            cuid = c_DID
                                            cuser = await self.bot.fetch_user(cuid)
                                            await crown_utilities.bless(300000, user2.id)
                                            teambank = await crown_utilities.blessteam(80000, cteam)
                                            # await crown_utilities.bless(125, user2)
                                            # await ctx.send(embed=embedVar)
                                            await asyncio.sleep(2)
                                            
                                            await ctx.send(
                                                f"{user2.mention} You were awarded :coin: 250,000 for  assisting in the {selected_universe} Dungeon!")
                                        continued = False
                                        # await discord.TextChannel.delete(private_channel, reason=None)
                                    elif mode in U_modes:
                                        embedVar = discord.Embed(title=f"🎊 UNIVERSE CONQUERED",
                                                                description=f"**{selected_universe}** has been conquered\n\n{drop_response}\n{corrupted_message}",
                                                                colour=0xe91e63)
                                        if questlogger:
                                            embedVar.add_field(name="**Quest Progress**",
                                                value=f"{questlogger}")
                                        if destinylogger:
                                            embedVar.add_field(name="**Destiny Progress**",
                                                value=f"{destinylogger}")
                                        embedVar.set_footer(text="The /shop has been updated with new CARDS, TITLES and ARMS!")
                                        if difficulty != "EASY":
                                            embedVar.set_author(name=f"{selected_universe} Dungeon has been unlocked!")
                                            upload_query = {'DID': str(ctx.author.id)}
                                            new_upload_query = {'$addToSet': {'CROWN_TALES': selected_universe}}
                                            r = db.updateUserNoFilter(upload_query, new_upload_query)
                                        if selected_universe in completed_universes:
                                            await crown_utilities.bless(100000, ctx.author.id)
                                            teambank = await crown_utilities.blessteam(25000, oteam)
                                            # await ctx.send(embed=embedVar)
                                            await battle_msg.delete(delay=2)
                                            await asyncio.sleep(2)
                                            embedVar.add_field(name="Minor Reward",
                                                        value=f"You were awarded :coin: 100,000 for completing the {selected_universe} Tale again!")
                                            battle_msg = await private_channel.send(embed=embedVar)
                                        else:
                                            await crown_utilities.bless(2000000, ctx.author.id)
                                            teambank = await crown_utilities.blessteam(500000, oteam)
                                            # await ctx.send(embed=embedVar)
                                            await battle_msg.delete(delay=2)
                                            await asyncio.sleep(2)
                                            
                                            embedVar.add_field(name="Conquerors Reward",
                                                        value=f"You were awarded :coin: 2,000,000 for completing the {selected_universe} Tale!")
                                            battle_msg = await private_channel.send(embed=embedVar)
                                        if mode in co_op_modes and mode not in ai_co_op_modes:
                                            cuid = c_DID
                                            cuser = await self.bot.fetch_user(cuid)
                                            await crown_utilities.bless(300000, user2.id)
                                            teambank = await crown_utilities.blessteam(80000, cteam)
                                            # await crown_utilities.bless(125, user2)
                                            # await ctx.send(embed=embedVar)
                                            await asyncio.sleep(2)
                                            embedVar.add_field(name="Companion Reward",
                                                        value=f"{user2.mention} You were awarded :coin: 75,000 for assisting in the {selected_universe} Tale!")
                                        continued = False


            except Exception as ex:
                trace = []
                tb = ex.__traceback__
                while tb is not None:
                    trace.append({
                        "filename": tb.tb_frame.f_code.co_filename,
                        "name": tb.tb_frame.f_code.co_name,
                        "lineno": tb.tb_lineno
                    })
                    tb = tb.tb_next
                print(str({
                    'PLAYER': str(ctx.author),
                    'type': type(ex).__name__,
                    'message': str(ex),
                    'trace': trace
                }))
                if mode not in ai_co_op_modes:
                    await battle_ping_message.delete()
                await battle_msg.delete()
                guild = self.bot.get_guild(main.guild_id)
                channel = guild.get_channel(main.guild_channel)
                await channel.send(f"'PLAYER': **{str(ctx.author)}**, 'GUILD': **{str(ctx.author.guild)}**, TYPE: {type(ex).__name__}, MESSAGE: {str(ex)}, TRACE: {trace}")
                return


    except Exception as ex:
        trace = []
        tb = ex.__traceback__
        while tb is not None:
            trace.append({
                "filename": tb.tb_frame.f_code.co_filename,
                "name": tb.tb_frame.f_code.co_name,
                "lineno": tb.tb_lineno
            })
            tb = tb.tb_next
        print(str({
            'PLAYER': str(ctx.author),
            'type': type(ex).__name__,
            'message': str(ex),
            'trace': trace
        }))
        guild = self.bot.get_guild(main.guild_id)
        channel = guild.get_channel(main.guild_channel)
        await channel.send(f"'PLAYER': **{str(ctx.author)}**, TYPE: {type(ex).__name__}, MESSAGE: {str(ex)}, TRACE: {trace}")
        return


async def save_spot(self, ctx, universe, mode, currentopponent):
    try:
        user = {"DID": str(ctx.author.id)}
        query = {"$addToSet": {"SAVE_SPOT": {"UNIVERSE": str(universe['TITLE']), "MODE": str(mode), "CURRENTOPPONENT": currentopponent}}}
        response = db.updateUserNoFilter(user, query)
        return
    except Exception as ex:
        trace = []
        tb = ex.__traceback__
        while tb is not None:
            trace.append({
                "filename": tb.tb_frame.f_code.co_filename,
                "name": tb.tb_frame.f_code.co_name,
                "lineno": tb.tb_lineno
            })
            tb = tb.tb_next
        print(str({
            'PLAYER': str(ctx.author),
            'type': type(ex).__name__,
            'message': str(ex),
            'trace': trace
        }))
        guild = self.bot.get_guild(main.guild_id)
        channel = guild.get_channel(main.guild_channel)
        await channel.send(f"'PLAYER': **{str(ctx.author)}**, 'GUILD': **{str(ctx.author.guild)}**, TYPE: {type(ex).__name__}, MESSAGE: {str(ex)}, TRACE: {trace}")
        return

        

def update_arm_durability(self, vault, arm, arm_universe, arm_price, card):
    try:
        player_info = db.queryUser({'DID': str(vault['DID'])})
        if player_info['DIFFICULTY'] == "EASY":
            return

        decrease_value = -1
        break_value = 1
        if arm_universe != card['UNIVERSE'] and arm_universe != "Unbound":
            decrease_value = -10
            break_value = 10

        for a in vault['ARMS']:
            if a['ARM'] == str(arm['ARM']):
                current_durability = a['DUR']
                if current_durability <= 0:
                    selected_arm = arm['ARM']
                    arm_name = arm['ARM']
                    selected_universe = arm_universe
                    dismantle_amount = 5000
                    current_gems = []
                    for gems in vault['GEMS']:
                        current_gems.append(gems['UNIVERSE'])

                    if selected_universe in current_gems:
                        query = {'DID': str(vault['DID'])}
                        update_query = {'$inc': {'GEMS.$[type].' + "GEMS": dismantle_amount}}
                        filter_query = [{'type.' + "UNIVERSE": selected_universe}]
                        response = db.updateVault(query, update_query, filter_query)
                    else:
                        response = db.updateVaultNoFilter({'DID': str(vault['DID'])},{'$addToSet':{'GEMS': {'UNIVERSE': selected_universe, 'GEMS': dismantle_amount, 'UNIVERSE_HEART': False, 'UNIVERSE_SOUL': False}}})


                    query = {'DID': str(vault['DID'])}
                    update_query = {'$pull': {'ARMS': {'ARM': str(arm['ARM'])}}}
                    resp = db.updateVaultNoFilter(query, update_query)

                    user_query = {'DID': str(vault['DID'])}
                    user_update_query = {'$set': {'ARM': 'Stock'}}
                    user_resp = db.updateUserNoFilter(user_query, user_update_query)
                    return {"MESSAGE": f"**{arm['ARM']}** has been dismantled after losing all ⚒️ durability, you earn 💎 {str(dismantle_amount)}. Your arm will be **Stock** after your next match."}
                else:                   
                    query = {'DID': str(vault['DID'])}
                    update_query = {'$inc': {'ARMS.$[type].' + 'DUR': decrease_value}}
                    filter_query = [{'type.' + "ARM": str(arm['ARM'])}]
                    resp = db.updateVault(query, update_query, filter_query)
                    if current_durability >= 15:
                        return {"MESSAGE": False}
                    else:
                        return {"MESSAGE": f"**{arm['ARM']}** will lose all ⚒️ durability soon! Use **/blacksmith** to repair!"}
        return {"MESSAGE": False}
    except Exception as ex:
        trace = []
        tb = ex.__traceback__
        while tb is not None:
            trace.append({
                "filename": tb.tb_frame.f_code.co_filename,
                "name": tb.tb_frame.f_code.co_name,
                "lineno": tb.tb_lineno
            })
            tb = tb.tb_next
        print(str({
            'type': type(ex).__name__,
            'message': str(ex),
            'trace': trace
        }))
        return
        


def update_save_spot(self, ctx, saved_spots, selected_universe, modes):
    try:
        currentopponent = 0
        if saved_spots:
            for save in saved_spots:
                if save['UNIVERSE'] == selected_universe and save['MODE'] in modes:
                    currentopponent = save['CURRENTOPPONENT']
                    query = {'DID': str(ctx.author.id)}
                    update_query = {'$pull': {'SAVE_SPOT': {"UNIVERSE": selected_universe}}}
                    resp = db.updateUserNoFilter(query, update_query)
        return currentopponent
    except Exception as ex:
        trace = []
        tb = ex.__traceback__
        while tb is not None:
            trace.append({
                "filename": tb.tb_frame.f_code.co_filename,
                "name": tb.tb_frame.f_code.co_name,
                "lineno": tb.tb_lineno
            })
            tb = tb.tb_next
        print(str({
            'PLAYER': str(ctx.author),
            'type': type(ex).__name__,
            'message': str(ex),
            'trace': trace
        }))
        return



def health_and_stamina_bars(health, stamina, max_health, max_stamina, resolved):
    health_response = ""
    stamina_response = ""

    if health >= max_health:
        health_response = f"❤️❤️❤️❤️❤️"
    if health >= (max_health * .80) and health < max_health:
        health_response = f"❤️❤️❤️❤️💔"
    if health >= (max_health * .60) and health < (max_health * .80):
        health_response = f"❤️❤️❤️💔💔"
    if health >= (max_health * .40) and health < (max_health * .60):
        health_response = f"❤️❤️💔💔💔"
    if health >= (max_health * .20) and health < (max_health * .40):
        health_response = f"❤️💔💔💔💔"
    if health >= 0 and health <= (max_health * .20):
        health_response = f"💔💔💔💔💔"
    if resolved:
        if stamina >= max_stamina:
            stamina_response = f"⚡⚡⚡⚡⚡"
        if stamina >= (max_stamina * .80) and stamina < max_stamina:
            stamina_response = f"⚡⚡⚡⚡💫"
        if stamina >= (max_stamina * .60) and stamina < (max_stamina * .80):
            stamina_response = f"⚡⚡⚡💫💫"
        if stamina >= (max_stamina * .40) and stamina < (max_stamina * .60):
            stamina_response = f"⚡⚡💫💫💫"
        if stamina >= (max_stamina * .10) and stamina < (max_stamina * .40):
            stamina_response = f"⚡💫💫💫💫"
        if stamina >= 0 and stamina <= (max_stamina * .10):
            stamina_response = f"💫💫💫💫💫"
    else:
        if stamina >= max_stamina:
            stamina_response = f"🌀🌀🌀🌀🌀"
        if stamina >= (max_stamina * .80) and stamina < max_stamina:
            stamina_response = f"🌀🌀🌀🌀⚫"
        if stamina >= (max_stamina * .60) and stamina < (max_stamina * .80):
            stamina_response = f"🌀🌀🌀⚫⚫"
        if stamina >= (max_stamina * .40) and stamina < (max_stamina * .60):
            stamina_response = f"🌀🌀⚫⚫⚫"
        if stamina >= (max_stamina * .10) and stamina < (max_stamina * .40):
            stamina_response = f"🌀⚫⚫⚫⚫"
        if stamina >= 0 and stamina <= (max_stamina * .10):
            stamina_response = f"⚫⚫⚫⚫⚫"

    return {"HEALTH": health_response, "STAMINA": stamina_response}


def getTime(hgame, mgame, sgame, hnow, mnow, snow):
    hoursPassed = hnow - hgame
    minutesPassed = mnow - mgame
    secondsPassed = snow - sgame
    if hoursPassed > 0:
        minutesPassed = mnow
        if minutesPassed > 0:
            secondsPassed = snow
        else:
            secondsPassed = snow - sgame
    else:
        minutesPassed = mnow - mgame
        if minutesPassed > 0:
            secondsPassed = snow
        else:
            secondsPassed = snow - sgame
    gameTime = str(hoursPassed) + str(minutesPassed) + str(secondsPassed)
    return gameTime


async def blessteam(amount, team):
    blessAmount = amount
    posBlessAmount = 0 + abs(int(blessAmount))
    query = {'TEAM_NAME': str(team.lower())}
    team_data = db.queryTeam(query)
    if team_data:
        guild_mult = 1.0
        if team_data['GUILD'] != 'PCG':
            guild_query = {'GNAME': str(team_data['GUILD'])}
            guild_info = db.queryGuildAlt(guild_query)
            guild_hall = guild_info['HALL']
            hall_query = {'HALL': str(guild_hall)}
            hall_info = db.queryHall(hall_query)
            guild_mult = hall_info['SPLIT']
            blessAmount = amount * guild_mult
            posBlessAmount = 0 + abs(int(blessAmount))
        total_members = team_data['MEMBERS']
        headcount_bonus = 0
        bonus_percentage = 0.0
        for m in total_members:
            headcount_bonus= headcount_bonus + 1
        bonus_percentage= (headcount_bonus/25)
        if bonus_percentage >= 1:
            bonus_percentage = 1.5
        posBlessAmount = int((posBlessAmount + (bonus_percentage * posBlessAmount)))
        update_query = {"$inc": {'BANK': posBlessAmount}}
        db.updateTeam(query, update_query)



async def teamwin(team):
    query = {'TEAM_NAME': str(team)}
    team_data = db.queryTeam(query)
    if team_data:
        update_query = {"$inc": {'SCRIM_WINS': 1}}
        db.updateTeam(query, update_query)
    else:
        print("Cannot find Team")


async def teamloss(team):
    query = {'TEAM_NAME': str(team)}
    team_data = db.queryTeam(query)
    if team_data:
        update_query = {"$inc": {'SCRIM_LOSSES': 1}}
        db.updateTeam(query, update_query)
    else:
        print("Cannot find Team")


async def movecrest(universe, guild):
    guild_name = guild
    universe_name = universe
    guild_query = {'GNAME': guild_name}
    guild_info = db.queryGuildAlt(guild_query)
    if guild_info:
        alt_query = {'FDID': guild_info['FDID']}
        crest_list = guild_info['CREST']
        pull_query = {'$pull': {'CREST': universe_name}}
        pull = db.updateManyGuild(pull_query)
        update_query = {'$push': {'CREST': universe_name}}
        update = db.updateGuild(alt_query, update_query)
        universe_guild = db.updateUniverse({'TITLE': universe_name}, {'$set': {'GUILD': guild_name}})
    else:
        print("Association not found: Crest")


async def scenario_drop(self, ctx, scenario, difficulty):
    try:
        vault_query = {'DID': str(ctx.author.id)}
        vault = db.queryVault(vault_query)
        # player_info = db.queryUser({'DID': str(vault['DID'])})


        owned_arms = []
        for arm in vault['ARMS']:
            owned_arms.append(arm['ARM'])

        easy = "EASY_DROPS"
        normal = "NORMAL_DROPS"
        hard = "HARD_DROPS"
        rewards = []
        rewarded = ""

        if difficulty == "EASY":
            rewards = scenario[easy]
        if difficulty == "NORMAL":
            rewards = scenario[normal]
        if difficulty == "HARD":
            rewards = scenario[hard]

        if len(rewards) > 1:
            num_of_potential_rewards = len(rewards)
            selection = round(random.randint(0, num_of_potential_rewards))
            rewarded = rewards[selection]
        else:
            rewarded = rewards[0]

        arm = db.queryArm({"ARM": rewarded})
        arm_name = arm['ARM']
        element_emoji = crown_utilities.set_emoji(arm['ELEMENT'])
        arm_passive = arm['ABILITIES'][0]
        arm_passive_type = list(arm_passive.keys())[0]
        arm_passive_value = list(arm_passive.values())[0]
        reward = f"{element_emoji} {arm_passive_type.title()} **{arm_name}** Attack: **{arm_passive_value}** dmg"

        if len(vault['ARMS']) >= 25:
            await crown_utilities.bless(10000, ctx.author.id)
            return f"You're maxed out on Arms! You earned :coin: 10,000 instead!"
        elif rewarded in owned_arms:
            await crown_utilities.bless(10000, ctx.author.id)
            return f"You already own {reward}! You earn :coin: **10000**."
        else:
            response = db.updateVaultNoFilter(vault_query, {'$addToSet': {'ARMS': {'ARM': rewarded, 'DUR': 100}}})
            return f"You earned _Arm:_ {reward} with ⚒️**{str(100)} Durability**!"
    except Exception as ex:
        trace = []
        tb = ex.__traceback__
        while tb is not None:
            trace.append({
                "filename": tb.tb_frame.f_code.co_filename,
                "name": tb.tb_frame.f_code.co_name,
                "lineno": tb.tb_lineno
            })
            tb = tb.tb_next
        print(str({
            'type': type(ex).__name__,
            'message': str(ex),
            'trace': trace
        }))

    

    


async def drops(self,player, universe, matchcount):
    all_available_drop_cards = db.queryDropCards(universe)
    all_available_drop_titles = db.queryDropTitles(universe)
    all_available_drop_arms = db.queryDropArms(universe)
    all_available_drop_pets = db.queryDropPets(universe)
    vault_query = {'DID': str(player.id)}
    vault = db.queryVault(vault_query)
    player_info = db.queryUser({'DID': str(vault['DID'])})

    difficulty = player_info['DIFFICULTY']

    if difficulty == "EASY":
        bless_amount = 100
        await crown_utilities.bless(bless_amount, player.id)
        return f"You earned :coin: **{bless_amount}**!"

    owned_arms = []
    for arm in vault['ARMS']:
        owned_arms.append(arm['ARM'])
        
    owned_titles = []
    owned_titles = vault['TITLES']

    user_query = {'DID': str(player.id)}
    user = db.queryUser(user_query)
    rebirth = user['REBIRTH']
    owned_destinies = []
    for destiny in vault['DESTINY']:
        owned_destinies.append(destiny['NAME'])

    cards = []
    titles = []
    arms = []
    pets = []

    # if matchcount <= 2:
    #     bless_amount = (500 + (1000 * matchcount)) * (1 + rebirth)
    #     if difficulty == "HARD":
    #         bless_amount = (5000 + (2500 * matchcount)) * (1 + rebirth)
    #     await crown_utilities.bless(bless_amount, player.id)
    #     return f"You earned :coin: **{bless_amount}**!"



    if all_available_drop_cards:
        for card in all_available_drop_cards:
            cards.append(card['NAME'])

    if all_available_drop_titles:
        for title in all_available_drop_titles:
            titles.append(title['TITLE'])

    if all_available_drop_arms:
        for arm in all_available_drop_arms:
            arms.append(arm['ARM'])
        
    if all_available_drop_pets:
        for pet in all_available_drop_pets:
            pets.append(pet['PET'])
         
    
    if len(cards)==0:
        rand_card = 0
    else:
        c = len(cards) - 1
        rand_card = random.randint(0, c)

    if len(titles)==0:
        rand_title= 0
    else:
        t = len(titles) - 1
        rand_title = random.randint(0, t)

    if len(arms)==0:
        rand_arm = 0
    else:
        a = len(arms) - 1
        rand_arm = random.randint(0, a)

    
    if len(pets)==0:
        rand_pet = 0
    else:
        p = len(pets) - 1
        rand_pet = random.randint(0, p)

    gold_drop = 150  # 150
    rift_rate = 175  # 175
    title_drop = 190  # 190
    arm_drop = 195  # 195
    pet_drop = 198  # 198
    card_drop = 200  # 200
    drop_rate = random.randint((0 + (rebirth * rebirth) * (1 + rebirth)), 200)
    durability = random.randint(1, 45)
    
    if difficulty == "HARD":
        mode = "Purchase"
        gold_drop = 30  
        rift_rate = 65  
        title_drop = 75  
        arm_drop = 100  
        pet_drop = 180  
        card_drop = 200 
        drop_rate = random.randint((0 + (rebirth * rebirth) * (1 + rebirth)), 200)
        durability = random.randint(35, 50)
        
    try:
        if drop_rate <= gold_drop:
            bless_amount = (500 + (1000 * matchcount)) * (1 + rebirth)
            if difficulty == "HARD":
                bless_amount = (5000 + (2500 * matchcount)) * (1 + rebirth)
            await crown_utilities.bless(bless_amount, player.id)
            return f"You earned :coin: **{bless_amount}**!"
        elif drop_rate <= rift_rate and drop_rate > gold_drop:
            response = db.updateUserNoFilter(user_query, {'$set': {'RIFT': 1}})
            bless_amount = (200 + (100 * matchcount)) * (1 + rebirth)
            await crown_utilities.bless(bless_amount, player.id)
            return f"A RIFT HAS OPENED! You have earned :coin: **{bless_amount}**!"
        elif drop_rate <= title_drop and drop_rate > gold_drop:
            if all_available_drop_titles:
                if len(vault['TITLES']) >= 25:
                    await crown_utilities.bless(300, player.id)
                    return f"You're maxed out on Titles! You earned :coin: 300 instead!"
                if str(titles[rand_title]) in owned_titles:
                    await crown_utilities.bless(150, player.id)
                    return f"You already own **{titles[rand_title]}**! You earn :coin: **150**."
                response = db.updateVaultNoFilter(vault_query, {'$addToSet': {'TITLES': str(titles[rand_title])}})
                return f"You earned _Title:_ **{titles[rand_title]}**!"
            else:
                await crown_utilities.bless(150, player.id)
                return f"You earned :coin: **150**!"
        elif drop_rate <= arm_drop and drop_rate > title_drop:
            if all_available_drop_arms:
                if len(vault['ARMS']) >= 25:
                    await crown_utilities.bless(300, player.id)
                    return f"You're maxed out on Arms! You earned :coin: 300 instead!"
                if str(arms[rand_arm]) in owned_arms:
                    await crown_utilities.bless(150, player.id)
                    return f"You already own **{arms[rand_arm]}**! You earn :coin: **150**."
                else:
                    response = db.updateVaultNoFilter(vault_query, {'$addToSet': {'ARMS': {'ARM': str(arms[rand_arm]), 'DUR': durability}}})
                    return f"You earned _Arm:_ **{arms[rand_arm]}** with ⚒️**{str(durability)}**!"
            else:
                await crown_utilities.bless(150, player.id)
                return f"You earned :coin: **150**!"
        elif drop_rate <= pet_drop and drop_rate > arm_drop:
            if all_available_drop_pets:
                if len(vault['PETS']) >= 25:
                    await crown_utilities.bless(300, player.id)
                    return f"You're maxed out on Summons! You earned :coin: 300 instead!"

                pet_owned = False
                for p in vault['PETS']:
                    if p['NAME'] == pets[rand_pet]:
                        pet_owned = True

                if pet_owned:

                    await crown_utilities.bless(150, player.id)
                    return f"You own _Summon:_ **{pets[rand_pet]}**! Received extra + :coin: 150!"
                else:

                    selected_pet = db.queryPet({'PET': pets[rand_pet]})
                    pet_ability_name = list(selected_pet['ABILITIES'][0].keys())[0]
                    pet_ability_power = list(selected_pet['ABILITIES'][0].values())[0]
                    pet_ability_type = list(selected_pet['ABILITIES'][0].values())[1]

                    response = db.updateVaultNoFilter(vault_query, {'$addToSet': {
                        'PETS': {'NAME': selected_pet['PET'], 'LVL': 0, 'EXP': 0, pet_ability_name: int(pet_ability_power),
                                'TYPE': pet_ability_type, 'BOND': 0, 'BONDEXP': 0, 'PATH': selected_pet['PATH']}}})
                    await crown_utilities.bless(50, player.id)
                    return f"You earned _Summon:_ **{pets[rand_pet]}** + :coin: 50!"
            else:
                await crown_utilities.bless(150, player.id)
                return f"You earned :coin: **150**!"
        elif drop_rate <= card_drop and drop_rate > pet_drop:
            if all_available_drop_cards:
                response = await crown_utilities.store_drop_card(player.id, cards[rand_card], universe, vault, owned_destinies, 3000, 1000, mode, False, 0)
                if not response:
                    bless_amount = (5000 + (2500 * matchcount)) * (1 + rebirth)
                    await crown_utilities.bless(bless_amount, player.id)
                    return f"You earned :coin: **{bless_amount}**!"
                return response
            else:
                await crown_utilities.bless(5000, player.id)
                return f"You earned :coin: **5000**!"
    except Exception as ex:
        trace = []
        tb = ex.__traceback__
        while tb is not None:
            trace.append({
                "filename": tb.tb_frame.f_code.co_filename,
                "name": tb.tb_frame.f_code.co_name,
                "lineno": tb.tb_lineno
            })
            tb = tb.tb_next
        print(str({
            'player': str(player),
            'type': type(ex).__name__,
            'message': str(ex),
            'trace': trace
        }))
        await crown_utilities.bless(5000, player.id)
        guild = self.bot.get_guild(main.guild_id)
        channel = guild.get_channel(main.guild_channel)
        await channel.send(f"'PLAYER': **{str(player)}**, TYPE: {type(ex).__name__}, MESSAGE: {str(ex)}, TRACE: {trace}")

        return f"You earned :coin: **5000**!"


async def specific_drops(self,player, card, universe):
    vault_query = {'DID': str(player)}
    vault = db.queryVault(vault_query)
    user_query = {'DID': str(player)}
    user = db.queryUser(user_query)

    if user['DIFFICULTY'] == "EASY":
        bless_amount = 100
        await crown_utilities.bless(100, player)
        return f"You earned :coin: **{bless_amount}**!"

    rebirth = user['REBIRTH']
    owned_destinies = []
    for destiny in vault['DESTINY']:
        owned_destinies.append(destiny['NAME'])

    try:
        response = await crown_utilities.store_drop_card(player, card, universe, vault, owned_destinies, 3000, 1000, "Purchase", False, 0)
        return response
    except Exception as ex:
        trace = []
        tb = ex.__traceback__
        while tb is not None:
            trace.append({
                "filename": tb.tb_frame.f_code.co_filename,
                "name": tb.tb_frame.f_code.co_name,
                "lineno": tb.tb_lineno
            })
            tb = tb.tb_next
        print(str({
            'player': str(player),
            'type': type(ex).__name__,
            'message': str(ex),
            'trace': trace
        }))
        await crown_utilities.bless(5000, player.id)
        guild = self.bot.get_guild(main.guild_id)
        channel = guild.get_channel(main.guild_channel)
        await channel.send(f"'PLAYER': **{str(player)}**, TYPE: {type(ex).__name__}, MESSAGE: {str(ex)}, TRACE: {trace}")

        return f"You earned :coin: **5000**!"


async def dungeondrops(self, player, universe, matchcount):
    all_available_drop_cards = db.queryExclusiveDropCards(universe)
    all_available_drop_titles = db.queryExclusiveDropTitles(universe)
    all_available_drop_arms = db.queryExclusiveDropArms(universe)
    all_available_drop_pets = db.queryExclusiveDropPets(universe)
    vault_query = {'DID': str(player.id)}
    vault = db.queryVault(vault_query)
    owned_arms = []
    for arm in vault['ARMS']:
        owned_arms.append(arm['ARM'])
    owned_titles = vault['TITLES']

    user_query = {'DID': str(player.id)}
    user = db.queryUser(user_query)

    player_info = db.queryUser({'DID': str(vault['DID'])})
    difficulty = player_info['DIFFICULTY']
    if difficulty == "EASY":
        bless_amount = 100
        await crown_utilities.bless(bless_amount, player.id)
        return f"You earned :coin: **{bless_amount}**!"




    rebirth = user['REBIRTH']
    owned_destinies = []
    for destiny in vault['DESTINY']:
        owned_destinies.append(destiny['NAME'])

    cards = []
    titles = []
    arms = []
    pets = []

    if matchcount <= 3:
        bless_amount = (8000 + (2000 * matchcount)) * (1 + rebirth)
        if difficulty == "HARD":
            bless_amount = (20000 + (5000 * matchcount)) * (1 + rebirth)
        await crown_utilities.bless(bless_amount, player.id)
        return f"You earned :coin: **{bless_amount}**!"


    for card in all_available_drop_cards:
        cards.append(card['NAME'])

    for title in all_available_drop_titles:
        titles.append(title['TITLE'])

    for arm in all_available_drop_arms:
        arms.append(arm['ARM'])

    for pet in all_available_drop_pets:
        pets.append(pet['PET'])
    
    if len(cards)==0:
        rand_card = 0
    else:
        c = len(cards) - 1
        rand_card = random.randint(0, c)

    if len(titles)==0:
        rand_title= 0
    else:
        t = len(titles) - 1
        rand_title = random.randint(0, t)

    if len(arms)==0:
        rand_arm = 0
    else:
        a = len(arms) - 1
        rand_arm = random.randint(0, a)

    
    if len(pets)==0:
        rand_pet = 0
    else:
        p = len(pets) - 1
        rand_pet = random.randint(0, p)


    gold_drop = 300  #
    rift_rate = 350  #
    title_drop = 380  #
    arm_drop = 390  #
    pet_drop = 396  #
    card_drop = 400  #
    drop_rate = random.randint((0 + (rebirth * rebirth) * (1 + rebirth)), 400)
    durability = random.randint(10, 75)
    mode="Dungeon"
    if difficulty == "HARD":
        gold_drop = 30  
        rift_rate = 65  
        title_drop = 75  
        arm_drop = 100  
        pet_drop = 250  
        card_drop = 300 
        drop_rate = random.randint((0 + (rebirth * rebirth) * (1 + rebirth)), 300)
        durability = 100
        mode="Purchase"

    try:
        if drop_rate <= gold_drop:
            bless_amount = (3000 + (2000 * matchcount)) * (1 + rebirth)
            if difficulty == "HARD":
                bless_amount = (20000 + (5000 * matchcount)) * (1 + rebirth)
            await crown_utilities.bless(bless_amount, player.id)
            return f"You earned :coin: **{bless_amount}**!"
        elif drop_rate <= rift_rate and drop_rate > gold_drop:
            response = db.updateUserNoFilter(user_query, {'$set': {'RIFT': 1}})
            bless_amount = (150 + (250 * matchcount)) * (1 + rebirth)
            await crown_utilities.bless(bless_amount, player.id)
            return f"A RIFT HAS OPENED! You have earned :coin: **{bless_amount}**!"
        elif drop_rate <= title_drop and drop_rate > gold_drop:
            if len(vault['TITLES']) >= 25:
                await crown_utilities.bless(1500, player.id)
                return f"You're maxed out on Titles! You earned :coin: 1500 instead!"
            if str(titles[rand_title]) in owned_titles:
                    await crown_utilities.bless(1250, player.id)
                    return f"You already own **{titles[rand_title]}**! You earn :coin: **1250**."
            response = db.updateVaultNoFilter(vault_query, {'$addToSet': {'TITLES': str(titles[rand_title])}})
            return f"You earned _Title:_ **{titles[rand_title]}**!"
        elif drop_rate <= arm_drop and drop_rate > title_drop:
            if len(vault['ARMS']) >= 25:
                await crown_utilities.bless(1500, player.id)
                return f"You're maxed out on Arms! You earned :coin: 1500 instead!"
            if str(arms[rand_arm]) in owned_arms:
                await crown_utilities.bless(1250, player.id)
                return f"You already own **{arms[rand_arm]}**! You earn :coin: **1250**."
            else:
                response = db.updateVaultNoFilter(vault_query, {'$addToSet': {'ARMS': {'ARM': str(arms[rand_arm]), 'DUR': durability}}})
                return f"You earned _Arm:_ **{arms[rand_arm]}** with ⚒️**{str(durability)}**!"
        elif drop_rate <= pet_drop and drop_rate > arm_drop:
            if len(vault['PETS']) >= 25:
                await crown_utilities.bless(3000, player.id)
                return f"You're maxed out on Summons! You earned :coin: 3000 instead!"
            pet_owned = False
            for p in vault['PETS']:
                if p['NAME'] == pets[rand_pet]:
                    pet_owned = True

            if pet_owned:
                await crown_utilities.bless(1800, player.id)
                return f"You own _Summon:_ **{pets[rand_pet]}**! Received extra + :coin: 1800!"
            else:
                selected_pet = db.queryPet({'PET': pets[rand_pet]})
                pet_ability_name = list(selected_pet['ABILITIES'][0].keys())[0]
                pet_ability_power = list(selected_pet['ABILITIES'][0].values())[0]
                pet_ability_type = list(selected_pet['ABILITIES'][0].values())[1]

                response = db.updateVaultNoFilter(vault_query, {'$addToSet': {
                    'PETS': {'NAME': selected_pet['PET'], 'LVL': 0, 'EXP': 0, pet_ability_name: int(pet_ability_power),
                             'TYPE': pet_ability_type, 'BOND': 0, 'BONDEXP': 0, 'PATH': selected_pet['PATH']}}})
                await crown_utilities.bless(100, player.id)
                return f"You earned _Summon:_ **{pets[rand_pet]}** + :coin: 100!"
        elif drop_rate <= card_drop and drop_rate > pet_drop:
            response = await crown_utilities.store_drop_card(player.id, cards[rand_card], universe, vault, owned_destinies, 5000, 2500, mode, False, 0)
            return response
    except Exception as ex:
        trace = []
        tb = ex.__traceback__
        while tb is not None:
            trace.append({
                "filename": tb.tb_frame.f_code.co_filename,
                "name": tb.tb_frame.f_code.co_name,
                "lineno": tb.tb_lineno
            })
            tb = tb.tb_next
        print(str({
            'player': str(player),
            'type': type(ex).__name__,
            'message': str(ex),
            'trace': trace
        }))
        await crown_utilities.bless(5000, player.id)
        guild = self.bot.get_guild(main.guild_id)
        channel = guild.get_channel(main.guild_channel)
        await channel.send(f"'PLAYER': **{str(player)}**, TYPE: {type(ex).__name__}, MESSAGE: {str(ex)}, TRACE: {trace}")

        return f"You earned :coin: **5000**!"


async def bossdrops(self,player, universe):
    all_available_drop_cards = db.queryExclusiveDropCards(universe)
    all_available_drop_titles = db.queryExclusiveDropTitles(universe)
    all_available_drop_arms = db.queryExclusiveDropArms(universe)
    all_available_drop_pets = db.queryExclusiveDropPets(universe)
    boss = db.queryBoss({'UNIVERSE': universe})
    vault_query = {'DID': str(player.id)}
    vault = db.queryVault(vault_query)
    owned_arms = []
    for arm in vault['ARMS']:
        owned_arms.append(arm['ARM'])
    owned_titled = vault['TITLES']

    user_query = {'DID': str(player.id)}
    user = db.queryUser(user_query)
    difficulty = user['DIFFICULTY']
    rebirth = user['REBIRTH']

    owned_destinies = []
    for destiny in vault['DESTINY']:
        owned_destinies.append(destiny['NAME'])

    cards = []
    titles = []
    arms = []
    pets = []
    boss_title = boss['TITLE']
    boss_arm = boss['ARM']
    boss_pet = boss['PET']
    boss_card = boss['CARD']

    for card in all_available_drop_cards:
        cards.append(card['NAME'])

    for title in all_available_drop_titles:
        titles.append(title['TITLE'])

    for arm in all_available_drop_arms:
        arms.append(arm['ARM'])

    for pet in all_available_drop_pets:
        pets.append(pet['PET'])

    if len(cards)==0:
        rand_card = 0
    else:
        c = len(cards) - 1
        rand_card = random.randint(0, c)

    if len(titles)==0:
        rand_title= 0
    else:
        t = len(titles) - 1
        rand_title = random.randint(0, t)

    if len(arms)==0:
        rand_arm = 0
    else:
        a = len(arms) - 1
        rand_arm = random.randint(0, a)

    
    if len(pets)==0:
        rand_pet = 0
    else:
        p = len(pets) - 1
        rand_pet = random.randint(0, p)


    gold_drop = 339  #
    title_drop = 340  #
    arm_drop = 370  #
    pet_drop = 390  #
    card_drop = 400  #
    boss_title_drop = 450  #
    boss_arm_drop = 480  #
    boss_pet_drop = 495  #
    boss_card_drop = 500  #

    drop_rate = random.randint((0 + (rebirth * rebirth) * (1 + rebirth)), 500)
    durability = random.randint(25, 120)

    try:
        if drop_rate <= gold_drop:
            bless_amount = 80000 * (1 + rebirth)
            if difficulty == "HARD":
                bless_amount = 150000 * (1 + rebirth)
            await crown_utilities.bless(bless_amount, player.id)
            return f"You earned :coin: {bless_amount}!"
        elif drop_rate <= title_drop and drop_rate > gold_drop:
            if len(vault['TITLES']) >= 25:
                await crown_utilities.bless(8000, player.id)
                return f"You're maxed out on Titles! You earned :coin: **8000** instead!"
            if str(titles[rand_title]) in owned_titles:
                    await crown_utilities.bless(8000, player.id)
                    return f"You already own **{titles[rand_title]}**! You earn :coin: **8000**."
            response = db.updateVaultNoFilter(vault_query, {'$addToSet': {'TITLES': str(titles[rand_title])}})
            return f"You earned {titles[rand_title]}!"
        elif drop_rate <= arm_drop and drop_rate > title_drop:
            if len(vault['ARMS']) >= 25:
                await crown_utilities.bless(8000, player.id)
                return f"You're maxed out on Arms! You earned :coin: 8000 instead!"
            if str(arms[rand_arm]) in owned_arms:
                await crown_utilities.bless(8000, player.id)
                return f"You already own **{arms[rand_arm]}**! You earn :coin: **8000**."
            else:
                response = db.updateVaultNoFilter(vault_query, {'$addToSet': {'ARMS': {'ARM': str(arms[rand_arm]), 'DUR': durability}}})
                return f"You earned _Arm:_ **{arms[rand_arm]}** with ⚒️**{str(durability)}**!"
        elif drop_rate <= pet_drop and drop_rate > arm_drop:
            if len(vault['PETS']) >= 25:
                await crown_utilities.bless(8000, player.id)
                return f"You're maxed out on Summons! You earned :coin: 8000 instead!"
            selected_pet = db.queryPet({'PET': pets[rand_pet]})
            pet_ability_name = list(selected_pet['ABILITIES'][0].keys())[0]
            pet_ability_power = list(selected_pet['ABILITIES'][0].values())[0]
            pet_ability_type = list(selected_pet['ABILITIES'][0].values())[1]

            response = db.updateVaultNoFilter(vault_query, {'$addToSet': {
                'PETS': {'NAME': selected_pet['PET'], 'LVL': 0, 'EXP': 0, pet_ability_name: int(pet_ability_power),
                         'TYPE': pet_ability_type, 'BOND': 0, 'BONDEXP': 0, 'PATH': selected_pet['PATH']}}})
            await crown_utilities.bless(80, player.id)
            return f"You earned {pets[rand_pet]} + :coin: 80!"
        elif drop_rate <= card_drop and drop_rate > pet_drop:
            response = await crown_utilities.store_drop_card(player.id, cards[rand_card], universe, vault, owned_destinies, 30000, 10000, "Dungeon", False, 0)
            return response
        elif drop_rate <= boss_title_drop and drop_rate > card_drop:
            if len(vault['TITLES']) >= 25:
                await crown_utilities.bless(10000, player.id)
                return f"You're maxed out on Titles! You earned :coin: **10,000** instead!"
            response = db.updateVaultNoFilter(vault_query, {'$addToSet': {'TITLES': str(boss_title)}})
            return f"You earned the Exclusive Boss Title: {boss_title}!"
        elif drop_rate <= boss_arm_drop and drop_rate > boss_title_drop:
            if len(vault['ARMS']) >= 25:
                await crown_utilities.bless(10000, player.id)
                return f"You're maxed out on Arms! You earned :coin: **10,000** instead!"
            if str(boss_arm) in owned_arms:
                await crown_utilities.bless(20000, player.id)
                return f"You already own **{arms[rand_arm]}**! You earn :coin: **20,000**."
            else:
                response = db.updateVaultNoFilter(vault_query, {'$addToSet': {'ARMS': {'ARM': str(boss_arm), 'DUR': durability}}})
                return f"You earned the Exclusive Boss Arm: **{str(boss_arm)}** with ⚒️**{str(durability)}**!"
        elif drop_rate <= boss_pet_drop and drop_rate > boss_arm_drop:
            if len(vault['PETS']) >= 25:
                await crown_utilities.bless(10000, player.id)
                return f"You're maxed out on Summons! You earned :coin: **10,000** instead!"
            selected_pet = db.queryPet({'PET': boss['PET']})
            pet_ability_name = list(selected_pet['ABILITIES'][0].keys())[0]
            pet_ability_power = list(selected_pet['ABILITIES'][0].values())[0]
            pet_ability_type = list(selected_pet['ABILITIES'][0].values())[1]

            response = db.updateVaultNoFilter(vault_query, {'$addToSet': {
                'PETS': {'NAME': selected_pet['PET'], 'LVL': 0, 'EXP': 0, pet_ability_name: int(pet_ability_power),
                         'TYPE': pet_ability_type, 'BOND': 0, 'BONDEXP': 0, 'PATH': selected_pet['PATH']}}})
            await crown_utilities.bless(10000, player.id)
            return f"You earned the Exclusive Boss Summon:  {boss['PET']} + :coin: **10,000**!"
        elif drop_rate <= boss_card_drop and drop_rate > boss_pet_drop:
            response = await crown_utilities.store_drop_card(player.id, boss_card, universe, vault, owned_destinies, 30000, 10000, "Dungeon", False, 0)
            return response
    except Exception as ex:
        trace = []
        tb = ex.__traceback__
        while tb is not None:
            trace.append({
                "filename": tb.tb_frame.f_code.co_filename,
                "name": tb.tb_frame.f_code.co_name,
                "lineno": tb.tb_lineno
            })
            tb = tb.tb_next
        print(str({
            'player': str(player),
            'type': type(ex).__name__,
            'message': str(ex),
            'trace': trace
        }))
        await crown_utilities.bless(5000, player.id)
        guild = self.bot.get_guild(main.guild_id)
        channel = guild.get_channel(main.guild_channel)
        await channel.send(f"'PLAYER': **{str(player)}**, TYPE: {type(ex).__name__}, MESSAGE: {str(ex)}, TRACE: {trace}")

        return f"You earned :coin: **5000**!"

async def ai_enhancer_moves(turn_total,focus, resolve, summon, stamina, enhancer_type, health, maxhealth, attack, defense, oppstamina, oppattack, oppdefense, opphealth):
    aiMove = 1
    focus_used = focus
    resolve_used = resolve
    summon_used = summon
    enhancer = enhancer_type
    if enhancer in Time_Enhancer_Check:
        if enhancer == "HASTE":
            if oppstamina <= stamina:
                aiMove =4
            else:
                aiMove = 7
        elif enhancer == "SLOW":
            if stamina <= oppstamina:
                aiMove =4
            else:
                aiMove = 7
        else:
            if focus_used ==False:
                aiMove=4
            else:
                if enhancer == "BLINK":
                    aiMove =4
                else:
                    aiMove=7
    elif enhancer in SWITCH_Enhancer_Check:
        if enhancer == "CONFUSE":
            if oppdefense >= defense:
                if oppattack >= defense:
                    if oppattack>=oppdefense:
                        aimove =4
                    else:
                        aiMove = 7
                else:
                    aiMove = 7
            else:
                aiMove = 7
        else:
            if attack >=800 and defense>= 800:
                aiMove = 1
            else:
                aiMove = 4
    elif enhancer in Damage_Enhancer_Check or enhancer in Turn_Enhancer_Check: #Ai Damage Check
        aiMove = 4
    elif enhancer in Gamble_Enhancer_Check: #Ai Gamble and Soul checks
        aiMove =4
    elif enhancer in Stamina_Enhancer_Check: #Ai Stamina Check
        if stamina >= 240:
            aiMove = 7
        else:
            aiMove = 4
    elif enhancer in TRADE_Enhancer_Check: #Ai Trade Check
        if defense >= attack and defense <= (attack * 2):
            aiMove = 4
        elif attack <= (defense *2):
            aiMove =4
        else:
            if stamina >=90 and focus_used:
                if defense >= attack:
                    if focus_used and not resolve_used:
                        aiMove =5
                    else:
                        aiMove = 7
                else:
                    aiMove = 3
            else:
                aiMove = 7
    elif enhancer in Healer_Enhancer_Check: #Ai Healer Check
        if health >= maxhealth:
            aiMove = 7
        else:
            aiMove = 4
    elif enhancer in INC_Enhancer_Check: #Ai Inc Check
        if attack >= 800 or defense >=800:
            if stamina >=80 and focus_used:
                aiMove = 3
            elif stamina>=20:
                aiMove = 7
            else:
                aiMove = 1
        else:
            aiMove = 4
    elif enhancer in DPS_Enhancer_Check: #Ai Steal Check
        if attack >= 800 and oppattack >=100:
            if stamina >=80 and focus_used:
                aiMove = 3
            elif stamina>=30 and focus_used:
                aiMove = 2
            elif stamina >=20:
                aiMove = 7
            else:
                aiMove = 1
        elif defense >= 800 and oppdefense >=100:
            if stamina >=80 and focus_used:
                aiMove = 3
            elif stamina>=30 and focus_used:
                aiMove = 2
            elif stamina >=20:
                aiMove = 7
            else:
                aiMove = 1
        else:
            aiMove = 4
    elif enhancer in FORT_Enhancer_Check: #Ai Fort Check
        if (oppattack<= 50 or attack >= 800) or health <= 650 or health <= (.66 * maxhealth):
            if stamina >=80 and focus_used:
                aiMove = 3
            elif stamina>=30 and focus_used:
                aiMove = 2
            elif stamina >=20:
                aiMove = 7
            else:
                aiMove = 1
        elif (oppdefense <=50 or defense >= 800) or health <= 650 or health <= (.66 * maxhealth):
            if stamina >=80 and focus_used:
                aiMove = 3
            elif stamina>=30 and focus_used:
                aiMove = 2
            elif stamina >=20:
                aiMove = 7
            else:
                aiMove = 1
        else:
            aiMove = 4
    elif enhancer in Sacrifice_Enhancer_Check: #Ai Sacrifice Check
        if attack >= 800 or health <= 500 or health <= (.75 * maxhealth):
            if focus_used and not resolve_used:
                aiMove =5
            else:
                aiMove = 7
        elif defense >= 800 or health <=500 or health <= (.75 * maxhealth):
            if focus_used and not resolve_used:
                aiMove =5
            else:
                aiMove = 7
        else:
            aiMove = 4
    else:
        aiMove = 4 #Block or Enhance
        
    #Killing Blow Checks
    if opphealth <=200:
        if stamina >=80:
            aiMove =3
        elif stamina >=30:
            aiMove=2
        elif stamina >=20:
            if enhancer == "LIFE" or enhancer in Damage_Enhancer_Check:
                aiMove = 4
            else:
                aiMove = 1
        else:
            aiMove = 1
            
        
    return aiMove
enhancer_mapping = {'ATK': 'Increase Attack %',
'DEF': 'Increase Defense %',
'STAM': 'Increase Stamina',
'HLT': 'Heal yourself or companion',
'LIFE': 'Steal Health from Opponent',
'DRAIN': 'Drain Stamina from Opponent',
'FLOG': 'Steal Attack from Opponent',
'WITHER': 'Steal Defense from Opponent',
'RAGE': 'Lose Defense, Increase Attack',
'BRACE': 'Lose Attack, Increase Defense',
'BZRK': 'Lose Health, Increase Attack',
'CRYSTAL': 'Lose Health, Increase Defense',
'GROWTH': 'Lose Health, Increase Attack & Defense',
'STANCE': 'Swap your Attack & Defense, Increase Defense',
'CONFUSE': 'Swap Opponent Attack & Defense, Decrease Opponent Defense',
'BLINK': 'Decrease your  Stamina, Increase Target Stamina',
'SLOW': 'Increase Opponent Stamina, Decrease Your Stamina then Swap Stamina with Opponent',
'HASTE': 'Increase your Stamina, Decrease Opponent Stamina then Swap Stamina with Opponent',
'FEAR': 'Decrease your Health, Decrease Opponent Attack and Defense',
'SOULCHAIN': 'You and Your Opponent Stamina Link',
'GAMBLE': 'You and Your Opponent Health Link',
'WAVE': 'Deal Damage, Decreases over time',
'CREATION': 'Heals you, Decreases over time',
'BLAST': 'Deals Damage, Increases over time',
'DESTRUCTION': 'Decreases Your Opponent Max Health, Increases over time',
'BASIC': 'Increase Basic Attack AP',
'SPECIAL': 'Increase Special Attack AP',
'ULTIMATE': 'Increase Ultimate Attack AP',
'ULTIMAX': 'Increase All AP Values',
'MANA': 'Increase Enchancer AP',
'SHIELD': 'Blocks Incoming DMG, until broken',
'BARRIER': 'Nullifies Incoming Attacks, until broken',
'PARRY': 'Returns 25% Damage, until broken',
'SIPHON': 'Heal for 10% DMG inflicted + AP'
}
title_enhancer_mapping = {'ATK': 'Increase Attack ',
'DEF': 'Increase Defense ',
'STAM': 'Increase Stamina',
'HLT': 'Heal for AP',
'LIFE': 'Steal AP Health',
'DRAIN': 'Drain Stamina from Opponent',
'FLOG': 'Steal Attack from Opponent',
'WITHER': 'Steal Defense from Opponent',
'RAGE': 'Lose Defense, Increase Attack',
'BRACE': 'Lose Attack, Increase Defense',
'BZRK': 'Lose Health, Increase Attack',
'CRYSTAL': 'Lose Health, Increase Defense',
'GROWTH': 'Lose Health, Increase Attack & Defense',
'STANCE': 'Swap your Attack & Defense, Increase Defense',
'CONFUSE': 'Swap Opponent Attack & Defense, Decrease Opponent Defense',
'BLINK': 'Decrease your Stamina, Increase Target Stamina',
'SLOW': 'Decrease Turn Count by 1',
'HASTE': 'Increase Turn Count By 1',
'FEAR': 'Decrease your Health, Decrease Opponent Attack and Defense',
'SOULCHAIN': 'Both players stamina regen equals AP',
'GAMBLE': 'Focusing players health regen equals to AP',
'WAVE': 'Deal Damage, Decreases over time',
'CREATION': 'Heals you, Decreases over time',
'BLAST': 'Deals Damage on your turn',
'DESTRUCTION': 'Decreases Your Opponent Max Health, Increases over time',
'BASIC': 'Increase Basic Attack AP',
'SPECIAL': 'Increase Special Attack AP',
'ULTIMATE': 'Increase Ultimate Attack AP',
'ULTIMAX': 'Increase All AP Values',
'MANA': 'Increase Enchancer AP',
'SHIELD': 'Blocks Incoming DMG, until broken',
'BARRIER': 'Nullifies Incoming Attacks, until broken',
'PARRY': 'Returns 25% Damage, until broken',
'SIPHON': 'Heal for 10% DMG inflicted + AP'
}
element_mapping = {'PHYSICAL': 'Normal Damage ',
'FIRE': 'Does 20% damage of previous attack over the next opponent turns, stacks ',
'ICE': 'After 3 uses opponent freezes and loses 1 turn',
'WATER': 'Increases all water attack dmg by 25 Flat',
'EARTH': 'Cannot be Parried. Increases Def by 20% AP',
'ELECTRIC': 'Add 7% to Shock damage, added to each attack',
'WIND': 'Cannot Miss ',
'PSYCHIC': 'Penetrates Barriers. Reduce opponent ATK & DEF by 8% AP ',
'DEATH': 'Adds 7% opponent max health as damage',
'LIFE': 'Heal for 15% AP',
'LIGHT': 'Regain 50% Stamina Cost',
'DARK': 'Penetrates shields & drains 5 stamina ',
'POISON': 'Opponent takes additional 8 damage each turn stacking up to 100',
'RANGED': 'If ST > 80 deals 1.5x Damage',
'SPIRIT': 'Has higher chance of Crit',
'RECOIL': 'Deals 25% damage back to you',
'TIME': 'You Focus after attacking',
'BLEED': 'After 5 Attacks deal 5x turn count damage to opponent',
'GRAVITY': 'Disables Opponent Block'
}
passive_enhancer_suffix_mapping = {'ATK': ' Flat',
'DEF': ' Flat',
'STAM': ' Flat',
'HLT': ' %',
'LIFE': '%',
'DRAIN': ' Flat',
'FLOG': '%',
'WITHER': '%',
'RAGE': '%',
'BRACE': '%',
'BZRK': '%',
'CRYSTAL': '%',
'GROWTH': '%',
'STANCE': ' Flat',
'CONFUSE': ' Flat',
'BLINK': ' Flat',
'SLOW': ' Flat',
'HASTE': ' Flat',
'FEAR': '%',
'SOULCHAIN': ' Flat',
'GAMBLE': ' Flat',
'WAVE': ' Flat',
'CREATION': ' Flat',
'BLAST': ' Flat',
'DESTRUCTION': ' Flat',
'BASIC': ' Flat',
'SPECIAL': ' Flat',
'ULTIMATE': ' Flat',
'ULTIMAX': ' Flat',
'MANA': ' %',
'SHIELD': ' DMG 🌐',
'BARRIER': ' Blocks 💠',
'PARRY': ' Counters 🔄',
'SIPHON': ' Healing 💉'
}
enhancer_suffix_mapping = {'ATK': '%',
'DEF': '%',
'STAM': ' Flat',
'HLT': '%',
'LIFE': '%',
'DRAIN': ' Flat',
'FLOG': '%',
'WITHER': '%',
'RAGE': '%',
'BRACE': '%',
'BZRK': '%',
'CRYSTAL': '%',
'GROWTH': '%',
'STANCE': ' Flat',
'CONFUSE': ' Flat',
'BLINK': ' Flat',
'SLOW': ' Flat',
'HASTE': ' Flat',
'FEAR': '%',
'SOULCHAIN': ' Flat',
'GAMBLE': ' Flat',
'WAVE': ' Flat',
'CREATION': ' Flat',
'BLAST': ' Flat',
'DESTRUCTION': ' Flat',
'BASIC': ' Flat',
'SPECIAL': ' Flat',
'ULTIMATE': ' Flat',
'ULTIMAX': ' Flat',
'MANA': ' %',
'SHIELD': ' DMG 🌐',
'BARRIER': ' Blocks 💠',
'PARRY': ' Counters 🔄',
'SIPHON': ' Healing 💉'
}
title_enhancer_suffix_mapping = {'ATK': ' Flat',
'DEF': ' Flat',
'STAM': ' Flat',
'HLT': ' %',
'LIFE': '%',
'DRAIN': ' Flat',
'FLOG': '%',
'WITHER': '%',
'RAGE': '%',
'BRACE': '%',
'BZRK': '%',
'CRYSTAL': '%',
'GROWTH': 'Flat',
'STANCE': ' Flat',
'CONFUSE': ' Flat',
'BLINK': ' Flat',
'SLOW': ' Turn',
'HASTE': ' Turn',
'FEAR': 'Flat',
'SOULCHAIN': ' Flat',
'GAMBLE': ' Flat',
'WAVE': ' Flat',
'CREATION': ' Flat',
'BLAST': ' Flat',
'DESTRUCTION': ' Flat',
'BASIC': ' Flat',
'SPECIAL': ' Flat',
'ULTIMATE': ' Flat',
'ULTIMAX': ' Flat',
'MANA': ' %',
'SHIELD': ' DMG 🌐',
'BARRIER': ' Blocks 💠',
'PARRY': ' Counters 🔄',
'SIPHON': ' Healing 💉'
}

abyss_floor_reward_list = [10,20,30,40,50,60,70,80,90,100]

crown_rift_universe_mappings = {'Crown Rift Awakening': 3, 'Crown Rift Slayers': 2, 'Crown Rift Madness': 5}
Healer_Enhancer_Check = ['HLT', 'LIFE']
DPS_Enhancer_Check = ['FLOG', 'WITHER']
INC_Enhancer_Check = ['ATK', 'DEF']
TRADE_Enhancer_Check = ['RAGE', 'BRACE']
Gamble_Enhancer_Check = ['GAMBLE', 'SOULCHAIN']
SWITCH_Enhancer_Check = ['STANCE', 'CONFUSE']
Time_Enhancer_Check = ['HASTE', 'SLOW','BLINK']
Support_Enhancer_Check = ['DEF', 'ATK', 'WITHER', 'FLOG']
Sacrifice_Enhancer_Check = ['BZRK', 'CRYSTAL']
FORT_Enhancer_Check = ['GROWTH', 'FEAR']
Stamina_Enhancer_Check = ['STAM', 'DRAIN']
Control_Enhancer_Check = ['SOULCHAIN']
Damage_Enhancer_Check = ['DESTRUCTION', 'BLAST']
Turn_Enhancer_Check = ['WAVE', 'CREATION']
Crest_dict = {'Unbound': ':ideograph_advantage:',
              'My Hero Academia': ':sparkle:',
              'League Of Legends': ':u6307:',
              'Kanto Region': ':chart:',
              'Naruto': ':u7121:',
              'Bleach': ':u6709:',
              'God Of War': ':u7533:',
              'Chainsawman': ':accept:',
              'One Punch Man': ':u55b6:',
              'Johto Region': ':u6708:',
              'Black Clover': ':ophiuchus:',
              'Demon Slayer': ':aries:',
              'Attack On Titan': ':taurus:',
              '7ds': ':capricorn:',
              'Hoenn Region': ':leo:',
              'Digimon': ':cancer:',
              'Fate': ':u6e80:',
              'Solo Leveling': ':u5408:',
              'Souls': ':sos:',
              'Dragon Ball Z': ':u5272:',
              'Sinnoh Region': ':u7981:',
              'Death Note': ':white_flower:',
              'Crown Rift Awakening': ':u7a7a:',
              'Crown Rift Slayers': ':sa:',
              'Crown Rift Madness': ':m:',
              'Persona': ':o:'}
take_chances_messages = ['You lost immediately.', 'You got smoked!', 'You fainted before the fight even started.',
                         'That... was just sad. You got dropped with ease.', 'Too bad, so sad. You took the L.',
                         'Annnd another L. You lost.', 'Annnnnnnnnnnd another L! You lost.',
                         'How many Ls you gonna take today?', 'That was worse than the last time. You got dropped.']